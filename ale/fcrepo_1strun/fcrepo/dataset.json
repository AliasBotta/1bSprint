[
  {
    "name": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testRemoveResource()",
    "bSource": {
      "startLine": 455,
      "code": "@Test\n    public void testRemoveResource() {\n        stubObject(\"parent1\");\n        stubObject(\"child1\");\n        stubObject(\"transaction1\");\n        containmentIndex.addContainedBy(transaction1, parent1.getFedoraId(), child1.getFedoraId());\n        containmentIndex.commitTransaction(transaction1);\n        assertEquals(1, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        containmentIndex.removeResource(transaction1, child1.getFedoraId());\n        containmentIndex.commitTransaction(transaction1);\n        assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertNull(containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n    }"
    },
    "aSource": {
      "startLine": 455,
      "code": "@Test\n    public void testRemoveResource() {\n        stubObject(\"parent1\");\n        stubObject(\"child1\");\n        stubObject(\"transaction1\");\n        containmentIndex.addContainedBy(transaction1, parent1.getFedoraId(), child1.getFedoraId());\n        containmentIndex.commitTransaction(transaction1);\n        assertEquals(1, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        containmentIndex.removeResource(transaction1, child1.getFedoraId());\n        containmentIndex.commitTransaction(transaction1);\n        assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        // Parent can still be found from the child\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
    "bCommit": "30d3f2c57c",
    "aCommit": "0f9729ed35",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertNull(containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));",
          "type": "DELETE",
          "lineNo": 468
        }
      ],
      "targetChanges": [
        {
          "line": "// Parent can still be found from the child",
          "type": "ADD",
          "lineNo": 468
        },
        {
          "line": "assertEquals(parent1.getFedoraId().getFullId(),",
          "type": "ADD",
          "lineNo": 469
        },
        {
          "line": "containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));",
          "type": "ADD",
          "lineNo": 470
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertNull(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertNull(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction shortLivedTx"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource child1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource parent1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction shortLivedTx"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource child1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertNull",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        468
      ]
    },
    "aCommitTime": 1743798396,
    "ID": "fcrepo/fcrepo:34",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testRemoveNotFromTransaction()",
    "bSource": {
      "startLine": 471,
      "code": "@Test\n    public void testRemoveNotFromTransaction() {\n        stubObject(\"parent1\");\n        stubObject(\"child1\");\n        stubObject(\"parent2\");\n        stubObject(\"transaction1\");\n        stubObject(\"transaction2\");\n        assertNull(containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        containmentIndex.addContainedBy(transaction2, parent1.getFedoraId(), child1.getFedoraId());\n        containmentIndex.commitTransaction(transaction2);\n        containmentIndex.addContainedBy(transaction1, parent2.getFedoraId(), child1.getFedoraId());\n        assertEquals(1, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        assertEquals(1, containmentIndex.getContains(transaction1, parent2.getFedoraId()).count());\n        assertEquals(child1.getFedoraId().getFullId(),\n                containmentIndex.getContains(transaction1, parent2.getFedoraId()).findFirst().get());\n        containmentIndex.removeResource(transaction2, child1.getFedoraId());\n        containmentIndex.commitTransaction(transaction2);\n        assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertNull(containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        assertEquals(1, containmentIndex.getContains(transaction1, parent2.getFedoraId()).count());\n        assertEquals(child1.getFedoraId().getFullId(),\n                containmentIndex.getContains(transaction1, parent2.getFedoraId()).findFirst().get());\n    }"
    },
    "aSource": {
      "startLine": 473,
      "code": "@Test\n    public void testRemoveNotFromTransaction() {\n        stubObject(\"parent1\");\n        stubObject(\"child1\");\n        stubObject(\"parent2\");\n        stubObject(\"transaction1\");\n        stubObject(\"transaction2\");\n        assertNull(containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        containmentIndex.addContainedBy(transaction2, parent1.getFedoraId(), child1.getFedoraId());\n        containmentIndex.commitTransaction(transaction2);\n        containmentIndex.addContainedBy(transaction1, parent2.getFedoraId(), child1.getFedoraId());\n        assertEquals(1, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        assertEquals(1, containmentIndex.getContains(transaction1, parent2.getFedoraId()).count());\n        assertEquals(child1.getFedoraId().getFullId(),\n                containmentIndex.getContains(transaction1, parent2.getFedoraId()).findFirst().get());\n        containmentIndex.removeResource(transaction2, child1.getFedoraId());\n        containmentIndex.commitTransaction(transaction2);\n        assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        // Parent can still be found from the child\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        assertEquals(1, containmentIndex.getContains(transaction1, parent2.getFedoraId()).count());\n        assertEquals(child1.getFedoraId().getFullId(),\n                containmentIndex.getContains(transaction1, parent2.getFedoraId()).findFirst().get());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
    "bCommit": "30d3f2c57c",
    "aCommit": "0f9729ed35",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertNull(containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));",
          "type": "DELETE",
          "lineNo": 491
        }
      ],
      "targetChanges": [
        {
          "line": "// Parent can still be found from the child",
          "type": "ADD",
          "lineNo": 493
        },
        {
          "line": "assertEquals(parent1.getFedoraId().getFullId(),",
          "type": "ADD",
          "lineNo": 494
        },
        {
          "line": "containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));",
          "type": "ADD",
          "lineNo": 495
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertNull(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertNull(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction shortLivedTx"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource child1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource parent1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction shortLivedTx"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource child1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertNull",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        493
      ]
    },
    "aCommitTime": 1743798396,
    "ID": "fcrepo/fcrepo:35",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testCommitRemoveFromTransaction()",
    "bSource": {
      "startLine": 497,
      "code": "@Test\n    public void testCommitRemoveFromTransaction() {\n        stubObject(\"parent1\");\n        stubObject(\"child1\");\n        stubObject(\"transaction1\");\n        stubObject(\"transaction2\");\n        containmentIndex.addContainedBy(transaction2, parent1.getFedoraId(), child1.getFedoraId());\n        containmentIndex.commitTransaction(transaction2);\n        assertEquals(1, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        containmentIndex.removeResource(transaction1, child1.getFedoraId());\n        assertEquals(1, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        assertEquals(0, containmentIndex.getContains(transaction1, parent1.getFedoraId()).count());\n        containmentIndex.commitTransaction(transaction1);\n        assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertNull(containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        assertEquals(0, containmentIndex.getContains(transaction1, parent1.getFedoraId()).count());\n    }"
    },
    "aSource": {
      "startLine": 501,
      "code": "@Test\n    public void testCommitRemoveFromTransaction() {\n        stubObject(\"parent1\");\n        stubObject(\"child1\");\n        stubObject(\"transaction1\");\n        stubObject(\"transaction2\");\n        containmentIndex.addContainedBy(transaction2, parent1.getFedoraId(), child1.getFedoraId());\n        containmentIndex.commitTransaction(transaction2);\n        assertEquals(1, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        containmentIndex.removeResource(transaction1, child1.getFedoraId());\n        assertEquals(1, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        assertEquals(0, containmentIndex.getContains(transaction1, parent1.getFedoraId()).count());\n        containmentIndex.commitTransaction(transaction1);\n        assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\n        // Parent can still be found from the child.\n        assertEquals(parent1.getFedoraId().getFullId(),\n                containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));\n        assertEquals(0, containmentIndex.getContains(transaction1, parent1.getFedoraId()).count());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
    "bCommit": "30d3f2c57c",
    "aCommit": "0f9729ed35",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertNull(containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));",
          "type": "DELETE",
          "lineNo": 515
        }
      ],
      "targetChanges": [
        {
          "line": "// Parent can still be found from the child.",
          "type": "ADD",
          "lineNo": 519
        },
        {
          "line": "assertEquals(parent1.getFedoraId().getFullId(),",
          "type": "ADD",
          "lineNo": 520
        },
        {
          "line": "containmentIndex.getContainedBy(shortLivedTx, child1.getFedoraId()));",
          "type": "ADD",
          "lineNo": 521
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertNull(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertNull(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction shortLivedTx"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource child1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource parent1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.ContainmentIndexImpl.getContainedBy(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction shortLivedTx"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource child1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getFedoraId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertNull",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        519
      ]
    },
    "aCommitTime": 1743798396,
    "ID": "fcrepo/fcrepo:36",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.ReplaceBinariesServiceImplTest.copyExternalBinary()",
    "bSource": {
      "startLine": 237,
      "code": "@Test\n    public void copyExternalBinary() throws Exception {\n        final var realDigests = asList(URI.create(\"urn:sha1:94e66df8cd09d410c62d9e0dc59d3a884e458e05\"));\n\n        final File externalFile = Files.createFile(\n                tempFolder.resolve(\"externalFile\")\n        ).toFile();\n        final String contentString = \"some content\";\n        FileUtils.write(externalFile, contentString, StandardCharsets.UTF_8);\n        final URI uri = externalFile.toURI();\n        when(externalContent.fetchExternalContent()).thenReturn(Files.newInputStream(externalFile.toPath()));\n        when(externalContent.getURI()).thenReturn(uri);\n        when(externalContent.isCopy()).thenReturn(true);\n        when(externalContent.getHandling()).thenReturn(ExternalContent.COPY);\n        when(externalContent.getContentType()).thenReturn(\"text/xml\");\n\n        service.perform(tx, USER_PRINCIPAL, FEDORA_ID, FILENAME, MIME_TYPE, realDigests, null,\n                (long) contentString.length(), externalContent);\n        verify(pSession).persist(operationCaptor.capture());\n        final NonRdfSourceOperation op = operationCaptor.getValue();\n\n        assertEquals(FEDORA_ID, operationCaptor.getValue().getResourceId());\n        assertNull(op.getContentUri());\n        assertNull(op.getExternalHandling());\n        assertPropertiesPopulated(op, \"text/xml\", FILENAME, (long) contentString.length(), realDigests);\n\n        assertEquals(contentString, IOUtils.toString(op.getContentStream(), UTF_8));\n    }"
    },
    "aSource": {
      "startLine": 237,
      "code": "@Test\n    public void copyExternalBinary() throws Exception {\n        final var realDigests = asList(URI.create(\"urn:sha1:94e66df8cd09d410c62d9e0dc59d3a884e458e05\"));\n\n        final File externalFile = Files.createFile(\n                tempFolder.resolve(\"externalFile\")\n        ).toFile();\n        final String contentString = \"some content\";\n        FileUtils.write(externalFile, contentString, StandardCharsets.UTF_8);\n        final URI uri = externalFile.toURI();\n        when(externalContent.fetchExternalContent()).thenReturn(Files.newInputStream(externalFile.toPath()));\n        when(externalContent.getURI()).thenReturn(uri);\n        when(externalContent.isCopy()).thenReturn(true);\n        when(externalContent.getHandling()).thenReturn(ExternalContent.COPY);\n        when(externalContent.getContentType()).thenReturn(\"text/xml\");\n\n        service.perform(tx, USER_PRINCIPAL, FEDORA_ID, FILENAME, MIME_TYPE, realDigests, null,\n                (long) contentString.length(), externalContent);\n        verify(pSession).persist(operationCaptor.capture());\n        final NonRdfSourceOperation op = operationCaptor.getValue();\n\n        assertEquals(FEDORA_ID, operationCaptor.getValue().getResourceId());\n        assertNull(op.getContentUri());\n        assertNull(op.getExternalHandling());\n        assertPropertiesPopulated(op, \"text/xml\", FILENAME, (long) contentString.length(), realDigests);\n\n        //assertEquals(contentString, IOUtils.toString(op.getContentStream(), UTF_8));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ReplaceBinariesServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ReplaceBinariesServiceImplTest.java",
    "bCommit": "cc3ff55290",
    "aCommit": "a564e4d580",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(contentString, IOUtils.toString(op.getContentStream(), UTF_8));",
          "type": "DELETE",
          "lineNo": 263
        }
      ],
      "targetChanges": [
        {
          "line": "//assertEquals(contentString, IOUtils.toString(op.getContentStream(), UTF_8));",
          "type": "ADD",
          "lineNo": 263
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String contentString"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.commons.io.IOUtils.toString(InputStream,Charset)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.commons.io.IOUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.commons.io.IOUtils.toString(InputStream,Charset)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperation.getContentStream()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperation op"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperation.getContentStream()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.nio.charset.Charset UTF_8"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        263
      ]
    },
    "aCommitTime": 1743535571,
    "ID": "fcrepo/fcrepo:374",
    "trivial": null
  },
  {
    "name": "org.fcrepo.webapp.ConstraintExceptionsTest.testConstraintRdfExists()",
    "bSource": {
      "startLine": 25,
      "code": "@Test\n    public void testConstraintRdfExists() {\n        final Reflections reflections = new Reflections(\"org.fcrepo\");\n        final Set<Class<? extends ConstraintViolationException>> subTypes =\n                reflections.getSubTypesOf(ConstraintViolationException.class);\n        // Multiple is a wrapper to hold other constraint violations, it has no static file.\n        subTypes.remove(MultipleConstraintViolationException.class);\n        // Relaxable is a sub-type of ServerManagedPropertyException to specially handle relaxable properties, it has\n        // no static file.\n        subTypes.remove(RelaxableServerManagedPropertyException.class);\n        subTypes.add(ConstraintViolationException.class);\n\n        for (final Class<? extends ConstraintViolationException> c : subTypes) {\n            final File file = new File(\"src/main/webapp/static/constraints/\" + c.getSimpleName() + \".rdf\");\n            Assert.assertTrue(\"Expected to find: \" + file.getPath(), file.exists());\n        }\n    }"
    },
    "aSource": {
      "startLine": 26,
      "code": "@Test\n    public void testConstraintRdfExists() {\n        final Reflections reflections = new Reflections(\"org.fcrepo\");\n        final Set<Class<? extends ConstraintViolationException>> subTypes =\n                reflections.getSubTypesOf(ConstraintViolationException.class);\n        // Multiple is a wrapper to hold other constraint violations, it has no static file.\n        subTypes.remove(MultipleConstraintViolationException.class);\n        // Relaxable is a sub-type of ServerManagedPropertyException to specially handle relaxable properties, it has\n        // no static file.\n        subTypes.remove(RelaxableServerManagedPropertyException.class);\n        subTypes.add(ConstraintViolationException.class);\n\n        for (final Class<? extends ConstraintViolationException> c : subTypes) {\n            final File file = new File(\"src/main/webapp/static/constraints/\" + c.getSimpleName() + \".rdf\");\n            assertTrue(file.exists(), \"Expected to find: \" + file.getPath());\n        }\n    }"
    },
    "bPath": "fcrepo-webapp/src/test/java/org/fcrepo/webapp/ConstraintExceptionsTest.java",
    "aPath": "fcrepo-webapp/src/test/java/org/fcrepo/webapp/ConstraintExceptionsTest.java",
    "bCommit": "8aaa18fc42",
    "aCommit": "b02e805cef",
    "hunk": {
      "sourceChanges": [
        {
          "line": "Assert.assertTrue(\"Expected to find: \" + file.getPath(), file.exists());",
          "type": "DELETE",
          "lineNo": 39
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue(file.exists(), \"Expected to find: \" + file.getPath());",
          "type": "ADD",
          "lineNo": 40
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,boolean)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.junit.Assert"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Expected to find: '"
        },
        {
          "type": "CtInvocation",
          "value": "java.io.File.getPath()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.File file"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.io.File.getPath()"
        },
        {
          "type": "CtInvocation",
          "value": "java.io.File.exists()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.File file"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.io.File.exists()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.io.File.exists()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.File file"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.io.File.exists()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Expected to find: '"
        },
        {
          "type": "CtInvocation",
          "value": "java.io.File.getPath()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.File file"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.io.File.getPath()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Annotation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.junit.Test",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.junit.jupiter.api.Test",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "ForEach",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.junit.Assert",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "BinaryOperator",
        "parents": [
          "Invocation",
          "ForEach",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        },
        "dstNode": {
          "label": "PLUS",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        40
      ]
    },
    "aCommitTime": 1739465067,
    "ID": "fcrepo/fcrepo:416",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testParentAg()",
    "bSource": {
      "startLine": 210,
      "code": "@Test\n    public void testParentAg() {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(transaction, FedoraId.getRepositoryRootId(), fedoraId);\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.isArchivalGroup()).thenReturn(true);\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, null, model);\n        verify(transaction).lockResource(fedoraId);\n        verify(transaction).lockResource(childId);\n    }"
    },
    "aSource": {
      "startLine": 210,
      "code": "@Test\n    public void testParentAg() {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(transaction, FedoraId.getRepositoryRootId(), fedoraId);\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.isArchivalGroup()).thenReturn(true);\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, null, model);\n        verify(transaction).lockResource(fedoraId);\n        verify(transaction).lockResourceAndGhostNodes(childId);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "a5eb4b3221",
    "aCommit": "e18c6422a2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(transaction).lockResource(childId);",
          "type": "DELETE",
          "lineNo": 219
        }
      ],
      "targetChanges": [
        {
          "line": "verify(transaction).lockResourceAndGhostNodes(childId);",
          "type": "ADD",
          "lineNo": 219
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "lockResource",
          "childCount": 2
        },
        "dstNode": {
          "label": "lockResourceAndGhostNodes",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        219
      ]
    },
    "aCommitTime": 1642097676,
    "ID": "fcrepo/fcrepo:515",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testWithBinary()",
    "bSource": {
      "startLine": 372,
      "code": "/**\n     * This test now seems to ensure that the createResourceService will overwrite an existing object\n     * TODO: Review expectations\n     */\n    @Test\n    public void testWithBinary() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"testSlug\");\n        containmentIndex.addContainedBy(transaction, FedoraId.getRepositoryRootId(), fedoraId);\n        containmentIndex.commitTransaction(transaction);\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(psSession.getHeaders(childId, null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId,\n                CONTENT_TYPE, FILENAME, CONTENT_SIZE, null, DIGESTS, null, null);\n        cleanupList.add(fedoraId);\n        verify(psSession, times(2)).persist(operationCaptor.capture());\n        final List<ResourceOperation> operations = operationCaptor.getAllValues();\n        final var operation = getOperation(operations, CreateNonRdfSourceOperation.class);\n        final FedoraId persistedId = operation.getResourceId();\n        assertNotEquals(fedoraId, persistedId);\n        assertEquals(childId, persistedId);\n        assertTrue(persistedId.getFullId().startsWith(fedoraId.getFullId()));\n        assertBinaryPropertiesPresent(operation);\n        assertEquals(fedoraId, operation.getParentId());\n\n        final var descOperation = getOperation(operations, CreateRdfSourceOperation.class);\n        assertEquals(persistedId.asDescription(), descOperation.getResourceId());\n        assertEquals(1, containmentIndex.getContains(transaction, fedoraId).count());\n        verify(transaction).lockResource(childId);\n    }"
    },
    "aSource": {
      "startLine": 372,
      "code": "/**\n     * This test now seems to ensure that the createResourceService will overwrite an existing object\n     * TODO: Review expectations\n     */\n    @Test\n    public void testWithBinary() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"testSlug\");\n        containmentIndex.addContainedBy(transaction, FedoraId.getRepositoryRootId(), fedoraId);\n        containmentIndex.commitTransaction(transaction);\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(psSession.getHeaders(childId, null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId,\n                CONTENT_TYPE, FILENAME, CONTENT_SIZE, null, DIGESTS, null, null);\n        cleanupList.add(fedoraId);\n        verify(psSession, times(2)).persist(operationCaptor.capture());\n        final List<ResourceOperation> operations = operationCaptor.getAllValues();\n        final var operation = getOperation(operations, CreateNonRdfSourceOperation.class);\n        final FedoraId persistedId = operation.getResourceId();\n        assertNotEquals(fedoraId, persistedId);\n        assertEquals(childId, persistedId);\n        assertTrue(persistedId.getFullId().startsWith(fedoraId.getFullId()));\n        assertBinaryPropertiesPresent(operation);\n        assertEquals(fedoraId, operation.getParentId());\n\n        final var descOperation = getOperation(operations, CreateRdfSourceOperation.class);\n        assertEquals(persistedId.asDescription(), descOperation.getResourceId());\n        assertEquals(1, containmentIndex.getContains(transaction, fedoraId).count());\n        verify(transaction).lockResourceAndGhostNodes(childId);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "a5eb4b3221",
    "aCommit": "e18c6422a2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(transaction).lockResource(childId);",
          "type": "DELETE",
          "lineNo": 401
        }
      ],
      "targetChanges": [
        {
          "line": "verify(transaction).lockResourceAndGhostNodes(childId);",
          "type": "ADD",
          "lineNo": 401
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "lockResource",
          "childCount": 2
        },
        "dstNode": {
          "label": "lockResourceAndGhostNodes",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        401
      ]
    },
    "aCommitTime": 1642097676,
    "ID": "fcrepo/fcrepo:516",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testParentIsRdfBinary()",
    "bSource": {
      "startLine": 299,
      "code": "/**\n     * Test creating a NonRDFSource with a RDFSource parent.\n     */\n    @Test\n    public void testParentIsRdfBinary() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(transaction, rootId, fedoraId);\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, CONTENT_TYPE,\n                FILENAME, CONTENT_SIZE, null, DIGESTS, null, null);\n        cleanupList.add(fedoraId);\n        verify(psSession, times(2)).persist(operationCaptor.capture());\n        final List<ResourceOperation> operations = operationCaptor.getAllValues();\n        final var operation = getOperation(operations, CreateNonRdfSourceOperation.class);\n        final FedoraId persistedId = operation.getResourceId();\n        assertNotEquals(fedoraId, persistedId);\n        assertTrue(persistedId.getFullId().startsWith(fedoraId.getFullId()));\n        assertBinaryPropertiesPresent(operation);\n        assertEquals(fedoraId, operation.getParentId());\n        assertEquals(1, containmentIndex.getContains(transaction, fedoraId).count());\n        verify(transaction).lockResource(childId);\n    }"
    },
    "aSource": {
      "startLine": 299,
      "code": "/**\n     * Test creating a NonRDFSource with a RDFSource parent.\n     */\n    @Test\n    public void testParentIsRdfBinary() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(transaction, rootId, fedoraId);\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, CONTENT_TYPE,\n                FILENAME, CONTENT_SIZE, null, DIGESTS, null, null);\n        cleanupList.add(fedoraId);\n        verify(psSession, times(2)).persist(operationCaptor.capture());\n        final List<ResourceOperation> operations = operationCaptor.getAllValues();\n        final var operation = getOperation(operations, CreateNonRdfSourceOperation.class);\n        final FedoraId persistedId = operation.getResourceId();\n        assertNotEquals(fedoraId, persistedId);\n        assertTrue(persistedId.getFullId().startsWith(fedoraId.getFullId()));\n        assertBinaryPropertiesPresent(operation);\n        assertEquals(fedoraId, operation.getParentId());\n        assertEquals(1, containmentIndex.getContains(transaction, fedoraId).count());\n        verify(transaction).lockResourceAndGhostNodes(childId);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "a5eb4b3221",
    "aCommit": "e18c6422a2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(transaction).lockResource(childId);",
          "type": "DELETE",
          "lineNo": 321
        }
      ],
      "targetChanges": [
        {
          "line": "verify(transaction).lockResourceAndGhostNodes(childId);",
          "type": "ADD",
          "lineNo": 321
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "lockResource",
          "childCount": 2
        },
        "dstNode": {
          "label": "lockResourceAndGhostNodes",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        321
      ]
    },
    "aCommitTime": 1642097676,
    "ID": "fcrepo/fcrepo:517",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testNoParentRdf()",
    "bSource": {
      "startLine": 197,
      "code": "/**\n     * Test trying to add a child to a non-existant parent.\n     * We recursive to repository root for a parent, so this is now just creating a ghost node?\n     */\n    @Test\n    public void testNoParentRdf() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        when(psSession.getHeaders(fedoraId, null)).thenThrow(PersistentItemNotFoundException.class);\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, null, model);\n        verify(transaction).lockResource(childId);\n    }"
    },
    "aSource": {
      "startLine": 197,
      "code": "/**\n     * Test trying to add a child to a non-existant parent.\n     * We recursive to repository root for a parent, so this is now just creating a ghost node?\n     */\n    @Test\n    public void testNoParentRdf() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        when(psSession.getHeaders(fedoraId, null)).thenThrow(PersistentItemNotFoundException.class);\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, null, model);\n        verify(transaction).lockResourceAndGhostNodes(childId);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "a5eb4b3221",
    "aCommit": "e18c6422a2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(transaction).lockResource(childId);",
          "type": "DELETE",
          "lineNo": 207
        }
      ],
      "targetChanges": [
        {
          "line": "verify(transaction).lockResourceAndGhostNodes(childId);",
          "type": "ADD",
          "lineNo": 207
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "lockResource",
          "childCount": 2
        },
        "dstNode": {
          "label": "lockResourceAndGhostNodes",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        207
      ]
    },
    "aCommitTime": 1642097676,
    "ID": "fcrepo/fcrepo:518",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testParentIsRdf()",
    "bSource": {
      "startLine": 278,
      "code": "/**\n     * Test creating a RDFSource with a RDFSource parent.\n     */\n    @Test\n    public void testParentIsRdf() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(transaction, rootId, fedoraId);\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, null, model);\n        cleanupList.add(fedoraId);\n        verify(psSession).persist(operationCaptor.capture());\n        final FedoraId persistedId = operationCaptor.getValue().getResourceId();\n        assertNotEquals(fedoraId, persistedId);\n        assertTrue(persistedId.getFullId().startsWith(fedoraId.getFullId()));\n        assertEquals(1, containmentIndex.getContains(transaction, fedoraId).count());\n\n        verify(transaction).lockResource(childId);\n    }"
    },
    "aSource": {
      "startLine": 278,
      "code": "/**\n     * Test creating a RDFSource with a RDFSource parent.\n     */\n    @Test\n    public void testParentIsRdf() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(transaction, rootId, fedoraId);\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, null, model);\n        cleanupList.add(fedoraId);\n        verify(psSession).persist(operationCaptor.capture());\n        final FedoraId persistedId = operationCaptor.getValue().getResourceId();\n        assertNotEquals(fedoraId, persistedId);\n        assertTrue(persistedId.getFullId().startsWith(fedoraId.getFullId()));\n        assertEquals(1, containmentIndex.getContains(transaction, fedoraId).count());\n\n        verify(transaction).lockResourceAndGhostNodes(childId);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "a5eb4b3221",
    "aCommit": "e18c6422a2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(transaction).lockResource(childId);",
          "type": "DELETE",
          "lineNo": 296
        }
      ],
      "targetChanges": [
        {
          "line": "verify(transaction).lockResourceAndGhostNodes(childId);",
          "type": "ADD",
          "lineNo": 296
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "lockResource",
          "childCount": 2
        },
        "dstNode": {
          "label": "lockResourceAndGhostNodes",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        296
      ]
    },
    "aCommitTime": 1642097676,
    "ID": "fcrepo/fcrepo:519",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testParentContainerInAg()",
    "bSource": {
      "startLine": 222,
      "code": "@Test\n    public void testParentContainerInAg() {\n        final FedoraId agId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId fedoraId = agId.resolve(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(transaction, agId, fedoraId);\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.isArchivalGroup()).thenReturn(false);\n        when(resourceHeaders.getArchivalGroupId()).thenReturn(agId);\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, null, model);\n        verify(transaction).lockResource(agId);\n        verify(transaction).lockResource(childId);\n    }"
    },
    "aSource": {
      "startLine": 222,
      "code": "@Test\n    public void testParentContainerInAg() {\n        final FedoraId agId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId fedoraId = agId.resolve(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(transaction, agId, fedoraId);\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.isArchivalGroup()).thenReturn(false);\n        when(resourceHeaders.getArchivalGroupId()).thenReturn(agId);\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, null, model);\n        verify(transaction).lockResource(agId);\n        verify(transaction).lockResourceAndGhostNodes(childId);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "a5eb4b3221",
    "aCommit": "e18c6422a2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(transaction).lockResource(childId);",
          "type": "DELETE",
          "lineNo": 233
        }
      ],
      "targetChanges": [
        {
          "line": "verify(transaction).lockResourceAndGhostNodes(childId);",
          "type": "ADD",
          "lineNo": 233
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "lockResource",
          "childCount": 2
        },
        "dstNode": {
          "label": "lockResourceAndGhostNodes",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        233
      ]
    },
    "aCommitTime": 1642097676,
    "ID": "fcrepo/fcrepo:520",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testRdfSetRelaxedProperties_Post()",
    "bSource": {
      "startLine": 324,
      "code": "/**\n     * Test setting some system properties only accessible in relaxed mode.\n     */\n    @Test\n    public void testRdfSetRelaxedProperties_Post() throws Exception {\n        final var createdDate = Instant.parse(\"2019-11-12T10:00:30.0Z\");\n        final var calendar = Calendar.getInstance();\n        calendar.setTime(Date.from(createdDate));\n        final var createdDateXsd = new XSDDateTime(calendar);\n        final var lastModifiedDate = Instant.parse(\"2019-11-12T14:11:05.0Z\");\n        calendar.setTime(Date.from(lastModifiedDate));\n        final var lastModifiedDateXsd = new XSDDateTime(calendar);\n        final String relaxedUser = \"relaxedUser\";\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"testSlug\");\n        containmentIndex.addContainedBy(transaction, rootId, fedoraId);\n\n        final var resc = model.getResource(childId.getFullId());\n        resc.addLiteral(LAST_MODIFIED_DATE, lastModifiedDateXsd);\n        resc.addLiteral(LAST_MODIFIED_BY, relaxedUser);\n        resc.addLiteral(CREATED_DATE, createdDateXsd);\n        resc.addLiteral(CREATED_BY, relaxedUser);\n\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(psSession.getHeaders(childId, null)).thenReturn(resourceHeaders);\n\n        when(resourceHeaders.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        propsConfig.setServerManagedPropsMode(ServerManagedPropsMode.RELAXED);\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, null, model);\n        cleanupList.add(fedoraId);\n\n        verify(psSession).persist(operationCaptor.capture());\n\n        final var operation = operationCaptor.getValue();\n        final FedoraId persistedId = operation.getResourceId();\n        assertNotEquals(fedoraId, persistedId);\n        assertTrue(persistedId.getFullId().startsWith(fedoraId.getFullId()));\n        assertEquals(persistedId, childId);\n\n        final var rdfOp = (RdfSourceOperation) operation;\n        assertEquals(relaxedUser, rdfOp.getCreatedBy());\n        assertEquals(relaxedUser, rdfOp.getLastModifiedBy());\n        assertEquals(createdDate, rdfOp.getCreatedDate());\n        assertEquals(lastModifiedDate, rdfOp.getLastModifiedDate());\n        assertEquals(1, containmentIndex.getContains(transaction, fedoraId).count());\n        verify(transaction).lockResource(childId);\n    }"
    },
    "aSource": {
      "startLine": 324,
      "code": "/**\n     * Test setting some system properties only accessible in relaxed mode.\n     */\n    @Test\n    public void testRdfSetRelaxedProperties_Post() throws Exception {\n        final var createdDate = Instant.parse(\"2019-11-12T10:00:30.0Z\");\n        final var calendar = Calendar.getInstance();\n        calendar.setTime(Date.from(createdDate));\n        final var createdDateXsd = new XSDDateTime(calendar);\n        final var lastModifiedDate = Instant.parse(\"2019-11-12T14:11:05.0Z\");\n        calendar.setTime(Date.from(lastModifiedDate));\n        final var lastModifiedDateXsd = new XSDDateTime(calendar);\n        final String relaxedUser = \"relaxedUser\";\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"testSlug\");\n        containmentIndex.addContainedBy(transaction, rootId, fedoraId);\n\n        final var resc = model.getResource(childId.getFullId());\n        resc.addLiteral(LAST_MODIFIED_DATE, lastModifiedDateXsd);\n        resc.addLiteral(LAST_MODIFIED_BY, relaxedUser);\n        resc.addLiteral(CREATED_DATE, createdDateXsd);\n        resc.addLiteral(CREATED_BY, relaxedUser);\n\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        when(psSession.getHeaders(childId, null)).thenReturn(resourceHeaders);\n\n        when(resourceHeaders.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        propsConfig.setServerManagedPropsMode(ServerManagedPropsMode.RELAXED);\n        createResourceService.perform(transaction, USER_PRINCIPAL, childId, null, model);\n        cleanupList.add(fedoraId);\n\n        verify(psSession).persist(operationCaptor.capture());\n\n        final var operation = operationCaptor.getValue();\n        final FedoraId persistedId = operation.getResourceId();\n        assertNotEquals(fedoraId, persistedId);\n        assertTrue(persistedId.getFullId().startsWith(fedoraId.getFullId()));\n        assertEquals(persistedId, childId);\n\n        final var rdfOp = (RdfSourceOperation) operation;\n        assertEquals(relaxedUser, rdfOp.getCreatedBy());\n        assertEquals(relaxedUser, rdfOp.getLastModifiedBy());\n        assertEquals(createdDate, rdfOp.getCreatedDate());\n        assertEquals(lastModifiedDate, rdfOp.getLastModifiedDate());\n        assertEquals(1, containmentIndex.getContains(transaction, fedoraId).count());\n        verify(transaction).lockResourceAndGhostNodes(childId);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "a5eb4b3221",
    "aCommit": "e18c6422a2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(transaction).lockResource(childId);",
          "type": "DELETE",
          "lineNo": 369
        }
      ],
      "targetChanges": [
        {
          "line": "verify(transaction).lockResourceAndGhostNodes(childId);",
          "type": "ADD",
          "lineNo": 369
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResource(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.api.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtExecutableReference",
          "value": "lockResourceAndGhostNodes(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "lockResource",
          "childCount": 2
        },
        "dstNode": {
          "label": "lockResourceAndGhostNodes",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        369
      ]
    },
    "aCommitTime": 1642097676,
    "ID": "fcrepo/fcrepo:521",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ContainerImplTest.getChildren_WithChildren()",
    "bSource": {
      "startLine": 68,
      "code": "@Test\n    public void getChildren_WithChildren() {\n        final var child1 = mock(Container.class);\n        final var child2 = mock(Binary.class);\n        final var childrenStream = Stream.of(child1, child2);\n\n        when(resourceFactory.getChildren(transaction, fedoraId)).thenReturn(childrenStream);\n\n        final Container container = new ContainerImpl(fedoraId, transaction, sessionManager, resourceFactory);\n\n        final var resultStream = container.getChildren();\n        final var childrenList = resultStream.collect(Collectors.toList());\n        assertEquals(2, childrenList.size());\n\n        assertTrue(childrenList.stream().anyMatch(c -> c instanceof Container));\n        assertTrue(childrenList.stream().anyMatch(c -> c instanceof Binary));\n    }"
    },
    "aSource": {
      "startLine": 68,
      "code": "@Test\n    public void getChildren_WithChildren() {\n        final var child1 = mock(Container.class);\n        final var child2 = mock(Binary.class);\n        final var childrenStream = Stream.of(child1, child2);\n\n        when(resourceFactory.getChildren(transaction, fedoraId)).thenReturn(childrenStream);\n\n        final Container container = new ContainerImpl(fedoraId, transaction, sessionManager, resourceFactory, null);\n\n        final var resultStream = container.getChildren();\n        final var childrenList = resultStream.collect(Collectors.toList());\n        assertEquals(2, childrenList.size());\n\n        assertTrue(childrenList.stream().anyMatch(c -> c instanceof Container));\n        assertTrue(childrenList.stream().anyMatch(c -> c instanceof Binary));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ContainerImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ContainerImplTest.java",
    "bCommit": "57f5974438",
    "aCommit": "1d9929e273",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Container container = new ContainerImpl(fedoraId, transaction, sessionManager, resourceFactory);",
          "type": "DELETE",
          "lineNo": 76
        }
      ],
      "targetChanges": [
        {
          "line": "final Container container = new ContainerImpl(fedoraId, transaction, sessionManager, resourceFactory, null);",
          "type": "ADD",
          "lineNo": 76
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.models.Container container"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.models.Container"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.models.ContainerImpl.ContainerImpl(FedoraId,Transaction,PersistentStorageSessionManager,ResourceFactory)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.models.ContainerImpl"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.persistence.api.PersistentStorageSessionManager sessionManager"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.ResourceFactory resourceFactory"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.models.Container container"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.models.Container"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.models.ContainerImpl.ContainerImpl(FedoraId,Transaction,PersistentStorageSessionManager,ResourceFactory,UserTypesCache)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.models.ContainerImpl"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.persistence.api.PersistentStorageSessionManager sessionManager"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.ResourceFactory resourceFactory"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        76
      ]
    },
    "aCommitTime": 1631817231,
    "ID": "fcrepo/fcrepo:54",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImplTest.testCreateBuilder()",
    "bSource": {
      "startLine": 48,
      "code": "@Test\n    public void testCreateBuilder() {\n        final String model = \"some-interaction-model\";\n        final RdfSourceOperationBuilder builder = factory.createBuilder(randomId, model);\n        assertEquals(CreateRdfSourceOperationBuilderImpl.class, builder.getClass());\n    }"
    },
    "aSource": {
      "startLine": 49,
      "code": "@Test\n    public void testCreateBuilder() {\n        final String model = \"some-interaction-model\";\n        final RdfSourceOperationBuilder builder = factory.createBuilder(randomId, model,\n                ServerManagedPropsMode.RELAXED);\n        assertEquals(CreateRdfSourceOperationBuilderImpl.class, builder.getClass());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/RdfSourceOperationFactoryImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/RdfSourceOperationFactoryImplTest.java",
    "bCommit": "885e2b203f",
    "aCommit": "75e092b3ea",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final RdfSourceOperationBuilder builder = factory.createBuilder(randomId, model);",
          "type": "DELETE",
          "lineNo": 51
        }
      ],
      "targetChanges": [
        {
          "line": "final RdfSourceOperationBuilder builder = factory.createBuilder(randomId, model,",
          "type": "ADD",
          "lineNo": 52
        },
        {
          "line": "ServerManagedPropsMode.RELAXED);",
          "type": "ADD",
          "lineNo": 53
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationBuilder builder"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationBuilder"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationFactory.createBuilder(FedoraId,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationFactory factory"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationFactory.createBuilder(FedoraId,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId randomId"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String model"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationBuilder builder"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationBuilder"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationFactory.createBuilder(FedoraId,String,ServerManagedPropsMode)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationFactory factory"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationFactory.createBuilder(FedoraId,String,ServerManagedPropsMode)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId randomId"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String model"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.config.ServerManagedPropsMode RELAXED"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.config.ServerManagedPropsMode"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.config.ServerManagedPropsMode RELAXED"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "ServerManagedPropsMode.RELAXED",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        52
      ]
    },
    "aCommitTime": 1613074648,
    "ID": "fcrepo/fcrepo:229",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.buildDeleteEventFromDeleteOperation()",
    "bSource": {
      "startLine": 97,
      "code": "@Test\n    public void buildDeleteEventFromDeleteOperation() {\n        final var operation = new DeleteResourceOperationFactoryImpl().deleteBuilder(FEDORA_ID)\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_DELETION);\n    }"
    },
    "aSource": {
      "startLine": 98,
      "code": "@Test\n    public void buildDeleteEventFromDeleteOperation() {\n        final var operation = new DeleteResourceOperationFactoryImpl().deleteBuilder(FEDORA_ID)\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation, null)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_DELETION);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "885e2b203f",
    "aCommit": "75e092b3ea",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)",
          "type": "DELETE",
          "lineNo": 103
        }
      ],
      "targetChanges": [
        {
          "line": "final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation, null)",
          "type": "ADD",
          "lineNo": 104
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.observer.Event event"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.observer.Event"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.withBaseUrl(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation operation"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.observer.Event event"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.observer.Event"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.withBaseUrl(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation,String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation operation"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        104
      ]
    },
    "aCommitTime": 1613074648,
    "ID": "fcrepo/fcrepo:230",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.populateOtherEventFields()",
    "bSource": {
      "startLine": 165,
      "code": "@Test\n    public void populateOtherEventFields() {\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .updateInternalBinaryBuilder(FEDORA_ID, new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(USER)\n                .build();\n\n        final var baseUrl = \"http://localhost/rest\";\n        final var userAgent = \"user-agent\";\n        final var resourceTypes = Set.of(\"resource-type\");\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(baseUrl)\n                .withUserAgent(userAgent)\n                .withResourceTypes(resourceTypes)\n                .build();\n\n        assertEquals(baseUrl, event.getBaseUrl());\n        assertEquals(userAgent, event.getUserAgent());\n        assertEquals(resourceTypes, event.getResourceTypes());\n    }"
    },
    "aSource": {
      "startLine": 169,
      "code": "@Test\n    public void populateOtherEventFields() {\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .updateInternalBinaryBuilder(FEDORA_ID, new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(USER)\n                .build();\n\n        final var baseUrl = \"http://localhost/rest\";\n        final var userAgent = \"user-agent\";\n        final var resourceTypes = Set.of(\"resource-type\");\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation, null)\n                .withBaseUrl(baseUrl)\n                .withUserAgent(userAgent)\n                .withResourceTypes(resourceTypes)\n                .build();\n\n        assertEquals(baseUrl, event.getBaseUrl());\n        assertEquals(userAgent, event.getUserAgent());\n        assertEquals(resourceTypes, event.getResourceTypes());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "885e2b203f",
    "aCommit": "75e092b3ea",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)",
          "type": "DELETE",
          "lineNo": 176
        }
      ],
      "targetChanges": [
        {
          "line": "final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation, null)",
          "type": "ADD",
          "lineNo": 180
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.observer.Event event"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.observer.Event"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.withResourceTypes(Set)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.withUserAgent(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.withBaseUrl(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperation operation"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.observer.Event event"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.observer.Event"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.withResourceTypes(Set)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.withUserAgent(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.withBaseUrl(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation,String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperation operation"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        180
      ]
    },
    "aCommitTime": 1613074648,
    "ID": "fcrepo/fcrepo:231",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.buildUpdateEventFromUpdateNonRdfOperation()",
    "bSource": {
      "startLine": 123,
      "code": "@Test\n    public void buildUpdateEventFromUpdateNonRdfOperation() {\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .updateInternalBinaryBuilder(FEDORA_ID, new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_MODIFICATION);\n    }"
    },
    "aSource": {
      "startLine": 125,
      "code": "@Test\n    public void buildUpdateEventFromUpdateNonRdfOperation() {\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .updateInternalBinaryBuilder(FEDORA_ID, new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation, null)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_MODIFICATION);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "885e2b203f",
    "aCommit": "75e092b3ea",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)",
          "type": "DELETE",
          "lineNo": 130
        }
      ],
      "targetChanges": [
        {
          "line": "final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation, null)",
          "type": "ADD",
          "lineNo": 132
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.observer.Event event"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.observer.Event"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.withBaseUrl(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperation operation"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.observer.Event event"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.observer.Event"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.withBaseUrl(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation,String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperation operation"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        132
      ]
    },
    "aCommitTime": 1613074648,
    "ID": "fcrepo/fcrepo:232",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.buildCreateEventFromVersionOperation()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void buildCreateEventFromVersionOperation() {\n        final var operation = new VersionResourceOperationFactoryImpl().createBuilder(FEDORA_ID)\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_MODIFICATION);\n    }"
    },
    "aSource": {
      "startLine": 85,
      "code": "@Test\n    public void buildCreateEventFromVersionOperation() {\n        final var operation = new VersionResourceOperationFactoryImpl().createBuilder(FEDORA_ID)\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation, null)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_MODIFICATION);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "885e2b203f",
    "aCommit": "75e092b3ea",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)",
          "type": "DELETE",
          "lineNo": 90
        }
      ],
      "targetChanges": [
        {
          "line": "final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation, null)",
          "type": "ADD",
          "lineNo": 91
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.observer.Event event"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.observer.Event"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.withBaseUrl(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation operation"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.observer.Event event"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.observer.Event"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.withBaseUrl(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation,String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation operation"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        91
      ]
    },
    "aCommitTime": 1613074648,
    "ID": "fcrepo/fcrepo:233",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.buildCreateEventFromCreateNonRdfOperation()",
    "bSource": {
      "startLine": 63,
      "code": "@Test\n    public void buildCreateEventFromCreateNonRdfOperation() {\n        final var fedoraId = FedoraId.create(\"/test/ab/c\");\n        final var user = \"user2\";\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .createInternalBinaryBuilder(fedoraId, new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(user)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(fedoraId, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertEquals(fedoraId, event.getFedoraId());\n        assertEquals(fedoraId.getFullIdPath(), event.getPath());\n        assertEquals(user, event.getUserID());\n        assertThat(event.getTypes(), contains(EventType.RESOURCE_CREATION));\n        assertNotNull(event.getEventID());\n        assertNotNull(event.getDate());\n    }"
    },
    "aSource": {
      "startLine": 64,
      "code": "@Test\n    public void buildCreateEventFromCreateNonRdfOperation() {\n        final var fedoraId = FedoraId.create(\"/test/ab/c\");\n        final var user = \"user2\";\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .createInternalBinaryBuilder(fedoraId, new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(user)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(fedoraId, operation, null)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertEquals(fedoraId, event.getFedoraId());\n        assertEquals(fedoraId.getFullIdPath(), event.getPath());\n        assertEquals(user, event.getUserID());\n        assertThat(event.getTypes(), contains(EventType.RESOURCE_CREATION));\n        assertNotNull(event.getEventID());\n        assertNotNull(event.getDate());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "885e2b203f",
    "aCommit": "75e092b3ea",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final var event = ResourceOperationEventBuilder.fromResourceOperation(fedoraId, operation)",
          "type": "DELETE",
          "lineNo": 72
        }
      ],
      "targetChanges": [
        {
          "line": "final var event = ResourceOperationEventBuilder.fromResourceOperation(fedoraId, operation, null)",
          "type": "ADD",
          "lineNo": 73
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.observer.Event event"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.observer.Event"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.withBaseUrl(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperation operation"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.observer.Event event"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.observer.Event"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.EventBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.withBaseUrl(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation,String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilder.fromResourceOperation(FedoraId,ResourceOperation,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperation operation"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        73
      ]
    },
    "aCommitTime": 1613074648,
    "ID": "fcrepo/fcrepo:234",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.utils.ContentDigestTest.testSHA_1()",
    "bSource": {
      "startLine": 36,
      "code": "@Test\n    public void testSHA_1() {\n        assertEquals(\"Failed to produce a proper content digest URI!\",\n                create(\"urn:sha1:fake\"), asURI(SHA1.algorithm, \"fake\"));\n    }"
    },
    "aSource": {
      "startLine": 37,
      "code": "@Test\n    public void testSHA_1() {\n        assertEquals(\"Failed to produce a proper content digest URI!\",\n                create(\"urn:sha1:fake\"), asURI(SHA1.getAlgorithm(), \"fake\"));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/ContentDigestTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/ContentDigestTest.java",
    "bCommit": "15f26abd68",
    "aCommit": "8ae674020b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "create(\"urn:sha1:fake\"), asURI(SHA1.algorithm, \"fake\"));",
          "type": "DELETE",
          "lineNo": 39
        }
      ],
      "targetChanges": [
        {
          "line": "create(\"urn:sha1:fake\"), asURI(SHA1.getAlgorithm(), \"fake\"));",
          "type": "ADD",
          "lineNo": 40
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'urn:sha1:fake'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String algorithm"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM SHA1"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM SHA1"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fake'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'urn:sha1:fake'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.config.DigestAlgorithm.getAlgorithm()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.config.DigestAlgorithm SHA1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.config.DigestAlgorithm.getAlgorithm()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fake'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "SHA1.algorithm",
          "childCount": 0
        },
        "dstNode": {
          "label": "DigestAlgorithm$SHA1",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getAlgorithm",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "SHA1.algorithm",
          "childCount": 0
        },
        "dstNode": {
          "label": "DigestAlgorithm$SHA1",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        40
      ]
    },
    "aCommitTime": 1612892929,
    "ID": "fcrepo/fcrepo:297",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.utils.ContentDigestTest.testGetAlgorithm()",
    "bSource": {
      "startLine": 48,
      "code": "@Test\n    public void testGetAlgorithm() {\n        assertEquals(\"Failed to produce a proper digest algorithm!\", SHA1.algorithm,\n                getAlgorithm(asURI(SHA1.algorithm, \"fake\")));\n    }"
    },
    "aSource": {
      "startLine": 49,
      "code": "@Test\n    public void testGetAlgorithm() {\n        assertEquals(\"Failed to produce a proper digest algorithm!\", SHA1.getAlgorithm(),\n                getAlgorithm(asURI(SHA1.getAlgorithm(), \"fake\")));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/ContentDigestTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/ContentDigestTest.java",
    "bCommit": "15f26abd68",
    "aCommit": "8ae674020b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(\"Failed to produce a proper digest algorithm!\", SHA1.algorithm,",
          "type": "DELETE",
          "lineNo": 50
        },
        {
          "line": "getAlgorithm(asURI(SHA1.algorithm, \"fake\")));",
          "type": "DELETE",
          "lineNo": 51
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(\"Failed to produce a proper digest algorithm!\", SHA1.getAlgorithm(),",
          "type": "ADD",
          "lineNo": 51
        },
        {
          "line": "getAlgorithm(asURI(SHA1.getAlgorithm(), \"fake\")));",
          "type": "ADD",
          "lineNo": 52
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Failed to produce a proper digest algorithm!'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String algorithm"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM SHA1"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM SHA1"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.getAlgorithm(URI)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.getAlgorithm(URI)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String algorithm"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM SHA1"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM SHA1"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fake'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Failed to produce a proper digest algorithm!'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.config.DigestAlgorithm.getAlgorithm()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.config.DigestAlgorithm SHA1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.config.DigestAlgorithm.getAlgorithm()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.getAlgorithm(URI)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.getAlgorithm(URI)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.config.DigestAlgorithm.getAlgorithm()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.config.DigestAlgorithm SHA1"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.config.DigestAlgorithm.getAlgorithm()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fake'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "SHA1.algorithm",
          "childCount": 0
        },
        "dstNode": {
          "label": "DigestAlgorithm$SHA1",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "SHA1.algorithm",
          "childCount": 0
        },
        "dstNode": {
          "label": "DigestAlgorithm$SHA1",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getAlgorithm",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getAlgorithm",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "SHA1.algorithm",
          "childCount": 0
        },
        "dstNode": {
          "label": "DigestAlgorithm$SHA1",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "SHA1.algorithm",
          "childCount": 0
        },
        "dstNode": {
          "label": "DigestAlgorithm$SHA1",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        51,
        52
      ]
    },
    "aCommitTime": 1612892929,
    "ID": "fcrepo/fcrepo:298",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.utils.ContentDigestTest.testFromAlgorithm()",
    "bSource": {
      "startLine": 66,
      "code": "@Test\n    public void testFromAlgorithm() {\n        assertEquals(DIGEST_ALGORITHM.SHA1, DIGEST_ALGORITHM.fromAlgorithm(\"SHA\"));\n        assertEquals(DIGEST_ALGORITHM.SHA1, DIGEST_ALGORITHM.fromAlgorithm(\"sha-1\"));\n    }"
    },
    "aSource": {
      "startLine": 67,
      "code": "@Test\n    public void testFromAlgorithm() {\n        assertEquals(DigestAlgorithm.SHA1, DigestAlgorithm.fromAlgorithm(\"SHA\"));\n        assertEquals(DigestAlgorithm.SHA1, DigestAlgorithm.fromAlgorithm(\"sha-1\"));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/ContentDigestTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/ContentDigestTest.java",
    "bCommit": "15f26abd68",
    "aCommit": "8ae674020b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(DIGEST_ALGORITHM.SHA1, DIGEST_ALGORITHM.fromAlgorithm(\"SHA\"));",
          "type": "DELETE",
          "lineNo": 68
        },
        {
          "line": "assertEquals(DIGEST_ALGORITHM.SHA1, DIGEST_ALGORITHM.fromAlgorithm(\"sha-1\"));",
          "type": "DELETE",
          "lineNo": 69
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(DigestAlgorithm.SHA1, DigestAlgorithm.fromAlgorithm(\"SHA\"));",
          "type": "ADD",
          "lineNo": 69
        },
        {
          "line": "assertEquals(DigestAlgorithm.SHA1, DigestAlgorithm.fromAlgorithm(\"sha-1\"));",
          "type": "ADD",
          "lineNo": 70
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM,org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM,org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM SHA1"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM SHA1"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM.fromAlgorithm(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM.fromAlgorithm(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SHA'"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM,org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM,org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM SHA1"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM SHA1"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM.fromAlgorithm(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM.fromAlgorithm(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'sha-1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.config.DigestAlgorithm,org.fcrepo.config.DigestAlgorithm)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.config.DigestAlgorithm,org.fcrepo.config.DigestAlgorithm)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.config.DigestAlgorithm SHA1"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.config.DigestAlgorithm"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.config.DigestAlgorithm SHA1"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.config.DigestAlgorithm.fromAlgorithm(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.config.DigestAlgorithm"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.config.DigestAlgorithm.fromAlgorithm(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SHA'"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.config.DigestAlgorithm,org.fcrepo.config.DigestAlgorithm)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.config.DigestAlgorithm,org.fcrepo.config.DigestAlgorithm)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.config.DigestAlgorithm SHA1"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.config.DigestAlgorithm"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.config.DigestAlgorithm SHA1"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.config.DigestAlgorithm.fromAlgorithm(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.config.DigestAlgorithm"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.config.DigestAlgorithm.fromAlgorithm(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'sha-1'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "DIGEST_ALGORITHM.SHA1",
          "childCount": 0
        },
        "dstNode": {
          "label": "DigestAlgorithm.SHA1",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "DIGEST_ALGORITHM.SHA1",
          "childCount": 0
        },
        "dstNode": {
          "label": "DigestAlgorithm.SHA1",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.api.utils.ContentDigest.DIGEST_ALGORITHM",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.config.DigestAlgorithm",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.api.utils.ContentDigest.DIGEST_ALGORITHM",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.config.DigestAlgorithm",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        69,
        70
      ]
    },
    "aCommitTime": 1612892929,
    "ID": "fcrepo/fcrepo:299",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.utils.ContentDigestTest.testFromAlgorithmMissing()",
    "bSource": {
      "startLine": 72,
      "code": "@Test\n    public void testFromAlgorithmMissing() {\n        assertEquals(DIGEST_ALGORITHM.MISSING, DIGEST_ALGORITHM.fromAlgorithm(\"what\"));\n    }"
    },
    "aSource": {
      "startLine": 73,
      "code": "@Test\n    public void testFromAlgorithmMissing() {\n        assertEquals(DigestAlgorithm.MISSING, DigestAlgorithm.fromAlgorithm(\"what\"));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/ContentDigestTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/ContentDigestTest.java",
    "bCommit": "15f26abd68",
    "aCommit": "8ae674020b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(DIGEST_ALGORITHM.MISSING, DIGEST_ALGORITHM.fromAlgorithm(\"what\"));",
          "type": "DELETE",
          "lineNo": 74
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(DigestAlgorithm.MISSING, DigestAlgorithm.fromAlgorithm(\"what\"));",
          "type": "ADD",
          "lineNo": 75
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM,org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM,org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM MISSING"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM MISSING"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM.fromAlgorithm(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest$DIGEST_ALGORITHM.fromAlgorithm(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'what'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.config.DigestAlgorithm,org.fcrepo.config.DigestAlgorithm)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.config.DigestAlgorithm,org.fcrepo.config.DigestAlgorithm)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.config.DigestAlgorithm MISSING"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.config.DigestAlgorithm"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.config.DigestAlgorithm MISSING"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.config.DigestAlgorithm.fromAlgorithm(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.config.DigestAlgorithm"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.config.DigestAlgorithm.fromAlgorithm(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'what'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "DIGEST_ALGORITHM.MISSING",
          "childCount": 0
        },
        "dstNode": {
          "label": "DigestAlgorithm.MISSING",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.api.utils.ContentDigest.DIGEST_ALGORITHM",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.config.DigestAlgorithm",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        75
      ]
    },
    "aCommitTime": 1612892929,
    "ID": "fcrepo/fcrepo:300",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.TimeMapImplTest.shouldHaveTimeMapTypes()",
    "bSource": {
      "startLine": 97,
      "code": "@Test\n    public void shouldHaveTimeMapTypes() {\n        assertTrue(timeMap.getTypes().containsAll(\n                List.of(\n                URI.create(RdfLexicon.TIME_MAP.getURI()),\n                URI.create(RdfLexicon.VERSIONING_TIMEMAP.getURI())\n                ))\n        );\n    }"
    },
    "aSource": {
      "startLine": 97,
      "code": "@Test\n    public void shouldHaveTimeMapTypes() {\n        assertTrue(timeMap.getTypes().containsAll(\n                List.of(\n                URI.create(RdfLexicon.VERSIONING_TIMEMAP.getURI())\n                ))\n        );\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/TimeMapImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/TimeMapImplTest.java",
    "bCommit": "edf919a5aa",
    "aCommit": "178a1decac",
    "hunk": {
      "sourceChanges": [
        {
          "line": "URI.create(RdfLexicon.TIME_MAP.getURI()),",
          "type": "DELETE",
          "lineNo": 101
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.net.URI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtInvocation",
          "value": "getURI()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Resource TIME_MAP"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.RdfLexicon"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.kernel.api.Resource TIME_MAP"
        },
        {
          "type": "CtExecutableReference",
          "value": "getURI()"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "create",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        101
      ]
    },
    "aCommitTime": 1607097929,
    "ID": "fcrepo/fcrepo:37",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.domain.PreferTagTest.testHashCode()",
    "bSource": {
      "startLine": 60,
      "code": "@Test\n    public void testHashCode() {\n        doTestHashCode(new PreferTag(\"handling=lenient; received=\\\"minimal\\\"\"),\n                new PreferTag(\"handling=lenient; received=\\\"minimal\\\"\"),\n                true);\n\n        doTestHashCode(new PreferTag(\"handling=lenient; received=\\\"minimal\\\"\"),\n                new PreferTag(\"return=representation; include=\\\"\" + LDP_NAMESPACE + \"PreferMinimalContainer\\\"\"),\n                false);\n\n        doTestHashCode(new PreferTag(\"handling=lenient; received=\\\"minimal\\\"\"),\n                PreferTag.emptyTag(),\n                false);\n    }"
    },
    "aSource": {
      "startLine": 60,
      "code": "@Test\n    public void testHashCode() {\n        doTestHashCode(new PreferTag(\"handling=lenient; received=\\\"minimal\\\"\"),\n                new PreferTag(\"handling=lenient; received=\\\"minimal\\\"\"),\n                true);\n\n        doTestHashCode(new PreferTag(\"handling=lenient; received=\\\"minimal\\\"\"),\n                new PreferTag(\"return=representation; include=\\\"\" + PREFER_MINIMAL_CONTAINER + \"\\\"\"),\n                false);\n\n        doTestHashCode(new PreferTag(\"handling=lenient; received=\\\"minimal\\\"\"),\n                PreferTag.emptyTag(),\n                false);\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/PreferTagTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/PreferTagTest.java",
    "bCommit": "aaaa4f02d6",
    "aCommit": "0172d5a1f3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "new PreferTag(\"return=representation; include=\\\"\" + LDP_NAMESPACE + \"PreferMinimalContainer\\\"\"),",
          "type": "DELETE",
          "lineNo": 67
        }
      ],
      "targetChanges": [
        {
          "line": "new PreferTag(\"return=representation; include=\\\"\" + PREFER_MINIMAL_CONTAINER + \"\\\"\"),",
          "type": "ADD",
          "lineNo": 67
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; include=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PreferMinimalContainer\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(PreferTag)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; include=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property PREFER_MINIMAL_CONTAINER"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PreferMinimalContainer\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"\\\"\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "PREFER_MINIMAL_CONTAINER",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        67
      ]
    },
    "aCommitTime": 1606854214,
    "ID": "fcrepo/fcrepo:15",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.RdfLexiconTest.repoPredicatesAreManaged()",
    "bSource": {
      "startLine": 36,
      "code": "@Test\n    public void repoPredicatesAreManaged() {\n        assertTrue(isManagedPredicate.test(createProperty(PREMIS_NAMESPACE + \"hasMessageDigest\")));\n        assertTrue(isManagedPredicate.test(createProperty(REPOSITORY_NAMESPACE + \"hasParent\")));\n    }"
    },
    "aSource": {
      "startLine": 37,
      "code": "@Test\n    public void repoPredicatesAreManaged() {\n        assertTrue(isManagedPredicate.test(HAS_MESSAGE_DIGEST));\n        assertTrue(isManagedPredicate.test(CREATED_BY));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "bCommit": "aaaa4f02d6",
    "aCommit": "0172d5a1f3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(isManagedPredicate.test(createProperty(PREMIS_NAMESPACE + \"hasMessageDigest\")));",
          "type": "DELETE",
          "lineNo": 38
        },
        {
          "line": "assertTrue(isManagedPredicate.test(createProperty(REPOSITORY_NAMESPACE + \"hasParent\")));",
          "type": "DELETE",
          "lineNo": 39
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue(isManagedPredicate.test(HAS_MESSAGE_DIGEST));",
          "type": "ADD",
          "lineNo": 39
        },
        {
          "line": "assertTrue(isManagedPredicate.test(CREATED_BY));",
          "type": "ADD",
          "lineNo": 40
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test()"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PREMIS_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'hasMessageDigest'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test()"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'hasParent'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test(org.fcrepo.kernel.api.Property)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test(org.fcrepo.kernel.api.Property)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property HAS_MESSAGE_DIGEST"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test(org.fcrepo.kernel.api.Property)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test(org.fcrepo.kernel.api.Property)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property CREATED_BY"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.api.RdfLexiconTest",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.api.RdfLexicon$HAS_MESSAGE_DIGEST",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.api.RdfLexiconTest",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.api.RdfLexicon$CREATED_BY",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createProperty",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createProperty",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.api.RdfLexiconTest",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.api.RdfLexicon$HAS_MESSAGE_DIGEST",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.api.RdfLexiconTest",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.api.RdfLexicon$CREATED_BY",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        39,
        40
      ]
    },
    "aCommitTime": 1606854214,
    "ID": "fcrepo/fcrepo:16",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.RdfLexiconTest.otherPredicatesAreNotManaged()",
    "bSource": {
      "startLine": 41,
      "code": "@Test\n    public void otherPredicatesAreNotManaged() {\n        assertFalse(isManagedPredicate.test(createProperty(\"http://purl.org/dc/elements/1.1/title\")));\n    }"
    },
    "aSource": {
      "startLine": 42,
      "code": "@Test\n    public void otherPredicatesAreNotManaged() {\n        assertFalse(isManagedPredicate.test(title));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "bCommit": "aaaa4f02d6",
    "aCommit": "0172d5a1f3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertFalse(isManagedPredicate.test(createProperty(\"http://purl.org/dc/elements/1.1/title\")));",
          "type": "DELETE",
          "lineNo": 43
        }
      ],
      "targetChanges": [
        {
          "line": "assertFalse(isManagedPredicate.test(title));",
          "type": "ADD",
          "lineNo": 44
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test()"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://purl.org/dc/elements/1.1/title'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RdfLexiconTest title"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createProperty",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "title",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        44
      ]
    },
    "aCommitTime": 1606854214,
    "ID": "fcrepo/fcrepo:17",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.domain.ldp.LdpPreferTagTest.testPreferOmitContainmentAndMembership()",
    "bSource": {
      "startLine": 93,
      "code": "@Test\n    public void testPreferOmitContainmentAndMembership() {\n        final PreferTag prefer\n                = new PreferTag(\"return=representation; omit=\\\"\" + LDP_NAMESPACE + \"PreferMembership \"\n                                                                 + LDP_NAMESPACE + \"PreferContainment\\\"\");\n        testObj = new LdpPreferTag(prefer);\n\n        assertFalse(testObj.prefersMembership());\n        assertFalse(testObj.prefersContainment());\n    }"
    },
    "aSource": {
      "startLine": 95,
      "code": "@Test\n    public void testPreferOmitContainmentAndMembership() {\n        final PreferTag prefer\n                = new PreferTag(\"return=representation; omit=\\\"\" + PREFER_MEMBERSHIP + \" \"\n                                                                 + PREFER_CONTAINMENT + \"\\\"\");\n        testObj = new LdpPreferTag(prefer);\n\n        assertFalse(testObj.prefersMembership());\n        assertFalse(testObj.prefersContainment());\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ldp/LdpPreferTagTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ldp/LdpPreferTagTest.java",
    "bCommit": "aaaa4f02d6",
    "aCommit": "0172d5a1f3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "= new PreferTag(\"return=representation; omit=\\\"\" + LDP_NAMESPACE + \"PreferMembership \"",
          "type": "DELETE",
          "lineNo": 96
        },
        {
          "line": "+ LDP_NAMESPACE + \"PreferContainment\\\"\");",
          "type": "DELETE",
          "lineNo": 97
        }
      ],
      "targetChanges": [
        {
          "line": "= new PreferTag(\"return=representation; omit=\\\"\" + PREFER_MEMBERSHIP + \" \"",
          "type": "ADD",
          "lineNo": 98
        },
        {
          "line": "+ PREFER_CONTAINMENT + \"\\\"\");",
          "type": "ADD",
          "lineNo": 99
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; omit=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PreferMembership '"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PreferContainment\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; omit=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property PREFER_MEMBERSHIP"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ' '"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property PREFER_CONTAINMENT"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PreferContainment\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"\\\"\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "PREFER_CONTAINMENT",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PreferMembership \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\" \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "PREFER_MEMBERSHIP",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        98,
        99
      ]
    },
    "aCommitTime": 1606854214,
    "ID": "fcrepo/fcrepo:18",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.domain.ldp.LdpPreferTagTest.testMinimalContainer()",
    "bSource": {
      "startLine": 49,
      "code": "@Test\n    public void testMinimalContainer() {\n        final PreferTag prefer\n                = new PreferTag(\"return=representation; include=\\\"\" + LDP_NAMESPACE + \"PreferMinimalContainer\\\"\");\n        testObj = new LdpPreferTag(prefer);\n\n        assertTrue(testObj.prefersServerManaged());\n        assertFalse(testObj.prefersReferences());\n        assertFalse(testObj.prefersContainment());\n        assertFalse(testObj.prefersMembership());\n        assertFalse(testObj.prefersEmbed());\n    }"
    },
    "aSource": {
      "startLine": 51,
      "code": "@Test\n    public void testMinimalContainer() {\n        final PreferTag prefer\n                = new PreferTag(\"return=representation; include=\\\"\" + PREFER_MINIMAL_CONTAINER + \"\\\"\");\n        testObj = new LdpPreferTag(prefer);\n\n        assertTrue(testObj.prefersServerManaged());\n        assertFalse(testObj.prefersReferences());\n        assertFalse(testObj.prefersContainment());\n        assertFalse(testObj.prefersMembership());\n        assertFalse(testObj.prefersEmbed());\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ldp/LdpPreferTagTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ldp/LdpPreferTagTest.java",
    "bCommit": "aaaa4f02d6",
    "aCommit": "0172d5a1f3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "= new PreferTag(\"return=representation; include=\\\"\" + LDP_NAMESPACE + \"PreferMinimalContainer\\\"\");",
          "type": "DELETE",
          "lineNo": 52
        }
      ],
      "targetChanges": [
        {
          "line": "= new PreferTag(\"return=representation; include=\\\"\" + PREFER_MINIMAL_CONTAINER + \"\\\"\");",
          "type": "ADD",
          "lineNo": 54
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; include=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PreferMinimalContainer\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; include=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property PREFER_MINIMAL_CONTAINER"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PreferMinimalContainer\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"\\\"\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "PREFER_MINIMAL_CONTAINER",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        54
      ]
    },
    "aCommitTime": 1606854214,
    "ID": "fcrepo/fcrepo:19",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.domain.ldp.LdpPreferTagTest.testPreferContainment()",
    "bSource": {
      "startLine": 72,
      "code": "@Test\n    public void testPreferContainment() {\n        final PreferTag prefer\n                = new PreferTag(\"return=representation; include=\\\"\" + LDP_NAMESPACE + \"PreferMinimalContainer \"\n                                                                    + LDP_NAMESPACE + \"PreferContainment\\\"\");\n        testObj = new LdpPreferTag(prefer);\n\n        assertTrue(testObj.prefersContainment());\n    }"
    },
    "aSource": {
      "startLine": 74,
      "code": "@Test\n    public void testPreferContainment() {\n        final PreferTag prefer\n                = new PreferTag(\"return=representation; include=\\\"\" + PREFER_MINIMAL_CONTAINER + \" \"\n                                                                    + PREFER_CONTAINMENT + \"\\\"\");\n        testObj = new LdpPreferTag(prefer);\n\n        assertTrue(testObj.prefersContainment());\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ldp/LdpPreferTagTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ldp/LdpPreferTagTest.java",
    "bCommit": "aaaa4f02d6",
    "aCommit": "0172d5a1f3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "= new PreferTag(\"return=representation; include=\\\"\" + LDP_NAMESPACE + \"PreferMinimalContainer \"",
          "type": "DELETE",
          "lineNo": 75
        },
        {
          "line": "+ LDP_NAMESPACE + \"PreferContainment\\\"\");",
          "type": "DELETE",
          "lineNo": 76
        }
      ],
      "targetChanges": [
        {
          "line": "= new PreferTag(\"return=representation; include=\\\"\" + PREFER_MINIMAL_CONTAINER + \" \"",
          "type": "ADD",
          "lineNo": 77
        },
        {
          "line": "+ PREFER_CONTAINMENT + \"\\\"\");",
          "type": "ADD",
          "lineNo": 78
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; include=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PreferMinimalContainer '"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PreferContainment\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; include=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property PREFER_MINIMAL_CONTAINER"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ' '"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property PREFER_CONTAINMENT"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PreferContainment\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"\\\"\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "PREFER_CONTAINMENT",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PreferMinimalContainer \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\" \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "PREFER_MINIMAL_CONTAINER",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        77,
        78
      ]
    },
    "aCommitTime": 1606854214,
    "ID": "fcrepo/fcrepo:20",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.domain.ldp.LdpPreferTagTest.testPreferContainmentAndMembership()",
    "bSource": {
      "startLine": 82,
      "code": "@Test\n    public void testPreferContainmentAndMembership() {\n        final PreferTag prefer\n                = new PreferTag(\"return=representation; include=\\\"\" + LDP_NAMESPACE + \"PreferMembership \"\n                                                                    + LDP_NAMESPACE + \"PreferContainment\\\"\");\n        testObj = new LdpPreferTag(prefer);\n\n        assertTrue(testObj.prefersMembership());\n        assertTrue(testObj.prefersContainment());\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPreferContainmentAndMembership() {\n        final PreferTag prefer\n                = new PreferTag(\"return=representation; include=\\\"\" + PREFER_MEMBERSHIP + \" \"\n                                                                    + PREFER_CONTAINMENT + \"\\\"\");\n        testObj = new LdpPreferTag(prefer);\n\n        assertTrue(testObj.prefersMembership());\n        assertTrue(testObj.prefersContainment());\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ldp/LdpPreferTagTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ldp/LdpPreferTagTest.java",
    "bCommit": "aaaa4f02d6",
    "aCommit": "0172d5a1f3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "= new PreferTag(\"return=representation; include=\\\"\" + LDP_NAMESPACE + \"PreferMembership \"",
          "type": "DELETE",
          "lineNo": 85
        },
        {
          "line": "+ LDP_NAMESPACE + \"PreferContainment\\\"\");",
          "type": "DELETE",
          "lineNo": 86
        }
      ],
      "targetChanges": [
        {
          "line": "= new PreferTag(\"return=representation; include=\\\"\" + PREFER_MEMBERSHIP + \" \"",
          "type": "ADD",
          "lineNo": 87
        },
        {
          "line": "+ PREFER_CONTAINMENT + \"\\\"\");",
          "type": "ADD",
          "lineNo": 88
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; include=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PreferMembership '"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PreferContainment\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; include=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property PREFER_MEMBERSHIP"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ' '"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property PREFER_CONTAINMENT"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PreferContainment\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"\\\"\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "PREFER_CONTAINMENT",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PreferMembership \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\" \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "PREFER_MEMBERSHIP",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        87,
        88
      ]
    },
    "aCommitTime": 1606854214,
    "ID": "fcrepo/fcrepo:21",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.domain.ldp.LdpPreferTagTest.testPreferMembership()",
    "bSource": {
      "startLine": 62,
      "code": "@Test\n    public void testPreferMembership() {\n        final PreferTag prefer\n                = new PreferTag(\"return=representation; include=\\\"\" + LDP_NAMESPACE + \"PreferMinimalContainer \"\n                                                                    + LDP_NAMESPACE + \"PreferMembership\\\"\");\n        testObj = new LdpPreferTag(prefer);\n\n        assertTrue(testObj.prefersMembership());\n    }"
    },
    "aSource": {
      "startLine": 64,
      "code": "@Test\n    public void testPreferMembership() {\n        final PreferTag prefer\n                = new PreferTag(\"return=representation; include=\\\"\" + PREFER_MINIMAL_CONTAINER + \" \"\n                                                                    + PREFER_MEMBERSHIP + \"\\\"\");\n        testObj = new LdpPreferTag(prefer);\n\n        assertTrue(testObj.prefersMembership());\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ldp/LdpPreferTagTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ldp/LdpPreferTagTest.java",
    "bCommit": "aaaa4f02d6",
    "aCommit": "0172d5a1f3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "= new PreferTag(\"return=representation; include=\\\"\" + LDP_NAMESPACE + \"PreferMinimalContainer \"",
          "type": "DELETE",
          "lineNo": 65
        },
        {
          "line": "+ LDP_NAMESPACE + \"PreferMembership\\\"\");",
          "type": "DELETE",
          "lineNo": 66
        }
      ],
      "targetChanges": [
        {
          "line": "= new PreferTag(\"return=representation; include=\\\"\" + PREFER_MINIMAL_CONTAINER + \" \"",
          "type": "ADD",
          "lineNo": 67
        },
        {
          "line": "+ PREFER_MEMBERSHIP + \"\\\"\");",
          "type": "ADD",
          "lineNo": 68
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; include=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PreferMinimalContainer '"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PreferMembership\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.PreferTag.PreferTag(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.domain.PreferTag"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'return=representation; include=\"'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property PREFER_MINIMAL_CONTAINER"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ' '"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Property PREFER_MEMBERSHIP"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PreferMembership\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"\\\"\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "PREFER_MEMBERSHIP",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PreferMinimalContainer \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\" \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "PREFER_MINIMAL_CONTAINER",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        67,
        68
      ]
    },
    "aCommitTime": 1606854214,
    "ID": "fcrepo/fcrepo:22",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceHelperImplTest.doesResourceExist_Exists_Description_WithoutSession()",
    "bSource": {
      "startLine": 129,
      "code": "@Test\n    public void doesResourceExist_Exists_Description_WithoutSession() {\n        containmentIndex.addContainedBy(mockTx.getId(), rootId, fedoraId);\n        containmentIndex.commitTransaction(mockTx.getId());\n        final FedoraId descId = fedoraId.asDescription();\n        final boolean answer = resourceHelper.doesResourceExist(null, descId);\n        assertTrue(answer);\n    }"
    },
    "aSource": {
      "startLine": 129,
      "code": "@Test\n    public void doesResourceExist_Exists_Description_WithoutSession() {\n        containmentIndex.addContainedBy(mockTx.getId(), rootId, fedoraId);\n        containmentIndex.commitTransaction(mockTx.getId());\n        final FedoraId descId = fedoraId.asDescription();\n        final boolean answer = resourceHelper.doesResourceExist(null, descId, false);\n        assertTrue(answer);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "bCommit": "2e36178251",
    "aCommit": "8d093c5528",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(null, descId);",
          "type": "DELETE",
          "lineNo": 134
        }
      ],
      "targetChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(null, descId, false);",
          "type": "ADD",
          "lineNo": 134
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        134
      ]
    },
    "aCommitTime": 1605207794,
    "ID": "fcrepo/fcrepo:308",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceHelperImplTest.doesResourceExist_DoesntExist_WithoutSession()",
    "bSource": {
      "startLine": 151,
      "code": "@Test\n    public void doesResourceExist_DoesntExist_WithoutSession() throws Exception {\n        final boolean answer = resourceHelper.doesResourceExist(null, fedoraId);\n        assertFalse(answer);\n    }"
    },
    "aSource": {
      "startLine": 151,
      "code": "@Test\n    public void doesResourceExist_DoesntExist_WithoutSession() throws Exception {\n        final boolean answer = resourceHelper.doesResourceExist(null, fedoraId, false);\n        assertFalse(answer);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "bCommit": "2e36178251",
    "aCommit": "8d093c5528",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(null, fedoraId);",
          "type": "DELETE",
          "lineNo": 153
        }
      ],
      "targetChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(null, fedoraId, false);",
          "type": "ADD",
          "lineNo": 153
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        153
      ]
    },
    "aCommitTime": 1605207794,
    "ID": "fcrepo/fcrepo:309",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceHelperImplTest.doesResourceExist_DoesntExists_Description_WithSession()",
    "bSource": {
      "startLine": 144,
      "code": "@Test\n    public void doesResourceExist_DoesntExists_Description_WithSession() {\n        final FedoraId descId = fedoraId.asDescription();\n        final boolean answer = resourceHelper.doesResourceExist(mockTx, descId);\n        assertFalse(answer);\n    }"
    },
    "aSource": {
      "startLine": 144,
      "code": "@Test\n    public void doesResourceExist_DoesntExists_Description_WithSession() {\n        final FedoraId descId = fedoraId.asDescription();\n        final boolean answer = resourceHelper.doesResourceExist(mockTx, descId, false);\n        assertFalse(answer);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "bCommit": "2e36178251",
    "aCommit": "8d093c5528",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(mockTx, descId);",
          "type": "DELETE",
          "lineNo": 147
        }
      ],
      "targetChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(mockTx, descId, false);",
          "type": "ADD",
          "lineNo": 147
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction mockTx"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction mockTx"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        147
      ]
    },
    "aCommitTime": 1605207794,
    "ID": "fcrepo/fcrepo:310",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceHelperImplTest.doesResourceExist_Exception_WithSession()",
    "bSource": {
      "startLine": 164,
      "code": "/**\n     * Only Mementos go to the persistence layer.\n     */\n    @Test(expected = RepositoryRuntimeException.class)\n    public void doesResourceExist_Exception_WithSession() throws Exception {\n        when(psSession.getHeaders(fedoraMementoId, fedoraMementoId.getMementoInstant()))\n                .thenThrow(PersistentSessionClosedException.class);\n        resourceHelper.doesResourceExist(mockTx, fedoraMementoId);\n    }"
    },
    "aSource": {
      "startLine": 164,
      "code": "/**\n     * Only Mementos go to the persistence layer.\n     */\n    @Test(expected = RepositoryRuntimeException.class)\n    public void doesResourceExist_Exception_WithSession() throws Exception {\n        when(psSession.getHeaders(fedoraMementoId, fedoraMementoId.getMementoInstant()))\n                .thenThrow(PersistentSessionClosedException.class);\n        resourceHelper.doesResourceExist(mockTx, fedoraMementoId, false);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "bCommit": "2e36178251",
    "aCommit": "8d093c5528",
    "hunk": {
      "sourceChanges": [
        {
          "line": "resourceHelper.doesResourceExist(mockTx, fedoraMementoId);",
          "type": "DELETE",
          "lineNo": 171
        }
      ],
      "targetChanges": [
        {
          "line": "resourceHelper.doesResourceExist(mockTx, fedoraMementoId, false);",
          "type": "ADD",
          "lineNo": 171
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction mockTx"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraMementoId"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction mockTx"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraMementoId"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        171
      ]
    },
    "aCommitTime": 1605207794,
    "ID": "fcrepo/fcrepo:311",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceHelperImplTest.doesResourceExist_DoesntExist_WithSession()",
    "bSource": {
      "startLine": 138,
      "code": "@Test\n    public void doesResourceExist_DoesntExist_WithSession() throws Exception {\n        final boolean answer = resourceHelper.doesResourceExist(mockTx, fedoraId);\n        assertFalse(answer);\n    }"
    },
    "aSource": {
      "startLine": 138,
      "code": "@Test\n    public void doesResourceExist_DoesntExist_WithSession() throws Exception {\n        final boolean answer = resourceHelper.doesResourceExist(mockTx, fedoraId, false);\n        assertFalse(answer);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "bCommit": "2e36178251",
    "aCommit": "8d093c5528",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(mockTx, fedoraId);",
          "type": "DELETE",
          "lineNo": 140
        }
      ],
      "targetChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(mockTx, fedoraId, false);",
          "type": "ADD",
          "lineNo": 140
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction mockTx"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction mockTx"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        140
      ]
    },
    "aCommitTime": 1605207794,
    "ID": "fcrepo/fcrepo:312",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceHelperImplTest.doesResourceExist_Exists_WithoutSession()",
    "bSource": {
      "startLine": 121,
      "code": "@Test\n    public void doesResourceExist_Exists_WithoutSession() throws Exception {\n        containmentIndex.addContainedBy(mockTx.getId(), rootId, fedoraId);\n        containmentIndex.commitTransaction(mockTx.getId());\n        final boolean answer = resourceHelper.doesResourceExist(null, fedoraId);\n        assertTrue(answer);\n    }"
    },
    "aSource": {
      "startLine": 121,
      "code": "@Test\n    public void doesResourceExist_Exists_WithoutSession() throws Exception {\n        containmentIndex.addContainedBy(mockTx.getId(), rootId, fedoraId);\n        containmentIndex.commitTransaction(mockTx.getId());\n        final boolean answer = resourceHelper.doesResourceExist(null, fedoraId, false);\n        assertTrue(answer);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "bCommit": "2e36178251",
    "aCommit": "8d093c5528",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(null, fedoraId);",
          "type": "DELETE",
          "lineNo": 125
        }
      ],
      "targetChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(null, fedoraId, false);",
          "type": "ADD",
          "lineNo": 125
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        125
      ]
    },
    "aCommitTime": 1605207794,
    "ID": "fcrepo/fcrepo:313",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceHelperImplTest.doesResourceExist_Exception_WithoutSession()",
    "bSource": {
      "startLine": 174,
      "code": "/**\n     * Only Mementos go to the persistence layer.\n     */\n    @Test(expected = RepositoryRuntimeException.class)\n    public void doesResourceExist_Exception_WithoutSession() throws Exception {\n        when(psSession.getHeaders(fedoraMementoId, fedoraMementoId.getMementoInstant()))\n                .thenThrow(PersistentSessionClosedException.class);\n        resourceHelper.doesResourceExist(null, fedoraMementoId);\n    }"
    },
    "aSource": {
      "startLine": 174,
      "code": "/**\n     * Only Mementos go to the persistence layer.\n     */\n    @Test(expected = RepositoryRuntimeException.class)\n    public void doesResourceExist_Exception_WithoutSession() throws Exception {\n        when(psSession.getHeaders(fedoraMementoId, fedoraMementoId.getMementoInstant()))\n                .thenThrow(PersistentSessionClosedException.class);\n        resourceHelper.doesResourceExist(null, fedoraMementoId, false);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "bCommit": "2e36178251",
    "aCommit": "8d093c5528",
    "hunk": {
      "sourceChanges": [
        {
          "line": "resourceHelper.doesResourceExist(null, fedoraMementoId);",
          "type": "DELETE",
          "lineNo": 181
        }
      ],
      "targetChanges": [
        {
          "line": "resourceHelper.doesResourceExist(null, fedoraMementoId, false);",
          "type": "ADD",
          "lineNo": 181
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraMementoId"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraMementoId"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        181
      ]
    },
    "aCommitTime": 1605207794,
    "ID": "fcrepo/fcrepo:314",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceHelperImplTest.doesResourceExist_DoesntExists_Description_WithoutSession()",
    "bSource": {
      "startLine": 157,
      "code": "@Test\n    public void doesResourceExist_DoesntExists_Description_WithoutSession() {\n        final FedoraId descId = fedoraId.asDescription();\n        final boolean answer = resourceHelper.doesResourceExist(null, descId);\n        assertFalse(answer);\n    }"
    },
    "aSource": {
      "startLine": 157,
      "code": "@Test\n    public void doesResourceExist_DoesntExists_Description_WithoutSession() {\n        final FedoraId descId = fedoraId.asDescription();\n        final boolean answer = resourceHelper.doesResourceExist(null, descId, false);\n        assertFalse(answer);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceHelperImplTest.java",
    "bCommit": "2e36178251",
    "aCommit": "8d093c5528",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(null, descId);",
          "type": "DELETE",
          "lineNo": 160
        }
      ],
      "targetChanges": [
        {
          "line": "final boolean answer = resourceHelper.doesResourceExist(null, descId, false);",
          "type": "ADD",
          "lineNo": 160
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "boolean answer"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl resourceHelper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.models.ResourceHelperImpl.doesResourceExist(Transaction,FedoraId,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        160
      ]
    },
    "aCommitTime": 1605207794,
    "ID": "fcrepo/fcrepo:315",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.operations.CreateNonRdfSourceOperationBuilderTest.testSize()",
    "bSource": {
      "startLine": 85,
      "code": "@Test\n    public void testSize() {\n        final Long filesize = 123l;\n        final NonRdfSourceOperation op = internalBuilder.contentSize(filesize).build();\n        assertEquals(filesize, op.getContentSize());\n    }"
    },
    "aSource": {
      "startLine": 85,
      "code": "@Test\n    public void testSize() {\n        final long filesize = 123l;\n        final NonRdfSourceOperation op = internalBuilder.contentSize(filesize).build();\n        assertEquals(filesize, op.getContentSize());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/CreateNonRdfSourceOperationBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/CreateNonRdfSourceOperationBuilderTest.java",
    "bCommit": "87d9e42866",
    "aCommit": "ef92511bae",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Long filesize = 123l;",
          "type": "DELETE",
          "lineNo": 87
        }
      ],
      "targetChanges": [
        {
          "line": "final long filesize = 123l;",
          "type": "ADD",
          "lineNo": 87
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.Long filesize"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Long"
        },
        {
          "type": "CtLiteral",
          "value": "long '123'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "long filesize"
        },
        {
          "type": "CtTypeReference",
          "value": "long"
        },
        {
          "type": "CtLiteral",
          "value": "long '123'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.Long",
          "childCount": 0
        },
        "dstNode": {
          "label": "long",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        89
      ]
    },
    "aCommitTime": 1605109321,
    "ID": "fcrepo/fcrepo:543",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.PurgeResourceServiceImplTest.testRecursivePurge()",
    "bSource": {
      "startLine": 138,
      "code": "@Test\n    public void testRecursivePurge() throws Exception {\n        when(container.isAcl()).thenReturn(false);\n        when(container.getAcl()).thenReturn(null);\n        when(childContainer.getFedoraId()).thenReturn(CHILD_RESOURCE_ID);\n        when(childContainer.isAcl()).thenReturn(false);\n        when(childContainer.getAcl()).thenReturn(null);\n\n        when(resourceFactory.getResource(tx, CHILD_RESOURCE_ID)).thenReturn(childContainer);\n        containmentIndex.addContainedBy(tx.getId(), container.getFedoraId(), childContainer.getFedoraId());\n        containmentIndex.commitTransaction(tx.getId());\n        containmentIndex.removeContainedBy(tx.getId(), container.getFedoraId(), childContainer.getFedoraId());\n\n        when(container.isAcl()).thenReturn(false);\n        when(container.getAcl()).thenReturn(null);\n\n        service.perform(tx, container, USER);\n\n        verify(pSession, times(2)).persist(operationCaptor.capture());\n        final List<PurgeResourceOperation> operations = operationCaptor.getAllValues();\n        assertEquals(2, operations.size());\n\n        assertEquals(CHILD_RESOURCE_ID, operations.get(0).getResourceId());\n        assertEquals(RESOURCE_ID, operations.get(1).getResourceId());\n\n        assertEquals(0, containmentIndex.getContains(tx.getId(), container).count());\n    }"
    },
    "aSource": {
      "startLine": 138,
      "code": "@Test\n    public void testRecursivePurge() throws Exception {\n        when(container.isAcl()).thenReturn(false);\n        when(container.getAcl()).thenReturn(null);\n        when(childContainer.getFedoraId()).thenReturn(CHILD_RESOURCE_ID);\n        when(childContainer.isAcl()).thenReturn(false);\n        when(childContainer.getAcl()).thenReturn(null);\n\n        when(resourceFactory.getResource(tx, CHILD_RESOURCE_ID)).thenReturn(childContainer);\n        containmentIndex.addContainedBy(tx.getId(), container.getFedoraId(), childContainer.getFedoraId());\n        containmentIndex.commitTransaction(tx.getId());\n        containmentIndex.removeContainedBy(tx.getId(), container.getFedoraId(), childContainer.getFedoraId());\n\n        when(container.isAcl()).thenReturn(false);\n        when(container.getAcl()).thenReturn(null);\n\n        service.perform(tx, container, USER);\n\n        verify(pSession, times(2)).persist(operationCaptor.capture());\n        final List<PurgeResourceOperation> operations = operationCaptor.getAllValues();\n        assertEquals(2, operations.size());\n\n        assertEquals(CHILD_RESOURCE_ID, operations.get(0).getResourceId());\n        assertEquals(RESOURCE_ID, operations.get(1).getResourceId());\n\n        assertEquals(0, containmentIndex.getContains(tx.getId(), RESOURCE_ID).count());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/PurgeResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/PurgeResourceServiceImplTest.java",
    "bCommit": "a22ea83c53",
    "aCommit": "ee9a385ee8",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(0, containmentIndex.getContains(tx.getId(), container).count());",
          "type": "DELETE",
          "lineNo": 163
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(0, containmentIndex.getContains(tx.getId(), RESOURCE_ID).count());",
          "type": "ADD",
          "lineNo": 163
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,long)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,long)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.stream.Stream.count()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.ContainmentIndex.getContains(String,FedoraResource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.ContainmentIndex containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.ContainmentIndex.getContains(String,FedoraResource)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.Transaction.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction tx"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.Transaction.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.Container container"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.stream.Stream.count()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,long)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,long)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.stream.Stream.count()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.ContainmentIndex.getContains(String,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.ContainmentIndex containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.ContainmentIndex.getContains(String,FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.Transaction.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction tx"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.Transaction.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId RESOURCE_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.stream.Stream.count()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "container",
          "childCount": 1
        },
        "dstNode": {
          "label": "RESOURCE_ID",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        163
      ]
    },
    "aCommitTime": 1600292976,
    "ID": "fcrepo/fcrepo:542",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.FedoraResourceImplTest.testTypesRdfSource()",
    "bSource": {
      "startLine": 133,
      "code": "@Test\n    public void testTypesRdfSource() throws Exception {\n        final var subject = createResource(ID);\n        final String exampleType = \"http://example.org/customType\";\n        final Model userModel = createDefaultModel();\n        userModel.add(subject, type, createResource(exampleType));\n        final var userStream = fromModel(subject.asNode(), userModel);\n        when(sessionManager.getReadOnlySession()).thenReturn(psSession);\n        when(psSession.getHeaders(eq(FEDORA_ID),any())).thenReturn(headers);\n        when(headers.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        when(headers.isArchivalGroup()).thenReturn(false);\n        when(psSession.getTriples(eq(FEDORA_ID), any())).thenReturn(userStream);\n\n        final List<URI> expectedTypes = List.of(\n                create(exampleType),\n                create(BASIC_CONTAINER.toString()),\n                create(RESOURCE.toString()),\n                create(VERSIONED_RESOURCE.getURI()),\n                create(VERSIONING_TIMEGATE_TYPE)\n        );\n\n        final var resource = new FedoraResourceImpl(FEDORA_ID, null, sessionManager, resourceFactory);\n        final var resourceTypes = resource.getTypes();\n\n        // Initial lengths are the same\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n        // Only keep the types in the expected list.\n        resourceTypes.retainAll(expectedTypes);\n        // Lengths are still the same.\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n    }"
    },
    "aSource": {
      "startLine": 135,
      "code": "@Test\n    public void testTypesRdfSource() throws Exception {\n        final var subject = createResource(ID);\n        final String exampleType = \"http://example.org/customType\";\n        final Model userModel = createDefaultModel();\n        userModel.add(subject, type, createResource(exampleType));\n        final var userStream = fromModel(subject.asNode(), userModel);\n        when(sessionManager.getReadOnlySession()).thenReturn(psSession);\n        when(psSession.getHeaders(eq(FEDORA_ID),any())).thenReturn(headers);\n        when(headers.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        when(headers.isArchivalGroup()).thenReturn(false);\n        when(psSession.getTriples(eq(FEDORA_ID), any())).thenReturn(userStream);\n\n        final List<URI> expectedTypes = List.of(\n                create(exampleType),\n                create(BASIC_CONTAINER.toString()),\n                create(RESOURCE.toString()),\n                create(FEDORA_RESOURCE.toString()),\n                create(VERSIONED_RESOURCE.getURI()),\n                create(VERSIONING_TIMEGATE_TYPE)\n        );\n\n        final var resource = new FedoraResourceImpl(FEDORA_ID, null, sessionManager, resourceFactory);\n        final var resourceTypes = resource.getTypes();\n\n        // Initial lengths are the same\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n        // Only keep the types in the expected list.\n        resourceTypes.retainAll(expectedTypes);\n        // Lengths are still the same.\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java",
    "bCommit": "114d222ffe",
    "aCommit": "4d8d2b92ea",
    "hunk": {
      "targetChanges": [
        {
          "line": "create(FEDORA_RESOURCE.toString()),",
          "type": "ADD",
          "lineNo": 152
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Resource FEDORA_RESOURCE"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "create",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        160
      ]
    },
    "aCommitTime": 1599772754,
    "ID": "fcrepo/fcrepo:170",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.FedoraResourceImplTest.testTypesNonRdfSource()",
    "bSource": {
      "startLine": 165,
      "code": "@Test\n    public void testTypesNonRdfSource() throws Exception {\n        final var descriptionFedoraId = FEDORA_ID.asDescription();\n        final var subject = createResource(ID);\n        final String exampleType = \"http://example.org/customType\";\n        final Model userModel = createDefaultModel();\n        userModel.add(subject, type, createResource(exampleType));\n        final var userStream = fromModel(subject.asNode(), userModel);\n\n        final var description = new NonRdfSourceDescriptionImpl(descriptionFedoraId, null, sessionManager,\n                resourceFactory);\n\n        when(resourceFactory.getResource((String)any(), eq(descriptionFedoraId))).thenReturn(description);\n        when(sessionManager.getReadOnlySession()).thenReturn(psSession);\n        when(psSession.getHeaders(eq(FEDORA_ID),any())).thenReturn(headers);\n        when(headers.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(headers.isArchivalGroup()).thenReturn(false);\n        when(psSession.getTriples(eq(descriptionFedoraId), any())).thenReturn(userStream);\n\n        final List<URI> expectedTypes = List.of(\n                create(exampleType),\n                create(NON_RDF_SOURCE.toString()),\n                create(RESOURCE.toString()),\n                create(VERSIONED_RESOURCE.getURI()),\n                create(VERSIONING_TIMEGATE_TYPE)\n        );\n\n        final var resource = new BinaryImpl(FEDORA_ID, null, sessionManager, resourceFactory);\n        final var resourceTypes = resource.getTypes();\n\n        // Initial lengths are the same\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n        // Only keep the types in the expected list.\n        resourceTypes.retainAll(expectedTypes);\n        // Lengths are still the same.\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n    }"
    },
    "aSource": {
      "startLine": 168,
      "code": "@Test\n    public void testTypesNonRdfSource() throws Exception {\n        final var descriptionFedoraId = FEDORA_ID.asDescription();\n        final var subject = createResource(ID);\n        final String exampleType = \"http://example.org/customType\";\n        final Model userModel = createDefaultModel();\n        userModel.add(subject, type, createResource(exampleType));\n        final var userStream = fromModel(subject.asNode(), userModel);\n\n        final var description = new NonRdfSourceDescriptionImpl(descriptionFedoraId, null, sessionManager,\n                resourceFactory);\n\n        when(resourceFactory.getResource((String)any(), eq(descriptionFedoraId))).thenReturn(description);\n        when(sessionManager.getReadOnlySession()).thenReturn(psSession);\n        when(psSession.getHeaders(eq(FEDORA_ID),any())).thenReturn(headers);\n        when(headers.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(headers.isArchivalGroup()).thenReturn(false);\n        when(psSession.getTriples(eq(descriptionFedoraId), any())).thenReturn(userStream);\n\n        final List<URI> expectedTypes = List.of(\n                create(exampleType),\n                create(NON_RDF_SOURCE.toString()),\n                create(RESOURCE.toString()),\n                create(FEDORA_RESOURCE.toString()),\n                create(FEDORA_BINARY.toString()),\n                create(VERSIONED_RESOURCE.getURI()),\n                create(VERSIONING_TIMEGATE_TYPE)\n        );\n\n        final var resource = new BinaryImpl(FEDORA_ID, null, sessionManager, resourceFactory);\n        final var resourceTypes = resource.getTypes();\n\n        // Initial lengths are the same\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n        // Only keep the types in the expected list.\n        resourceTypes.retainAll(expectedTypes);\n        // Lengths are still the same.\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java",
    "bCommit": "114d222ffe",
    "aCommit": "4d8d2b92ea",
    "hunk": {
      "targetChanges": [
        {
          "line": "create(FEDORA_RESOURCE.toString()),",
          "type": "ADD",
          "lineNo": 191
        },
        {
          "line": "create(FEDORA_BINARY.toString()),",
          "type": "ADD",
          "lineNo": 192
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Resource FEDORA_RESOURCE"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        },
        {
          "type": "CtInvocation",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Resource FEDORA_BINARY"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "create",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "create",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        199
      ]
    },
    "aCommitTime": 1599772754,
    "ID": "fcrepo/fcrepo:171",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.FedoraResourceImplTest.testTypesNonRdfSource()",
    "bSource": {
      "startLine": 165,
      "code": "@Test\n    public void testTypesNonRdfSource() throws Exception {\n        final var descriptionFedoraId = FEDORA_ID.asDescription();\n        final var subject = createResource(ID);\n        final String exampleType = \"http://example.org/customType\";\n        final Model userModel = createDefaultModel();\n        userModel.add(subject, type, createResource(exampleType));\n        final var userStream = fromModel(subject.asNode(), userModel);\n\n        final var description = new NonRdfSourceDescriptionImpl(descriptionFedoraId, null, sessionManager,\n                resourceFactory);\n\n        when(resourceFactory.getResource(any(), eq(descriptionFedoraId))).thenReturn(description);\n        when(sessionManager.getReadOnlySession()).thenReturn(psSession);\n        when(psSession.getHeaders(eq(FEDORA_ID),any())).thenReturn(headers);\n        when(headers.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(headers.isArchivalGroup()).thenReturn(false);\n        when(psSession.getTriples(eq(descriptionFedoraId), any())).thenReturn(userStream);\n\n        final List<URI> expectedTypes = List.of(\n                create(exampleType),\n                create(NON_RDF_SOURCE.toString()),\n                create(RESOURCE.toString()),\n                create(VERSIONED_RESOURCE.getURI()),\n                create(VERSIONING_TIMEGATE_TYPE)\n        );\n\n        final var resource = new BinaryImpl(FEDORA_ID, null, sessionManager, resourceFactory);\n        final var resourceTypes = resource.getTypes();\n\n        // Initial lengths are the same\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n        // Only keep the types in the expected list.\n        resourceTypes.retainAll(expectedTypes);\n        // Lengths are still the same.\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n    }"
    },
    "aSource": {
      "startLine": 165,
      "code": "@Test\n    public void testTypesNonRdfSource() throws Exception {\n        final var descriptionFedoraId = FEDORA_ID.asDescription();\n        final var subject = createResource(ID);\n        final String exampleType = \"http://example.org/customType\";\n        final Model userModel = createDefaultModel();\n        userModel.add(subject, type, createResource(exampleType));\n        final var userStream = fromModel(subject.asNode(), userModel);\n\n        final var description = new NonRdfSourceDescriptionImpl(descriptionFedoraId, null, sessionManager,\n                resourceFactory);\n\n        when(resourceFactory.getResource((String)any(), eq(descriptionFedoraId))).thenReturn(description);\n        when(sessionManager.getReadOnlySession()).thenReturn(psSession);\n        when(psSession.getHeaders(eq(FEDORA_ID),any())).thenReturn(headers);\n        when(headers.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(headers.isArchivalGroup()).thenReturn(false);\n        when(psSession.getTriples(eq(descriptionFedoraId), any())).thenReturn(userStream);\n\n        final List<URI> expectedTypes = List.of(\n                create(exampleType),\n                create(NON_RDF_SOURCE.toString()),\n                create(RESOURCE.toString()),\n                create(VERSIONED_RESOURCE.getURI()),\n                create(VERSIONING_TIMEGATE_TYPE)\n        );\n\n        final var resource = new BinaryImpl(FEDORA_ID, null, sessionManager, resourceFactory);\n        final var resourceTypes = resource.getTypes();\n\n        // Initial lengths are the same\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n        // Only keep the types in the expected list.\n        resourceTypes.retainAll(expectedTypes);\n        // Lengths are still the same.\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java",
    "bCommit": "0c29c4421e",
    "aCommit": "210738b8aa",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(resourceFactory.getResource(any(), eq(descriptionFedoraId))).thenReturn(description);",
          "type": "DELETE",
          "lineNo": 177
        }
      ],
      "targetChanges": [
        {
          "line": "when(resourceFactory.getResource((String)any(), eq(descriptionFedoraId))).thenReturn(description);",
          "type": "ADD",
          "lineNo": 177
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.impl.models.NonRdfSourceDescriptionImpl)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.ResourceFactory.getResource(Transaction,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.ResourceFactory resourceFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.ResourceFactory.getResource(Transaction,FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descriptionFedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.impl.models.NonRdfSourceDescriptionImpl)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.models.NonRdfSourceDescriptionImpl description"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.impl.models.NonRdfSourceDescriptionImpl)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.ResourceFactory.getResource(String,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.ResourceFactory resourceFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.ResourceFactory.getResource(String,FedoraId)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.identifiers.FedoraId)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descriptionFedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.impl.models.NonRdfSourceDescriptionImpl)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.models.NonRdfSourceDescriptionImpl description"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "TYPE_CAST",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "java.lang.String",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        177
      ]
    },
    "aCommitTime": 1598296605,
    "ID": "fcrepo/fcrepo:73",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.buildDeleteEventFromDeleteOperation()",
    "bSource": {
      "startLine": 94,
      "code": "@Test\n    public void buildDeleteEventFromDeleteOperation() {\n        final var operation = new DeleteResourceOperationFactoryImpl().deleteBuilder(FEDORA_ID.getResourceId())\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_DELETION);\n    }"
    },
    "aSource": {
      "startLine": 94,
      "code": "@Test\n    public void buildDeleteEventFromDeleteOperation() {\n        final var operation = new DeleteResourceOperationFactoryImpl().deleteBuilder(FEDORA_ID)\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_DELETION);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final var operation = new DeleteResourceOperationFactoryImpl().deleteBuilder(FEDORA_ID.getResourceId())",
          "type": "DELETE",
          "lineNo": 96
        }
      ],
      "targetChanges": [
        {
          "line": "final var operation = new DeleteResourceOperationFactoryImpl().deleteBuilder(FEDORA_ID)",
          "type": "ADD",
          "lineNo": 96
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation operation"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperationBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.operations.AbstractResourceOperationBuilder.userPrincipal(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.operations.DeleteResourceOperationFactoryImpl.deleteBuilder(String)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.operations.DeleteResourceOperationFactoryImpl.DeleteResourceOperationFactoryImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.operations.DeleteResourceOperationFactoryImpl"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.DeleteResourceOperationFactoryImpl.deleteBuilder(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation operation"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperationBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.operations.AbstractResourceOperationBuilder.userPrincipal(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.operations.DeleteResourceOperationFactoryImpl.deleteBuilder(FedoraId)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.operations.DeleteResourceOperationFactoryImpl.DeleteResourceOperationFactoryImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.operations.DeleteResourceOperationFactoryImpl"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.DeleteResourceOperationFactoryImpl.deleteBuilder(FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getResourceId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        },
        "dstNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        96
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:550",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.populateOtherEventFields()",
    "bSource": {
      "startLine": 162,
      "code": "@Test\n    public void populateOtherEventFields() {\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .updateInternalBinaryBuilder(FEDORA_ID.getResourceId(), new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(USER)\n                .build();\n\n        final var baseUrl = \"http://localhost/rest\";\n        final var userAgent = \"user-agent\";\n        final var resourceTypes = Set.of(\"resource-type\");\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(baseUrl)\n                .withUserAgent(userAgent)\n                .withResourceTypes(resourceTypes)\n                .build();\n\n        assertEquals(baseUrl, event.getBaseUrl());\n        assertEquals(userAgent, event.getUserAgent());\n        assertEquals(resourceTypes, event.getResourceTypes());\n    }"
    },
    "aSource": {
      "startLine": 162,
      "code": "@Test\n    public void populateOtherEventFields() {\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .updateInternalBinaryBuilder(FEDORA_ID, new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(USER)\n                .build();\n\n        final var baseUrl = \"http://localhost/rest\";\n        final var userAgent = \"user-agent\";\n        final var resourceTypes = Set.of(\"resource-type\");\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(baseUrl)\n                .withUserAgent(userAgent)\n                .withResourceTypes(resourceTypes)\n                .build();\n\n        assertEquals(baseUrl, event.getBaseUrl());\n        assertEquals(userAgent, event.getUserAgent());\n        assertEquals(resourceTypes, event.getResourceTypes());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".updateInternalBinaryBuilder(FEDORA_ID.getResourceId(), new ByteArrayInputStream(new byte[]{}))",
          "type": "DELETE",
          "lineNo": 165
        }
      ],
      "targetChanges": [
        {
          "line": ".updateInternalBinaryBuilder(FEDORA_ID, new ByteArrayInputStream(new byte[]{}))",
          "type": "ADD",
          "lineNo": 165
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.NonRdfSourceOperationFactoryImpl.updateInternalBinaryBuilder(String,InputStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtNewArray",
          "value": "byte[]"
        },
        {
          "type": "CtTypeReference",
          "value": "byte"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.NonRdfSourceOperationFactoryImpl.updateInternalBinaryBuilder(FedoraId,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtNewArray",
          "value": "byte[]"
        },
        {
          "type": "CtTypeReference",
          "value": "byte"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getResourceId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        },
        "dstNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        165
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:551",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.buildUpdateEventFromUpdateNonRdfOperation()",
    "bSource": {
      "startLine": 120,
      "code": "@Test\n    public void buildUpdateEventFromUpdateNonRdfOperation() {\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .updateInternalBinaryBuilder(FEDORA_ID.getResourceId(), new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_MODIFICATION);\n    }"
    },
    "aSource": {
      "startLine": 120,
      "code": "@Test\n    public void buildUpdateEventFromUpdateNonRdfOperation() {\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .updateInternalBinaryBuilder(FEDORA_ID, new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_MODIFICATION);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".updateInternalBinaryBuilder(FEDORA_ID.getResourceId(), new ByteArrayInputStream(new byte[]{}))",
          "type": "DELETE",
          "lineNo": 123
        }
      ],
      "targetChanges": [
        {
          "line": ".updateInternalBinaryBuilder(FEDORA_ID, new ByteArrayInputStream(new byte[]{}))",
          "type": "ADD",
          "lineNo": 123
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.NonRdfSourceOperationFactoryImpl.updateInternalBinaryBuilder(String,InputStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtNewArray",
          "value": "byte[]"
        },
        {
          "type": "CtTypeReference",
          "value": "byte"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.NonRdfSourceOperationFactoryImpl.updateInternalBinaryBuilder(FedoraId,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtNewArray",
          "value": "byte[]"
        },
        {
          "type": "CtTypeReference",
          "value": "byte"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getResourceId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        },
        "dstNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        123
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:552",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.buildCreateEventFromCreateRdfOperation()",
    "bSource": {
      "startLine": 46,
      "code": "@Test\n    public void buildCreateEventFromCreateRdfOperation() {\n        final var operation = new RdfSourceOperationFactoryImpl()\n                .createBuilder(FEDORA_ID.getResourceId(), RDF_SOURCE.toString())\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_CREATION);\n    }"
    },
    "aSource": {
      "startLine": 46,
      "code": "@Test\n    public void buildCreateEventFromCreateRdfOperation() {\n        final var operation = new RdfSourceOperationFactoryImpl()\n                .createBuilder(FEDORA_ID, RDF_SOURCE.toString())\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_CREATION);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".createBuilder(FEDORA_ID.getResourceId(), RDF_SOURCE.toString())",
          "type": "DELETE",
          "lineNo": 49
        }
      ],
      "targetChanges": [
        {
          "line": ".createBuilder(FEDORA_ID, RDF_SOURCE.toString())",
          "type": "ADD",
          "lineNo": 49
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImpl.createBuilder(String,String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Resource RDF_SOURCE"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImpl.createBuilder(FedoraId,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Resource RDF_SOURCE"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getResourceId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        },
        "dstNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        49
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:553",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.buildCreateEventFromVersionOperation()",
    "bSource": {
      "startLine": 81,
      "code": "@Test\n    public void buildCreateEventFromVersionOperation() {\n        final var operation = new VersionResourceOperationFactoryImpl().createBuilder(FEDORA_ID.getResourceId())\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_MODIFICATION);\n    }"
    },
    "aSource": {
      "startLine": 81,
      "code": "@Test\n    public void buildCreateEventFromVersionOperation() {\n        final var operation = new VersionResourceOperationFactoryImpl().createBuilder(FEDORA_ID)\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_MODIFICATION);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final var operation = new VersionResourceOperationFactoryImpl().createBuilder(FEDORA_ID.getResourceId())",
          "type": "DELETE",
          "lineNo": 83
        }
      ],
      "targetChanges": [
        {
          "line": "final var operation = new VersionResourceOperationFactoryImpl().createBuilder(FEDORA_ID)",
          "type": "ADD",
          "lineNo": 83
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation operation"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperationBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperationBuilder.userPrincipal(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.operations.VersionResourceOperationFactoryImpl.createBuilder(String)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.operations.VersionResourceOperationFactoryImpl.VersionResourceOperationFactoryImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.operations.VersionResourceOperationFactoryImpl"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.VersionResourceOperationFactoryImpl.createBuilder(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation operation"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperation"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperationBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.ResourceOperationBuilder.userPrincipal(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.operations.VersionResourceOperationFactoryImpl.createBuilder(FedoraId)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.operations.VersionResourceOperationFactoryImpl.VersionResourceOperationFactoryImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.operations.VersionResourceOperationFactoryImpl"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.VersionResourceOperationFactoryImpl.createBuilder(FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getResourceId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        },
        "dstNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        83
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:554",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.buildCreateEventFromCreateNonRdfOperation()",
    "bSource": {
      "startLine": 60,
      "code": "@Test\n    public void buildCreateEventFromCreateNonRdfOperation() {\n        final var fedoraId = FedoraId.create(\"/test/ab/c\");\n        final var user = \"user2\";\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .createInternalBinaryBuilder(fedoraId.getResourceId(), new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(user)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(fedoraId, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertEquals(fedoraId, event.getFedoraId());\n        assertEquals(fedoraId.getFullIdPath(), event.getPath());\n        assertEquals(user, event.getUserID());\n        assertThat(event.getTypes(), contains(EventType.RESOURCE_CREATION));\n        assertNotNull(event.getEventID());\n        assertNotNull(event.getDate());\n    }"
    },
    "aSource": {
      "startLine": 60,
      "code": "@Test\n    public void buildCreateEventFromCreateNonRdfOperation() {\n        final var fedoraId = FedoraId.create(\"/test/ab/c\");\n        final var user = \"user2\";\n        final var operation = new NonRdfSourceOperationFactoryImpl()\n                .createInternalBinaryBuilder(fedoraId, new ByteArrayInputStream(new byte[]{}))\n                .userPrincipal(user)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(fedoraId, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertEquals(fedoraId, event.getFedoraId());\n        assertEquals(fedoraId.getFullIdPath(), event.getPath());\n        assertEquals(user, event.getUserID());\n        assertThat(event.getTypes(), contains(EventType.RESOURCE_CREATION));\n        assertNotNull(event.getEventID());\n        assertNotNull(event.getDate());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".createInternalBinaryBuilder(fedoraId.getResourceId(), new ByteArrayInputStream(new byte[]{}))",
          "type": "DELETE",
          "lineNo": 65
        }
      ],
      "targetChanges": [
        {
          "line": ".createInternalBinaryBuilder(fedoraId, new ByteArrayInputStream(new byte[]{}))",
          "type": "ADD",
          "lineNo": 65
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.NonRdfSourceOperationFactoryImpl.createInternalBinaryBuilder(String,InputStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtNewArray",
          "value": "byte[]"
        },
        {
          "type": "CtTypeReference",
          "value": "byte"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.NonRdfSourceOperationFactoryImpl.createInternalBinaryBuilder(FedoraId,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtNewArray",
          "value": "byte[]"
        },
        {
          "type": "CtTypeReference",
          "value": "byte"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getResourceId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "fedoraId",
          "childCount": 0
        },
        "dstNode": {
          "label": "fedoraId",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        65
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:555",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.ResourceOperationEventBuilderTest.buildUpdateEventFromUpdateRdfOperation()",
    "bSource": {
      "startLine": 107,
      "code": "@Test\n    public void buildUpdateEventFromUpdateRdfOperation() {\n        final var operation = new RdfSourceOperationFactoryImpl().updateBuilder(FEDORA_ID.getResourceId())\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_MODIFICATION);\n    }"
    },
    "aSource": {
      "startLine": 107,
      "code": "@Test\n    public void buildUpdateEventFromUpdateRdfOperation() {\n        final var operation = new RdfSourceOperationFactoryImpl().updateBuilder(FEDORA_ID)\n                .userPrincipal(USER)\n                .build();\n\n        final var event = ResourceOperationEventBuilder.fromResourceOperation(FEDORA_ID, operation)\n                .withBaseUrl(BASE_URL)\n                .build();\n\n        assertDefaultEvent(event, EventType.RESOURCE_MODIFICATION);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/ResourceOperationEventBuilderTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final var operation = new RdfSourceOperationFactoryImpl().updateBuilder(FEDORA_ID.getResourceId())",
          "type": "DELETE",
          "lineNo": 109
        }
      ],
      "targetChanges": [
        {
          "line": "final var operation = new RdfSourceOperationFactoryImpl().updateBuilder(FEDORA_ID)",
          "type": "ADD",
          "lineNo": 109
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperation operation"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperation"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationBuilder.userPrincipal(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImpl.updateBuilder(String)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImpl.RdfSourceOperationFactoryImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImpl"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImpl.updateBuilder(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperation operation"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperation"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationBuilder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationBuilder.userPrincipal(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImpl.updateBuilder(FedoraId)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImpl.RdfSourceOperationFactoryImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImpl"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImpl.updateBuilder(FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getResourceId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        },
        "dstNode": {
          "label": "FEDORA_ID",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        109
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:556",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.VersionServiceImplTest.createPersistOperation()",
    "bSource": {
      "startLine": 71,
      "code": "@Test\n    public void createPersistOperation() throws PersistentStorageException {\n        final var fedoraId = FedoraId.create(\"info:fedora/test\");\n        final var user = \"me\";\n\n        service.createVersion(transaction, fedoraId, user);\n\n        final var captor = ArgumentCaptor.forClass(ResourceOperation.class);\n        verify(session).persist(captor.capture());\n        final var captured = captor.getValue();\n\n        assertEquals(fedoraId.getResourceId(), captured.getResourceId());\n        assertEquals(user, captured.getUserPrincipal());\n    }"
    },
    "aSource": {
      "startLine": 71,
      "code": "@Test\n    public void createPersistOperation() throws PersistentStorageException {\n        final var fedoraId = FedoraId.create(\"info:fedora/test\");\n        final var user = \"me\";\n\n        service.createVersion(transaction, fedoraId, user);\n\n        final var captor = ArgumentCaptor.forClass(ResourceOperation.class);\n        verify(session).persist(captor.capture());\n        final var captured = captor.getValue();\n\n        assertEquals(fedoraId, captured.getResourceId());\n        assertEquals(user, captured.getUserPrincipal());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/VersionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/VersionServiceImplTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(fedoraId.getResourceId(), captured.getResourceId());",
          "type": "DELETE",
          "lineNo": 82
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(fedoraId, captured.getResourceId());",
          "type": "ADD",
          "lineNo": 82
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getResourceId()"
        },
        {
          "type": "CtInvocation",
          "value": "getResourceId()"
        },
        {
          "type": "CtVariableRead",
          "value": "var captured"
        },
        {
          "type": "CtExecutableReference",
          "value": "getResourceId()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.kernel.api.identifiers.FedoraId,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.kernel.api.identifiers.FedoraId,<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "getResourceId()"
        },
        {
          "type": "CtVariableRead",
          "value": "var captured"
        },
        {
          "type": "CtExecutableReference",
          "value": "getResourceId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getResourceId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "fedoraId",
          "childCount": 0
        },
        "dstNode": {
          "label": "fedoraId",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        82
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:557",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testParentIsBinary()",
    "bSource": {
      "startLine": 220,
      "code": "/**\n     * Test creating a NonRDFSource with a NonRDFSource parent.\n     */\n    @Test(expected = InteractionModelViolationException.class)\n    public void testParentIsBinary() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(TX_ID, rootId, fedoraId);\n        when(resourceHeaders.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(psSession.getHeaders(fedoraId.getFullId(), null)).thenReturn(resourceHeaders);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, childId, null, FILENAME, CONTENT_SIZE, null,\n                DIGESTS, null, null);\n    }"
    },
    "aSource": {
      "startLine": 220,
      "code": "/**\n     * Test creating a NonRDFSource with a NonRDFSource parent.\n     */\n    @Test(expected = InteractionModelViolationException.class)\n    public void testParentIsBinary() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(TX_ID, rootId, fedoraId);\n        when(resourceHeaders.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, childId, null, FILENAME, CONTENT_SIZE, null,\n                DIGESTS, null, null);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(psSession.getHeaders(fedoraId.getFullId(), null)).thenReturn(resourceHeaders);",
          "type": "DELETE",
          "lineNo": 229
        }
      ],
      "targetChanges": [
        {
          "line": "when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);",
          "type": "ADD",
          "lineNo": 229
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(String,Instant)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession psSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(String,Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.ResourceHeaders resourceHeaders"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(FedoraId,Instant)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession psSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(FedoraId,Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.ResourceHeaders resourceHeaders"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getFullId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "fedoraId",
          "childCount": 0
        },
        "dstNode": {
          "label": "fedoraId",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        229
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:558",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testParentIsBinaryRdf()",
    "bSource": {
      "startLine": 207,
      "code": "/**\n     * Test creating a RDFSource with a NonRDFSource parent.\n     */\n    @Test(expected = InteractionModelViolationException.class)\n    public void testParentIsBinaryRdf() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(TX_ID, rootId, fedoraId);\n        when(resourceHeaders.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(psSession.getHeaders(fedoraId.getFullId(), null)).thenReturn(resourceHeaders);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, childId, null, model);\n    }"
    },
    "aSource": {
      "startLine": 207,
      "code": "/**\n     * Test creating a RDFSource with a NonRDFSource parent.\n     */\n    @Test(expected = InteractionModelViolationException.class)\n    public void testParentIsBinaryRdf() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(TX_ID, rootId, fedoraId);\n        when(resourceHeaders.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, childId, null, model);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(psSession.getHeaders(fedoraId.getFullId(), null)).thenReturn(resourceHeaders);",
          "type": "DELETE",
          "lineNo": 216
        }
      ],
      "targetChanges": [
        {
          "line": "when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);",
          "type": "ADD",
          "lineNo": 216
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(String,Instant)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession psSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(String,Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.ResourceHeaders resourceHeaders"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(FedoraId,Instant)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession psSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(FedoraId,Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.ResourceHeaders resourceHeaders"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getFullId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "fedoraId",
          "childCount": 0
        },
        "dstNode": {
          "label": "fedoraId",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        216
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:559",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testNoParentRdf()",
    "bSource": {
      "startLine": 195,
      "code": "/**\n     * Test trying to add a child to a non-existant parent.\n     * We recursive to repository root for a parent, so this is now just creating a ghost node?\n     */\n    @Test\n    public void testNoParentRdf() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        when(psSession.getHeaders(fedoraId.getFullId(), null)).thenThrow(PersistentItemNotFoundException.class);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, childId, null, model);\n    }"
    },
    "aSource": {
      "startLine": 195,
      "code": "/**\n     * Test trying to add a child to a non-existant parent.\n     * We recursive to repository root for a parent, so this is now just creating a ghost node?\n     */\n    @Test\n    public void testNoParentRdf() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        when(psSession.getHeaders(fedoraId, null)).thenThrow(PersistentItemNotFoundException.class);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, childId, null, model);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(psSession.getHeaders(fedoraId.getFullId(), null)).thenThrow(PersistentItemNotFoundException.class);",
          "type": "DELETE",
          "lineNo": 203
        }
      ],
      "targetChanges": [
        {
          "line": "when(psSession.getHeaders(fedoraId, null)).thenThrow(PersistentItemNotFoundException.class);",
          "type": "ADD",
          "lineNo": 203
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenThrow(java.lang.Class)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(String,Instant)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession psSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(String,Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenThrow(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenThrow(java.lang.Class)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(FedoraId,Instant)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession psSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(FedoraId,Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenThrow(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getFullId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "fedoraId",
          "childCount": 0
        },
        "dstNode": {
          "label": "fedoraId",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        203
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:560",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testParentIsExternal()",
    "bSource": {
      "startLine": 234,
      "code": "/**\n     * Test creating an external NonRDFSource with a NonRDFSource parent.\n     * TODO: put/post to a binary parent is tested above, might be a duplicate.\n     */\n    @Test(expected = InteractionModelViolationException.class)\n    public void testParentIsExternal() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(TX_ID, rootId, fedoraId);\n        when(resourceHeaders.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(psSession.getHeaders(fedoraId.getFullId(), null)).thenReturn(resourceHeaders);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, childId, null, FILENAME, CONTENT_SIZE, null,\n                DIGESTS, null, extContent);\n    }"
    },
    "aSource": {
      "startLine": 234,
      "code": "/**\n     * Test creating an external NonRDFSource with a NonRDFSource parent.\n     * TODO: put/post to a binary parent is tested above, might be a duplicate.\n     */\n    @Test(expected = InteractionModelViolationException.class)\n    public void testParentIsExternal() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"child\");\n        containmentIndex.addContainedBy(TX_ID, rootId, fedoraId);\n        when(resourceHeaders.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, childId, null, FILENAME, CONTENT_SIZE, null,\n                DIGESTS, null, extContent);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "c2be862361",
    "aCommit": "f7c9ede085",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(psSession.getHeaders(fedoraId.getFullId(), null)).thenReturn(resourceHeaders);",
          "type": "DELETE",
          "lineNo": 244
        }
      ],
      "targetChanges": [
        {
          "line": "when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);",
          "type": "ADD",
          "lineNo": 244
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(String,Instant)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession psSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(String,Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.ResourceHeaders resourceHeaders"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(FedoraId,Instant)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession psSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.persistence.api.PersistentStorageSession.getHeaders(FedoraId,Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.api.models.ResourceHeaders)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.ResourceHeaders resourceHeaders"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getFullId",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "fedoraId",
          "childCount": 0
        },
        "dstNode": {
          "label": "fedoraId",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        244
      ]
    },
    "aCommitTime": 1595530792,
    "ID": "fcrepo/fcrepo:561",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.exceptionhandlers.TombstoneExceptionMapperTest.testExceptionWithUri()",
    "bSource": {
      "startLine": 80,
      "code": "@Test\n    public void testExceptionWithUri() {\n        final String tombstone = idConverter.toExternalId(fedoraId.resolve(FCR_TOMBSTONE).getFullId());\n        final Response response = testObj.toResponse(new TombstoneException(mockResource, tombstone));\n        assertEquals(GONE.getStatusCode(), response.getStatus());\n        assertTombstone(response, fedoraId.getFullIdPath(), tombstone);\n    }"
    },
    "aSource": {
      "startLine": 76,
      "code": "@Test\n    public void testExceptionWithUri() {\n        final String tombstone = idConverter.toExternalId(fedoraId.asTombstone().getFullId());\n        final Response response = testObj.toResponse(new TombstoneException(mockResource, tombstone));\n        assertEquals(GONE.getStatusCode(), response.getStatus());\n        assertTombstone(response, fedoraId.getFullIdPath(), tombstone);\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/exceptionhandlers/TombstoneExceptionMapperTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/exceptionhandlers/TombstoneExceptionMapperTest.java",
    "bCommit": "4adbb1d664",
    "aCommit": "97f2a4c861",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String tombstone = idConverter.toExternalId(fedoraId.resolve(FCR_TOMBSTONE).getFullId());",
          "type": "DELETE",
          "lineNo": 82
        }
      ],
      "targetChanges": [
        {
          "line": "final String tombstone = idConverter.toExternalId(fedoraId.asTombstone().getFullId());",
          "type": "ADD",
          "lineNo": 78
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String tombstone"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter.toExternalId(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter idConverter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter.toExternalId(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FCR_TOMBSTONE"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String tombstone"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter.toExternalId(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter idConverter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter.toExternalId(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asTombstone()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asTombstone()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.getFullId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "resolve",
          "childCount": 2
        },
        "dstNode": {
          "label": "asTombstone",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        78
      ]
    },
    "aCommitTime": 1594845372,
    "ID": "fcrepo/fcrepo:325",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceFactoryImplTest.doesResourceExist_Exists_Description_WithoutSession()",
    "bSource": {
      "startLine": 370,
      "code": "@Test\n    public void doesResourceExist_Exists_Description_WithoutSession() {\n        containmentIndex.addContainedBy(mockTx.getId(), rootId, fedoraId);\n        containmentIndex.commitTransaction(mockTx.getId());\n        final FedoraId descId = fedoraId.resolve(\"/\" + FCR_METADATA);\n        final boolean answer = factory.doesResourceExist(null, descId);\n        assertTrue(answer);\n    }"
    },
    "aSource": {
      "startLine": 367,
      "code": "@Test\n    public void doesResourceExist_Exists_Description_WithoutSession() {\n        containmentIndex.addContainedBy(mockTx.getId(), rootId, fedoraId);\n        containmentIndex.commitTransaction(mockTx.getId());\n        final FedoraId descId = fedoraId.asDescription();\n        final boolean answer = factory.doesResourceExist(null, descId);\n        assertTrue(answer);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java",
    "bCommit": "4adbb1d664",
    "aCommit": "97f2a4c861",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraId descId = fedoraId.resolve(\"/\" + FCR_METADATA);",
          "type": "DELETE",
          "lineNo": 374
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraId descId = fedoraId.asDescription();",
          "type": "ADD",
          "lineNo": 371
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FCR_METADATA"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asDescription()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asDescription()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "resolve",
          "childCount": 2
        },
        "dstNode": {
          "label": "asDescription",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        371
      ]
    },
    "aCommitTime": 1594845372,
    "ID": "fcrepo/fcrepo:326",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceFactoryImplTest.doesResourceExist_DoesntExists_Description_WithoutSession()",
    "bSource": {
      "startLine": 398,
      "code": "@Test\n    public void doesResourceExist_DoesntExists_Description_WithoutSession() {\n        final FedoraId descId = fedoraId.resolve(\"/\" + FCR_METADATA);\n        final boolean answer = factory.doesResourceExist(null, descId);\n        assertFalse(answer);\n    }"
    },
    "aSource": {
      "startLine": 395,
      "code": "@Test\n    public void doesResourceExist_DoesntExists_Description_WithoutSession() {\n        final FedoraId descId = fedoraId.asDescription();\n        final boolean answer = factory.doesResourceExist(null, descId);\n        assertFalse(answer);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java",
    "bCommit": "4adbb1d664",
    "aCommit": "97f2a4c861",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraId descId = fedoraId.resolve(\"/\" + FCR_METADATA);",
          "type": "DELETE",
          "lineNo": 400
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraId descId = fedoraId.asDescription();",
          "type": "ADD",
          "lineNo": 397
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FCR_METADATA"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asDescription()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asDescription()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "resolve",
          "childCount": 2
        },
        "dstNode": {
          "label": "asDescription",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        397
      ]
    },
    "aCommitTime": 1594845372,
    "ID": "fcrepo/fcrepo:327",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceFactoryImplTest.doesResourceExist_DoesntExists_Description_WithSession()",
    "bSource": {
      "startLine": 385,
      "code": "@Test\n    public void doesResourceExist_DoesntExists_Description_WithSession() {\n        final FedoraId descId = fedoraId.resolve(\"/\" + FCR_METADATA);\n        final boolean answer = factory.doesResourceExist(mockTx, descId);\n        assertFalse(answer);\n    }"
    },
    "aSource": {
      "startLine": 382,
      "code": "@Test\n    public void doesResourceExist_DoesntExists_Description_WithSession() {\n        final FedoraId descId = fedoraId.asDescription();\n        final boolean answer = factory.doesResourceExist(mockTx, descId);\n        assertFalse(answer);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java",
    "bCommit": "4adbb1d664",
    "aCommit": "97f2a4c861",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraId descId = fedoraId.resolve(\"/\" + FCR_METADATA);",
          "type": "DELETE",
          "lineNo": 387
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraId descId = fedoraId.asDescription();",
          "type": "ADD",
          "lineNo": 384
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FCR_METADATA"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asDescription()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asDescription()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "resolve",
          "childCount": 2
        },
        "dstNode": {
          "label": "asDescription",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        384
      ]
    },
    "aCommitTime": 1594845372,
    "ID": "fcrepo/fcrepo:328",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.ResourceFactoryImplTest.doesResourceExist_Exists_Description_WithSession()",
    "bSource": {
      "startLine": 352,
      "code": "@Test\n    public void doesResourceExist_Exists_Description_WithSession() {\n        containmentIndex.addContainedBy(mockTx.getId(), rootId, fedoraId);\n        final FedoraId descId = fedoraId.resolve(\"/\" + FCR_METADATA);\n        final boolean answerIn = factory.doesResourceExist(mockTx, descId);\n        assertTrue(answerIn);\n        final boolean answerOut = factory.doesResourceExist(null, descId);\n        assertFalse(answerOut);\n    }"
    },
    "aSource": {
      "startLine": 349,
      "code": "@Test\n    public void doesResourceExist_Exists_Description_WithSession() {\n        containmentIndex.addContainedBy(mockTx.getId(), rootId, fedoraId);\n        final FedoraId descId = fedoraId.asDescription();\n        final boolean answerIn = factory.doesResourceExist(mockTx, descId);\n        assertTrue(answerIn);\n        final boolean answerOut = factory.doesResourceExist(null, descId);\n        assertFalse(answerOut);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java",
    "bCommit": "4adbb1d664",
    "aCommit": "97f2a4c861",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraId descId = fedoraId.resolve(\"/\" + FCR_METADATA);",
          "type": "DELETE",
          "lineNo": 355
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraId descId = fedoraId.asDescription();",
          "type": "ADD",
          "lineNo": 352
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FCR_METADATA"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descId"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asDescription()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asDescription()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "resolve",
          "childCount": 2
        },
        "dstNode": {
          "label": "asDescription",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        352
      ]
    },
    "aCommitTime": 1594845372,
    "ID": "fcrepo/fcrepo:329",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.models.FedoraResourceImplTest.testTypesNonRdfSource()",
    "bSource": {
      "startLine": 164,
      "code": "@Test\n    public void testTypesNonRdfSource() throws Exception {\n        final var descriptionFedoraId = FEDORA_ID.resolve(FCR_METADATA);\n        final var subject = createResource(ID);\n        final String exampleType = \"http://example.org/customType\";\n        final Model userModel = createDefaultModel();\n        userModel.add(subject, type, createResource(exampleType));\n        final var userStream = fromModel(subject.asNode(), userModel);\n\n        final var description = new NonRdfSourceDescriptionImpl(descriptionFedoraId, null, sessionManager,\n                resourceFactory);\n\n        when(resourceFactory.getResource(any(), eq(descriptionFedoraId))).thenReturn(description);\n        when(sessionManager.getReadOnlySession()).thenReturn(psSession);\n        when(psSession.getHeaders(eq(FEDORA_ID.getResourceId()),any())).thenReturn(headers);\n        when(headers.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(headers.isArchivalGroup()).thenReturn(false);\n        when(psSession.getTriples(eq(descriptionFedoraId.getResourceId()), any())).thenReturn(userStream);\n\n        final List<URI> expectedTypes = List.of(\n                create(exampleType),\n                create(NON_RDF_SOURCE.toString()),\n                create(RESOURCE.toString()),\n                create(VERSIONED_RESOURCE.getURI()),\n                create(VERSIONING_TIMEGATE_TYPE)\n        );\n\n        final var resource = new BinaryImpl(FEDORA_ID, null, sessionManager, resourceFactory);\n        final var resourceTypes = resource.getTypes();\n\n        // Initial lengths are the same\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n        // Only keep the types in the expected list.\n        resourceTypes.retainAll(expectedTypes);\n        // Lengths are still the same.\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n    }"
    },
    "aSource": {
      "startLine": 162,
      "code": "@Test\n    public void testTypesNonRdfSource() throws Exception {\n        final var descriptionFedoraId = FEDORA_ID.asDescription();\n        final var subject = createResource(ID);\n        final String exampleType = \"http://example.org/customType\";\n        final Model userModel = createDefaultModel();\n        userModel.add(subject, type, createResource(exampleType));\n        final var userStream = fromModel(subject.asNode(), userModel);\n\n        final var description = new NonRdfSourceDescriptionImpl(descriptionFedoraId, null, sessionManager,\n                resourceFactory);\n\n        when(resourceFactory.getResource(any(), eq(descriptionFedoraId))).thenReturn(description);\n        when(sessionManager.getReadOnlySession()).thenReturn(psSession);\n        when(psSession.getHeaders(eq(FEDORA_ID.getResourceId()),any())).thenReturn(headers);\n        when(headers.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(headers.isArchivalGroup()).thenReturn(false);\n        when(psSession.getTriples(eq(descriptionFedoraId.getResourceId()), any())).thenReturn(userStream);\n\n        final List<URI> expectedTypes = List.of(\n                create(exampleType),\n                create(NON_RDF_SOURCE.toString()),\n                create(RESOURCE.toString()),\n                create(VERSIONED_RESOURCE.getURI()),\n                create(VERSIONING_TIMEGATE_TYPE)\n        );\n\n        final var resource = new BinaryImpl(FEDORA_ID, null, sessionManager, resourceFactory);\n        final var resourceTypes = resource.getTypes();\n\n        // Initial lengths are the same\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n        // Only keep the types in the expected list.\n        resourceTypes.retainAll(expectedTypes);\n        // Lengths are still the same.\n        assertEquals(expectedTypes.size(), resourceTypes.size());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java",
    "bCommit": "4adbb1d664",
    "aCommit": "97f2a4c861",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final var descriptionFedoraId = FEDORA_ID.resolve(FCR_METADATA);",
          "type": "DELETE",
          "lineNo": 166
        }
      ],
      "targetChanges": [
        {
          "line": "final var descriptionFedoraId = FEDORA_ID.asDescription();",
          "type": "ADD",
          "lineNo": 164
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descriptionFedoraId"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.resolve(String[])"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FCR_METADATA"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId descriptionFedoraId"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asDescription()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId FEDORA_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.asDescription()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "resolve",
          "childCount": 2
        },
        "dstNode": {
          "label": "asDescription",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        164
      ]
    },
    "aCommitTime": 1594845372,
    "ID": "fcrepo/fcrepo:330",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.PurgeResourceServiceImplTest.testBinaryPurgeWithAcl()",
    "bSource": {
      "startLine": 191,
      "code": "@Test\n    public void testBinaryPurgeWithAcl() throws Exception {\n        when(binary.getFedoraId()).thenReturn(RESOURCE_FEDORA_ID);\n        when(binary.isAcl()).thenReturn(false);\n        when(binary.getDescribedResource()).thenReturn(binaryDesc);\n        when(binaryDesc.getFedoraId()).thenReturn(RESOURCE_DESCRIPTION_FEDORA_ID);\n        when(binary.getAcl()).thenReturn(acl);\n        when(acl.getFedoraId()).thenReturn(RESOURCE_ACL_FEDORA_ID);\n\n        service.perform(tx, binary, USER);\n\n        verify(pSession, times(3)).persist(operationCaptor.capture());\n        final List<PurgeResourceOperation> operations = operationCaptor.getAllValues();\n        assertEquals(3, operations.size());\n\n        assertEquals(RESOURCE_DESCRIPTION_ID, operations.get(0).getResourceId());\n        assertEquals(RESOURCE_ACL_ID, operations.get(1).getResourceId());\n        assertEquals(RESOURCE_ID, operations.get(2).getResourceId());\n    }"
    },
    "aSource": {
      "startLine": 191,
      "code": "@Test\n    public void testBinaryPurgeWithAcl() throws Exception {\n        when(binary.getFedoraId()).thenReturn(RESOURCE_FEDORA_ID);\n        when(binary.isAcl()).thenReturn(false);\n        when(binary.getDescription()).thenReturn(binaryDesc);\n        when(binaryDesc.getFedoraId()).thenReturn(RESOURCE_DESCRIPTION_FEDORA_ID);\n        when(binary.getAcl()).thenReturn(acl);\n        when(acl.getFedoraId()).thenReturn(RESOURCE_ACL_FEDORA_ID);\n\n        service.perform(tx, binary, USER);\n\n        verify(pSession, times(3)).persist(operationCaptor.capture());\n        final List<PurgeResourceOperation> operations = operationCaptor.getAllValues();\n        assertEquals(3, operations.size());\n\n        assertEquals(RESOURCE_DESCRIPTION_ID, operations.get(0).getResourceId());\n        assertEquals(RESOURCE_ACL_ID, operations.get(1).getResourceId());\n        assertEquals(RESOURCE_ID, operations.get(2).getResourceId());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/PurgeResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/PurgeResourceServiceImplTest.java",
    "bCommit": "40c5396015",
    "aCommit": "fe7a7098be",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(binary.getDescribedResource()).thenReturn(binaryDesc);",
          "type": "DELETE",
          "lineNo": 195
        }
      ],
      "targetChanges": [
        {
          "line": "when(binary.getDescription()).thenReturn(binaryDesc);",
          "type": "ADD",
          "lineNo": 195
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.models.NonRdfSourceDescription)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.FedoraResource)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.FedoraResource)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getDescribedResource()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.Binary binary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getDescribedResource()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.api.models.NonRdfSourceDescription)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.NonRdfSourceDescription binaryDesc"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.models.NonRdfSourceDescription)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.FedoraResource)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.FedoraResource)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getDescription()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.Binary binary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getDescription()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.api.models.NonRdfSourceDescription)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.NonRdfSourceDescription binaryDesc"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDescribedResource",
          "childCount": 1
        },
        "dstNode": {
          "label": "getDescription",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        200
      ]
    },
    "aCommitTime": 1594148011,
    "ID": "fcrepo/fcrepo:639",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.DeleteResourceServiceImplTest.testBinaryDeleteWithAcl()",
    "bSource": {
      "startLine": 197,
      "code": "@Test\n    public void testBinaryDeleteWithAcl() throws Exception {\n        when(binary.getFedoraId()).thenReturn(RESOURCE_FEDORA_ID);\n        when(binary.isAcl()).thenReturn(false);\n        when(binary.getDescribedResource()).thenReturn(binaryDesc);\n        when(binaryDesc.getFedoraId()).thenReturn(RESOURCE_DESCRIPTION_FEDORA_ID);\n        when(binary.getAcl()).thenReturn(acl);\n        when(acl.getFedoraId()).thenReturn(RESOURCE_ACL_FEDORA_ID);\n\n        service.perform(tx, binary, USER);\n\n        verify(pSession, times(3)).persist(operationCaptor.capture());\n        final List<DeleteResourceOperation> operations = operationCaptor.getAllValues();\n        assertEquals(3, operations.size());\n\n        assertEquals(RESOURCE_DESCRIPTION_ID, operations.get(0).getResourceId());\n        assertEquals(RESOURCE_ACL_ID, operations.get(1).getResourceId());\n        assertEquals(RESOURCE_ID, operations.get(2).getResourceId());\n    }"
    },
    "aSource": {
      "startLine": 197,
      "code": "@Test\n    public void testBinaryDeleteWithAcl() throws Exception {\n        when(binary.getFedoraId()).thenReturn(RESOURCE_FEDORA_ID);\n        when(binary.isAcl()).thenReturn(false);\n        when(binary.getDescription()).thenReturn(binaryDesc);\n        when(binaryDesc.getFedoraId()).thenReturn(RESOURCE_DESCRIPTION_FEDORA_ID);\n        when(binary.getAcl()).thenReturn(acl);\n        when(acl.getFedoraId()).thenReturn(RESOURCE_ACL_FEDORA_ID);\n\n        service.perform(tx, binary, USER);\n\n        verify(pSession, times(3)).persist(operationCaptor.capture());\n        final List<DeleteResourceOperation> operations = operationCaptor.getAllValues();\n        assertEquals(3, operations.size());\n\n        assertEquals(RESOURCE_DESCRIPTION_ID, operations.get(0).getResourceId());\n        assertEquals(RESOURCE_ACL_ID, operations.get(1).getResourceId());\n        assertEquals(RESOURCE_ID, operations.get(2).getResourceId());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/DeleteResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/DeleteResourceServiceImplTest.java",
    "bCommit": "40c5396015",
    "aCommit": "fe7a7098be",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(binary.getDescribedResource()).thenReturn(binaryDesc);",
          "type": "DELETE",
          "lineNo": 201
        }
      ],
      "targetChanges": [
        {
          "line": "when(binary.getDescription()).thenReturn(binaryDesc);",
          "type": "ADD",
          "lineNo": 201
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.models.NonRdfSourceDescription)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.FedoraResource)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.FedoraResource)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getDescribedResource()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.Binary binary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getDescribedResource()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.api.models.NonRdfSourceDescription)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.NonRdfSourceDescription binaryDesc"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.models.NonRdfSourceDescription)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.models.FedoraResource)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.models.FedoraResource)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getDescription()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.Binary binary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getDescription()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.api.models.NonRdfSourceDescription)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.NonRdfSourceDescription binaryDesc"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDescribedResource",
          "childCount": 1
        },
        "dstNode": {
          "label": "getDescription",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        206
      ]
    },
    "aCommitTime": 1594148011,
    "ID": "fcrepo/fcrepo:640",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testWithBinary()",
    "bSource": {
      "startLine": 341,
      "code": "/**\n     * This test now seems to ensure that the createResourceService will overwrite an existing object\n     * TODO: Review expectations\n     */\n    @Test\n    public void testWithBinary() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"testSlug\");\n        containmentIndex.addContainedBy(null, fedoraId, childId);\n        when(psSession.getHeaders(fedoraId.getFullId(), null)).thenReturn(resourceHeaders);\n        when(psSession.getHeaders(childId.getFullId(), null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, childId,\n                CONTENT_TYPE, FILENAME, CONTENT_SIZE, null, DIGESTS, null, null);\n        cleanupList.add(fedoraId);\n        verify(psSession, times(2)).persist(operationCaptor.capture());\n        final List<ResourceOperation> operations = operationCaptor.getAllValues();\n        final var operation = getOperation(operations, CreateNonRdfSourceOperation.class);\n        final String persistedId = operation.getResourceId();\n        assertNotEquals(fedoraId.getFullId(), persistedId);\n        assertEquals(childId.getFullId(), persistedId);\n        assertTrue(persistedId.startsWith(fedoraId.getFullId()));\n        assertBinaryPropertiesPresent(operation);\n        assertEquals(fedoraId.getFullId(), operation.getParentId());\n\n        final var descOperation = getOperation(operations, CreateRdfSourceOperation.class);\n        assertEquals(persistedId + \"/fcr:metadata\", descOperation.getResourceId());\n        when(fedoraResource.getFedoraId()).thenReturn(fedoraId);\n        assertEquals(1, containmentIndex.getContains(transaction, fedoraResource).count());\n    }"
    },
    "aSource": {
      "startLine": 341,
      "code": "/**\n     * This test now seems to ensure that the createResourceService will overwrite an existing object\n     * TODO: Review expectations\n     */\n    @Test\n    public void testWithBinary() throws Exception {\n        final FedoraId fedoraId = FedoraId.create(UUID.randomUUID().toString());\n        final FedoraId childId = fedoraId.resolve(\"testSlug\");\n        containmentIndex.addContainedBy(TX_ID, fedoraId, childId);\n        containmentIndex.commitTransaction(transaction);\n        when(psSession.getHeaders(fedoraId.getFullId(), null)).thenReturn(resourceHeaders);\n        when(psSession.getHeaders(childId.getFullId(), null)).thenReturn(resourceHeaders);\n        when(resourceHeaders.getInteractionModel()).thenReturn(BASIC_CONTAINER.toString());\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, childId,\n                CONTENT_TYPE, FILENAME, CONTENT_SIZE, null, DIGESTS, null, null);\n        cleanupList.add(fedoraId);\n        verify(psSession, times(2)).persist(operationCaptor.capture());\n        final List<ResourceOperation> operations = operationCaptor.getAllValues();\n        final var operation = getOperation(operations, CreateNonRdfSourceOperation.class);\n        final String persistedId = operation.getResourceId();\n        assertNotEquals(fedoraId.getFullId(), persistedId);\n        assertEquals(childId.getFullId(), persistedId);\n        assertTrue(persistedId.startsWith(fedoraId.getFullId()));\n        assertBinaryPropertiesPresent(operation);\n        assertEquals(fedoraId.getFullId(), operation.getParentId());\n\n        final var descOperation = getOperation(operations, CreateRdfSourceOperation.class);\n        assertEquals(persistedId + \"/fcr:metadata\", descOperation.getResourceId());\n        when(fedoraResource.getFedoraId()).thenReturn(fedoraId);\n        assertEquals(1, containmentIndex.getContains(transaction, fedoraResource).count());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "914f287a5f",
    "aCommit": "e5c994e6f0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "containmentIndex.addContainedBy(null, fedoraId, childId);",
          "type": "DELETE",
          "lineNo": 349
        }
      ],
      "targetChanges": [
        {
          "line": "containmentIndex.addContainedBy(TX_ID, fedoraId, childId);",
          "type": "ADD",
          "lineNo": 349
        },
        {
          "line": "containmentIndex.commitTransaction(transaction);",
          "type": "ADD",
          "lineNo": 350
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.ContainmentIndex.addContainedBy(String,FedoraId,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.ContainmentIndex containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.ContainmentIndex.addContainedBy(String,FedoraId,FedoraId)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.ContainmentIndex.addContainedBy(String,FedoraId,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.ContainmentIndex containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.ContainmentIndex.addContainedBy(String,FedoraId,FedoraId)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String TX_ID"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraId"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId childId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.ContainmentIndex.commitTransaction(Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.ContainmentIndex containmentIndex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.ContainmentIndex.commitTransaction(Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction transaction"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "commitTransaction",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "TX_ID",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        349
      ]
    },
    "aCommitTime": 1591636589,
    "ID": "fcrepo/fcrepo:514",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.ReplacePropertiesServiceImplTest.testReplaceProperties()",
    "bSource": {
      "startLine": 102,
      "code": "@Test\n    public void testReplaceProperties() throws Exception {\n        final Model model = ModelFactory.createDefaultModel();\n        RDFDataMgr.read(model, IOUtils.toInputStream(RDF, \"UTF-8\"), Lang.NTRIPLES);\n\n        service.perform(tx.getId(), USER_PRINCIPAL, resource.getId(), CONTENT_TYPE, model);\n        verify(pSession).persist(operationCaptor.capture());\n        assertEquals(FEDORA_ID, operationCaptor.getValue().getResourceId());\n        final RdfStream stream = operationCaptor.getValue().getTriples();\n        final Model captureModel = stream.collect(RdfCollectors.toModel());\n\n        assertTrue(captureModel.contains(ResourceFactory.createResource(FEDORA_ID),\n                ResourceFactory.createProperty(\"http://purl.org/dc/elements/1.1/title\"),\n                \"another fancy title\"));\n        assertTrue(captureModel.contains(ResourceFactory.createResource(FEDORA_ID),\n                ResourceFactory.createProperty(\"http://purl.org/dc/elements/1.1/title\"),\n                \"fancy title\"));\n    }"
    },
    "aSource": {
      "startLine": 103,
      "code": "@Test\n    public void testReplaceProperties() throws Exception {\n        final Model model = ModelFactory.createDefaultModel();\n        RDFDataMgr.read(model, IOUtils.toInputStream(RDF, \"UTF-8\"), Lang.NTRIPLES);\n\n        final FedoraId fedoraID = FedoraId.create(resource.getId());\n\n        service.perform(tx.getId(), USER_PRINCIPAL, fedoraID, CONTENT_TYPE, model);\n        verify(pSession).persist(operationCaptor.capture());\n        assertEquals(FEDORA_ID, operationCaptor.getValue().getResourceId());\n        final RdfStream stream = operationCaptor.getValue().getTriples();\n        final Model captureModel = stream.collect(RdfCollectors.toModel());\n\n        assertTrue(captureModel.contains(ResourceFactory.createResource(FEDORA_ID),\n                ResourceFactory.createProperty(\"http://purl.org/dc/elements/1.1/title\"),\n                \"another fancy title\"));\n        assertTrue(captureModel.contains(ResourceFactory.createResource(FEDORA_ID),\n                ResourceFactory.createProperty(\"http://purl.org/dc/elements/1.1/title\"),\n                \"fancy title\"));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ReplacePropertiesServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ReplacePropertiesServiceImplTest.java",
    "bCommit": "99065fc9a7",
    "aCommit": "d13e9c2a0c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "service.perform(tx.getId(), USER_PRINCIPAL, resource.getId(), CONTENT_TYPE, model);",
          "type": "DELETE",
          "lineNo": 107
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraId fedoraID = FedoraId.create(resource.getId());",
          "type": "ADD",
          "lineNo": 108
        },
        {
          "line": "service.perform(tx.getId(), USER_PRINCIPAL, fedoraID, CONTENT_TYPE, model);",
          "type": "ADD",
          "lineNo": 110
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.services.ReplacePropertiesServiceImpl.perform(String,String,String,String,Model)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.services.ReplacePropertiesServiceImpl service"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.services.ReplacePropertiesServiceImpl.perform(String,String,String,String,Model)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.Transaction.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction tx"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.Transaction.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String USER_PRINCIPAL"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource resource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String CONTENT_TYPE"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.jena.rdf.model.Model model"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraID"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.create(String[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId.create(String[])"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource resource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getId()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.services.ReplacePropertiesServiceImpl.perform(String,String,FedoraId,String,Model)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.services.ReplacePropertiesServiceImpl service"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.services.ReplacePropertiesServiceImpl.perform(String,String,FedoraId,String,Model)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.Transaction.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.Transaction tx"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.Transaction.getId()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String USER_PRINCIPAL"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.identifiers.FedoraId fedoraID"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String CONTENT_TYPE"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.jena.rdf.model.Model model"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "fedoraID",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "fedoraID",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getId",
          "childCount": 1
        },
        "dstNode": {
          "label": "getId",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "EXTRACT_VARIABLE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        108
      ]
    },
    "aCommitTime": 1586387797,
    "ID": "fcrepo/fcrepo:471",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testParentIsExternal()",
    "bSource": {
      "startLine": 486,
      "code": "@Test(expected = CannotCreateResourceException.class)\n    public void testParentIsExternal() throws Exception {\n        final String fedoraId = ensurePrefix(UUID.randomUUID().toString());\n        when(resourceHeaders.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, fedoraId, null, true, null, FILENAME, CONTENT_SIZE, null,\n                DIGESTS, null, extContent);\n    }"
    },
    "aSource": {
      "startLine": 484,
      "code": "@Test(expected = InteractionModelViolationException.class)\n    public void testParentIsExternal() throws Exception {\n        final String fedoraId = ensurePrefix(UUID.randomUUID().toString());\n        when(resourceHeaders.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, fedoraId, null, true, null, FILENAME, CONTENT_SIZE, null,\n                DIGESTS, null, extContent);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "22c4dd597d",
    "aCommit": "f49a014589",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test(expected = CannotCreateResourceException.class)",
          "type": "DELETE",
          "lineNo": 486
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = InteractionModelViolationException.class)",
          "type": "ADD",
          "lineNo": 484
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Annotation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.api.exception.CannotCreateResourceException",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.api.exception.InteractionModelViolationException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        484
      ]
    },
    "aCommitTime": 1585237435,
    "ID": "fcrepo/fcrepo:548",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.CreateResourceServiceImplTest.testParentIsBinaryBinary()",
    "bSource": {
      "startLine": 256,
      "code": "@Test(expected = CannotCreateResourceException.class)\n    public void testParentIsBinaryBinary() throws Exception {\n        final String fedoraId = ensurePrefix(UUID.randomUUID().toString());\n        when(resourceHeaders.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, fedoraId, null, true, null, FILENAME, CONTENT_SIZE, null,\n                DIGESTS, null, null);\n    }"
    },
    "aSource": {
      "startLine": 254,
      "code": "@Test(expected = InteractionModelViolationException.class)\n    public void testParentIsBinaryBinary() throws Exception {\n        final String fedoraId = ensurePrefix(UUID.randomUUID().toString());\n        when(resourceHeaders.getInteractionModel()).thenReturn(NON_RDF_SOURCE.toString());\n        when(psSession.getHeaders(fedoraId, null)).thenReturn(resourceHeaders);\n        createResourceService.perform(TX_ID, USER_PRINCIPAL, fedoraId, null, true, null, FILENAME, CONTENT_SIZE, null,\n                DIGESTS, null, null);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java",
    "bCommit": "22c4dd597d",
    "aCommit": "f49a014589",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test(expected = CannotCreateResourceException.class)",
          "type": "DELETE",
          "lineNo": 256
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = InteractionModelViolationException.class)",
          "type": "ADD",
          "lineNo": 254
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Annotation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.api.exception.CannotCreateResourceException",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.api.exception.InteractionModelViolationException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        254
      ]
    },
    "aCommitTime": 1585237435,
    "ID": "fcrepo/fcrepo:549",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.operations.RdfSourceOperationFactoryImplTest.testCreateBuilder()",
    "bSource": {
      "startLine": 44,
      "code": "@Test\n    public void testCreateBuilder() {\n        final String model = \"some-interaction-model\";\n        final RdfSourceOperationBuilder builder = factory.createBuilder(randomId, model);\n        assertEquals(CreateRdfSourceOperationBuilder.class, builder.getClass());\n    }"
    },
    "aSource": {
      "startLine": 44,
      "code": "@Test\n    public void testCreateBuilder() {\n        final String model = \"some-interaction-model\";\n        final RdfSourceOperationBuilder builder = factory.createBuilder(randomId, model);\n        assertEquals(CreateRdfSourceOperationBuilderImpl.class, builder.getClass());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/RdfSourceOperationFactoryImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/RdfSourceOperationFactoryImplTest.java",
    "bCommit": "eb67145d5d",
    "aCommit": "36e047dd8a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(CreateRdfSourceOperationBuilder.class, builder.getClass());",
          "type": "DELETE",
          "lineNo": 48
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(CreateRdfSourceOperationBuilderImpl.class, builder.getClass());",
          "type": "ADD",
          "lineNo": 48
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Object.getClass()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationBuilder builder"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Object.getClass()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Object.getClass()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.RdfSourceOperationBuilder builder"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Object.getClass()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.operations.CreateRdfSourceOperationBuilder",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.impl.operations.CreateRdfSourceOperationBuilderImpl",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        48
      ]
    },
    "aCommitTime": 1575311546,
    "ID": "fcrepo/fcrepo:133",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.operations.NonRdfSourceOperationFactoryImplTest.testCreateInternalBuilder()",
    "bSource": {
      "startLine": 47,
      "code": "@Test\n    public void testCreateInternalBuilder() throws Exception {\n        final InputStream stream = IOUtils.toInputStream(\"This is some test data\", \"UTF-8\");\n        final NonRdfSourceOperationBuilder builder = factory.createInternalBinaryBuilder(randomId, stream);\n        assertEquals(CreateNonRdfSourceOperationBuilder.class, builder.getClass());\n    }"
    },
    "aSource": {
      "startLine": 47,
      "code": "@Test\n    public void testCreateInternalBuilder() throws Exception {\n        final InputStream stream = IOUtils.toInputStream(\"This is some test data\", \"UTF-8\");\n        final NonRdfSourceOperationBuilder builder = factory.createInternalBinaryBuilder(randomId, stream);\n        assertEquals(CreateNonRdfSourceOperationBuilderImpl.class, builder.getClass());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/NonRdfSourceOperationFactoryImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/NonRdfSourceOperationFactoryImplTest.java",
    "bCommit": "eb67145d5d",
    "aCommit": "36e047dd8a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(CreateNonRdfSourceOperationBuilder.class, builder.getClass());",
          "type": "DELETE",
          "lineNo": 51
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(CreateNonRdfSourceOperationBuilderImpl.class, builder.getClass());",
          "type": "ADD",
          "lineNo": 51
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Object.getClass()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperationBuilder builder"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Object.getClass()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Object.getClass()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperationBuilder builder"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Object.getClass()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.operations.CreateNonRdfSourceOperationBuilder",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.impl.operations.CreateNonRdfSourceOperationBuilderImpl",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        51
      ]
    },
    "aCommitTime": 1575311546,
    "ID": "fcrepo/fcrepo:134",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.kernel.impl.operations.NonRdfSourceOperationFactoryImplTest.testCreateExternalBuilder()",
    "bSource": {
      "startLine": 54,
      "code": "@Test\n    public void testCreateExternalBuilder() {\n        final URI externalURI = URI.create(\"http://example.com/some/location\");\n        final NonRdfSourceOperationBuilder builder = factory.createExternalBinaryBuilder(randomId, \"PROXY\",\n                externalURI);\n        assertEquals(CreateNonRdfSourceOperationBuilder.class, builder.getClass());\n    }"
    },
    "aSource": {
      "startLine": 54,
      "code": "@Test\n    public void testCreateExternalBuilder() {\n        final URI externalURI = URI.create(\"http://example.com/some/location\");\n        final NonRdfSourceOperationBuilder builder = factory.createExternalBinaryBuilder(randomId, \"PROXY\",\n                externalURI);\n        assertEquals(CreateNonRdfSourceOperationBuilderImpl.class, builder.getClass());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/NonRdfSourceOperationFactoryImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/NonRdfSourceOperationFactoryImplTest.java",
    "bCommit": "eb67145d5d",
    "aCommit": "36e047dd8a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(CreateNonRdfSourceOperationBuilder.class, builder.getClass());",
          "type": "DELETE",
          "lineNo": 59
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(CreateNonRdfSourceOperationBuilderImpl.class, builder.getClass());",
          "type": "ADD",
          "lineNo": 59
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Object.getClass()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperationBuilder builder"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Object.getClass()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.Class,java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Object.getClass()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.api.operations.NonRdfSourceOperationBuilder builder"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Object.getClass()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.operations.CreateNonRdfSourceOperationBuilder",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.impl.operations.CreateNonRdfSourceOperationBuilderImpl",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        59
      ]
    },
    "aCommitTime": 1575311546,
    "ID": "fcrepo/fcrepo:135",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverterTest.testBlankUri()",
    "bSource": {
      "startLine": 52,
      "code": "@Test(expected = IllegalArgumentException.class)\n    public void testBlankUri() {\n        final String testUri = \"\";\n        final String fedoraId = converter.convert(testUri);\n    }"
    },
    "aSource": {
      "startLine": 51,
      "code": "@Test(expected = IllegalArgumentException.class)\n    public void testBlankUri() {\n        final String testUri = \"\";\n        final String fedoraId = converter.toInternalId(testUri);\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierConverterTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierConverterTest.java",
    "bCommit": "970dfd219d",
    "aCommit": "2ecd5ee46d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String fedoraId = converter.convert(testUri);",
          "type": "DELETE",
          "lineNo": 55
        }
      ],
      "targetChanges": [
        {
          "line": "final String fedoraId = converter.toInternalId(testUri);",
          "type": "ADD",
          "lineNo": 54
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String fedoraId"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.convert(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter converter"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.convert(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String testUri"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String fedoraId"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter.toInternalId(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter converter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter.toInternalId(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String testUri"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "convert",
          "childCount": 2
        },
        "dstNode": {
          "label": "toInternalId",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        54
      ]
    },
    "aCommitTime": 1573585448,
    "ID": "fcrepo/fcrepo:87",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverterTest.testBlankId()",
    "bSource": {
      "startLine": 58,
      "code": "@Test(expected = IllegalArgumentException.class)\n    public void testBlankId() {\n        final String testId = \"\";\n        final String fedoraId = converter.reverse().convert(testId);\n    }"
    },
    "aSource": {
      "startLine": 57,
      "code": "@Test(expected = IllegalArgumentException.class)\n    public void testBlankId() {\n        final String testId = \"\";\n        final String fedoraId = converter.toExternalId(testId);\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierConverterTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierConverterTest.java",
    "bCommit": "970dfd219d",
    "aCommit": "2ecd5ee46d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String fedoraId = converter.reverse().convert(testId);",
          "type": "DELETE",
          "lineNo": 61
        }
      ],
      "targetChanges": [
        {
          "line": "final String fedoraId = converter.toExternalId(testId);",
          "type": "ADD",
          "lineNo": 60
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String fedoraId"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.convert(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter converter"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.convert(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String testId"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String fedoraId"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter.toExternalId(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter converter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter.toExternalId(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String testId"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "reverse",
          "childCount": 1
        },
        "dstNode": {
          "label": "toExternalId",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "convert",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "reverse",
          "childCount": 1
        },
        "dstNode": {
          "label": "toExternalId",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        60
      ]
    },
    "aCommitTime": 1573585448,
    "ID": "fcrepo/fcrepo:88",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.acl04Test()",
    "bSource": {
      "startLine": 372,
      "code": "@Test\n    public void acl04Test() throws RepositoryException {\n        final String agent1 = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String agent2 = \"Editors\";\n        final String accessTo = \"/public_collection\";\n        final String acl = \"/acls/04/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly two agents\", 2, roles.size());\n        assertEquals(\"The agent should have one mode\", 1, roles.get(agent1).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent1).contains(WEBAC_MODE_READ_VALUE));\n        assertEquals(\"The agent should have two modes\", 2, roles.get(agent2).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent2).contains(WEBAC_MODE_READ_VALUE));\n        assertTrue(\"The agent should be able to write\", roles.get(agent2).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 369,
      "code": "@Test\n    public void acl04Test() throws RepositoryException {\n        final String agent1 = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String agent2 = \"Editors\";\n        final String accessTo = \"/public_collection\";\n        final String acl = \"/acls/04/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples())\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly two agents\", 2, roles.size());\n        assertEquals(\"The agent should have one mode\", 1, roles.get(agent1).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent1).contains(WEBAC_MODE_READ_VALUE));\n        assertEquals(\"The agent should have two modes\", 2, roles.get(agent2).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent2).contains(WEBAC_MODE_READ_VALUE));\n        assertTrue(\"The agent should be able to write\", roles.get(agent2).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 385
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 382
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        382
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:337",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.acl03Test2()",
    "bSource": {
      "startLine": 302,
      "code": "@Test\n    public void acl03Test2() throws RepositoryException {\n        final String agent = \"Restricted\";\n        final String accessTo = \"/dark/archive\";\n        final String acl = \"/acls/03/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly one agent\", 1, roles.size());\n        assertEquals(\"The agent should have one mode\", 1, roles.get(agent).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 299,
      "code": "@Test\n    public void acl03Test2() throws RepositoryException {\n        final String agent = \"Restricted\";\n        final String accessTo = \"/dark/archive\";\n        final String acl = \"/acls/03/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples())\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly one agent\", 1, roles.size());\n        assertEquals(\"The agent should have one mode\", 1, roles.get(agent).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 314
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 311
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        311
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:338",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.acl05Test2()",
    "bSource": {
      "startLine": 424,
      "code": "@Test\n    public void acl05Test2() throws RepositoryException {\n        final String agent1 = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String accessTo = \"/someOtherCollection\";\n        final String acl = \"/acls/05/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockResource.getTypes()).thenReturn(singletonList(URI.create(\"http://example.com/terms#publicImage\")));\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly one agent\", 1, roles.size());\n        assertEquals(\"The agent should have one mode\", 1, roles.get(agent1).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent1).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 421,
      "code": "@Test\n    public void acl05Test2() throws RepositoryException {\n        final String agent1 = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String accessTo = \"/someOtherCollection\";\n        final String acl = \"/acls/05/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockResource.getTypes()).thenReturn(singletonList(URI.create(\"http://example.com/terms#publicImage\")));\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples())\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly one agent\", 1, roles.size());\n        assertEquals(\"The agent should have one mode\", 1, roles.get(agent1).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent1).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 437
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 434
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        434
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:339",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.acl03Test1()",
    "bSource": {
      "startLine": 279,
      "code": "@Test\n    public void acl03Test1() throws RepositoryException {\n        final String agent = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String accessTo = \"/dark/archive/sunshine\";\n        final String acl = \"/acls/03/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockAclResource.getPath()).thenReturn(accessTo + \"/fcr:acl\");\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly one agent in the roles map\", 1, roles.size());\n        assertEquals(\"The agent should have exactly one mode\", 1, roles.get(agent).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 276,
      "code": "@Test\n    public void acl03Test1() throws RepositoryException {\n        final String agent = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String accessTo = \"/dark/archive/sunshine\";\n        final String acl = \"/acls/03/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples())\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockAclResource.getPath()).thenReturn(accessTo + \"/fcr:acl\");\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly one agent in the roles map\", 1, roles.size());\n        assertEquals(\"The agent should have exactly one mode\", 1, roles.get(agent).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 290
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 287
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        287
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:340",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.acl05Test()",
    "bSource": {
      "startLine": 398,
      "code": "@Test\n    public void acl05Test() throws RepositoryException {\n        final String agent1 = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String agent2 = \"Admins\";\n        final String accessTo = \"/mixedCollection\";\n        final String acl = \"/acls/05/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockResource.getTypes()).thenReturn(singletonList(URI.create(\"http://example.com/terms#publicImage\")));\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly two agents\", 2, roles.size());\n        assertEquals(\"The agent should have one mode\", 1, roles.get(agent1).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent1).contains(WEBAC_MODE_READ_VALUE));\n        assertEquals(\"The agent should have one mode\", 1, roles.get(agent2).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent2).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 395,
      "code": "@Test\n    public void acl05Test() throws RepositoryException {\n        final String agent1 = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String agent2 = \"Admins\";\n        final String accessTo = \"/mixedCollection\";\n        final String acl = \"/acls/05/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockResource.getTypes()).thenReturn(singletonList(URI.create(\"http://example.com/terms#publicImage\")));\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples())\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly two agents\", 2, roles.size());\n        assertEquals(\"The agent should have one mode\", 1, roles.get(agent1).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent1).contains(WEBAC_MODE_READ_VALUE));\n        assertEquals(\"The agent should have one mode\", 1, roles.get(agent2).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent2).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 412
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 409
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        409
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:341",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.foafAgentTest()",
    "bSource": {
      "startLine": 324,
      "code": "@Test\n    public void foafAgentTest() throws RepositoryException {\n        final String agent = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String accessTo = \"/foaf-agent\";\n        final String acl = \"/acls/03/foaf-agent.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be only one valid role\", 1, roles.size());\n        assertEquals(\"The foaf:Agent should have exactly one valid mode\", 1,\n                     roles.get(agent).size());\n        assertTrue(\"The foaf:Agent should be able to write\",\n                   roles.get(agent).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 321,
      "code": "@Test\n    public void foafAgentTest() throws RepositoryException {\n        final String agent = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String accessTo = \"/foaf-agent\";\n        final String acl = \"/acls/03/foaf-agent.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples())\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be only one valid role\", 1, roles.size());\n        assertEquals(\"The foaf:Agent should have exactly one valid mode\", 1,\n                     roles.get(agent).size());\n        assertTrue(\"The foaf:Agent should be able to write\",\n                   roles.get(agent).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 336
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 333
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        333
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:342",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.noAclTest()",
    "bSource": {
      "startLine": 119,
      "code": "@Test\n    public void noAclTest() throws RepositoryException {\n        final String accessTo = \"/dark/archive/sunshine\";\n\n        when(mockResource.getAcl()).thenReturn(null);\n        when(mockParentResource.getAcl()).thenReturn(null);\n\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getContainer()).thenReturn(mockParentResource);\n        when(mockResource.getTriples(any(), eq(PROPERTIES)))\n                .thenReturn(new DefaultRdfStream(createURI(\"subject\")));\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n\n        when(mockParentResource.getOriginalResource()).thenReturn(mockParentResource);\n        when(mockParentResource.getPath()).thenReturn(null);\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertOnlyDefaultAgentInRoles(roles);\n    }"
    },
    "aSource": {
      "startLine": 116,
      "code": "@Test\n    public void noAclTest() throws RepositoryException {\n        final String accessTo = \"/dark/archive/sunshine\";\n\n        when(mockResource.getAcl()).thenReturn(null);\n        when(mockParentResource.getAcl()).thenReturn(null);\n\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getContainer()).thenReturn(mockParentResource);\n        when(mockResource.getTriples())\n                .thenReturn(new DefaultRdfStream(createURI(\"subject\")));\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n\n        when(mockParentResource.getOriginalResource()).thenReturn(mockParentResource);\n        when(mockParentResource.getPath()).thenReturn(null);\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertOnlyDefaultAgentInRoles(roles);\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 128
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockResource.getTriples())",
          "type": "ADD",
          "lineNo": 125
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.rdf.DefaultRdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.api.rdf.DefaultRdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        125
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:343",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.acl21NoDefaultACLStatementTest()",
    "bSource": {
      "startLine": 173,
      "code": "@Test\n    public void acl21NoDefaultACLStatementTest() throws RepositoryException {\n        final String agent = \"user21\";\n        final String parentPath = \"/resource_acl_no_inheritance\";\n        final String accessTo = parentPath + \"/foo\";\n        final String acl = \"/acls/21/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(null);\n        when(mockParentResource.getAcl()).thenReturn(mockAclResource);\n        when(mockAclResource.hasProperty(\"acl:default\")).thenReturn(false);\n\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getContainer()).thenReturn(mockParentResource);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n\n        when(mockParentResource.getPath()).thenReturn(parentPath);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockParentResource.getAcl()).thenReturn(null);\n\n\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n                .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        System.setProperty(ROOT_AUTHORIZATION_PROPERTY, \"./target/test-classes/test-root-authorization2.ttl\");\n\n        // The default root ACL should be used for authorization instead of the parent ACL\n        final String rootAgent = \"user06a\";\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n        assertEquals(\"Contains no agents in the role map!\", 1, roles.size());\n        assertNull(\"Contains agent \" + agent + \" from ACL in parent node!\", roles.get(agent));\n        assertEquals(\"Should have agent \" + rootAgent + \" from the root ACL!\", 1, roles.get(rootAgent).size());\n        assertTrue(\"Should have read mode for agent \" + rootAgent + \" from the root ACL!\",\n                roles.get(rootAgent).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 170,
      "code": "@Test\n    public void acl21NoDefaultACLStatementTest() throws RepositoryException {\n        final String agent = \"user21\";\n        final String parentPath = \"/resource_acl_no_inheritance\";\n        final String accessTo = parentPath + \"/foo\";\n        final String acl = \"/acls/21/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(null);\n        when(mockParentResource.getAcl()).thenReturn(mockAclResource);\n        when(mockAclResource.hasProperty(\"acl:default\")).thenReturn(false);\n\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getContainer()).thenReturn(mockParentResource);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n\n        when(mockParentResource.getPath()).thenReturn(parentPath);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockParentResource.getAcl()).thenReturn(null);\n\n\n        when(mockAclResource.getTriples())\n                .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        System.setProperty(ROOT_AUTHORIZATION_PROPERTY, \"./target/test-classes/test-root-authorization2.ttl\");\n\n        // The default root ACL should be used for authorization instead of the parent ACL\n        final String rootAgent = \"user06a\";\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n        assertEquals(\"Contains no agents in the role map!\", 1, roles.size());\n        assertNull(\"Contains agent \" + agent + \" from ACL in parent node!\", roles.get(agent));\n        assertEquals(\"Should have agent \" + rootAgent + \" from the root ACL!\", 1, roles.get(rootAgent).size());\n        assertTrue(\"Should have read mode for agent \" + rootAgent + \" from the root ACL!\",\n                roles.get(rootAgent).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 195
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 192
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        192
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:344",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.acl01Test1()",
    "bSource": {
      "startLine": 210,
      "code": "@Test\n    public void acl01Test1() throws RepositoryException {\n        final String agent = \"user01\";\n        final String accessTo = \"/webacl_box1\";\n        final String acl = \"/acls/01/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockAclResource.getPath()).thenReturn(accessTo + \"/fcr:acl\");\n\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly one agent in the role map\", 1, roles.size());\n        assertEquals(\"The agent should have exactly two modes\", 2, roles.get(agent).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent).contains(WEBAC_MODE_READ_VALUE));\n        assertTrue(\"The agent should be able to write\", roles.get(agent).contains(WEBAC_MODE_WRITE_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 207,
      "code": "@Test\n    public void acl01Test1() throws RepositoryException {\n        final String agent = \"user01\";\n        final String accessTo = \"/webacl_box1\";\n        final String acl = \"/acls/01/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples())\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockAclResource.getPath()).thenReturn(accessTo + \"/fcr:acl\");\n\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly one agent in the role map\", 1, roles.size());\n        assertEquals(\"The agent should have exactly two modes\", 2, roles.get(agent).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent).contains(WEBAC_MODE_READ_VALUE));\n        assertTrue(\"The agent should be able to write\", roles.get(agent).contains(WEBAC_MODE_WRITE_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 221
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 218
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        218
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:345",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.acl17Test1()",
    "bSource": {
      "startLine": 522,
      "code": "@Test\n    public void acl17Test1() throws RepositoryException {\n        final String foafAgent = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String accessTo = \"/dark/archive/sunshine\";\n        final String acl = \"/acls/17/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be only one valid role\", 1, roles.size());\n        assertEquals(\"The foafAgent should have exactly one valid mode\", 1, roles.get(foafAgent).size());\n        assertTrue(\"The foafAgent should be able to write\", roles.get(foafAgent).contains(WEBAC_MODE_WRITE_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 519,
      "code": "@Test\n    public void acl17Test1() throws RepositoryException {\n        final String foafAgent = \"http://xmlns.com/foaf/0.1/Agent\";\n        final String accessTo = \"/dark/archive/sunshine\";\n        final String acl = \"/acls/17/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples())\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be only one valid role\", 1, roles.size());\n        assertEquals(\"The foafAgent should have exactly one valid mode\", 1, roles.get(foafAgent).size());\n        assertTrue(\"The foafAgent should be able to write\", roles.get(foafAgent).contains(WEBAC_MODE_WRITE_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 534
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 531
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        531
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:346",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.acl02Test()",
    "bSource": {
      "startLine": 254,
      "code": "@Test\n    public void acl02Test() throws RepositoryException {\n        final String agent = \"Editors\";\n        final String accessTo = \"/box/bag/collection\";\n        final String acl = \"/acls/02/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockAclResource.getPath()).thenReturn(accessTo + \"/fcr:acl\");\n\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly one agent in the role map\", 1, roles.size());\n        assertEquals(\"The agent should have exactly two modes\", 2, roles.get(agent).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent).contains(WEBAC_MODE_READ_VALUE));\n        assertTrue(\"The agent should be able to write\", roles.get(agent).contains(WEBAC_MODE_WRITE_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 251,
      "code": "@Test\n    public void acl02Test() throws RepositoryException {\n        final String agent = \"Editors\";\n        final String accessTo = \"/box/bag/collection\";\n        final String acl = \"/acls/02/acl.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockAclResource.getTriples())\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockAclResource.getPath()).thenReturn(accessTo + \"/fcr:acl\");\n\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be exactly one agent in the role map\", 1, roles.size());\n        assertEquals(\"The agent should have exactly two modes\", 2, roles.get(agent).size());\n        assertTrue(\"The agent should be able to read\", roles.get(agent).contains(WEBAC_MODE_READ_VALUE));\n        assertTrue(\"The agent should be able to write\", roles.get(agent).contains(WEBAC_MODE_WRITE_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 263
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 260
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        260
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:347",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.webac.WebACRolesProviderTest.authenticatedAgentTest()",
    "bSource": {
      "startLine": 348,
      "code": "@Test\n    public void authenticatedAgentTest() throws RepositoryException {\n        final String aclAuthenticatedAgent = \"http://www.w3.org/ns/auth/acl#AuthenticatedAgent\";\n        final String accessTo = \"/authenticated-agent\";\n        final String acl = \"/acls/03/authenticated-agent.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples(any(), eq(PROPERTIES)))\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be only one valid role\", 1, roles.size());\n        assertEquals(\"The acl:AuthenticatedAgent should have exactly one valid mode\", 1,\n                     roles.get(aclAuthenticatedAgent).size());\n        assertTrue(\"The acl:AuthenticatedAgent should be able to write\",\n                   roles.get(aclAuthenticatedAgent).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "aSource": {
      "startLine": 345,
      "code": "@Test\n    public void authenticatedAgentTest() throws RepositoryException {\n        final String aclAuthenticatedAgent = \"http://www.w3.org/ns/auth/acl#AuthenticatedAgent\";\n        final String accessTo = \"/authenticated-agent\";\n        final String acl = \"/acls/03/authenticated-agent.ttl\";\n\n        when(mockResource.getAcl()).thenReturn(mockAclResource);\n        when(mockNodeService.find(mockTransaction, acl)).thenReturn(mockAclResource);\n        when(mockAclResource.getPath()).thenReturn(acl);\n        when(mockAclResource.isAcl()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(accessTo);\n        when(mockResource.getOriginalResource()).thenReturn(mockResource);\n        when(mockAclResource.getTriples())\n            .thenReturn(getRdfStreamFromResource(acl, TTL));\n\n        final Map<String, Collection<String>> roles = roleProvider.getRoles(mockResource);\n\n        assertEquals(\"There should be only one valid role\", 1, roles.size());\n        assertEquals(\"The acl:AuthenticatedAgent should have exactly one valid mode\", 1,\n                     roles.get(aclAuthenticatedAgent).size());\n        assertTrue(\"The acl:AuthenticatedAgent should be able to write\",\n                   roles.get(aclAuthenticatedAgent).contains(WEBAC_MODE_READ_VALUE));\n    }"
    },
    "bPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "aPath": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACRolesProviderTest.java",
    "bCommit": "03d94a14de",
    "aCommit": "931c85cc9f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockAclResource.getTriples(any(), eq(PROPERTIES)))",
          "type": "DELETE",
          "lineNo": 360
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockAclResource.getTriples())",
          "type": "ADD",
          "lineNo": 357
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples(IdentifierConverter,TripleCategory)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.api.RequiredRdfContext)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.RequiredRdfContext PROPERTIES"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.api.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.models.FedoraResource mockAclResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.models.FedoraResource.getTriples()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        357
      ]
    },
    "aCommitTime": 1572639253,
    "ID": "fcrepo/fcrepo:348",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.RdfLexiconTest.repoPredicatesAreManaged()",
    "bSource": {
      "startLine": 36,
      "code": "@Test\n    public void repoPredicatesAreManaged() {\n        assertTrue(isManagedPredicate.test(createProperty(PREMIS_NAMESPACE + \"hasSize\")));\n        assertTrue(isManagedPredicate.test(createProperty(REPOSITORY_NAMESPACE + \"hasParent\")));\n    }"
    },
    "aSource": {
      "startLine": 36,
      "code": "@Test\n    public void repoPredicatesAreManaged() {\n        assertTrue(isManagedPredicate.test(createProperty(PREMIS_NAMESPACE + \"hasMessageDigest\")));\n        assertTrue(isManagedPredicate.test(createProperty(REPOSITORY_NAMESPACE + \"hasParent\")));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "bCommit": "62abb8a90c",
    "aCommit": "6e9991effd",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(isManagedPredicate.test(createProperty(PREMIS_NAMESPACE + \"hasSize\")));",
          "type": "DELETE",
          "lineNo": 38
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue(isManagedPredicate.test(createProperty(PREMIS_NAMESPACE + \"hasMessageDigest\")));",
          "type": "ADD",
          "lineNo": 38
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test()"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PREMIS_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'hasSize'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test()"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PREMIS_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'hasMessageDigest'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"hasSize\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"hasMessageDigest\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        38
      ]
    },
    "aCommitTime": 1540828369,
    "ID": "fcrepo/fcrepo:228",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.utils.ContentDigestTest.testSHA256()",
    "bSource": {
      "startLine": 53,
      "code": "@Test\n    public void testSHA256() {\n        assertEquals(\"Failed to produce a proper content digest URI!\",\n                create(\"urn:sha256:fake\"), asURI(\"SHA-256\", \"fake\"));\n    }"
    },
    "aSource": {
      "startLine": 53,
      "code": "@Test\n    public void testSHA256() {\n        assertEquals(\"Failed to produce a proper content digest URI!\",\n                create(\"urn:sha-256:fake\"), asURI(\"SHA-256\", \"fake\"));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/ContentDigestTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/ContentDigestTest.java",
    "bCommit": "9d0d40261d",
    "aCommit": "7d306e3a18",
    "hunk": {
      "sourceChanges": [
        {
          "line": "create(\"urn:sha256:fake\"), asURI(\"SHA-256\", \"fake\"));",
          "type": "DELETE",
          "lineNo": 56
        }
      ],
      "targetChanges": [
        {
          "line": "create(\"urn:sha-256:fake\"), asURI(\"SHA-256\", \"fake\"));",
          "type": "ADD",
          "lineNo": 56
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'urn:sha256:fake'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SHA-256'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fake'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.create(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'urn:sha-256:fake'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.utils.ContentDigest.asURI(String,String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SHA-256'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fake'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"urn:sha256:fake\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"urn:sha-256:fake\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        55
      ]
    },
    "aCommitTime": 1537549396,
    "ID": "fcrepo/fcrepo:246",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.RdfLexiconTest.repoPredicatesAreManaged()",
    "bSource": {
      "startLine": 34,
      "code": "@Test\n    public void repoPredicatesAreManaged() {\n        assertTrue( isManagedPredicateURI.test( PREMIS_NAMESPACE + \"hasSize\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"primaryType\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryCustomRepName\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryIdentifierStability\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrRepositoryName\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrRepositoryVendor\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrRepositoryVendorUrl\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrRepositoryVersion\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrSpecificationName\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrSpecificationVersion\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryLevel1Supported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryLevel2Supported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementAutocreatedDefinitionsSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementInheritance\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementMultipleBinaryPropertiesSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementMultivaluedPropertiesSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementOrderableChildNodesSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementOverridesSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementPrimaryItemNameSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementPropertyTypes\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementResidualDefinitionsSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementSameNameSiblingsSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementUpdateInUseSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryNodeTypeManagementValueConstraintsSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionAccessControlSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionActivitiesSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionBaselinesSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionJournaledObservationSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionLifecycleSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionLockingSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionNodeAndPropertyWithSameNameSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionNodeTypeManagementSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionObservationSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionQuerySqlSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionRetentionSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionShareableNodesSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionSimpleVersioningSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionTransactionsSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionUnfiledContentSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionUpdateMixinNodeTypesSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionUpdatePrimaryNodeTypeSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionVersioningSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionWorkspaceManagementSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionXmlExportSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryOptionXmlImportSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryQueryFullTextSearchSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryQueryJoins\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryQueryStoredQueriesSupported\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryQueryXpathDocOrder\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryQueryXpathPosIndex\") );\n        assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +\n                    \"repositoryWriteSupported\") );\n    }"
    },
    "aSource": {
      "startLine": 36,
      "code": "@Test\n    public void repoPredicatesAreManaged() {\n        assertTrue(isManagedPredicate.test(createProperty(PREMIS_NAMESPACE + \"hasSize\")));\n        assertTrue(isManagedPredicate.test(createProperty(REPOSITORY_NAMESPACE + \"hasParent\")));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "bCommit": "495ddeed92",
    "aCommit": "eb6c0d6dac",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue( isManagedPredicateURI.test( PREMIS_NAMESPACE + \"hasSize\") );",
          "type": "DELETE",
          "lineNo": 36
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"primaryType\") );",
          "type": "DELETE",
          "lineNo": 37
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryCustomRepName\") );",
          "type": "DELETE",
          "lineNo": 38
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryIdentifierStability\") );",
          "type": "DELETE",
          "lineNo": 39
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrRepositoryName\") );",
          "type": "DELETE",
          "lineNo": 40
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrRepositoryVendor\") );",
          "type": "DELETE",
          "lineNo": 41
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrRepositoryVendorUrl\") );",
          "type": "DELETE",
          "lineNo": 42
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrRepositoryVersion\") );",
          "type": "DELETE",
          "lineNo": 43
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrSpecificationName\") );",
          "type": "DELETE",
          "lineNo": 44
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryJcrSpecificationVersion\") );",
          "type": "DELETE",
          "lineNo": 45
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryLevel1Supported\") );",
          "type": "DELETE",
          "lineNo": 46
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE + \"repositoryLevel2Supported\") );",
          "type": "DELETE",
          "lineNo": 47
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 48
        },
        {
          "line": "\"repositoryNodeTypeManagementAutocreatedDefinitionsSupported\") );",
          "type": "DELETE",
          "lineNo": 49
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 50
        },
        {
          "line": "\"repositoryNodeTypeManagementInheritance\") );",
          "type": "DELETE",
          "lineNo": 51
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 52
        },
        {
          "line": "\"repositoryNodeTypeManagementMultipleBinaryPropertiesSupported\") );",
          "type": "DELETE",
          "lineNo": 53
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 54
        },
        {
          "line": "\"repositoryNodeTypeManagementMultivaluedPropertiesSupported\") );",
          "type": "DELETE",
          "lineNo": 55
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 56
        },
        {
          "line": "\"repositoryNodeTypeManagementOrderableChildNodesSupported\") );",
          "type": "DELETE",
          "lineNo": 57
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 58
        },
        {
          "line": "\"repositoryNodeTypeManagementOverridesSupported\") );",
          "type": "DELETE",
          "lineNo": 59
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 60
        },
        {
          "line": "\"repositoryNodeTypeManagementPrimaryItemNameSupported\") );",
          "type": "DELETE",
          "lineNo": 61
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 62
        },
        {
          "line": "\"repositoryNodeTypeManagementPropertyTypes\") );",
          "type": "DELETE",
          "lineNo": 63
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 64
        },
        {
          "line": "\"repositoryNodeTypeManagementResidualDefinitionsSupported\") );",
          "type": "DELETE",
          "lineNo": 65
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 66
        },
        {
          "line": "\"repositoryNodeTypeManagementSameNameSiblingsSupported\") );",
          "type": "DELETE",
          "lineNo": 67
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 68
        },
        {
          "line": "\"repositoryNodeTypeManagementUpdateInUseSupported\") );",
          "type": "DELETE",
          "lineNo": 69
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 70
        },
        {
          "line": "\"repositoryNodeTypeManagementValueConstraintsSupported\") );",
          "type": "DELETE",
          "lineNo": 71
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 72
        },
        {
          "line": "\"repositoryOptionAccessControlSupported\") );",
          "type": "DELETE",
          "lineNo": 73
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 74
        },
        {
          "line": "\"repositoryOptionActivitiesSupported\") );",
          "type": "DELETE",
          "lineNo": 75
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 76
        },
        {
          "line": "\"repositoryOptionBaselinesSupported\") );",
          "type": "DELETE",
          "lineNo": 77
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 78
        },
        {
          "line": "\"repositoryOptionJournaledObservationSupported\") );",
          "type": "DELETE",
          "lineNo": 79
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 80
        },
        {
          "line": "\"repositoryOptionLifecycleSupported\") );",
          "type": "DELETE",
          "lineNo": 81
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 82
        },
        {
          "line": "\"repositoryOptionLockingSupported\") );",
          "type": "DELETE",
          "lineNo": 83
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 84
        },
        {
          "line": "\"repositoryOptionNodeAndPropertyWithSameNameSupported\") );",
          "type": "DELETE",
          "lineNo": 85
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 86
        },
        {
          "line": "\"repositoryOptionNodeTypeManagementSupported\") );",
          "type": "DELETE",
          "lineNo": 87
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 88
        },
        {
          "line": "\"repositoryOptionObservationSupported\") );",
          "type": "DELETE",
          "lineNo": 89
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 90
        },
        {
          "line": "\"repositoryOptionQuerySqlSupported\") );",
          "type": "DELETE",
          "lineNo": 91
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 92
        },
        {
          "line": "\"repositoryOptionRetentionSupported\") );",
          "type": "DELETE",
          "lineNo": 93
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 94
        },
        {
          "line": "\"repositoryOptionShareableNodesSupported\") );",
          "type": "DELETE",
          "lineNo": 95
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 96
        },
        {
          "line": "\"repositoryOptionSimpleVersioningSupported\") );",
          "type": "DELETE",
          "lineNo": 97
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 98
        },
        {
          "line": "\"repositoryOptionTransactionsSupported\") );",
          "type": "DELETE",
          "lineNo": 99
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 100
        },
        {
          "line": "\"repositoryOptionUnfiledContentSupported\") );",
          "type": "DELETE",
          "lineNo": 101
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 102
        },
        {
          "line": "\"repositoryOptionUpdateMixinNodeTypesSupported\") );",
          "type": "DELETE",
          "lineNo": 103
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 104
        },
        {
          "line": "\"repositoryOptionUpdatePrimaryNodeTypeSupported\") );",
          "type": "DELETE",
          "lineNo": 105
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 106
        },
        {
          "line": "\"repositoryOptionVersioningSupported\") );",
          "type": "DELETE",
          "lineNo": 107
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 108
        },
        {
          "line": "\"repositoryOptionWorkspaceManagementSupported\") );",
          "type": "DELETE",
          "lineNo": 109
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 110
        },
        {
          "line": "\"repositoryOptionXmlExportSupported\") );",
          "type": "DELETE",
          "lineNo": 111
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 112
        },
        {
          "line": "\"repositoryOptionXmlImportSupported\") );",
          "type": "DELETE",
          "lineNo": 113
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 114
        },
        {
          "line": "\"repositoryQueryFullTextSearchSupported\") );",
          "type": "DELETE",
          "lineNo": 115
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 116
        },
        {
          "line": "\"repositoryQueryJoins\") );",
          "type": "DELETE",
          "lineNo": 117
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 118
        },
        {
          "line": "\"repositoryQueryStoredQueriesSupported\") );",
          "type": "DELETE",
          "lineNo": 119
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 120
        },
        {
          "line": "\"repositoryQueryXpathDocOrder\") );",
          "type": "DELETE",
          "lineNo": 121
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 122
        },
        {
          "line": "\"repositoryQueryXpathPosIndex\") );",
          "type": "DELETE",
          "lineNo": 123
        },
        {
          "line": "assertTrue( isManagedPredicateURI.test( REPOSITORY_NAMESPACE +",
          "type": "DELETE",
          "lineNo": 124
        },
        {
          "line": "\"repositoryWriteSupported\") );",
          "type": "DELETE",
          "lineNo": 125
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue(isManagedPredicate.test(createProperty(PREMIS_NAMESPACE + \"hasSize\")));",
          "type": "ADD",
          "lineNo": 38
        },
        {
          "line": "assertTrue(isManagedPredicate.test(createProperty(REPOSITORY_NAMESPACE + \"hasParent\")));",
          "type": "ADD",
          "lineNo": 39
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PREMIS_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'hasSize'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'primaryType'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryCustomRepName'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryIdentifierStability'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryJcrRepositoryName'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryJcrRepositoryVendor'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryJcrRepositoryVendorUrl'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryJcrRepositoryVersion'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryJcrSpecificationName'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryJcrSpecificationVersion'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryLevel1Supported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryLevel2Supported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementAutocreatedDefinitionsSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementInheritance'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementMultipleBinaryPropertiesSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementMultivaluedPropertiesSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementOrderableChildNodesSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementOverridesSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementPrimaryItemNameSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementPropertyTypes'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementResidualDefinitionsSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementSameNameSiblingsSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementUpdateInUseSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryNodeTypeManagementValueConstraintsSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionAccessControlSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionActivitiesSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionBaselinesSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionJournaledObservationSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionLifecycleSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionLockingSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionNodeAndPropertyWithSameNameSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionNodeTypeManagementSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionObservationSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionQuerySqlSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionRetentionSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionShareableNodesSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionSimpleVersioningSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionTransactionsSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionUnfiledContentSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionUpdateMixinNodeTypesSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionUpdatePrimaryNodeTypeSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionVersioningSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionWorkspaceManagementSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionXmlExportSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryOptionXmlImportSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryQueryFullTextSearchSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryQueryJoins'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryQueryStoredQueriesSupported'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryQueryXpathDocOrder'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryQueryXpathPosIndex'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'repositoryWriteSupported'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test()"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PREMIS_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'hasSize'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test()"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'hasParent'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        },
        "dstNode": {
          "label": "test",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isManagedPredicateURI",
          "childCount": 0
        },
        "dstNode": {
          "label": "isManagedPredicate",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "test",
          "childCount": 2
        },
        "dstNode": {
          "label": "createProperty",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isManagedPredicateURI",
          "childCount": 0
        },
        "dstNode": {
          "label": "isManagedPredicate",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"primaryType\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"hasParent\"",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "createProperty",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        },
        "dstNode": {
          "label": "test",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "BinaryOperator",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        },
        "dstNode": {
          "label": "PLUS",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126
      ]
    },
    "aCommitTime": 1477607520,
    "ID": "fcrepo/fcrepo:525",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.RdfLexiconTest.otherPredicatesAreNotManaged()",
    "bSource": {
      "startLine": 127,
      "code": "@Test\n    public void otherPredicatesAreNotManaged() {\n        assertTrue( !isManagedPredicateURI.test( \"http://purl.org/dc/elements/1.1/title\") );\n    }"
    },
    "aSource": {
      "startLine": 41,
      "code": "@Test\n    public void otherPredicatesAreNotManaged() {\n        assertFalse(isManagedPredicate.test(createProperty(\"http://purl.org/dc/elements/1.1/title\")));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "bCommit": "495ddeed92",
    "aCommit": "eb6c0d6dac",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue( !isManagedPredicateURI.test( \"http://purl.org/dc/elements/1.1/title\") );",
          "type": "DELETE",
          "lineNo": 129
        }
      ],
      "targetChanges": [
        {
          "line": "assertFalse(isManagedPredicate.test(createProperty(\"http://purl.org/dc/elements/1.1/title\")));",
          "type": "ADD",
          "lineNo": 43
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://purl.org/dc/elements/1.1/title'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "test()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicate"
        },
        {
          "type": "CtExecutableReference",
          "value": "test()"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://purl.org/dc/elements/1.1/title'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertFalse",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "UnaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isManagedPredicateURI",
          "childCount": 0
        },
        "dstNode": {
          "label": "isManagedPredicate",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "createProperty",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "UnaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "test",
          "childCount": 2
        },
        "dstNode": {
          "label": "test",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "UnaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"http://purl.org/dc/elements/1.1/title\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"http://purl.org/dc/elements/1.1/title\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        43
      ]
    },
    "aCommitTime": 1477607520,
    "ID": "fcrepo/fcrepo:526",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.observer.EventTypeTest.testValueOf()",
    "bSource": {
      "startLine": 29,
      "code": "@Test()\n    public void testValueOf() {\n        assertEquals(EventType.PERSIST, EventType.valueOf(\"PERSIST\"));\n    }"
    },
    "aSource": {
      "startLine": 29,
      "code": "@Test()\n    public void testValueOf() {\n        assertEquals(EventType.RESOURCE_CREATION, EventType.valueOf(\"RESOURCE_CREATION\"));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/observer/EventTypeTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/observer/EventTypeTest.java",
    "bCommit": "a762a627eb",
    "aCommit": "ddee309f31",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(EventType.PERSIST, EventType.valueOf(\"PERSIST\"));",
          "type": "DELETE",
          "lineNo": 31
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(EventType.RESOURCE_CREATION, EventType.valueOf(\"RESOURCE_CREATION\"));",
          "type": "ADD",
          "lineNo": 31
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.kernel.api.observer.EventType,org.fcrepo.kernel.api.observer.EventType)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.kernel.api.observer.EventType,org.fcrepo.kernel.api.observer.EventType)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.observer.EventType PERSIST"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.observer.EventType"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.kernel.api.observer.EventType PERSIST"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.observer.EventType.valueOf(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.observer.EventType"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.observer.EventType.valueOf(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'PERSIST'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.kernel.api.observer.EventType,org.fcrepo.kernel.api.observer.EventType)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.kernel.api.observer.EventType,org.fcrepo.kernel.api.observer.EventType)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.api.observer.EventType RESOURCE_CREATION"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.observer.EventType"
        },
        {
          "type": "CtFieldReference",
          "value": "org.fcrepo.kernel.api.observer.EventType RESOURCE_CREATION"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.api.observer.EventType.valueOf(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.api.observer.EventType"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.api.observer.EventType.valueOf(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'RESOURCE_CREATION'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "EventType.PERSIST",
          "childCount": 0
        },
        "dstNode": {
          "label": "EventType.RESOURCE_CREATION",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"PERSIST\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"RESOURCE_CREATION\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        31
      ]
    },
    "aCommitTime": 1467724847,
    "ID": "fcrepo/fcrepo:486",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.api.RdfLexiconTest.otherPredicatesAreNotManaged()",
    "bSource": {
      "startLine": 125,
      "code": "@Test\n    public void otherPredicatesAreNotManaged() {\n        assertTrue( !isManagedPredicateURI.apply( \"http://purl.org/dc/elements/1.1/title\") );\n    }"
    },
    "aSource": {
      "startLine": 125,
      "code": "@Test\n    public void otherPredicatesAreNotManaged() {\n        assertTrue( !isManagedPredicateURI.test( \"http://purl.org/dc/elements/1.1/title\") );\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/RdfLexiconTest.java",
    "bCommit": "f7daf30791",
    "aCommit": "218b9a3762",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue( !isManagedPredicateURI.apply( \"http://purl.org/dc/elements/1.1/title\") );",
          "type": "DELETE",
          "lineNo": 127
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue( !isManagedPredicateURI.test( \"http://purl.org/dc/elements/1.1/title\") );",
          "type": "ADD",
          "lineNo": 127
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Predicate.apply(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.google.common.base.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Predicate.apply(Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://purl.org/dc/elements/1.1/title'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.function.Predicate isManagedPredicateURI"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.function.Predicate.test(Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://purl.org/dc/elements/1.1/title'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "UnaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "apply",
          "childCount": 2
        },
        "dstNode": {
          "label": "test",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        127
      ]
    },
    "aCommitTime": 1438962319,
    "ID": "fcrepo/fcrepo:71",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.RdfStreamStreamingOutputTest.testWriteWithLanguageLiteral()",
    "bSource": {
      "startLine": 207,
      "code": "@Test\n    public void testWriteWithLanguageLiteral() throws IOException {\n\n        assertOutputContainsTriple(create(createURI(\"info:testSubject\"),\n                createURI(\"info:testPredicate\"),\n                NodeFactory.createLiteral(\"french string\", \"fr\", XSDDatatype.XSDstring)));\n\n    }"
    },
    "aSource": {
      "startLine": 207,
      "code": "@Test\n    public void testWriteWithLanguageLiteral() throws IOException {\n\n        assertOutputContainsTriple(create(createURI(\"info:testSubject\"),\n                createURI(\"info:testPredicate\"),\n                NodeFactory.createLiteral(\"french string\", \"fr\")));\n\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/RdfStreamStreamingOutputTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/RdfStreamStreamingOutputTest.java",
    "bCommit": "89d2826552",
    "aCommit": "569b973238",
    "hunk": {
      "sourceChanges": [
        {
          "line": "NodeFactory.createLiteral(\"french string\", \"fr\", XSDDatatype.XSDstring)));",
          "type": "DELETE",
          "lineNo": 212
        }
      ],
      "targetChanges": [
        {
          "line": "NodeFactory.createLiteral(\"french string\", \"fr\")));",
          "type": "ADD",
          "lineNo": 212
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.NodeFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'french string'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fr'"
        },
        {
          "type": "CtTypeAccess",
          "value": "XSDDatatype.XSDstring"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.NodeFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'french string'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fr'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "XSDDatatype.XSDstring",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        210
      ]
    },
    "aCommitTime": 1438746586,
    "ID": "fcrepo/fcrepo:200",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.BinaryServiceImplIT.testCreateDatastreamNodeWithfilename()",
    "bSource": {
      "startLine": 78,
      "code": "@Test\n    public void testCreateDatastreamNodeWithfilename() throws Exception {\n        Session session = repository.login();\n        binaryService.findOrCreate(session, \"/testDatastreamNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                \"xyz.jpg\",\n                null\n        );\n\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"xyz.jpg\", session.getNode(\"/testDatastreamNode\").getNode(JCR_CONTENT)\n                .getProperty(PREMIS_FILE_NAME).getString());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 78,
      "code": "@Test\n    public void testCreateDatastreamNodeWithfilename() throws Exception {\n        Session session = repository.login();\n        binaryService.findOrCreate(session, \"/testDatastreamNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                \"xyz.jpg\",\n                null\n        );\n\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"xyz.jpg\", session.getNode(\"/testDatastreamNode\").getNode(JCR_CONTENT)\n                .getProperty(FILENAME).getString());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/BinaryServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/BinaryServiceImplIT.java",
    "bCommit": "6e755b2768",
    "aCommit": "aadf58de7a",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".getProperty(PREMIS_FILE_NAME).getString());",
          "type": "DELETE",
          "lineNo": 95
        }
      ],
      "targetChanges": [
        {
          "line": ".getProperty(FILENAME).getString());",
          "type": "ADD",
          "lineNo": 95
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "getProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PREMIS_FILE_NAME"
        },
        {
          "type": "CtExecutableReference",
          "value": "getString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "getProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FILENAME"
        },
        {
          "type": "CtExecutableReference",
          "value": "getString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FedoraJcrTypes$PREMIS_FILE_NAME",
          "childCount": 0
        },
        "dstNode": {
          "label": "FedoraJcrTypes$FILENAME",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        95
      ]
    },
    "aCommitTime": 1437088920,
    "ID": "fcrepo/fcrepo:382",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.FedoraBinaryImplTest.testSetContentWithFilename()",
    "bSource": {
      "startLine": 158,
      "code": "@Test\n    public void testSetContentWithFilename() throws RepositoryException,\n            InvalidChecksumException {\n        final org.modeshape.jcr.api.Binary mockBin =\n                mock(org.modeshape.jcr.api.Binary.class);\n        getContentNodeMock(mockContent, 8);\n        when(mockDsNode.getNode(JCR_CONTENT)).thenReturn(mockContent);\n        when(mockDsNode.getSession()).thenReturn(mockSession);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockVF.createBinary(any(InputStream.class), any(String.class)))\n                .thenReturn(mockBin);\n        final Property mockData = mock(Property.class);\n        when(mockContent.canAddMixin(FEDORA_BINARY)).thenReturn(true);\n        when(mockContent.setProperty(JCR_DATA, mockBin)).thenReturn(mockData);\n        when(mockContent.getProperty(JCR_DATA)).thenReturn(mockData);\n        when(mockData.getBinary()).thenReturn(mockBin);\n        testObj.setContent(mockStream, null, null, \"xyz\", null);\n        verify(mockContent).setProperty(PREMIS_FILE_NAME, \"xyz\");\n    }"
    },
    "aSource": {
      "startLine": 158,
      "code": "@Test\n    public void testSetContentWithFilename() throws RepositoryException,\n            InvalidChecksumException {\n        final org.modeshape.jcr.api.Binary mockBin =\n                mock(org.modeshape.jcr.api.Binary.class);\n        getContentNodeMock(mockContent, 8);\n        when(mockDsNode.getNode(JCR_CONTENT)).thenReturn(mockContent);\n        when(mockDsNode.getSession()).thenReturn(mockSession);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockVF.createBinary(any(InputStream.class), any(String.class)))\n                .thenReturn(mockBin);\n        final Property mockData = mock(Property.class);\n        when(mockContent.canAddMixin(FEDORA_BINARY)).thenReturn(true);\n        when(mockContent.setProperty(JCR_DATA, mockBin)).thenReturn(mockData);\n        when(mockContent.getProperty(JCR_DATA)).thenReturn(mockData);\n        when(mockData.getBinary()).thenReturn(mockBin);\n        testObj.setContent(mockStream, null, null, \"xyz\", null);\n        verify(mockContent).setProperty(FILENAME, \"xyz\");\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraBinaryImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraBinaryImplTest.java",
    "bCommit": "6e755b2768",
    "aCommit": "aadf58de7a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockContent).setProperty(PREMIS_FILE_NAME, \"xyz\");",
          "type": "DELETE",
          "lineNo": 175
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockContent).setProperty(FILENAME, \"xyz\");",
          "type": "ADD",
          "lineNo": 175
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setProperty(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContent"
        },
        {
          "type": "CtExecutableReference",
          "value": "setProperty(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PREMIS_FILE_NAME"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'xyz'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setProperty(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContent"
        },
        {
          "type": "CtExecutableReference",
          "value": "setProperty(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FILENAME"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'xyz'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.PREMIS_FILE_NAME",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.impl.FILENAME",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        175
      ]
    },
    "aCommitTime": 1437088920,
    "ID": "fcrepo/fcrepo:383",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.FedoraBinaryImplTest.testGetMimeTypeWithDefault()",
    "bSource": {
      "startLine": 237,
      "code": "@Test\n    public void testGetMimeTypeWithDefault() throws RepositoryException {\n        getContentNodeMock(mockContent, 8);\n        when(mockDsNode.getNode(JCR_CONTENT)).thenReturn(mockContent);\n        when(mockDsNode.hasNode(JCR_CONTENT)).thenReturn(true);\n        when(mockContent.hasProperty(JCR_MIME_TYPE)).thenReturn(false);\n\n        assertEquals(\"application/octet-stream\", testObj.getMimeType());\n    }"
    },
    "aSource": {
      "startLine": 237,
      "code": "@Test\n    public void testGetMimeTypeWithDefault() throws RepositoryException {\n        getContentNodeMock(mockContent, 8);\n        when(mockDsNode.getNode(JCR_CONTENT)).thenReturn(mockContent);\n        when(mockDsNode.hasNode(JCR_CONTENT)).thenReturn(true);\n        when(mockContent.hasProperty(HAS_MIME_TYPE)).thenReturn(false);\n\n        assertEquals(\"application/octet-stream\", testObj.getMimeType());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraBinaryImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraBinaryImplTest.java",
    "bCommit": "6e755b2768",
    "aCommit": "aadf58de7a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockContent.hasProperty(JCR_MIME_TYPE)).thenReturn(false);",
          "type": "DELETE",
          "lineNo": 242
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockContent.hasProperty(HAS_MIME_TYPE)).thenReturn(false);",
          "type": "ADD",
          "lineNo": 242
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasProperty()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContent"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasProperty()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.modeshape.jcr.api.JcrConstants$JCR_MIME_TYPE"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContent"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String HAS_MIME_TYPE"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.modeshape.jcr.api.JcrConstants$JCR_MIME_TYPE",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.FedoraJcrTypes$HAS_MIME_TYPE",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        242
      ]
    },
    "aCommitTime": 1437088920,
    "ID": "fcrepo/fcrepo:384",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraBackupIT.shouldRoundTripBackups()",
    "bSource": {
      "startLine": 39,
      "code": "@Test\n    public void shouldRoundTripBackups() throws Exception {\n        final String objName = randomUUID().toString();\n\n        // set up the object\n        final StringBuilder text = new StringBuilder();\n        for (int x = 0; x < 1000; ++x) {\n            text.append(\"data-\" + x);\n        }\n\n        HttpResponse response;\n        // Create object\n        createObject(objName);\n\n        // Create datastream\n        createDatastream(objName, \"testDS\", text.toString());\n\n        // Verify object exists\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n        // create a named version of it with spaces\n        final HttpPost httpPost = new HttpPost(serverAddress + objName + \"/testDS/fcr:versions\");\n        httpPost.setHeader(\"Slug\", \"version name with spaces\");\n        assertEquals(204, getStatus(httpPost));\n\n        // back it up\n        final File dir = createTempDir();\n        logger.debug(\"Backing up repository to {}\", dir.getCanonicalPath());\n        final HttpPost backupMethod =\n                new HttpPost(serverAddress + \"fcr:backup\");\n        backupMethod.setEntity(new StringEntity(dir.getCanonicalPath()));\n        response = execute(backupMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n        final String content = EntityUtils.toString(response.getEntity());\n        assertEquals(dir.getCanonicalPath(), content);\n        logger.debug(\"Back up directory was {}\", content);\n\n        // delete it\n        response = execute(new HttpDelete(serverAddress + objName));\n        assertEquals(204, response.getStatusLine().getStatusCode());\n\n        // Verify object removed\n        assertDeleted(serverAddress + objName);\n\n        // try to restore it\n        final HttpPost restoreMethod =\n                new HttpPost(serverAddress + \"fcr:restore\");\n        restoreMethod.setEntity(new StringEntity(content));\n        assertEquals(\"Couldn't import!\", 204, getStatus(restoreMethod));\n\n        //check that we made it\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n    }"
    },
    "aSource": {
      "startLine": 39,
      "code": "@Test\n    public void shouldRoundTripBackups() throws Exception {\n        final String objName = randomUUID().toString();\n\n        // set up the object\n        final StringBuilder text = new StringBuilder();\n        for (int x = 0; x < 1000; ++x) {\n            text.append(\"data-\" + x);\n        }\n\n        HttpResponse response;\n        // Create object\n        createObject(objName);\n\n        // Create datastream\n        createDatastream(objName, \"testDS\", text.toString());\n\n        // Verify object exists\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n        // create a named version of it with spaces\n        final HttpPost httpPost = new HttpPost(serverAddress + objName + \"/testDS/fcr:versions\");\n        httpPost.setHeader(\"Slug\", \"version name with spaces\");\n        assertEquals(204, getStatus(httpPost));\n\n        // back it up\n        final File dir = createTempDir();\n        logger.debug(\"Backing up repository to {}\", dir.getCanonicalPath());\n        final HttpPost backupMethod =\n                new HttpPost(serverAddress + \"fcr:backup\");\n        backupMethod.setEntity(new StringEntity(dir.getCanonicalPath()));\n        response = execute(backupMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n        final String content = EntityUtils.toString(response.getEntity());\n        assertEquals(dir.getCanonicalPath(), content);\n        logger.debug(\"Back up directory was {}\", content);\n\n        // delete it\n        response = execute(new HttpDelete(serverAddress + objName));\n        assertEquals(204, response.getStatusLine().getStatusCode());\n\n        // Verify object removed\n        assertDeleted(objName);\n\n        // try to restore it\n        final HttpPost restoreMethod =\n                new HttpPost(serverAddress + \"fcr:restore\");\n        restoreMethod.setEntity(new StringEntity(content));\n        assertEquals(\"Couldn't import!\", 204, getStatus(restoreMethod));\n\n        //check that we made it\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBackupIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBackupIT.java",
    "bCommit": "1c0156c1ab",
    "aCommit": "43c3b3a464",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertDeleted(serverAddress + objName);",
          "type": "DELETE",
          "lineNo": 83
        }
      ],
      "targetChanges": [
        {
          "line": "assertDeleted(objName);",
          "type": "ADD",
          "lineNo": 83
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.assertDeleted(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.assertDeleted(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertDeleted(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertDeleted(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "BinaryOperator",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "objName",
          "childCount": 0
        },
        "dstNode": {
          "label": "objName",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        83
      ]
    },
    "aCommitTime": 1436888557,
    "ID": "fcrepo/fcrepo:181",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraHtmlIT.testGetNode()",
    "bSource": {
      "startLine": 43,
      "code": "@Test\n    public void testGetNode() throws Exception {\n\n        final String pid = getRandomUniquePid();\n        createObject(pid);\n\n        final HttpGet method = new HttpGet(serverAddress + pid);\n        method.addHeader(\"Accept\", \"text/html\");\n        assertEquals(200, getStatus(method));\n    }"
    },
    "aSource": {
      "startLine": 43,
      "code": "@Test\n    public void testGetNode() throws Exception {\n\n        final String pid = getRandomUniqueId();\n        createObject(pid);\n\n        final HttpGet method = new HttpGet(serverAddress + pid);\n        method.addHeader(\"Accept\", \"text/html\");\n        assertEquals(200, getStatus(method));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraHtmlIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraHtmlIT.java",
    "bCommit": "1c0156c1ab",
    "aCommit": "43c3b3a464",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = getRandomUniquePid();",
          "type": "DELETE",
          "lineNo": 46
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = getRandomUniqueId();",
          "type": "ADD",
          "lineNo": 46
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getRandomUniqueId()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRandomUniqueId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRandomUniquePid",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRandomUniqueId",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        46
      ]
    },
    "aCommitTime": 1436888557,
    "ID": "fcrepo/fcrepo:182",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraHtmlIT.testGetDatastreamNode()",
    "bSource": {
      "startLine": 54,
      "code": "@Test\n    public void testGetDatastreamNode() throws Exception {\n\n        final String pid = getRandomUniquePid();\n        createObject(pid);\n\n        createDatastream(pid, \"ds1\", \"foo\");\n\n        final HttpGet method =\n            new HttpGet(serverAddress + pid + \"/ds1\");\n\n        method.addHeader(\"Accept\", \"text/html\");\n        assertEquals(200, getStatus(method));\n    }"
    },
    "aSource": {
      "startLine": 54,
      "code": "@Test\n    public void testGetDatastreamNode() throws Exception {\n\n        final String pid = getRandomUniqueId();\n        createObject(pid);\n\n        createDatastream(pid, \"ds1\", \"foo\");\n\n        final HttpGet method =\n            new HttpGet(serverAddress + pid + \"/ds1\");\n\n        method.addHeader(\"Accept\", \"text/html\");\n        assertEquals(200, getStatus(method));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraHtmlIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraHtmlIT.java",
    "bCommit": "1c0156c1ab",
    "aCommit": "43c3b3a464",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = getRandomUniquePid();",
          "type": "DELETE",
          "lineNo": 57
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = getRandomUniqueId();",
          "type": "ADD",
          "lineNo": 57
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getRandomUniqueId()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRandomUniqueId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRandomUniquePid",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRandomUniqueId",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        57
      ]
    },
    "aCommitTime": 1436888557,
    "ID": "fcrepo/fcrepo:183",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraHtmlIT.testGetTemplate()",
    "bSource": {
      "startLine": 69,
      "code": "@Test\n    public void testGetTemplate() throws Exception {\n        final String pid = getRandomUniquePid();\n        createObject(pid);\n        addMixin(pid, REPOSITORY_NAMESPACE + \"Resource\");\n\n        final HttpGet method = new HttpGet(serverAddress + pid);\n        method.addHeader(\"Accept\", \"text/html\");\n        final HttpResponse response = execute(method);\n        final String html = EntityUtils.toString(response.getEntity());\n        assertTrue(contains(html, \"class=\\\"nt_folder\\\"\"));\n    }"
    },
    "aSource": {
      "startLine": 69,
      "code": "@Test\n    public void testGetTemplate() throws Exception {\n        final String pid = getRandomUniqueId();\n        createObject(pid);\n        addMixin(pid, REPOSITORY_NAMESPACE + \"Resource\");\n\n        final HttpGet method = new HttpGet(serverAddress + pid);\n        method.addHeader(\"Accept\", \"text/html\");\n        final HttpResponse response = execute(method);\n        final String html = EntityUtils.toString(response.getEntity());\n        assertTrue(contains(html, \"class=\\\"nt_folder\\\"\"));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraHtmlIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraHtmlIT.java",
    "bCommit": "1c0156c1ab",
    "aCommit": "43c3b3a464",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = getRandomUniquePid();",
          "type": "DELETE",
          "lineNo": 71
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = getRandomUniqueId();",
          "type": "ADD",
          "lineNo": 71
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getRandomUniqueId()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRandomUniqueId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRandomUniquePid",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRandomUniqueId",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        71
      ]
    },
    "aCommitTime": 1436888557,
    "ID": "fcrepo/fcrepo:184",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraFixityIT.testBinaryVersionFixity()",
    "bSource": {
      "startLine": 92,
      "code": "@Test\n    public void testBinaryVersionFixity() throws Exception {\n        final String pid = getRandomUniquePid();\n\n        createObject(pid);\n        createDatastream(pid, \"dsid\", \"foo\");\n\n        logger.debug(\"Creating binary content version v0 ...\");\n        postVersion(pid + \"/dsid\", \"v0\");\n\n        final HttpGet method = new HttpGet(serverAddress + pid + \"/dsid/fcr%3aversions/v0/fcr:fixity\");\n        final GraphStore graphStore = getGraphStore(method);\n        logger.debug(\"Got binary content versioned fixity triples {}\", graphStore);\n        final Iterator<Quad> stmtIt = graphStore.find(ANY, ANY, HAS_FIXITY_RESULT.asNode(), ANY);\n        assertTrue(stmtIt.hasNext());\n        assertTrue(graphStore.contains(ANY, ANY, HAS_FIXITY_STATE.asNode(),\n                createPlainLiteral(\"SUCCESS\").asNode()));\n\n        assertTrue(graphStore.contains(ANY, ANY, HAS_MESSAGE_DIGEST.asNode(), ANY));\n        assertTrue(graphStore.contains(ANY, ANY, HAS_SIZE.asNode(),\n                createTypedLiteral(3).asNode()));\n    }"
    },
    "aSource": {
      "startLine": 92,
      "code": "@Test\n    public void testBinaryVersionFixity() throws Exception {\n        final String pid = getRandomUniqueId();\n\n        createObject(pid);\n        createDatastream(pid, \"dsid\", \"foo\");\n\n        logger.debug(\"Creating binary content version v0 ...\");\n        postVersion(pid + \"/dsid\", \"v0\");\n\n        final HttpGet method = new HttpGet(serverAddress + pid + \"/dsid/fcr%3aversions/v0/fcr:fixity\");\n        final GraphStore graphStore = getGraphStore(method);\n        logger.debug(\"Got binary content versioned fixity triples {}\", graphStore);\n        final Iterator<Quad> stmtIt = graphStore.find(ANY, ANY, HAS_FIXITY_RESULT.asNode(), ANY);\n        assertTrue(stmtIt.hasNext());\n        assertTrue(graphStore.contains(ANY, ANY, HAS_FIXITY_STATE.asNode(),\n                createPlainLiteral(\"SUCCESS\").asNode()));\n\n        assertTrue(graphStore.contains(ANY, ANY, HAS_MESSAGE_DIGEST.asNode(), ANY));\n        assertTrue(graphStore.contains(ANY, ANY, HAS_SIZE.asNode(),\n                createTypedLiteral(3).asNode()));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraFixityIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraFixityIT.java",
    "bCommit": "1c0156c1ab",
    "aCommit": "43c3b3a464",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = getRandomUniquePid();",
          "type": "DELETE",
          "lineNo": 94
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = getRandomUniqueId();",
          "type": "ADD",
          "lineNo": 94
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getRandomUniqueId()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRandomUniqueId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRandomUniquePid",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRandomUniqueId",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        94
      ]
    },
    "aCommitTime": 1436888557,
    "ID": "fcrepo/fcrepo:185",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraFixityIT.testCheckDatastreamFixity()",
    "bSource": {
      "startLine": 50,
      "code": "@Test\n    public void testCheckDatastreamFixity() throws Exception {\n        final String pid = getRandomUniquePid();\n\n        createObject(pid);\n        createDatastream(pid, \"zxc\", \"foo\");\n\n        final HttpGet method = new HttpGet(serverAddress + pid + \"/zxc/fcr:fixity\");\n        final GraphStore graphStore = getGraphStore(method);\n        logger.debug(\"Got triples {}\", graphStore);\n\n        assertTrue(graphStore.contains(ANY,\n                                          createResource(serverAddress + pid + \"/zxc\").asNode(),\n                                          HAS_FIXITY_RESULT.asNode(),\n                                          ANY\n                ));\n        assertTrue(graphStore.contains(ANY, ANY, HAS_FIXITY_STATE.asNode(),\n                createPlainLiteral(\"SUCCESS\").asNode()));\n\n        assertTrue(graphStore.contains(ANY, ANY,\n                HAS_MESSAGE_DIGEST.asNode(), createResource(\n                        \"urn:sha1:0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33\")\n                        .asNode()));\n        assertTrue(graphStore.contains(ANY, ANY, HAS_SIZE.asNode(),\n                createTypedLiteral(3).asNode()));\n    }"
    },
    "aSource": {
      "startLine": 50,
      "code": "@Test\n    public void testCheckDatastreamFixity() throws Exception {\n        final String pid = getRandomUniqueId();\n\n        createObject(pid);\n        createDatastream(pid, \"zxc\", \"foo\");\n\n        final HttpGet method = new HttpGet(serverAddress + pid + \"/zxc/fcr:fixity\");\n        final GraphStore graphStore = getGraphStore(method);\n        logger.debug(\"Got triples {}\", graphStore);\n\n        assertTrue(graphStore.contains(ANY,\n                                          createResource(serverAddress + pid + \"/zxc\").asNode(),\n                                          HAS_FIXITY_RESULT.asNode(),\n                                          ANY\n                ));\n        assertTrue(graphStore.contains(ANY, ANY, HAS_FIXITY_STATE.asNode(),\n                createPlainLiteral(\"SUCCESS\").asNode()));\n\n        assertTrue(graphStore.contains(ANY, ANY,\n                HAS_MESSAGE_DIGEST.asNode(), createResource(\n                        \"urn:sha1:0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33\")\n                        .asNode()));\n        assertTrue(graphStore.contains(ANY, ANY, HAS_SIZE.asNode(),\n                createTypedLiteral(3).asNode()));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraFixityIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraFixityIT.java",
    "bCommit": "1c0156c1ab",
    "aCommit": "43c3b3a464",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = getRandomUniquePid();",
          "type": "DELETE",
          "lineNo": 52
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = getRandomUniqueId();",
          "type": "ADD",
          "lineNo": 52
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getRandomUniqueId()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRandomUniqueId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRandomUniquePid",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRandomUniqueId",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        52
      ]
    },
    "aCommitTime": 1436888557,
    "ID": "fcrepo/fcrepo:186",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraFixityIT.testResponseContentTypes()",
    "bSource": {
      "startLine": 77,
      "code": "@Test\n    public void testResponseContentTypes() throws Exception {\n        final String pid = getRandomUniquePid();\n        createObject(pid);\n        createDatastream(pid, \"zxc\", \"foo\");\n\n        for (final String type : RDFMediaType.POSSIBLE_RDF_RESPONSE_VARIANTS_STRING) {\n            final HttpGet method =\n                    new HttpGet(serverAddress + pid + \"/zxc/fcr:fixity\");\n\n            method.addHeader(\"Accept\", type);\n            assertEquals(type, getContentType(method));\n        }\n    }"
    },
    "aSource": {
      "startLine": 77,
      "code": "@Test\n    public void testResponseContentTypes() throws Exception {\n        final String pid = getRandomUniqueId();\n        createObject(pid);\n        createDatastream(pid, \"zxc\", \"foo\");\n\n        for (final String type : RDFMediaType.POSSIBLE_RDF_RESPONSE_VARIANTS_STRING) {\n            final HttpGet method =\n                    new HttpGet(serverAddress + pid + \"/zxc/fcr:fixity\");\n\n            method.addHeader(\"Accept\", type);\n            assertEquals(type, getContentType(method));\n        }\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraFixityIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraFixityIT.java",
    "bCommit": "1c0156c1ab",
    "aCommit": "43c3b3a464",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = getRandomUniquePid();",
          "type": "DELETE",
          "lineNo": 79
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = getRandomUniqueId();",
          "type": "ADD",
          "lineNo": 79
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.getRandomUniquePid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getRandomUniqueId()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRandomUniqueId()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRandomUniquePid",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRandomUniqueId",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        79
      ]
    },
    "aCommitTime": 1436888557,
    "ID": "fcrepo/fcrepo:187",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraNodeTypesIT.testResponseContentTypes()",
    "bSource": {
      "startLine": 56,
      "code": "@Test\n    public void testResponseContentTypes() throws Exception {\n        for (final String type : RDFMediaType.POSSIBLE_RDF_RESPONSE_VARIANTS_STRING) {\n            final HttpGet method =\n                    new HttpGet(serverAddress + \"fcr:nodetypes\");\n\n            method.addHeader(\"Accept\", type);\n            assertEquals(type, getContentType(method));\n        }\n     }"
    },
    "aSource": {
      "startLine": 57,
      "code": "@Test\n    public void testResponseContentTypes() throws IOException {\n        for (final String type : POSSIBLE_RDF_RESPONSE_VARIANTS_STRING) {\n            final HttpGet method = new HttpGet(serverAddress + \"fcr:nodetypes\");\n            method.addHeader(\"Accept\", type);\n            assertEquals(type, getContentType(method));\n        }\n     }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraNodeTypesIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraNodeTypesIT.java",
    "bCommit": "1c0156c1ab",
    "aCommit": "43c3b3a464",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testResponseContentTypes() throws Exception {",
          "type": "DELETE",
          "lineNo": 57
        },
        {
          "line": "for (final String type : RDFMediaType.POSSIBLE_RDF_RESPONSE_VARIANTS_STRING) {",
          "type": "DELETE",
          "lineNo": 58
        },
        {
          "line": "final HttpGet method =",
          "type": "DELETE",
          "lineNo": 59
        },
        {
          "line": "new HttpGet(serverAddress + \"fcr:nodetypes\");",
          "type": "DELETE",
          "lineNo": 60
        }
      ],
      "targetChanges": [
        {
          "line": "public void testResponseContentTypes() throws IOException {",
          "type": "ADD",
          "lineNo": 58
        },
        {
          "line": "for (final String type : POSSIBLE_RDF_RESPONSE_VARIANTS_STRING) {",
          "type": "ADD",
          "lineNo": 59
        },
        {
          "line": "final HttpGet method = new HttpGet(serverAddress + \"fcr:nodetypes\");",
          "type": "ADD",
          "lineNo": 60
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.integration.http.api.FedoraNodeTypesIT.testResponseContentTypes()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Exception"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String type"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtFieldRead",
          "value": "String[] POSSIBLE_RDF_RESPONSE_VARIANTS_STRING"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.http.commons.domain.RDFMediaType"
        },
        {
          "type": "CtFieldReference",
          "value": "String[] POSSIBLE_RDF_RESPONSE_VARIANTS_STRING"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.client.methods.HttpGet method"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpGet"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.http.client.methods.HttpGet(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpGet"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fcr:nodetypes'"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.integration.http.api.FedoraNodeTypesIT.testResponseContentTypes()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String type"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtFieldRead",
          "value": "String[] POSSIBLE_RDF_RESPONSE_VARIANTS_STRING"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.client.methods.HttpGet method"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpGet"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.http.client.methods.HttpGet(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpGet"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fcr:nodetypes'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.Exception",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.io.IOException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "ForEach",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.http.commons.domain.RDFMediaType",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        59
      ]
    },
    "aCommitTime": 1436888557,
    "ID": "fcrepo/fcrepo:188",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.iterators.RdfRemoverTest.testRemovingExistentProperty()",
    "bSource": {
      "startLine": 80,
      "code": "@Test\n    public void testRemovingExistentProperty() throws Exception {\n\n        when(mockNode.hasProperty(propertyShortName)).thenReturn(true);\n        when(mockNode.getProperty(propertyShortName)).thenReturn(mockProperty);\n        when(mockProperty.isMultiple()).thenReturn(false);\n        when(mockProperty.getValue()).thenReturn(mockValue);\n        testRemover = new RdfRemover(mockGraphSubjects, mockSession, testStream);\n        testRemover.operateOnProperty(descriptiveStmnt, resource);\n        verify(mockProperty).setValue((Value) null);\n    }"
    },
    "aSource": {
      "startLine": 80,
      "code": "@Test\n    public void testRemovingExistentProperty() throws Exception {\n\n        when(mockNode.hasProperty(propertyShortName)).thenReturn(true);\n        when(mockNode.getProperty(propertyShortName)).thenReturn(mockProperty);\n        when(mockProperty.isMultiple()).thenReturn(false);\n        when(mockProperty.getValue()).thenReturn(mockValue);\n        testRemover = new RdfRemover(mockGraphSubjects, mockSession, testStream);\n        testRemover.operateOnProperty(descriptiveStmnt, resource);\n        verify(mockProperty).remove();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/iterators/RdfRemoverTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/iterators/RdfRemoverTest.java",
    "bCommit": "a596ae0c78",
    "aCommit": "0a55206d1c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockProperty).setValue((Value) null);",
          "type": "DELETE",
          "lineNo": 89
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockProperty).remove();",
          "type": "ADD",
          "lineNo": 89
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setValue(javax.jcr.Value)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Property mockProperty"
        },
        {
          "type": "CtExecutableReference",
          "value": "setValue(javax.jcr.Value)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.Value"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "remove()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Property mockProperty"
        },
        {
          "type": "CtExecutableReference",
          "value": "remove()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "setValue",
          "childCount": 2
        },
        "dstNode": {
          "label": "remove",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        89
      ]
    },
    "aCommitTime": 1435667826,
    "ID": "fcrepo/fcrepo:26",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testPermissiveFAD()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(9)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 87,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, atLeastOnce()).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "1350ed485c",
    "aCommit": "a596ae0c78",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, times(9)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 106
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, atLeastOnce()).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 109
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '9'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "atLeastOnce()"
        },
        {
          "type": "CtExecutableReference",
          "value": "atLeastOnce()"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "times",
          "childCount": 1
        },
        "dstNode": {
          "label": "atLeastOnce",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        109
      ]
    },
    "aCommitTime": 1435667764,
    "ID": "fcrepo/fcrepo:375",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.observer.FedoraEventTest.testToString()",
    "bSource": {
      "startLine": 130,
      "code": "@Test\n    public void testToString() throws RepositoryException {\n        final String text = e.toString();\n        assertTrue(\"Should contain path: \" + text, text.contains(e.getPath()));\n        assertTrue(\"Should contain info: \" + text, text.contains(e.getInfo().toString()));\n\n        assertTrue(\"Should contain types: \" + text, text.contains(Integer.toString(e.getTypes().iterator().next())));\n        assertTrue(\"Should contain date: \" + text, text.contains(Long.toString(e.getDate())));\n\n        assertFalse(\"Should not contain user-data: \" + text, text.contains(e.getUserData()));\n        assertFalse(\"Should not contain user-id: \" + text, text.contains(e.getUserID()));\n    }"
    },
    "aSource": {
      "startLine": 130,
      "code": "@Test\n    public void testToString() {\n        final String text = e.toString();\n        assertTrue(\"Should contain path: \" + text, text.contains(e.getPath()));\n        assertTrue(\"Should contain info: \" + text, text.contains(e.getInfo().toString()));\n\n        assertTrue(\"Should contain types: \" + text, text.contains(Integer.toString(e.getTypes().iterator().next())));\n        assertTrue(\"Should contain date: \" + text, text.contains(Long.toString(e.getDate())));\n\n        assertFalse(\"Should not contain user-data: \" + text, text.contains(e.getUserData()));\n        assertFalse(\"Should not contain user-id: \" + text, text.contains(e.getUserID()));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/observer/FedoraEventTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/observer/FedoraEventTest.java",
    "bCommit": "447e56a954",
    "aCommit": "aa8748ba90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testToString() throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 131
        }
      ],
      "targetChanges": [
        {
          "line": "public void testToString() {",
          "type": "ADD",
          "lineNo": 131
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.observer.FedoraEventTest.testToString()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.observer.FedoraEventTest.testToString()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        131
      ]
    },
    "aCommitTime": 1435620812,
    "ID": "fcrepo/fcrepo:410",
    "trivial": null
  },
  {
    "name": "org.fcrepo.mint.UUIDPathMinterTest.testMintPid()",
    "bSource": {
      "startLine": 34,
      "code": "@Test\n    public void testMintPid() {\n\n        final String pid = new UUIDPathMinter(3, 1).mintPid();\n\n        assertTrue(\"PID wasn't a UUID path\", compile(PID_PATTERN).matcher(pid)\n                .find());\n\n    }"
    },
    "aSource": {
      "startLine": 33,
      "code": "@Test\n    public void testMintPid() {\n\n        final String pid = new UUIDPathMinter(3, 1).get();\n\n        assertTrue(\"PID wasn't a UUID path\", compile(PID_PATTERN).matcher(pid)\n                .find());\n\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/UUIDPathMinterTest.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/UUIDPathMinterTest.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = new UUIDPathMinter(3, 1).mintPid();",
          "type": "DELETE",
          "lineNo": 37
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = new UUIDPathMinter(3, 1).get();",
          "type": "ADD",
          "lineNo": 36
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.UUIDPathMinter.mintPid()"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.mint.UUIDPathMinter.UUIDPathMinter(int,int)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.mint.UUIDPathMinter"
        },
        {
          "type": "CtLiteral",
          "value": "int '3'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.UUIDPathMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.UUIDPathMinter.get()"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.mint.UUIDPathMinter.UUIDPathMinter(int,int)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.mint.UUIDPathMinter"
        },
        {
          "type": "CtLiteral",
          "value": "int '3'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.UUIDPathMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        36
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:359",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.mint.UUIDPathMinterTest.testMintPidWithoutSegments()",
    "bSource": {
      "startLine": 44,
      "code": "@Test\n    public void testMintPidWithoutSegments() {\n\n        final String pid = new UUIDPathMinter(0, 0).mintPid();\n\n        assertTrue(\"PID wasn't a UUID path\", compile(UUID_PATTERN).matcher(pid)\n                .find());\n\n    }"
    },
    "aSource": {
      "startLine": 43,
      "code": "@Test\n    public void testMintPidWithoutSegments() {\n\n        final String pid = new UUIDPathMinter(0, 0).get();\n\n        assertTrue(\"PID wasn't a UUID path\", compile(UUID_PATTERN).matcher(pid)\n                .find());\n\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/UUIDPathMinterTest.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/UUIDPathMinterTest.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = new UUIDPathMinter(0, 0).mintPid();",
          "type": "DELETE",
          "lineNo": 47
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = new UUIDPathMinter(0, 0).get();",
          "type": "ADD",
          "lineNo": 46
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.UUIDPathMinter.mintPid()"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.mint.UUIDPathMinter.UUIDPathMinter(int,int)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.mint.UUIDPathMinter"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.UUIDPathMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.UUIDPathMinter.get()"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.mint.UUIDPathMinter.UUIDPathMinter(int,int)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.mint.UUIDPathMinter"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.UUIDPathMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        46
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:360",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.mint.UUIDPidMinterTest.testMintPid()",
    "bSource": {
      "startLine": 40,
      "code": "@Test\n    public void testMintPid() {\n\n        final String pid = testMinter.mintPid();\n\n        assertTrue(\"PID wasn't a UUID\", compile(PID_PATTERN).matcher(pid)\n                .find());\n\n    }"
    },
    "aSource": {
      "startLine": 40,
      "code": "@Test\n    public void testMintPid() {\n\n        final String pid = testMinter.get();\n\n        assertTrue(\"PID wasn't a UUID\", compile(PID_PATTERN).matcher(pid)\n                .find());\n\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/UUIDPidMinterTest.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/UUIDPidMinterTest.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = testMinter.mintPid();",
          "type": "DELETE",
          "lineNo": 43
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = testMinter.get();",
          "type": "ADD",
          "lineNo": 43
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.UUIDPathMinter.mintPid()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.mint.UUIDPidMinter testMinter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.UUIDPathMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.UUIDPathMinter.get()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.mint.UUIDPidMinter testMinter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.UUIDPathMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        43
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:361",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.mint.HttpPidMinterTest.testMintPidNullHttpMethod()",
    "bSource": {
      "startLine": 56,
      "code": "@Test\n    public void testMintPidNullHttpMethod() throws Exception {\n        final HttpPidMinter testMinter = new HttpPidMinter(\n                \"http://localhost/minter\", null, \"\", \"\", \".*/\", \"\");\n\n        final HttpClient mockClient = mock(HttpClient.class);\n        final HttpResponse mockResponse = mock(HttpResponse.class);\n        final ByteArrayEntity entity = new ByteArrayEntity(\"/foo/bar/baz\".getBytes());\n        testMinter.client = mockClient;\n\n        when(mockClient.execute(isA(HttpUriRequest.class))).thenReturn(mockResponse);\n        when(mockResponse.getEntity()).thenReturn(entity);\n\n        final String pid = testMinter.mintPid();\n        verify(mockClient).execute(isA(HttpUriRequest.class));\n        assertEquals( pid, \"baz\" );\n    }"
    },
    "aSource": {
      "startLine": 56,
      "code": "@Test\n    public void testMintPidNullHttpMethod() throws Exception {\n        final HttpPidMinter testMinter = new HttpPidMinter(\n                \"http://localhost/minter\", null, \"\", \"\", \".*/\", \"\");\n\n        final HttpClient mockClient = mock(HttpClient.class);\n        final HttpResponse mockResponse = mock(HttpResponse.class);\n        final ByteArrayEntity entity = new ByteArrayEntity(\"/foo/bar/baz\".getBytes());\n        testMinter.client = mockClient;\n\n        when(mockClient.execute(isA(HttpUriRequest.class))).thenReturn(mockResponse);\n        when(mockResponse.getEntity()).thenReturn(entity);\n\n        final String pid = testMinter.get();\n        verify(mockClient).execute(isA(HttpUriRequest.class));\n        assertEquals( pid, \"baz\" );\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/HttpPidMinterTest.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/HttpPidMinterTest.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = testMinter.mintPid();",
          "type": "DELETE",
          "lineNo": 69
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = testMinter.get();",
          "type": "ADD",
          "lineNo": 69
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter testMinter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter testMinter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        69
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:362",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.mint.HttpPidMinterTest.testMintPidXPath()",
    "bSource": {
      "startLine": 74,
      "code": "@Test\n    public void testMintPidXPath() throws Exception {\n        final HttpPidMinter testMinter = new HttpPidMinter(\n            \"http://localhost/minter\",\"POST\", \"\", \"\", \"\", \"/test/id\");\n\n        final HttpClient mockClient = mock(HttpClient.class);\n        final HttpResponse mockResponse = mock(HttpResponse.class);\n        final ByteArrayEntity entity = new ByteArrayEntity(\"<test><id>baz</id></test>\".getBytes());\n        testMinter.client = mockClient;\n\n        when(mockClient.execute(isA(HttpUriRequest.class))).thenReturn(mockResponse);\n        when(mockResponse.getEntity()).thenReturn(entity);\n\n        final String pid = testMinter.mintPid();\n        verify(mockClient).execute(isA(HttpUriRequest.class));\n        assertEquals(pid, \"baz\");\n    }"
    },
    "aSource": {
      "startLine": 74,
      "code": "@Test\n    public void testMintPidXPath() throws Exception {\n        final HttpPidMinter testMinter = new HttpPidMinter(\n            \"http://localhost/minter\",\"POST\", \"\", \"\", \"\", \"/test/id\");\n\n        final HttpClient mockClient = mock(HttpClient.class);\n        final HttpResponse mockResponse = mock(HttpResponse.class);\n        final ByteArrayEntity entity = new ByteArrayEntity(\"<test><id>baz</id></test>\".getBytes());\n        testMinter.client = mockClient;\n\n        when(mockClient.execute(isA(HttpUriRequest.class))).thenReturn(mockResponse);\n        when(mockResponse.getEntity()).thenReturn(entity);\n\n        final String pid = testMinter.get();\n        verify(mockClient).execute(isA(HttpUriRequest.class));\n        assertEquals(pid, \"baz\");\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/HttpPidMinterTest.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/HttpPidMinterTest.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = testMinter.mintPid();",
          "type": "DELETE",
          "lineNo": 87
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = testMinter.get();",
          "type": "ADD",
          "lineNo": 87
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter testMinter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter testMinter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        87
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:363",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.mint.HttpPidMinterTest.testMintPid()",
    "bSource": {
      "startLine": 38,
      "code": "@Test\n    public void testMintPid() throws Exception {\n        final HttpPidMinter testMinter = new HttpPidMinter(\n            \"http://localhost/minter\",\"POST\", \"\", \"\", \".*/\", \"\");\n\n        final HttpClient mockClient = mock(HttpClient.class);\n        final HttpResponse mockResponse = mock(HttpResponse.class);\n        final ByteArrayEntity entity = new ByteArrayEntity(\"/foo/bar/baz\".getBytes());\n        testMinter.client = mockClient;\n\n        when(mockClient.execute(isA(HttpUriRequest.class))).thenReturn(mockResponse);\n        when(mockResponse.getEntity()).thenReturn(entity);\n\n        final String pid = testMinter.mintPid();\n        verify(mockClient).execute(isA(HttpUriRequest.class));\n        assertEquals( pid, \"baz\" );\n    }"
    },
    "aSource": {
      "startLine": 38,
      "code": "@Test\n    public void testMintPid() throws Exception {\n        final HttpPidMinter testMinter = new HttpPidMinter(\n            \"http://localhost/minter\",\"POST\", \"\", \"\", \".*/\", \"\");\n\n        final HttpClient mockClient = mock(HttpClient.class);\n        final HttpResponse mockResponse = mock(HttpResponse.class);\n        final ByteArrayEntity entity = new ByteArrayEntity(\"/foo/bar/baz\".getBytes());\n        testMinter.client = mockClient;\n\n        when(mockClient.execute(isA(HttpUriRequest.class))).thenReturn(mockResponse);\n        when(mockResponse.getEntity()).thenReturn(entity);\n\n        final String pid = testMinter.get();\n        verify(mockClient).execute(isA(HttpUriRequest.class));\n        assertEquals( pid, \"baz\" );\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/HttpPidMinterTest.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/mint/HttpPidMinterTest.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = testMinter.mintPid();",
          "type": "DELETE",
          "lineNo": 51
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = testMinter.get();",
          "type": "ADD",
          "lineNo": 51
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter testMinter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter testMinter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        51
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:364",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.mint.HttpPidMinterIT.shouldMintPidWithNullMethod()",
    "bSource": {
      "startLine": 116,
      "code": "@Test\n    public void shouldMintPidWithNullMethod() {\n        final String res = \"/res4\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, null, \"\", \"\", \".*/\", null);\n        final String pid = minter.mintPid();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "aSource": {
      "startLine": 116,
      "code": "@Test\n    public void shouldMintPidWithNullMethod() {\n        final String res = \"/res4\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, null, \"\", \"\", \".*/\", null);\n        final String pid = minter.get();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = minter.mintPid();",
          "type": "DELETE",
          "lineNo": 122
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = minter.get();",
          "type": "ADD",
          "lineNo": 122
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        122
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:365",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.mint.HttpPidMinterIT.shouldMintPidXml()",
    "bSource": {
      "startLine": 126,
      "code": "@Test\n    public void shouldMintPidXml() {\n        final String res = \"/xml1\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"<test><id>baz</id></test>\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"POST\"\n                , \"\", \"\", \"\", \"/test/id\");\n        final String pid = minter.mintPid();\n        assertEquals(pid, \"baz\");\n    }"
    },
    "aSource": {
      "startLine": 126,
      "code": "@Test\n    public void shouldMintPidXml() {\n        final String res = \"/xml1\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"<test><id>baz</id></test>\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"POST\"\n                , \"\", \"\", \"\", \"/test/id\");\n        final String pid = minter.get();\n        assertEquals(pid, \"baz\");\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = minter.mintPid();",
          "type": "DELETE",
          "lineNo": 133
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = minter.get();",
          "type": "ADD",
          "lineNo": 133
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        133
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:366",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.mint.HttpPidMinterIT.shouldMintPidWithPUT()",
    "bSource": {
      "startLine": 106,
      "code": "@Test\n    public void shouldMintPidWithPUT() {\n        final String res = \"/putres\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"PUT\", \"\", \"\", \".*/\", null);\n        final String pid = minter.mintPid();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "aSource": {
      "startLine": 106,
      "code": "@Test\n    public void shouldMintPidWithPUT() {\n        final String res = \"/putres\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"PUT\", \"\", \"\", \".*/\", null);\n        final String pid = minter.get();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = minter.mintPid();",
          "type": "DELETE",
          "lineNo": 112
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = minter.get();",
          "type": "ADD",
          "lineNo": 112
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        112
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:367",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.mint.HttpPidMinterIT.shouldMintPidXmlInvalid()",
    "bSource": {
      "startLine": 148,
      "code": "@Test (expected = RuntimeException.class)\n    public void shouldMintPidXmlInvalid() {\n        final String res = \"/xml2\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"<test><id>baz</id></tet>\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"POST\"\n                , \"\", \"\", \"\", \"/test/id\");\n        minter.mintPid();\n    }"
    },
    "aSource": {
      "startLine": 148,
      "code": "@Test (expected = RuntimeException.class)\n    public void shouldMintPidXmlInvalid() {\n        final String res = \"/xml2\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"<test><id>baz</id></tet>\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"POST\"\n                , \"\", \"\", \"\", \"/test/id\");\n        minter.get();\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "minter.mintPid();",
          "type": "DELETE",
          "lineNo": 155
        }
      ],
      "targetChanges": [
        {
          "line": "minter.get();",
          "type": "ADD",
          "lineNo": 155
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        155
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:368",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.mint.HttpPidMinterIT.shouldMintPid()",
    "bSource": {
      "startLine": 51,
      "code": "@Test\n    public void shouldMintPid() {\n        final String res = \"/res1\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"POST\", \"\", \"\", \".*/\", null);\n        final String pid = minter.mintPid();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "aSource": {
      "startLine": 51,
      "code": "@Test\n    public void shouldMintPid() {\n        final String res = \"/res1\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"POST\", \"\", \"\", \".*/\", null);\n        final String pid = minter.get();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = minter.mintPid();",
          "type": "DELETE",
          "lineNo": 57
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = minter.get();",
          "type": "ADD",
          "lineNo": 57
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        57
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:369",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.mint.HttpPidMinterIT.shouldMintPid2()",
    "bSource": {
      "startLine": 61,
      "code": "@Test\n    public void shouldMintPid2() {\n        final String res = \"/res2\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"POST\", \"\", \"\", \" \", null);\n        final String pid = minter.mintPid();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "aSource": {
      "startLine": 61,
      "code": "@Test\n    public void shouldMintPid2() {\n        final String res = \"/res2\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"POST\", \"\", \"\", \" \", null);\n        final String pid = minter.get();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = minter.mintPid();",
          "type": "DELETE",
          "lineNo": 67
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = minter.get();",
          "type": "ADD",
          "lineNo": 67
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        67
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:370",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.mint.HttpPidMinterIT.shouldMintPidWithGET()",
    "bSource": {
      "startLine": 96,
      "code": "@Test\n    public void shouldMintPidWithGET() {\n        final String res = \"/getres\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"GET\", \"\", \"\", \".*/\", null);\n        final String pid = minter.mintPid();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "aSource": {
      "startLine": 96,
      "code": "@Test\n    public void shouldMintPidWithGET() {\n        final String res = \"/getres\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"GET\", \"\", \"\", \".*/\", null);\n        final String pid = minter.get();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = minter.mintPid();",
          "type": "DELETE",
          "lineNo": 102
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = minter.get();",
          "type": "ADD",
          "lineNo": 102
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        102
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:371",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.mint.HttpPidMinterIT.shouldMintPid3()",
    "bSource": {
      "startLine": 71,
      "code": "@Test\n    public void shouldMintPid3() {\n        final String res = \"/res3\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"WHATEVER\", \"\", \"\", \" \", null);\n        final String pid = minter.mintPid();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "aSource": {
      "startLine": 71,
      "code": "@Test\n    public void shouldMintPid3() {\n        final String res = \"/res3\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"WHATEVER\", \"\", \"\", \" \", null);\n        final String pid = minter.get();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = minter.mintPid();",
          "type": "DELETE",
          "lineNo": 77
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = minter.get();",
          "type": "ADD",
          "lineNo": 77
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        77
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:372",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.mint.HttpPidMinterIT.shouldRunWithNoAuth()",
    "bSource": {
      "startLine": 137,
      "code": "@Test\n    public void shouldRunWithNoAuth() {\n        final String res = \"/res5\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"POST\",\n                \"fedoraAdmin\", \"secret\", \".*/\", null);\n        final String pid = minter.mintPid();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "aSource": {
      "startLine": 137,
      "code": "@Test\n    public void shouldRunWithNoAuth() {\n        final String res = \"/res5\";\n        final String server = PREFIX + getPort() + res;\n        addHandler(\"abc\", res);\n        final HttpPidMinter minter = new HttpPidMinter(server, \"POST\",\n                \"fedoraAdmin\", \"secret\", \".*/\", null);\n        final String pid = minter.get();\n        assertEquals(pid, \"abc\");\n    }"
    },
    "bPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "aPath": "fcrepo-mint/src/test/java/org/fcrepo/integration/mint/HttpPidMinterIT.java",
    "bCommit": "f13ca21480",
    "aCommit": "a240d990a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = minter.mintPid();",
          "type": "DELETE",
          "lineNo": 144
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = minter.get();",
          "type": "ADD",
          "lineNo": 144
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.mintPid()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.mint.HttpPidMinter minter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.mint.HttpPidMinter.get()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mintPid",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        144
      ]
    },
    "aCommitTime": 1435250543,
    "ID": "fcrepo/fcrepo:373",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.impl.rdf.JcrRdfToolsTest.shouldAddBlankNodePairtreeMixin()",
    "bSource": {
      "startLine": 350,
      "code": "@Test\n    public void shouldAddBlankNodePairtreeMixin() throws RepositoryException {\n        final Model m = createDefaultModel();\n        final Resource resource = createResource();\n        final Statement x = m.createStatement(resource,\n                createProperty(\"info:x\"),\n                resource);\n        testObj.jcrTools = mock(JcrTools.class);\n        when(testObj.jcrTools.findOrCreateNode(eq(mockSession), anyString())).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(\"/x\");\n        when(mockNode.getParent()).thenReturn(mockHashNode);\n        when(mockHashNode.getParent()).thenReturn(mockChildNode);\n        when(mockHashNode.isNew()).thenReturn(true);\n        when(FedoraTypesUtils.getClosestExistingAncestor(mockSession,\"/.well-known/genid/\"))\n                .thenReturn(mockChildNode);\n        final Statement statement = testObj.skolemize(testSubjects, x);\n        assertEquals(\"info:fedora/x\", statement.getSubject().toString());\n        assertEquals(\"info:fedora/x\", statement.getObject().toString());\n        verify(testObj.jcrTools).findOrCreateNode(mockSession, \"/.well-known/genid/\");\n        verify(mockNode).addMixin(FEDORA_BLANKNODE);\n        verify(mockNode.getParent()).addMixin(FEDORA_PAIRTREE);\n    }"
    },
    "aSource": {
      "startLine": 350,
      "code": "@Test\n    public void shouldAddBlankNodePairtreeMixin() throws RepositoryException {\n        final Model m = createDefaultModel();\n        final Resource resource = createResource();\n        final Statement x = m.createStatement(resource,\n                createProperty(\"info:x\"),\n                resource);\n        testObj.jcrTools = mock(JcrTools.class);\n        when(testObj.jcrTools.findOrCreateNode(eq(mockSession), anyString())).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(\"/x\");\n        when(mockNode.getParent()).thenReturn(mockHashNode);\n        when(mockHashNode.getParent()).thenReturn(mockChildNode);\n        when(mockHashNode.isNew()).thenReturn(true);\n        when(FedoraTypesUtils.getClosestExistingAncestor(mockSession,\"/.well-known/genid/\"))\n                .thenReturn(mockChildNode);\n        final Statement statement = testObj.skolemize(testSubjects, x);\n        assertEquals(\"info:fedora/x\", statement.getSubject().toString());\n        assertEquals(\"info:fedora/x\", statement.getObject().toString());\n        verify(testObj.jcrTools).findOrCreateNode(mockSession, \"/.well-known/genid/\");\n        verify(mockNode).addMixin(FEDORA_SKOLEM);\n        verify(mockNode.getParent()).addMixin(FEDORA_PAIRTREE);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/JcrRdfToolsTest.java",
    "bCommit": "c5a9b37632",
    "aCommit": "0bbe914f42",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockNode).addMixin(FEDORA_BLANKNODE);",
          "type": "DELETE",
          "lineNo": 369
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockNode).addMixin(FEDORA_SKOLEM);",
          "type": "ADD",
          "lineNo": 369
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_BLANKNODE"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_SKOLEM"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.rdf.FEDORA_BLANKNODE",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.impl.rdf.FEDORA_SKOLEM",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        369
      ]
    },
    "aCommitTime": 1432822985,
    "ID": "fcrepo/fcrepo:29",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testWriteProperty()",
    "bSource": {
      "startLine": 59,
      "code": "@Test(expected = RepositoryException.class)\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <\" + REPOSITORY_NAMESPACE + \"> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 60,
      "code": "@Test(expected = RepositoryRuntimeException.class)\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <\" + REPOSITORY_NAMESPACE + \"> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "bCommit": "957f99716f",
    "aCommit": "c5a9b37632",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test(expected = RepositoryException.class)",
          "type": "DELETE",
          "lineNo": 59
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = RepositoryRuntimeException.class)",
          "type": "ADD",
          "lineNo": 60
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Annotation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.exception.RepositoryRuntimeException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        75
      ]
    },
    "aCommitTime": 1432759368,
    "ID": "fcrepo/fcrepo:450",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testRemoveProperty()",
    "bSource": {
      "startLine": 85,
      "code": "@Test(expected = RepositoryException.class)\n    public void testRemoveProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <\" + REPOSITORY_NAMESPACE + \"> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:remove \" +\n                \"'some-property-to-remove' }\";\n\n        // Write the properties\n        final DefaultIdentifierTranslator graphSubjects = new DefaultIdentifierTranslator(session);\n        object.updateProperties(graphSubjects, sparql, new RdfStream());\n\n        // Verify property exists\n        final Property property = object.getNode().getProperty(\"fedora:remove\");\n        assertNotNull(property);\n        assertEquals(\"some-property-to-remove\", property.getValues()[0].getString());\n\n        final String sparqlRemove = \"PREFIX fedora: <\" + REPOSITORY_NAMESPACE + \"> \" +\n                \"DELETE {\" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s \" +\n                \"} WHERE { \" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s\" +\n                \"}\";\n\n        // Remove the properties\n        object.updateProperties(graphSubjects,\n                sparqlRemove,\n                object.getTriples(graphSubjects, PropertiesRdfContext.class));\n\n        // Persist the object (although the propery will be removed from memory without this.)\n        session.save();\n\n        // Verify\n        boolean thrown = false;\n        try {\n            object.getNode().getProperty(\"fedora:remove\");\n        } catch (final PathNotFoundException e) {\n            thrown = true;\n        }\n        assertTrue(\"Exception expected - property should be missing\", thrown);\n\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 86,
      "code": "@Test(expected = RepositoryRuntimeException.class)\n    public void testRemoveProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <\" + REPOSITORY_NAMESPACE + \"> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:remove \" +\n                \"'some-property-to-remove' }\";\n\n        // Write the properties\n        final DefaultIdentifierTranslator graphSubjects = new DefaultIdentifierTranslator(session);\n        object.updateProperties(graphSubjects, sparql, new RdfStream());\n\n        // Verify property exists\n        final Property property = object.getNode().getProperty(\"fedora:remove\");\n        assertNotNull(property);\n        assertEquals(\"some-property-to-remove\", property.getValues()[0].getString());\n\n        final String sparqlRemove = \"PREFIX fedora: <\" + REPOSITORY_NAMESPACE + \"> \" +\n                \"DELETE {\" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s \" +\n                \"} WHERE { \" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s\" +\n                \"}\";\n\n        // Remove the properties\n        object.updateProperties(graphSubjects,\n                sparqlRemove,\n                object.getTriples(graphSubjects, PropertiesRdfContext.class));\n\n        // Persist the object (although the propery will be removed from memory without this.)\n        session.save();\n\n        // Verify\n        boolean thrown = false;\n        try {\n            object.getNode().getProperty(\"fedora:remove\");\n        } catch (final PathNotFoundException e) {\n            thrown = true;\n        }\n        assertTrue(\"Exception expected - property should be missing\", thrown);\n\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "bCommit": "957f99716f",
    "aCommit": "c5a9b37632",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test(expected = RepositoryException.class)",
          "type": "DELETE",
          "lineNo": 85
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = RepositoryRuntimeException.class)",
          "type": "ADD",
          "lineNo": 86
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Annotation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.exception.RepositoryRuntimeException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        101
      ]
    },
    "aCommitTime": 1432759368,
    "ID": "fcrepo/fcrepo:451",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPatchBinaryDescription()",
    "bSource": {
      "startLine": 731,
      "code": "@Test\n    public void testPatchBinaryDescription() throws Exception {\n\n        final NonRdfSourceDescription mockObject = (NonRdfSourceDescription)setResource(NonRdfSourceDescription.class);\n        when(mockObject.getDescribedResource()).thenReturn(mockBinary);\n\n        when(mockBinary.getTriples(eq(idTranslator), any(List.class))).thenReturn(\n                new RdfStream(new Triple(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n\n        doReturn(mockObject).when(testObj).resource();\n\n        testObj.updateSparql(toInputStream(\"xyz\"));\n    }"
    },
    "aSource": {
      "startLine": 732,
      "code": "@Test\n    public void testPatchBinaryDescription() throws Exception {\n\n        final NonRdfSourceDescription mockObject = (NonRdfSourceDescription)setResource(NonRdfSourceDescription.class);\n        when(mockObject.getDescribedResource()).thenReturn(mockBinary);\n\n        when(mockBinary.getTriples(eq(idTranslator), any(Class.class))).thenReturn(new RdfStream());\n        when(mockBinary.getTriples(eq(idTranslator), any(List.class))).thenReturn(\n                new RdfStream(new Triple(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n\n        doReturn(mockObject).when(testObj).resource();\n\n        testObj.updateSparql(toInputStream(\"xyz\"));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "87db499bd2",
    "aCommit": "52b0d8a968",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockBinary.getTriples(eq(idTranslator), any(Class.class))).thenReturn(new RdfStream());",
          "type": "ADD",
          "lineNo": 738
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.models.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.models.FedoraBinary mockBinary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.models.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        743
      ]
    },
    "aCommitTime": 1430942113,
    "ID": "fcrepo/fcrepo:195",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithBinaryDescription()",
    "bSource": {
      "startLine": 592,
      "code": "@Test\n    public void testGetWithBinaryDescription() throws Exception {\n        final NonRdfSourceDescription mockResource\n                = (NonRdfSourceDescription)setResource(NonRdfSourceDescription.class);\n        when(mockResource.getDescribedResource()).thenReturn(mockBinary);\n        when(mockBinary.getTriples(eq(idTranslator), any(List.class))).thenReturn(new RdfStream(new Triple\n                (createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + idTranslator.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\",\n                \"child:properties\"\n        )));\n\n    }"
    },
    "aSource": {
      "startLine": 592,
      "code": "@Test\n    public void testGetWithBinaryDescription() throws Exception {\n        final NonRdfSourceDescription mockResource\n                = (NonRdfSourceDescription)setResource(NonRdfSourceDescription.class);\n        when(mockResource.getDescribedResource()).thenReturn(mockBinary);\n        when(mockBinary.getTriples(eq(idTranslator), any(Class.class))).thenReturn(new RdfStream());\n        when(mockBinary.getTriples(eq(idTranslator), any(List.class))).thenReturn(new RdfStream(new Triple\n                (createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + idTranslator.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\",\n                \"child:properties\"\n        )));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "87db499bd2",
    "aCommit": "52b0d8a968",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockBinary.getTriples(eq(idTranslator), any(Class.class))).thenReturn(new RdfStream());",
          "type": "ADD",
          "lineNo": 597
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.models.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.models.FedoraBinary mockBinary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.models.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        599
      ]
    },
    "aCommitTime": 1430942113,
    "ID": "fcrepo/fcrepo:196",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testWriteProperty()",
    "bSource": {
      "startLine": 59,
      "code": "@Test(expected = RepositoryException.class)\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <\" + REPOSITORY_NAMESPACE + \"> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream(), containerService);\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 59,
      "code": "@Test(expected = RepositoryException.class)\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <\" + REPOSITORY_NAMESPACE + \"> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream(), containerService);",
          "type": "DELETE",
          "lineNo": 74
        }
      ],
      "targetChanges": [
        {
          "line": "object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());",
          "type": "ADD",
          "lineNo": 74
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.models.FedoraResource.updateProperties(IdentifierConverter,String,RdfStream,Service)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.models.FedoraResource object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.models.FedoraResource.updateProperties(IdentifierConverter,String,RdfStream,Service)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String sparql"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ContainerService containerService"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.models.FedoraResource.updateProperties(IdentifierConverter,String,RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.models.FedoraResource object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.models.FedoraResource.updateProperties(IdentifierConverter,String,RdfStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String sparql"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "containerService",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        74
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:418",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testRestrictiveFAD()",
    "bSource": {
      "startLine": 111,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictiveFAD() throws Throwable {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ContainerService os = new ContainerServiceImpl();\n        try {\n            os.findOrCreate(session, \"/myobject\");\n        } catch (final RepositoryRuntimeException e) {\n            throw e.getCause();\n        }\n        verify(fad, atLeastOnce()).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 109,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictiveFAD() throws Throwable {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ContainerService os = new ContainerServiceImpl();\n        try {\n            os.findOrCreate(session, \"/myobject\");\n        } catch (final RepositoryRuntimeException e) {\n            throw e.getCause();\n        }\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, atLeastOnce()).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 133
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 131
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "atLeastOnce()"
        },
        {
          "type": "CtExecutableReference",
          "value": "atLeastOnce()"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '5'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "atLeastOnce",
          "childCount": 0
        },
        "dstNode": {
          "label": "times",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        131
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:419",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testPermissiveFAD()",
    "bSource": {
      "startLine": 86,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, atLeastOnce()).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(9)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, atLeastOnce()).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 108
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, times(9)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 106
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "atLeastOnce()"
        },
        {
          "type": "CtExecutableReference",
          "value": "atLeastOnce()"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '9'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "atLeastOnce",
          "childCount": 0
        },
        "dstNode": {
          "label": "times",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        106
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:420",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGet()",
    "bSource": {
      "startLine": 361,
      "code": "@Test\n    public void testGet() throws Exception {\n        setResource(FedoraResource.class);\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should have a Link header\", mockResponse.containsHeader(\"Link\"));\n        assertTrue(\"Should have an Allow header\", mockResponse.containsHeader(\"Allow\"));\n        assertTrue(\"Should be an LDP Resource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"Resource>;rel=\\\"type\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\"\n        )));\n\n    }"
    },
    "aSource": {
      "startLine": 360,
      "code": "@Test\n    public void testGet() throws Exception {\n        setResource(FedoraResource.class);\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should have a Link header\", mockResponse.containsHeader(\"Link\"));\n        assertTrue(\"Should have an Allow header\", mockResponse.containsHeader(\"Allow\"));\n        assertTrue(\"Should be an LDP Resource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"Resource>;rel=\\\"type\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n            @Override\n            public String apply(final RDFNode input) {\n                return input.toString();\n            }\n        });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\"\n        )));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());",
          "type": "DELETE",
          "lineNo": 373
        }
      ],
      "targetChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),",
          "type": "ADD",
          "lineNo": 372
        },
        {
          "line": "new Function<RDFNode, String>() {",
          "type": "ADD",
          "lineNo": 373
        },
        {
          "line": "@Override",
          "type": "ADD",
          "lineNo": 374
        },
        {
          "line": "public String apply(final RDFNode input) {",
          "type": "ADD",
          "lineNo": 375
        },
        {
          "line": "return input.toString();",
          "type": "ADD",
          "lineNo": 376
        },
        {
          "line": "}",
          "type": "ADD",
          "lineNo": 377
        },
        {
          "line": "});",
          "type": "ADD",
          "lineNo": 378
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Functions.toStringFunction()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Functions.toStringFunction()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtNewClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$2.2()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.base.Function"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$2"
        },
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraLdpTest$2.apply(RDFNode)"
        },
        {
          "type": "CtAnnotation",
          "value": "java.lang.Override"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtParameter",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "NewClass",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.http.api.FedoraLdpTest$2()",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.google.common.collect.Lists",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        372
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:421",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithObjectIncludeReferences()",
    "bSource": {
      "startLine": 507,
      "code": "@Test\n    public void testGetWithObjectIncludeReferences() throws ParseException, IOException, RepositoryException {\n        setResource(Container.class);\n        setField(testObj, \"prefer\", new MultiPrefer(\"return=representation; include=\\\"\" + INBOUND_REFERENCES + \"\\\"\"));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = transform(newArrayList(model.listObjects()), toStringFunction());\n        log.debug(\"Received RDF nodes: {}\", rdfNodes);\n        final String referencesContextClassName = ReferencesRdfContext.class.getName();\n        assertTrue(\"Should include references contexts\", any(rdfNodes, containsPattern(referencesContextClassName)));\n    }"
    },
    "aSource": {
      "startLine": 536,
      "code": "@Test\n    public void testGetWithObjectIncludeReferences() throws ParseException, IOException, RepositoryException {\n        setResource(Container.class);\n        setField(testObj, \"prefer\", new MultiPrefer(\"return=representation; include=\\\"\" + INBOUND_REFERENCES + \"\\\"\"));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = transform(newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        log.debug(\"Received RDF nodes: {}\", rdfNodes);\n        final String referencesContextClassName = ReferencesRdfContext.class.getName();\n        assertTrue(\"Should include references contexts\", any(rdfNodes, containsPattern(referencesContextClassName)));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final List<String> rdfNodes = transform(newArrayList(model.listObjects()), toStringFunction());",
          "type": "DELETE",
          "lineNo": 516
        }
      ],
      "targetChanges": [
        {
          "line": "final List<String> rdfNodes = transform(newArrayList(model.listObjects()),",
          "type": "ADD",
          "lineNo": 545
        },
        {
          "line": "new Function<RDFNode, String>() {",
          "type": "ADD",
          "lineNo": 546
        },
        {
          "line": "@Override",
          "type": "ADD",
          "lineNo": 548
        },
        {
          "line": "public String apply(final RDFNode input) {",
          "type": "ADD",
          "lineNo": 549
        },
        {
          "line": "return input.toString();",
          "type": "ADD",
          "lineNo": 550
        },
        {
          "line": "}",
          "type": "ADD",
          "lineNo": 551
        },
        {
          "line": "});",
          "type": "ADD",
          "lineNo": 552
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Functions.toStringFunction()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Functions.toStringFunction()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtNewClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$7.7()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.base.Function"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$7"
        },
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraLdpTest$7.apply(RDFNode)"
        },
        {
          "type": "CtAnnotation",
          "value": "java.lang.Override"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtParameter",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "NewClass",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.http.api.FedoraLdpTest$7()",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        545
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:422",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithBinaryDescription()",
    "bSource": {
      "startLine": 556,
      "code": "@Test\n    public void testGetWithBinaryDescription() throws Exception {\n        final NonRdfSourceDescription mockResource\n                = (NonRdfSourceDescription)setResource(NonRdfSourceDescription.class);\n        when(mockResource.getDescribedResource()).thenReturn(mockBinary);\n        when(mockBinary.getTriples(eq(idTranslator), any(List.class))).thenReturn(new RdfStream(new Triple\n                (createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + idTranslator.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\",\n                \"child:properties\"\n        )));\n\n    }"
    },
    "aSource": {
      "startLine": 592,
      "code": "@Test\n    public void testGetWithBinaryDescription() throws Exception {\n        final NonRdfSourceDescription mockResource\n                = (NonRdfSourceDescription)setResource(NonRdfSourceDescription.class);\n        when(mockResource.getDescribedResource()).thenReturn(mockBinary);\n        when(mockBinary.getTriples(eq(idTranslator), any(List.class))).thenReturn(new RdfStream(new Triple\n                (createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + idTranslator.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\",\n                \"child:properties\"\n        )));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());",
          "type": "DELETE",
          "lineNo": 575
        }
      ],
      "targetChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),",
          "type": "ADD",
          "lineNo": 611
        },
        {
          "line": "new Function<RDFNode, String>() {",
          "type": "ADD",
          "lineNo": 612
        },
        {
          "line": "@Override",
          "type": "ADD",
          "lineNo": 613
        },
        {
          "line": "public String apply(final RDFNode input) {",
          "type": "ADD",
          "lineNo": 614
        },
        {
          "line": "return input.toString();",
          "type": "ADD",
          "lineNo": 615
        },
        {
          "line": "}",
          "type": "ADD",
          "lineNo": 616
        },
        {
          "line": "});",
          "type": "ADD",
          "lineNo": 617
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Functions.toStringFunction()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Functions.toStringFunction()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtNewClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$8.8()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.base.Function"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$8"
        },
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraLdpTest$8.apply(RDFNode)"
        },
        {
          "type": "CtAnnotation",
          "value": "java.lang.Override"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtParameter",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "NewClass",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.http.api.FedoraLdpTest$8()",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.google.common.collect.Lists",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        611
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:423",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithObjectOmitContainment()",
    "bSource": {
      "startLine": 466,
      "code": "@Test\n    public void testGetWithObjectOmitContainment() throws Exception {\n        setResource(Container.class);\n        setField(testObj, \"prefer\",\n                new MultiPrefer(\"return=representation; omit=\\\"\" + LDP_NAMESPACE + \"PreferContainment\\\"\"));\n        final Response actual = testObj.describe(\n                null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());\n        assertTrue(\"Should include membership contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\"));\n\n        assertFalse(\"Should not include containment contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\"));\n\n    }"
    },
    "aSource": {
      "startLine": 483,
      "code": "@Test\n    public void testGetWithObjectOmitContainment() throws Exception {\n        setResource(Container.class);\n        setField(testObj, \"prefer\",\n                new MultiPrefer(\"return=representation; omit=\\\"\" + LDP_NAMESPACE + \"PreferContainment\\\"\"));\n        final Response actual = testObj.describe(\n                null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Should include membership contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\"));\n\n        assertFalse(\"Should not include containment contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\"));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());",
          "type": "DELETE",
          "lineNo": 477
        }
      ],
      "targetChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),",
          "type": "ADD",
          "lineNo": 494
        },
        {
          "line": "new Function<RDFNode, String>() {",
          "type": "ADD",
          "lineNo": 495
        },
        {
          "line": "@Override",
          "type": "ADD",
          "lineNo": 496
        },
        {
          "line": "public String apply(final RDFNode input) {",
          "type": "ADD",
          "lineNo": 497
        },
        {
          "line": "return input.toString();",
          "type": "ADD",
          "lineNo": 498
        },
        {
          "line": "}",
          "type": "ADD",
          "lineNo": 499
        },
        {
          "line": "});",
          "type": "ADD",
          "lineNo": 500
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Functions.toStringFunction()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Functions.toStringFunction()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtNewClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$5.5()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.base.Function"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$5"
        },
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraLdpTest$5.apply(RDFNode)"
        },
        {
          "type": "CtAnnotation",
          "value": "java.lang.Override"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtParameter",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "NewClass",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.http.api.FedoraLdpTest$5()",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.google.common.collect.Lists",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        494
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:424",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObjectWithSparql()",
    "bSource": {
      "startLine": 736,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(Container.class);\n\n        when(mockContainerService.findOrCreate(mockSession, \"/b\")).thenReturn(mockContainer);\n\n        final Response actual = testObj.createObject(null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"), null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockContainer).updateProperties(eq(idTranslator), eq(\"x\"), any(RdfStream.class), any(Service.class));\n    }"
    },
    "aSource": {
      "startLine": 776,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(Container.class);\n\n        when(mockContainerService.findOrCreate(mockSession, \"/b\")).thenReturn(mockContainer);\n\n        final Response actual = testObj.createObject(null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"), null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockContainer).updateProperties(eq(idTranslator), eq(\"x\"), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockContainer).updateProperties(eq(idTranslator), eq(\"x\"), any(RdfStream.class), any(Service.class));",
          "type": "DELETE",
          "lineNo": 747
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockContainer).updateProperties(eq(idTranslator), eq(\"x\"), any(RdfStream.class));",
          "type": "ADD",
          "lineNo": 787
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "updateProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.models.Container mockContainer"
        },
        {
          "type": "CtExecutableReference",
          "value": "updateProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'x'"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "updateProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.models.Container mockContainer"
        },
        {
          "type": "CtExecutableReference",
          "value": "updateProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'x'"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        787
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:425",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithObjectOmitMembership()",
    "bSource": {
      "startLine": 486,
      "code": "@Test\n    public void testGetWithObjectOmitMembership() throws Exception {\n        setResource(Container.class);\n        setField(testObj, \"prefer\",\n                new MultiPrefer(\"return=representation; omit=\\\"\" + LDP_NAMESPACE + \"PreferMembership\\\"\"));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());\n        assertFalse(\"Should not include membership contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\"));\n        assertFalse(\"Should not include membership contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\"));\n\n        assertTrue(\"Should include containment contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\"));\n\n    }"
    },
    "aSource": {
      "startLine": 509,
      "code": "@Test\n    public void testGetWithObjectOmitMembership() throws Exception {\n        setResource(Container.class);\n        setField(testObj, \"prefer\",\n                new MultiPrefer(\"return=representation; omit=\\\"\" + LDP_NAMESPACE + \"PreferMembership\\\"\"));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertFalse(\"Should not include membership contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\"));\n        assertFalse(\"Should not include membership contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\"));\n\n        assertTrue(\"Should include containment contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\"));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());",
          "type": "DELETE",
          "lineNo": 496
        }
      ],
      "targetChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),",
          "type": "ADD",
          "lineNo": 519
        },
        {
          "line": "new Function<RDFNode, String>() {",
          "type": "ADD",
          "lineNo": 520
        },
        {
          "line": "@Override",
          "type": "ADD",
          "lineNo": 521
        },
        {
          "line": "public String apply(final RDFNode input) {",
          "type": "ADD",
          "lineNo": 522
        },
        {
          "line": "return input.toString();",
          "type": "ADD",
          "lineNo": 523
        },
        {
          "line": "}",
          "type": "ADD",
          "lineNo": 524
        },
        {
          "line": "});",
          "type": "ADD",
          "lineNo": 525
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Functions.toStringFunction()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Functions.toStringFunction()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtNewClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$6.6()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.base.Function"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$6"
        },
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraLdpTest$6.apply(RDFNode)"
        },
        {
          "type": "CtAnnotation",
          "value": "java.lang.Override"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtParameter",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "NewClass",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.http.api.FedoraLdpTest$6()",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.google.common.collect.Lists",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        519
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:426",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithObjectPreferMinimal()",
    "bSource": {
      "startLine": 442,
      "code": "@Test\n    public void testGetWithObjectPreferMinimal() throws Exception {\n\n        setResource(Container.class);\n        setField(testObj, \"prefer\", new MultiPrefer(\"return=minimal\"));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\"\n        )));\n\n        assertFalse(\"Included non-minimal contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\"));\n\n        assertFalse(\"Included non-minimal contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\"));\n\n    }"
    },
    "aSource": {
      "startLine": 453,
      "code": "@Test\n    public void testGetWithObjectPreferMinimal() throws Exception {\n\n        setResource(Container.class);\n        setField(testObj, \"prefer\", new MultiPrefer(\"return=minimal\"));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\"\n        )));\n\n        assertFalse(\"Included non-minimal contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\"));\n\n        assertFalse(\"Included non-minimal contexts\",\n                rdfNodes.contains(\"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\"));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());",
          "type": "DELETE",
          "lineNo": 452
        }
      ],
      "targetChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),",
          "type": "ADD",
          "lineNo": 463
        },
        {
          "line": "new Function<RDFNode, String>() {",
          "type": "ADD",
          "lineNo": 464
        },
        {
          "line": "@Override",
          "type": "ADD",
          "lineNo": 465
        },
        {
          "line": "public String apply(final RDFNode input) {",
          "type": "ADD",
          "lineNo": 466
        },
        {
          "line": "return input.toString();",
          "type": "ADD",
          "lineNo": 467
        },
        {
          "line": "}",
          "type": "ADD",
          "lineNo": 468
        },
        {
          "line": "});",
          "type": "ADD",
          "lineNo": 469
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Functions.toStringFunction()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Functions.toStringFunction()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtNewClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$4.4()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.base.Function"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$4"
        },
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraLdpTest$4.apply(RDFNode)"
        },
        {
          "type": "CtAnnotation",
          "value": "java.lang.Override"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtParameter",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "NewClass",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.http.api.FedoraLdpTest$4()",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.google.common.collect.Lists",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        463
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:427",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPutNewObjectWithRdf()",
    "bSource": {
      "startLine": 617,
      "code": "@Test\n    public void testPutNewObjectWithRdf() throws Exception {\n\n        setField(testObj, \"externalPath\", \"some/path\");\n        when(mockContainer.isNew()).thenReturn(true);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(false);\n        when(mockContainerService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockContainer);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(NTRIPLES_TYPE,\n                toInputStream(\"_:a <info:x> _:c .\"), null, null, null, null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockContainer).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class),\n                any(Service.class));\n    }"
    },
    "aSource": {
      "startLine": 659,
      "code": "@Test\n    public void testPutNewObjectWithRdf() throws Exception {\n\n        setField(testObj, \"externalPath\", \"some/path\");\n        when(mockContainer.isNew()).thenReturn(true);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(false);\n        when(mockContainerService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockContainer);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(NTRIPLES_TYPE,\n                toInputStream(\"_:a <info:x> _:c .\"), null, null, null, null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockContainer).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockContainer).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class),",
          "type": "DELETE",
          "lineNo": 630
        },
        {
          "line": "any(Service.class));",
          "type": "DELETE",
          "lineNo": 631
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockContainer).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));",
          "type": "ADD",
          "lineNo": 672
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.models.Container mockContainer"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.models.Container mockContainer"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        673
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:428",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPutReplaceRdfObject()",
    "bSource": {
      "startLine": 648,
      "code": "@Test\n    public void testPutReplaceRdfObject() throws Exception {\n\n        setField(testObj, \"externalPath\", \"some/path\");\n        final Container mockObject = (Container)setResource(Container.class);\n        doReturn(mockObject).when(testObj).resource();\n        when(mockObject.isNew()).thenReturn(false);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(true);\n        when(mockContainerService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(NTRIPLES_TYPE,\n                toInputStream(\"_:a <info:x> _:c .\"), null, null, null, null);\n\n        assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n        verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class),\n                any(Service.class));\n    }"
    },
    "aSource": {
      "startLine": 689,
      "code": "@Test\n    public void testPutReplaceRdfObject() throws Exception {\n\n        setField(testObj, \"externalPath\", \"some/path\");\n        final Container mockObject = (Container)setResource(Container.class);\n        doReturn(mockObject).when(testObj).resource();\n        when(mockObject.isNew()).thenReturn(false);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(true);\n        when(mockContainerService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(NTRIPLES_TYPE,\n                toInputStream(\"_:a <info:x> _:c .\"), null, null, null, null);\n\n        assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n        verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class),",
          "type": "DELETE",
          "lineNo": 663
        },
        {
          "line": "any(Service.class));",
          "type": "DELETE",
          "lineNo": 664
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));",
          "type": "ADD",
          "lineNo": 704
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.models.Container mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.models.Container mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        705
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:429",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObjectWithRdf()",
    "bSource": {
      "startLine": 750,
      "code": "@Test\n    public void testCreateNewObjectWithRdf() throws Exception {\n\n        setResource(Container.class);\n\n        when(mockContainerService.findOrCreate(mockSession, \"/b\")).thenReturn(mockContainer);\n\n        final Response actual = testObj.createObject(null, null, NTRIPLES_TYPE, \"b\",\n                toInputStream(\"_:a <info:b> _:c .\"), null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockContainer).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class),\n                any(Service.class));\n    }"
    },
    "aSource": {
      "startLine": 790,
      "code": "@Test\n    public void testCreateNewObjectWithRdf() throws Exception {\n\n        setResource(Container.class);\n\n        when(mockContainerService.findOrCreate(mockSession, \"/b\")).thenReturn(mockContainer);\n\n        final Response actual = testObj.createObject(null, null, NTRIPLES_TYPE, \"b\",\n                toInputStream(\"_:a <info:b> _:c .\"), null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockContainer).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockContainer).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class),",
          "type": "DELETE",
          "lineNo": 761
        },
        {
          "line": "any(Service.class));",
          "type": "DELETE",
          "lineNo": 762
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockContainer).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));",
          "type": "ADD",
          "lineNo": 801
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.models.Container mockContainer"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.models.Container)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.models.Container mockContainer"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterables.any(Iterable,Predicate)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        802
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:430",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithObject()",
    "bSource": {
      "startLine": 387,
      "code": "@Test\n    public void testGetWithObject() throws Exception {\n        setResource(Container.class);\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\"\n        )));\n\n    }"
    },
    "aSource": {
      "startLine": 392,
      "code": "@Test\n    public void testGetWithObject() throws Exception {\n        setResource(Container.class);\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\"\n        )));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(newArrayList(model.listObjects()), toStringFunction());",
          "type": "DELETE",
          "lineNo": 397
        }
      ],
      "targetChanges": [
        {
          "line": "final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),",
          "type": "ADD",
          "lineNo": 402
        },
        {
          "line": "new Function<RDFNode, String>() {",
          "type": "ADD",
          "lineNo": 403
        },
        {
          "line": "@Override",
          "type": "ADD",
          "lineNo": 404
        },
        {
          "line": "public String apply(final RDFNode input) {",
          "type": "ADD",
          "lineNo": 405
        },
        {
          "line": "return input.toString();",
          "type": "ADD",
          "lineNo": 406
        },
        {
          "line": "}",
          "type": "ADD",
          "lineNo": 407
        },
        {
          "line": "});",
          "type": "ADD",
          "lineNo": 408
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Functions.toStringFunction()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Functions.toStringFunction()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List rdfNodes"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.transform(List,Function)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "listObjects()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "listObjects()"
        },
        {
          "type": "CtNewClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$3.3()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.base.Function"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtClass",
          "value": "org.fcrepo.http.api.FedoraLdpTest$3"
        },
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraLdpTest$3.apply(RDFNode)"
        },
        {
          "type": "CtAnnotation",
          "value": "java.lang.Override"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtParameter",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.RDFNode input"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "NewClass",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.http.api.FedoraLdpTest$3()",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.google.common.collect.Lists",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toStringFunction",
          "childCount": 0
        },
        "dstNode": {
          "label": "toString",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        402
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:431",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.FedoraTypesUtilsTest.testGetClosestExistingAncestorRoot()",
    "bSource": {
      "startLine": 346,
      "code": "@Test\n    public void testGetClosestExistingAncestorRoot() throws RepositoryException {\n        when(mockSession.getRootNode()).thenReturn(mockRootNode);\n        when(mockSession.nodeExists(anyString())).thenReturn(false);\n\n        final Node closestExistingAncestor = getClosestExistingAncestor(mockSession, \"/some/path\");\n        assertEquals(mockRootNode, closestExistingAncestor);\n    }"
    },
    "aSource": {
      "startLine": 346,
      "code": "@Test\n    public void testGetClosestExistingAncestorRoot() throws RepositoryException {\n        when(mockSession.getNode(\"/\")).thenReturn(mockRootNode);\n        when(mockSession.nodeExists(anyString())).thenReturn(false);\n\n        final Node closestExistingAncestor = getClosestExistingAncestor(mockSession, \"/some/path\");\n        assertEquals(mockRootNode, closestExistingAncestor);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "bCommit": "b3790309ba",
    "aCommit": "ae5aa5d2b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockSession.getRootNode()).thenReturn(mockRootNode);",
          "type": "DELETE",
          "lineNo": 348
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSession.getNode(\"/\")).thenReturn(mockRootNode);",
          "type": "ADD",
          "lineNo": 348
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRootNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRootNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "getNode",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        352
      ]
    },
    "aCommitTime": 1430767372,
    "ID": "fcrepo/fcrepo:432",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testWriteProperty()",
    "bSource": {
      "startLine": 59,
      "code": "@Test(expected = RepositoryException.class)\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <\" + REPOSITORY_NAMESPACE + \"> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 59,
      "code": "@Test(expected = RepositoryException.class)\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <\" + REPOSITORY_NAMESPACE + \"> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream(), containerService);\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "bCommit": "6e7e22e528",
    "aCommit": "ceacc98328",
    "hunk": {
      "sourceChanges": [
        {
          "line": "object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());",
          "type": "DELETE",
          "lineNo": 74
        }
      ],
      "targetChanges": [
        {
          "line": "object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream(), containerService);",
          "type": "ADD",
          "lineNo": 74
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.models.FedoraResource.updateProperties(IdentifierConverter,String,RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.models.FedoraResource object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.models.FedoraResource.updateProperties(IdentifierConverter,String,RdfStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String sparql"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.models.FedoraResource.updateProperties(IdentifierConverter,String,RdfStream,Service)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.models.FedoraResource object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.models.FedoraResource.updateProperties(IdentifierConverter,String,RdfStream,Service)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String sparql"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ContainerService containerService"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "containerService",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        74
      ]
    },
    "aCommitTime": 1429034318,
    "ID": "fcrepo/fcrepo:453",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testRestrictiveFAD()",
    "bSource": {
      "startLine": 109,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictiveFAD() throws Throwable {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ContainerService os = new ContainerServiceImpl();\n        try {\n            os.findOrCreate(session, \"/myobject\");\n        } catch (final RepositoryRuntimeException e) {\n            throw e.getCause();\n        }\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 111,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictiveFAD() throws Throwable {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ContainerService os = new ContainerServiceImpl();\n        try {\n            os.findOrCreate(session, \"/myobject\");\n        } catch (final RepositoryRuntimeException e) {\n            throw e.getCause();\n        }\n        verify(fad, atLeastOnce()).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "6e7e22e528",
    "aCommit": "ceacc98328",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 131
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, atLeastOnce()).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 133
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '5'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "atLeastOnce()"
        },
        {
          "type": "CtExecutableReference",
          "value": "atLeastOnce()"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "times",
          "childCount": 1
        },
        "dstNode": {
          "label": "atLeastOnce",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        133
      ]
    },
    "aCommitTime": 1429034318,
    "ID": "fcrepo/fcrepo:454",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.FedoraTypesUtilsTest.testGetClosestExistingAncestorRoot()",
    "bSource": {
      "startLine": 346,
      "code": "@Test\n    public void testGetClosestExistingAncestorRoot() throws RepositoryException {\n        when(mockSession.getNode(\"/\")).thenReturn(mockRootNode);\n        when(mockSession.nodeExists(anyString())).thenReturn(false);\n\n        final Node closestExistingAncestor = getClosestExistingAncestor(mockSession, \"/some/path\");\n        assertEquals(mockRootNode, closestExistingAncestor);\n    }"
    },
    "aSource": {
      "startLine": 346,
      "code": "@Test\n    public void testGetClosestExistingAncestorRoot() throws RepositoryException {\n        when(mockSession.getRootNode()).thenReturn(mockRootNode);\n        when(mockSession.nodeExists(anyString())).thenReturn(false);\n\n        final Node closestExistingAncestor = getClosestExistingAncestor(mockSession, \"/some/path\");\n        assertEquals(mockRootNode, closestExistingAncestor);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "bCommit": "6e7e22e528",
    "aCommit": "ceacc98328",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockSession.getNode(\"/\")).thenReturn(mockRootNode);",
          "type": "DELETE",
          "lineNo": 348
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSession.getRootNode()).thenReturn(mockRootNode);",
          "type": "ADD",
          "lineNo": 348
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRootNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRootNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "getRootNode",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        352
      ]
    },
    "aCommitTime": 1429034318,
    "ID": "fcrepo/fcrepo:456",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testSetUpJMSBaseURIs()",
    "bSource": {
      "startLine": 846,
      "code": "@Test\n    public void testSetUpJMSBaseURIs() throws RepositoryException {\n        final ObservationManager mockManager = mock(ObservationManager.class);\n        final Workspace mockWorkspace = mock(Workspace.class);\n        doReturn(mockWorkspace).when(mockSession).getWorkspace();\n        doReturn(mockManager).when(mockWorkspace).getObservationManager();\n        final String json = \"{\\\"baseURL\\\":\\\"http://localhost/fcrepo\\\",\\\"userAgent\\\":\\\"Test UserAgent\\\"}\";\n\n        testObj.setUpJMSBaseURIs(getUriInfoImpl(), mockHeaders);\n        verify(mockManager).setUserData(eq(json));\n    }"
    },
    "aSource": {
      "startLine": 846,
      "code": "@Test\n    public void testSetUpJMSBaseURIs() throws RepositoryException {\n        final ObservationManager mockManager = mock(ObservationManager.class);\n        final Workspace mockWorkspace = mock(Workspace.class);\n        doReturn(mockWorkspace).when(mockSession).getWorkspace();\n        doReturn(mockManager).when(mockWorkspace).getObservationManager();\n        final String json = \"{\\\"baseURL\\\":\\\"http://localhost/fcrepo\\\",\\\"userAgent\\\":\\\"Test UserAgent\\\"}\";\n\n        testObj.setUpJMSInfo(getUriInfoImpl(), mockHeaders);\n        verify(mockManager).setUserData(eq(json));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "1227c6107a",
    "aCommit": "17f3ee6730",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.setUpJMSBaseURIs(getUriInfoImpl(), mockHeaders);",
          "type": "DELETE",
          "lineNo": 854
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.setUpJMSInfo(getUriInfoImpl(), mockHeaders);",
          "type": "ADD",
          "lineNo": 854
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setUpJMSBaseURIs(org.fcrepo.http.api.UriInfo,javax.ws.rs.core.HttpHeaders)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "setUpJMSBaseURIs(org.fcrepo.http.api.UriInfo,javax.ws.rs.core.HttpHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.TestHelpers.getUriInfoImpl()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.TestHelpers.getUriInfoImpl()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.HttpHeaders mockHeaders"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setUpJMSInfo(org.fcrepo.http.api.UriInfo,javax.ws.rs.core.HttpHeaders)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "setUpJMSInfo(org.fcrepo.http.api.UriInfo,javax.ws.rs.core.HttpHeaders)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.TestHelpers.getUriInfoImpl()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.TestHelpers.getUriInfoImpl()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.HttpHeaders mockHeaders"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "setUpJMSBaseURIs",
          "childCount": 3
        },
        "dstNode": {
          "label": "setUpJMSInfo",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        854
      ]
    },
    "aCommitTime": 1427905823,
    "ID": "fcrepo/fcrepo:38",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.observer.GetNamespacedPropertiesTest.testApply()",
    "bSource": {
      "startLine": 83,
      "code": "@Test\n    public void testApply() {\n        final FedoraEvent fedoraEvent = new FedoraEvent(event);\n\n        fedoraEvent.addProperty(FEDORA_CONTAINER);\n        fedoraEvent.addProperty(FEDORA_TOMBSTONE);\n        fedoraEvent.addProperty(LDP_BASIC_CONTAINER);\n        fedoraEvent.addProperty(JCR_MIXIN_TYPES);\n\n        fedoraEvent.addType(PROPERTY_ADDED);\n        fedoraEvent.addType(NODE_ADDED);\n\n        // Perform test\n        final FedoraEvent result = function.apply(fedoraEvent);\n        assertNotNull(result);\n\n        // Verify types\n        final Set<Integer> types = result.getTypes();\n        assertEquals(3, types.size());\n\n        assertTrue(\"Should contain: \" + PROPERTY_ADDED + \", \" + types, types.contains(PROPERTY_ADDED));\n        assertTrue(\"Should contain: \" + NODE_ADDED + \", \" + types, types.contains(NODE_ADDED));\n        assertTrue(\"Should contain: \" + PERSIST + \", \" + types, types.contains(PERSIST));\n\n        // Verify properties\n        final Set<String> properties = result.getProperties();\n        assertEquals(4, properties.size());\n\n        final String expected1 = FEDORA_CONTAINER.replace(\"fedora:\", REPOSITORY_NAMESPACE);\n        final String expected2 = FEDORA_TOMBSTONE.replace(\"fedora:\", REPOSITORY_NAMESPACE);\n        final String expected3 = LDP_BASIC_CONTAINER.replace(\"ldp:\", LDP_NAMESPACE);\n        final String expected4 = JCR_MIXIN_TYPES.replace(\"jcr:\", JCR_NAMESPACE);\n\n        assertTrue(\"Should contain: \" + expected1 + \", \" + properties, properties.contains(expected1));\n        assertTrue(\"Should contain: \" + expected2 + \", \" + properties, properties.contains(expected2));\n        assertTrue(\"Should contain: \" + expected3 + \", \" + properties, properties.contains(expected3));\n        assertTrue(\"Should contain: \" + expected4 + \", \" + properties, properties.contains(expected4));\n    }"
    },
    "aSource": {
      "startLine": 83,
      "code": "@Test\n    public void testApply() {\n        final FedoraEvent fedoraEvent = new FedoraEvent(event);\n\n        fedoraEvent.addProperty(FEDORA_CONTAINER);\n        fedoraEvent.addProperty(FEDORA_TOMBSTONE);\n        fedoraEvent.addProperty(LDP_BASIC_CONTAINER);\n        fedoraEvent.addProperty(JCR_MIXIN_TYPES);\n\n        fedoraEvent.addType(PROPERTY_ADDED);\n        fedoraEvent.addType(NODE_ADDED);\n\n        // Perform test\n        final FedoraEvent result = function.apply(fedoraEvent);\n        assertNotNull(result);\n\n        // Verify types\n        final Set<Integer> types = result.getTypes();\n        assertEquals(3, types.size());\n\n        assertTrue(\"Should contain: \" + PROPERTY_ADDED + \", \" + types, types.contains(PROPERTY_ADDED));\n        assertTrue(\"Should contain: \" + NODE_ADDED + \", \" + types, types.contains(NODE_ADDED));\n        assertTrue(\"Should contain: \" + PERSIST + \", \" + types, types.contains(PERSIST));\n\n        // Verify properties\n        final Set<String> properties = result.getProperties();\n        assertEquals(4, properties.size());\n\n        final String expected1 = FEDORA_CONTAINER.replace(\"fedora:\", REPOSITORY_NAMESPACE);\n        final String expected2 = FEDORA_TOMBSTONE.replace(\"fedora:\", REPOSITORY_NAMESPACE);\n        final String expected3 = LDP_BASIC_CONTAINER.replace(\"ldp:\", LDP_NAMESPACE);\n        final String expected4 = JCR_MIXIN_TYPES.replace(\"jcr:\", REPOSITORY_NAMESPACE);\n\n        assertTrue(\"Should contain: \" + expected1 + \", \" + properties, properties.contains(expected1));\n        assertTrue(\"Should contain: \" + expected2 + \", \" + properties, properties.contains(expected2));\n        assertTrue(\"Should contain: \" + expected3 + \", \" + properties, properties.contains(expected3));\n        assertTrue(\"Should contain: \" + expected4 + \", \" + properties, properties.contains(expected4));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/GetNamespacedPropertiesTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/observer/GetNamespacedPropertiesTest.java",
    "bCommit": "fb45d63e00",
    "aCommit": "be0e046cdc",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String expected4 = JCR_MIXIN_TYPES.replace(\"jcr:\", JCR_NAMESPACE);",
          "type": "DELETE",
          "lineNo": 114
        }
      ],
      "targetChanges": [
        {
          "line": "final String expected4 = JCR_MIXIN_TYPES.replace(\"jcr:\", REPOSITORY_NAMESPACE);",
          "type": "ADD",
          "lineNo": 114
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String expected4"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.replace(CharSequence,CharSequence)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String JCR_MIXIN_TYPES"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.replace(CharSequence,CharSequence)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'jcr:'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String JCR_NAMESPACE"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String expected4"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.replace(CharSequence,CharSequence)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String JCR_MIXIN_TYPES"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.replace(CharSequence,CharSequence)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'jcr:'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.RdfLexicon$JCR_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.RdfLexicon$REPOSITORY_NAMESPACE",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        119
      ]
    },
    "aCommitTime": 1426891211,
    "ID": "fcrepo/fcrepo:448",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.ContainerImplIT.testUpdatingObjectGraphWithErrors()",
    "bSource": {
      "startLine": 197,
      "code": "@Test\n    public void testUpdatingObjectGraphWithErrors() {\n        final String pid = getRandomPid();\n        final Container object = containerService.findOrCreate(session, pid);\n\n        MalformedRdfException e = null;\n        try {\n            object.updateProperties(subjects, \"INSERT DATA { <> <info:some-property> <relative-url> . \\n\" +\n                    \"<> <info:some-other-property> <another-relative-url> }\", new RdfStream());\n        } catch (final MalformedRdfException ex) {\n            e = ex;\n        }\n\n        assertNotNull(\"Expected an exception to get thrown\", e);\n        assertEquals(\"Excepted two nested exceptions\", 2, e.getMessage().split(\"\\n\").length);\n        assertTrue(e.getMessage().contains(\"/relative-url\"));\n        assertTrue(e.getMessage().contains(\"/another-relative-url\"));\n    }"
    },
    "aSource": {
      "startLine": 198,
      "code": "@Test\n    public void testUpdatingObjectGraphWithErrors() throws AccessDeniedException {\n        final String pid = getRandomPid();\n        final Container object = containerService.findOrCreate(session, pid);\n\n        MalformedRdfException e = null;\n        try {\n            object.updateProperties(subjects, \"INSERT DATA { <> <info:some-property> <relative-url> . \\n\" +\n                    \"<> <info:some-other-property> <another-relative-url> }\", new RdfStream());\n        } catch (final MalformedRdfException ex) {\n            e = ex;\n        }\n\n        assertNotNull(\"Expected an exception to get thrown\", e);\n        assertEquals(\"Excepted two nested exceptions\", 2, e.getMessage().split(\"\\n\").length);\n        assertTrue(e.getMessage().contains(\"/relative-url\"));\n        assertTrue(e.getMessage().contains(\"/another-relative-url\"));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/ContainerImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/ContainerImplIT.java",
    "bCommit": "ed44bea426",
    "aCommit": "5eb9636e19",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testUpdatingObjectGraphWithErrors() {",
          "type": "DELETE",
          "lineNo": 198
        }
      ],
      "targetChanges": [
        {
          "line": "public void testUpdatingObjectGraphWithErrors() throws AccessDeniedException {",
          "type": "ADD",
          "lineNo": 199
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.integration.kernel.impl.ContainerImplIT.testUpdatingObjectGraphWithErrors()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.integration.kernel.impl.ContainerImplIT.testUpdatingObjectGraphWithErrors()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.AccessDeniedException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root",
          ""
        ]
      }
    ],
    "refactorings": [
      "ADD_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        205
      ]
    },
    "aCommitTime": 1425006310,
    "ID": "fcrepo/fcrepo:211",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ContainerRolesPrincipalProviderIT.testEmptyPrincipalProvider()",
    "bSource": {
      "startLine": 72,
      "code": "@Test\n    public void testEmptyPrincipalProvider() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 72,
      "code": "@Test\n    public void testEmptyPrincipalProvider() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(9)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ContainerRolesPrincipalProviderIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ContainerRolesPrincipalProviderIT.java",
    "bCommit": "b62061de8a",
    "aCommit": "ee92b95ce3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 94
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, times(9)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 94
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '7'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '9'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "7",
          "childCount": 0
        },
        "dstNode": {
          "label": "9",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        94
      ]
    },
    "aCommitTime": 1424798449,
    "ID": "fcrepo/fcrepo:539",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.HttpHeaderPrincipalProviderIT.testEmptyPrincipalProvider()",
    "bSource": {
      "startLine": 72,
      "code": "@Test\n    public void testEmptyPrincipalProvider() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 72,
      "code": "@Test\n    public void testEmptyPrincipalProvider() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(9)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/HttpHeaderPrincipalProviderIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/HttpHeaderPrincipalProviderIT.java",
    "bCommit": "b62061de8a",
    "aCommit": "ee92b95ce3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 94
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, times(9)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 94
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '7'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '9'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "7",
          "childCount": 0
        },
        "dstNode": {
          "label": "9",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        94
      ]
    },
    "aCommitTime": 1424798449,
    "ID": "fcrepo/fcrepo:540",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testPermissiveFAD()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(9)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "b62061de8a",
    "aCommit": "ee92b95ce3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 106
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, times(9)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 106
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '7'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '9'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "7",
          "childCount": 0
        },
        "dstNode": {
          "label": "9",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        106
      ]
    },
    "aCommitTime": 1424798449,
    "ID": "fcrepo/fcrepo:541",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.rdf.impl.NodeTypeRdfContextTest.testShouldMapNodeTypeIteratorToRdf()",
    "bSource": {
      "startLine": 124,
      "code": "@Test\n    public void testShouldMapNodeTypeIteratorToRdf() throws RepositoryException {\n        @SuppressWarnings(\"rawtypes\")\n        final List mockNodeTypeList = singletonList(mockNodeType);\n        @SuppressWarnings(\"unchecked\")\n        final Model actual = new NodeTypeRdfContext(mockNodeTypeList).asModel();\n        assertTrue(actual.contains(createResource(REPOSITORY_NAMESPACE + mockNodeTypeName),\n                type, Class));\n    }"
    },
    "aSource": {
      "startLine": 124,
      "code": "@Test\n    public void testShouldMapNodeTypeIteratorToRdf() throws RepositoryException {\n        final List<NodeType> mockNodeTypeList = singletonList((NodeType) mockNodeType);\n        final Model actual = new NodeTypeRdfContext(mockNodeTypeList.iterator()).asModel();\n        assertTrue(actual.contains(createResource(REPOSITORY_NAMESPACE + mockNodeTypeName),\n                type, Class));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/impl/NodeTypeRdfContextTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/impl/NodeTypeRdfContextTest.java",
    "bCommit": "87b3a278bd",
    "aCommit": "658b756157",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@SuppressWarnings(\"rawtypes\")",
          "type": "DELETE",
          "lineNo": 126
        },
        {
          "line": "final List mockNodeTypeList = singletonList(mockNodeType);",
          "type": "DELETE",
          "lineNo": 127
        },
        {
          "line": "@SuppressWarnings(\"unchecked\")",
          "type": "DELETE",
          "lineNo": 128
        },
        {
          "line": "final Model actual = new NodeTypeRdfContext(mockNodeTypeList).asModel();",
          "type": "DELETE",
          "lineNo": 129
        }
      ],
      "targetChanges": [
        {
          "line": "final List<NodeType> mockNodeTypeList = singletonList((NodeType) mockNodeType);",
          "type": "ADD",
          "lineNo": 126
        },
        {
          "line": "final Model actual = new NodeTypeRdfContext(mockNodeTypeList.iterator()).asModel();",
          "type": "ADD",
          "lineNo": 127
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List mockNodeTypeList"
        },
        {
          "type": "CtAnnotation",
          "value": "java.lang.SuppressWarnings"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'rawtypes'"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Collections.singletonList(Object)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Collections.singletonList(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.NodeTypeRdfContextTest$NamespacedNodeType mockNodeType"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtAnnotation",
          "value": "java.lang.SuppressWarnings"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'unchecked'"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.NodeTypeRdfContext.NodeTypeRdfContext(Iterable)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.NodeTypeRdfContext"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List mockNodeTypeList"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List mockNodeTypeList"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.nodetype.NodeType"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Collections.singletonList(Object)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Collections.singletonList(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.NodeTypeRdfContextTest$NamespacedNodeType mockNodeType"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.nodetype.NodeType"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.NodeTypeRdfContext.NodeTypeRdfContext(NodeTypeManager)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.NodeTypeRdfContext"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.List.iterator()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List mockNodeTypeList"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.List.iterator()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.rdf.impl.NodeTypeRdfContext(java.util.List)",
          "childCount": 1
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.impl.rdf.impl.NodeTypeRdfContext()",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Annotation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.SuppressWarnings",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.rdf.impl.NodeTypeRdfContextTest$NamespacedNodeType",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Annotation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.SuppressWarnings",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "javax.jcr.nodetype.NodeType",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "TYPE_CAST",
        "parents": [
          "FieldRead",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "javax.jcr.nodetype.NodeType",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockNodeTypeList",
          "childCount": 0
        },
        "dstNode": {
          "label": "mockNodeTypeList",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE",
      "REMOVE_VARIABLE_ANNOTATION",
      "REMOVE_VARIABLE_ANNOTATION"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        129
      ]
    },
    "aCommitTime": 1420484130,
    "ID": "fcrepo/fcrepo:223",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.rdf.MiscExamplesIT.testSyntacticallyInvalidDate()",
    "bSource": {
      "startLine": 28,
      "code": "@Test\n    public void testSyntacticallyInvalidDate() throws IOException {\n        createLDPRSAndCheckResponse(getRandomUniquePid(), \"<> <info:some/property> \\\"dunno\\\"^^<http://www.w3\" +\n                \".org/2001/XMLSchema#dateTime>\");\n    }"
    },
    "aSource": {
      "startLine": 27,
      "code": "@Test\n    public void testSyntacticallyInvalidDate() {\n        createLDPRSAndCheckResponse(getRandomUniquePid(), \"<> <info:some/property> \\\"dunno\\\"^^<http://www.w3\" +\n                \".org/2001/XMLSchema#dateTime>\");\n    }"
    },
    "bPath": "fcrepo-integration-rdf/src/test/java/org/fcrepo/integration/rdf/MiscExamplesIT.java",
    "aPath": "fcrepo-integration-rdf/src/test/java/org/fcrepo/integration/rdf/MiscExamplesIT.java",
    "bCommit": "38d5939138",
    "aCommit": "cb4a707935",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testSyntacticallyInvalidDate() throws IOException {",
          "type": "DELETE",
          "lineNo": 29
        }
      ],
      "targetChanges": [
        {
          "line": "public void testSyntacticallyInvalidDate() {",
          "type": "ADD",
          "lineNo": 28
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.integration.rdf.MiscExamplesIT.testSyntacticallyInvalidDate()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.integration.rdf.MiscExamplesIT.testSyntacticallyInvalidDate()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        28
      ]
    },
    "aCommitTime": 1418785610,
    "ID": "fcrepo/fcrepo:462",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldNotDecorateNodesWithLinksToVersionsUnlessVersionable()",
    "bSource": {
      "startLine": 128,
      "code": "@Test\n    public void shouldNotDecorateNodesWithLinksToVersionsUnlessVersionable()\n            throws RepositoryException {\n\n        when(mockResource.isVersioned()).thenReturn(false);\n        when(mockResource.getPath()).thenReturn(\"/some/path/to/object\");\n\n        when(mockSerializers.keySet()).thenReturn(of(\"a\", \"b\"));\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n\n        final Model model =\n                testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertFalse(model.contains(graphSubject, HAS_VERSION_HISTORY));\n    }"
    },
    "aSource": {
      "startLine": 126,
      "code": "@Test\n    public void shouldNotDecorateNodesWithLinksToVersionsUnlessVersionable() {\n\n        when(mockResource.isVersioned()).thenReturn(false);\n        when(mockResource.getPath()).thenReturn(\"/some/path/to/object\");\n\n        when(mockSerializers.keySet()).thenReturn(of(\"a\", \"b\"));\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n\n        final Model model =\n                testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertFalse(model.contains(graphSubject, HAS_VERSION_HISTORY));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "38d5939138",
    "aCommit": "cb4a707935",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldNotDecorateNodesWithLinksToVersionsUnlessVersionable()",
          "type": "DELETE",
          "lineNo": 129
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 130
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldNotDecorateNodesWithLinksToVersionsUnlessVersionable() {",
          "type": "ADD",
          "lineNo": 127
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldNotDecorateNodesWithLinksToVersionsUnlessVersionable()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldNotDecorateNodesWithLinksToVersionsUnlessVersionable()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        128
      ]
    },
    "aCommitTime": 1418785610,
    "ID": "fcrepo/fcrepo:463",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateOtherNodesWithCorrectResourceURI()",
    "bSource": {
      "startLine": 173,
      "code": "@Test\n    public void shouldDecorateOtherNodesWithCorrectResourceURI()\n            throws RepositoryException {\n        when(mockSerializers.keySet()).thenReturn(of(\"a\"));\n        when(mockResource.getPath()).thenReturn(\"/some/path/to/object\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n        final Model model =\n                testObj.createModelForResource(mockResource, uriInfo,\n                        mockSubjects);\n        assertEquals(\n                \"http://localhost/fcrepo/some/path/to/object/fcr:export?format=a\",\n                model.getProperty(graphSubject, HAS_SERIALIZATION)\n                        .getResource().getURI());\n    }"
    },
    "aSource": {
      "startLine": 168,
      "code": "@Test\n    public void shouldDecorateOtherNodesWithCorrectResourceURI() {\n        when(mockSerializers.keySet()).thenReturn(of(\"a\"));\n        when(mockResource.getPath()).thenReturn(\"/some/path/to/object\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n        final Model model =\n                testObj.createModelForResource(mockResource, uriInfo,\n                        mockSubjects);\n        assertEquals(\n                \"http://localhost/fcrepo/some/path/to/object/fcr:export?format=a\",\n                model.getProperty(graphSubject, HAS_SERIALIZATION)\n                        .getResource().getURI());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "38d5939138",
    "aCommit": "cb4a707935",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldDecorateOtherNodesWithCorrectResourceURI()",
          "type": "DELETE",
          "lineNo": 174
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 175
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldDecorateOtherNodesWithCorrectResourceURI() {",
          "type": "ADD",
          "lineNo": 169
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateOtherNodesWithCorrectResourceURI()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateOtherNodesWithCorrectResourceURI()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        170
      ]
    },
    "aCommitTime": 1418785610,
    "ID": "fcrepo/fcrepo:464",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateNodesWithLinksToVersionsAndExport()",
    "bSource": {
      "startLine": 110,
      "code": "@Test\n    public void shouldDecorateNodesWithLinksToVersionsAndExport()\n        throws RepositoryException {\n\n        when(mockResource.isVersioned()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(\"/some/path/to/object\");\n\n        when(mockSerializers.keySet()).thenReturn(of(\"a\", \"b\"));\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_VERSION_HISTORY));\n        assertEquals(2, model.listObjectsOfProperty(graphSubject,\n                HAS_SERIALIZATION).toSet().size());\n    }"
    },
    "aSource": {
      "startLine": 109,
      "code": "@Test\n    public void shouldDecorateNodesWithLinksToVersionsAndExport() {\n\n        when(mockResource.isVersioned()).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(\"/some/path/to/object\");\n\n        when(mockSerializers.keySet()).thenReturn(of(\"a\", \"b\"));\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_VERSION_HISTORY));\n        assertEquals(2, model.listObjectsOfProperty(graphSubject,\n                HAS_SERIALIZATION).toSet().size());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "38d5939138",
    "aCommit": "cb4a707935",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldDecorateNodesWithLinksToVersionsAndExport()",
          "type": "DELETE",
          "lineNo": 111
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 112
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldDecorateNodesWithLinksToVersionsAndExport() {",
          "type": "ADD",
          "lineNo": 110
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateNodesWithLinksToVersionsAndExport()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateNodesWithLinksToVersionsAndExport()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        111
      ]
    },
    "aCommitTime": 1418785610,
    "ID": "fcrepo/fcrepo:465",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateModeRootNodesWithRepositoryWideLinks()",
    "bSource": {
      "startLine": 96,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n        when(mockResource.hasType(ROOT)).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_TRANSACTION_SERVICE));\n    }"
    },
    "aSource": {
      "startLine": 96,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks() {\n        when(mockResource.hasType(ROOT)).thenReturn(true);\n        when(mockResource.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_TRANSACTION_SERVICE));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "38d5939138",
    "aCommit": "cb4a707935",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldDecorateModeRootNodesWithRepositoryWideLinks()",
          "type": "DELETE",
          "lineNo": 97
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 98
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldDecorateModeRootNodesWithRepositoryWideLinks() {",
          "type": "ADD",
          "lineNo": 97
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateModeRootNodesWithRepositoryWideLinks()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateModeRootNodesWithRepositoryWideLinks()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        98
      ]
    },
    "aCommitTime": 1418785610,
    "ID": "fcrepo/fcrepo:466",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateRootNodeWithCorrectResourceURI()",
    "bSource": {
      "startLine": 157,
      "code": "@Test\n    public void shouldDecorateRootNodeWithCorrectResourceURI()\n            throws RepositoryException {\n        when(mockResource.hasType(ROOT)).thenReturn(true);\n        when(mockSerializers.keySet()).thenReturn(of(\"a\"));\n        when(mockResource.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n        final Model model =\n                testObj.createModelForResource(mockResource, uriInfo,\n                        mockSubjects);\n        assertEquals(\"http://localhost/fcrepo/fcr:export?format=a\", model\n                .getProperty(graphSubject, HAS_SERIALIZATION).getResource()\n                .getURI());\n    }"
    },
    "aSource": {
      "startLine": 153,
      "code": "@Test\n    public void shouldDecorateRootNodeWithCorrectResourceURI() {\n        when(mockResource.hasType(ROOT)).thenReturn(true);\n        when(mockSerializers.keySet()).thenReturn(of(\"a\"));\n        when(mockResource.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n        final Model model =\n                testObj.createModelForResource(mockResource, uriInfo,\n                        mockSubjects);\n        assertEquals(\"http://localhost/fcrepo/fcr:export?format=a\", model\n                .getProperty(graphSubject, HAS_SERIALIZATION).getResource()\n                .getURI());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "38d5939138",
    "aCommit": "cb4a707935",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldDecorateRootNodeWithCorrectResourceURI()",
          "type": "DELETE",
          "lineNo": 158
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 159
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldDecorateRootNodeWithCorrectResourceURI() {",
          "type": "ADD",
          "lineNo": 154
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateRootNodeWithCorrectResourceURI()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateRootNodeWithCorrectResourceURI()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        155
      ]
    },
    "aCommitTime": 1418785610,
    "ID": "fcrepo/fcrepo:467",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateDatastreamsWithLinksToFixityChecks()",
    "bSource": {
      "startLine": 144,
      "code": "@Test\n    public void shouldDecorateDatastreamsWithLinksToFixityChecks()\n        throws RepositoryException {\n        when(mockBinary.getPath()).thenReturn(\"/some/path/to/datastream\");\n        when(mockSerializers.keySet()).thenReturn(new HashSet<String>());\n        final Resource graphSubject = mockSubjects.reverse().convert(mockBinary);\n\n        final Model model =\n            testObj.createModelForResource(mockBinary, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_FIXITY_SERVICE));\n    }"
    },
    "aSource": {
      "startLine": 141,
      "code": "@Test\n    public void shouldDecorateDatastreamsWithLinksToFixityChecks() {\n        when(mockBinary.getPath()).thenReturn(\"/some/path/to/datastream\");\n        when(mockSerializers.keySet()).thenReturn(new HashSet<String>());\n        final Resource graphSubject = mockSubjects.reverse().convert(mockBinary);\n\n        final Model model =\n            testObj.createModelForResource(mockBinary, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_FIXITY_SERVICE));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "38d5939138",
    "aCommit": "cb4a707935",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldDecorateDatastreamsWithLinksToFixityChecks()",
          "type": "DELETE",
          "lineNo": 145
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 146
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldDecorateDatastreamsWithLinksToFixityChecks() {",
          "type": "ADD",
          "lineNo": 142
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateDatastreamsWithLinksToFixityChecks()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateDatastreamsWithLinksToFixityChecks()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        143
      ]
    },
    "aCommitTime": 1418785610,
    "ID": "fcrepo/fcrepo:468",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.rdf.impl.mappings.PropertyValueIteratorTest.testMultiValueSingleProperty()",
    "bSource": {
      "startLine": 77,
      "code": "@Test\n    public void testMultiValueSingleProperty() {\n        testObj = new PropertyValueIterator(mockMultivaluedProperty);\n        final List<Value> values = newArrayList(testObj);\n        assertTrue(values.containsAll(ImmutableList.of(value2, value3)));\n    }"
    },
    "aSource": {
      "startLine": 78,
      "code": "@Test\n    public void testMultiValueSingleProperty() {\n        testObj = new PropertyValueIterator(mockMultivaluedProperty);\n        final List<Value> values = newArrayList(testObj);\n        assertTrue(values.containsAll(of(value2, value3)));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/impl/mappings/PropertyValueIteratorTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/impl/mappings/PropertyValueIteratorTest.java",
    "bCommit": "38d5939138",
    "aCommit": "cb4a707935",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(values.containsAll(ImmutableList.of(value2, value3)));",
          "type": "DELETE",
          "lineNo": 81
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue(values.containsAll(of(value2, value3)));",
          "type": "ADD",
          "lineNo": 82
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "containsAll()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List values"
        },
        {
          "type": "CtExecutableReference",
          "value": "containsAll()"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.ImmutableList.of(Object,Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.ImmutableList"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.ImmutableList.of(Object,Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Value value2"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Value value3"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "containsAll()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List values"
        },
        {
          "type": "CtExecutableReference",
          "value": "containsAll()"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.ImmutableList.of(Object,Object)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.ImmutableList.of(Object,Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Value value2"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Value value3"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.google.common.collect.ImmutableList",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        82
      ]
    },
    "aCommitTime": 1418785610,
    "ID": "fcrepo/fcrepo:469",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ContainerRolesPrincipalProviderIT.testEmptyPrincipalProvider()",
    "bSource": {
      "startLine": 72,
      "code": "@Test\n    public void testEmptyPrincipalProvider() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 72,
      "code": "@Test\n    public void testEmptyPrincipalProvider() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ContainerRolesPrincipalProviderIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ContainerRolesPrincipalProviderIT.java",
    "bCommit": "57090df892",
    "aCommit": "ef5cc86470",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 94
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 94
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '5'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '7'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "5",
          "childCount": 0
        },
        "dstNode": {
          "label": "7",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        94
      ]
    },
    "aCommitTime": 1417737733,
    "ID": "fcrepo/fcrepo:544",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.HttpHeaderPrincipalProviderIT.testEmptyPrincipalProvider()",
    "bSource": {
      "startLine": 72,
      "code": "@Test\n    public void testEmptyPrincipalProvider() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 72,
      "code": "@Test\n    public void testEmptyPrincipalProvider() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/HttpHeaderPrincipalProviderIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/HttpHeaderPrincipalProviderIT.java",
    "bCommit": "57090df892",
    "aCommit": "ef5cc86470",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 94
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 94
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '5'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '7'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "5",
          "childCount": 0
        },
        "dstNode": {
          "label": "7",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        94
      ]
    },
    "aCommitTime": 1417737733,
    "ID": "fcrepo/fcrepo:545",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.FedoraResourceImplTest.testDeleteLeavesATombstone()",
    "bSource": {
      "startLine": 419,
      "code": "@Test\n    public void testDeleteLeavesATombstone() throws RepositoryException {\n        when(mockNode.getReferences()).thenReturn(new TestPropertyIterator());\n        when(mockNode.getWeakReferences()).thenReturn(new TestPropertyIterator());\n        when(mockNode.getName()).thenReturn(\"a\");\n        when(mockNode.getParent()).thenReturn(mockContainer);\n        when(mockNode.getDepth()).thenReturn(2);\n        when(mockContainer.getNode(\"a\")).thenThrow(new PathNotFoundException());\n        testObj.delete();\n        verify(mockNode).remove();\n        verify(mockContainer).addNode(\"a\", FEDORA_TOMBSTONE);\n    }"
    },
    "aSource": {
      "startLine": 419,
      "code": "@Test\n    public void testDeleteLeavesATombstone() throws RepositoryException {\n        when(mockNode.getReferences()).thenReturn(new TestPropertyIterator());\n        when(mockNode.getWeakReferences()).thenReturn(new TestPropertyIterator());\n        when(mockNode.getName()).thenReturn(\"a\");\n        when(mockNode.getParent()).thenReturn(mockContainer);\n        when(mockNode.getDepth()).thenReturn(2);\n        when(mockContainer.getNode(\"a\")).thenThrow(new PathNotFoundException());\n        when(mockContainer.getPath()).thenReturn(\"b\");\n        when(mockContainer.getSession()).thenReturn(mockSession);\n        when(mockSession.nodeExists(anyString())).thenReturn(false);\n        when(mockSession.getNode(\"b\")).thenReturn(mockContainer);\n        testObj.delete();\n        verify(mockNode).remove();\n        verify(mockContainer).addNode(\"a\", FEDORA_TOMBSTONE);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraResourceImplTest.java",
    "bCommit": "57090df892",
    "aCommit": "ef5cc86470",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockContainer.getPath()).thenReturn(\"b\");",
          "type": "ADD",
          "lineNo": 427
        },
        {
          "line": "when(mockContainer.getSession()).thenReturn(mockSession);",
          "type": "ADD",
          "lineNo": 428
        },
        {
          "line": "when(mockSession.nodeExists(anyString())).thenReturn(false);",
          "type": "ADD",
          "lineNo": 429
        },
        {
          "line": "when(mockSession.getNode(\"b\")).thenReturn(mockContainer);",
          "type": "ADD",
          "lineNo": 430
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPath()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContainer"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPath()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getSession()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContainer"
        },
        {
          "type": "CtExecutableReference",
          "value": "getSession()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "nodeExists()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "nodeExists()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContainer"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        427
      ]
    },
    "aCommitTime": 1417737733,
    "ID": "fcrepo/fcrepo:546",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testPermissiveFAD()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "57090df892",
    "aCommit": "ef5cc86470",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 106
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, times(7)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 106
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '5'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '7'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "5",
          "childCount": 0
        },
        "dstNode": {
          "label": "7",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        106
      ]
    },
    "aCommitTime": 1417737733,
    "ID": "fcrepo/fcrepo:547",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.VersionServiceImplTest.testMixinCreationWhenExplicitlyVersioning()",
    "bSource": {
      "startLine": 219,
      "code": "@Test\n    public void testMixinCreationWhenExplicitlyVersioning() throws RepositoryException {\n        testObj.createVersion(mockSession, EXAMPLE_UNVERSIONED_PATH);\n\n        final Node unversionedNode = mockSession.getNode(EXAMPLE_UNVERSIONED_PATH);\n        verify(unversionedNode).isNodeType(VERSIONABLE);\n        verify(unversionedNode).addMixin(VERSIONABLE);\n    }"
    },
    "aSource": {
      "startLine": 219,
      "code": "@Test\n    public void testMixinCreationWhenExplicitlyVersioning() throws RepositoryException {\n        final VersionManager mockVersionManager = mock(VersionManager.class);\n        final VersionHistory mockHistory = mock(VersionHistory.class);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionManager.getVersionHistory(EXAMPLE_UNVERSIONED_PATH)).thenReturn(mockHistory);\n        testObj.createVersion(mockSession, EXAMPLE_UNVERSIONED_PATH, \"LABEL\");\n\n        final Node unversionedNode = mockSession.getNode(EXAMPLE_UNVERSIONED_PATH);\n        verify(unversionedNode).isNodeType(VERSIONABLE);\n        verify(unversionedNode).addMixin(VERSIONABLE);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/VersionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/VersionServiceImplTest.java",
    "bCommit": "f76eedb69f",
    "aCommit": "d4bb9f73e6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.createVersion(mockSession, EXAMPLE_UNVERSIONED_PATH);",
          "type": "DELETE",
          "lineNo": 221
        }
      ],
      "targetChanges": [
        {
          "line": "final VersionManager mockVersionManager = mock(VersionManager.class);",
          "type": "ADD",
          "lineNo": 221
        },
        {
          "line": "final VersionHistory mockHistory = mock(VersionHistory.class);",
          "type": "ADD",
          "lineNo": 222
        },
        {
          "line": "when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);",
          "type": "ADD",
          "lineNo": 223
        },
        {
          "line": "when(mockVersionManager.getVersionHistory(EXAMPLE_UNVERSIONED_PATH)).thenReturn(mockHistory);",
          "type": "ADD",
          "lineNo": 224
        },
        {
          "line": "testObj.createVersion(mockSession, EXAMPLE_UNVERSIONED_PATH, \"LABEL\");",
          "type": "ADD",
          "lineNo": 225
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.VersionService.createVersion(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.VersionService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.VersionService.createVersion(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String EXAMPLE_UNVERSIONED_PATH"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.version.VersionManager mockVersionManager"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.version.VersionManager"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.version.VersionHistory mockHistory"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.version.VersionHistory"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.version.VersionManager)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getVersionManager()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Workspace mockWorkspace"
        },
        {
          "type": "CtExecutableReference",
          "value": "getVersionManager()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.version.VersionManager)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionManager mockVersionManager"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.version.VersionHistory)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getVersionHistory(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionManager mockVersionManager"
        },
        {
          "type": "CtExecutableReference",
          "value": "getVersionHistory(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String EXAMPLE_UNVERSIONED_PATH"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.version.VersionHistory)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionHistory mockHistory"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.VersionService.createVersion(Session,String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.VersionService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.VersionService.createVersion(Session,String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String EXAMPLE_UNVERSIONED_PATH"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'LABEL'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockVersionManager",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockHistory",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "\"LABEL\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        221
      ]
    },
    "aCommitTime": 1417546776,
    "ID": "fcrepo/fcrepo:475",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.FedoraResourceImplTest.testAddVersionLabel()",
    "bSource": {
      "startLine": 215,
      "code": "@Test\n    public void testAddVersionLabel() throws RepositoryException {\n\n        final VersionHistory mockVersionHistory = mock(VersionHistory.class);\n        final Version mockVersion = mock(Version.class);\n        when(mockVersion.getName()).thenReturn(\"uuid\");\n        final Workspace mockWorkspace = mock(Workspace.class);\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        final VersionManager mockVersionManager = mock(VersionManager.class);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n\n        when(mockVersionManager.getBaseVersion(anyString())).thenReturn(\n                mockVersion);\n\n        when(mockVersionManager.getVersionHistory(anyString())).thenReturn(\n                mockVersionHistory);\n\n        testObj.addVersionLabel(\"v1.0.0\");\n        verify(mockVersionHistory).addVersionLabel(\"uuid\", \"v1.0.0\", true);\n    }"
    },
    "aSource": {
      "startLine": 215,
      "code": "@Test\n    public void testAddVersionLabel() throws RepositoryException {\n\n        final VersionHistory mockVersionHistory = mock(VersionHistory.class);\n        final Version mockVersion = mock(Version.class);\n        when(mockVersion.getName()).thenReturn(\"uuid\");\n        final Workspace mockWorkspace = mock(Workspace.class);\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        final VersionManager mockVersionManager = mock(VersionManager.class);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n\n        when(mockVersionManager.getBaseVersion(anyString())).thenReturn(\n                mockVersion);\n\n        when(mockVersionManager.getVersionHistory(anyString())).thenReturn(\n                mockVersionHistory);\n\n        testObj.addVersionLabel(\"v1.0.0\");\n        verify(mockVersionHistory).addVersionLabel(\"uuid\", \"v1.0.0\", false);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraResourceImplTest.java",
    "bCommit": "50105b6375",
    "aCommit": "cec7cb47a2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockVersionHistory).addVersionLabel(\"uuid\", \"v1.0.0\", true);",
          "type": "DELETE",
          "lineNo": 233
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockVersionHistory).addVersionLabel(\"uuid\", \"v1.0.0\", false);",
          "type": "ADD",
          "lineNo": 233
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "addVersionLabel(java.lang.String,java.lang.String,boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionHistory mockVersionHistory"
        },
        {
          "type": "CtExecutableReference",
          "value": "addVersionLabel(java.lang.String,java.lang.String,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'uuid'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'v1.0.0'"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "addVersionLabel(java.lang.String,java.lang.String,boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionHistory mockVersionHistory"
        },
        {
          "type": "CtExecutableReference",
          "value": "addVersionLabel(java.lang.String,java.lang.String,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'uuid'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'v1.0.0'"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "true",
          "childCount": 0
        },
        "dstNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        233
      ]
    },
    "aCommitTime": 1416596852,
    "ID": "fcrepo/fcrepo:459",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.VersionServiceImplTest.testRevertToVersionByLabel()",
    "bSource": {
      "startLine": 85,
      "code": "@Test\n    public void testRevertToVersionByLabel() throws RepositoryException {\n        final String versionLabel = \"v\";\n        final VersionManager mockVersionManager = mock(VersionManager.class);\n        final VersionHistory mockHistory = mock(VersionHistory.class);\n        final Version mockVersion1 = mock(Version.class);\n        when(mockHistory.hasVersionLabel(versionLabel)).thenReturn(true);\n        when(mockHistory.getVersionByLabel(versionLabel)).thenReturn(mockVersion1);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionManager.getVersionHistory(EXAMPLE_VERSIONED_PATH)).thenReturn(mockHistory);\n\n        testObj.revertToVersion(mockSession, EXAMPLE_VERSIONED_PATH, versionLabel);\n        verify(mockVersionManager).restore(mockVersion1, true);\n\n        verify(mockVersionManager, never()).checkpoint(EXAMPLE_VERSIONED_PATH);\n    }"
    },
    "aSource": {
      "startLine": 85,
      "code": "@Test\n    public void testRevertToVersionByLabel() throws RepositoryException {\n        final String versionLabel = \"v\";\n        final VersionManager mockVersionManager = mock(VersionManager.class);\n        final VersionHistory mockHistory = mock(VersionHistory.class);\n        final Version mockVersion1 = mock(Version.class);\n        final Version mockPreRevertVersion = mock(Version.class);\n        when(mockVersionManager.checkin(EXAMPLE_VERSIONED_PATH)).thenReturn(mockPreRevertVersion);\n        when(mockPreRevertVersion.getContainingHistory()).thenReturn(mockHistory);\n        when(mockHistory.hasVersionLabel(versionLabel)).thenReturn(true);\n        when(mockHistory.getVersionByLabel(versionLabel)).thenReturn(mockVersion1);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionManager.getVersionHistory(EXAMPLE_VERSIONED_PATH)).thenReturn(mockHistory);\n\n        testObj.revertToVersion(mockSession, EXAMPLE_VERSIONED_PATH, versionLabel);\n        verify(mockVersionManager).restore(mockVersion1, true);\n\n        verify(mockVersionManager, never()).checkpoint(EXAMPLE_VERSIONED_PATH);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/VersionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/VersionServiceImplTest.java",
    "bCommit": "50105b6375",
    "aCommit": "cec7cb47a2",
    "hunk": {
      "targetChanges": [
        {
          "line": "final Version mockPreRevertVersion = mock(Version.class);",
          "type": "ADD",
          "lineNo": 91
        },
        {
          "line": "when(mockVersionManager.checkin(EXAMPLE_VERSIONED_PATH)).thenReturn(mockPreRevertVersion);",
          "type": "ADD",
          "lineNo": 92
        },
        {
          "line": "when(mockPreRevertVersion.getContainingHistory()).thenReturn(mockHistory);",
          "type": "ADD",
          "lineNo": 93
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.version.Version mockPreRevertVersion"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.version.Version"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.version.Version)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "checkin(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionManager mockVersionManager"
        },
        {
          "type": "CtExecutableReference",
          "value": "checkin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String EXAMPLE_VERSIONED_PATH"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.version.Version)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.Version mockPreRevertVersion"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.version.VersionHistory)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getContainingHistory()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.Version mockPreRevertVersion"
        },
        {
          "type": "CtExecutableReference",
          "value": "getContainingHistory()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.version.VersionHistory)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionHistory mockHistory"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockPreRevertVersion",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        96
      ]
    },
    "aCommitTime": 1416596852,
    "ID": "fcrepo/fcrepo:460",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.VersionServiceImplTest.testRevertToVersionByUUID()",
    "bSource": {
      "startLine": 102,
      "code": "@Test\n    public void testRevertToVersionByUUID() throws RepositoryException {\n        final String versionUUID = \"uuid\";\n        final VersionManager mockVersionManager = mock(VersionManager.class);\n        final VersionHistory mockHistory = mock(VersionHistory.class);\n        final Version mockVersion1 = mock(Version.class);\n        when(mockHistory.getVersionByLabel(versionUUID)).thenThrow(new VersionException());\n        final VersionIterator mockVersionIterator = mock(VersionIterator.class);\n        when(mockHistory.getAllVersions()).thenReturn(mockVersionIterator);\n        when(mockVersionIterator.hasNext()).thenReturn(true);\n        when(mockVersionIterator.nextVersion()).thenReturn(mockVersion1);\n        final Node mockFrozenNode = mock(Node.class);\n        when(mockVersion1.getFrozenNode()).thenReturn(mockFrozenNode);\n        when(mockFrozenNode.getIdentifier()).thenReturn(versionUUID);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionManager.getVersionHistory(EXAMPLE_VERSIONED_PATH)).thenReturn(mockHistory);\n\n        testObj.revertToVersion(mockSession, EXAMPLE_VERSIONED_PATH, versionUUID);\n        verify(mockVersionManager).restore(mockVersion1, true);\n    }"
    },
    "aSource": {
      "startLine": 105,
      "code": "@Test\n    public void testRevertToVersionByUUID() throws RepositoryException {\n        final String versionUUID = \"uuid\";\n        final VersionManager mockVersionManager = mock(VersionManager.class);\n        final VersionHistory mockHistory = mock(VersionHistory.class);\n        final Version mockVersion1 = mock(Version.class);\n        final Version mockPreRevertVersion = mock(Version.class);\n        when(mockVersionManager.checkin(EXAMPLE_VERSIONED_PATH)).thenReturn(mockPreRevertVersion);\n        when(mockPreRevertVersion.getContainingHistory()).thenReturn(mockHistory);\n        when(mockHistory.getVersionByLabel(versionUUID)).thenThrow(new VersionException());\n        final VersionIterator mockVersionIterator = mock(VersionIterator.class);\n        when(mockHistory.getAllVersions()).thenReturn(mockVersionIterator);\n        when(mockVersionIterator.hasNext()).thenReturn(true);\n        when(mockVersionIterator.nextVersion()).thenReturn(mockVersion1);\n        final Node mockFrozenNode = mock(Node.class);\n        when(mockVersion1.getFrozenNode()).thenReturn(mockFrozenNode);\n        when(mockFrozenNode.getIdentifier()).thenReturn(versionUUID);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionManager.getVersionHistory(EXAMPLE_VERSIONED_PATH)).thenReturn(mockHistory);\n\n        testObj.revertToVersion(mockSession, EXAMPLE_VERSIONED_PATH, versionUUID);\n        verify(mockVersionManager).restore(mockVersion1, true);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/VersionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/VersionServiceImplTest.java",
    "bCommit": "50105b6375",
    "aCommit": "cec7cb47a2",
    "hunk": {
      "targetChanges": [
        {
          "line": "final Version mockPreRevertVersion = mock(Version.class);",
          "type": "ADD",
          "lineNo": 111
        },
        {
          "line": "when(mockVersionManager.checkin(EXAMPLE_VERSIONED_PATH)).thenReturn(mockPreRevertVersion);",
          "type": "ADD",
          "lineNo": 112
        },
        {
          "line": "when(mockPreRevertVersion.getContainingHistory()).thenReturn(mockHistory);",
          "type": "ADD",
          "lineNo": 113
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.version.Version mockPreRevertVersion"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.version.Version"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.version.Version)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "checkin(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionManager mockVersionManager"
        },
        {
          "type": "CtExecutableReference",
          "value": "checkin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String EXAMPLE_VERSIONED_PATH"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.version.Version)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.Version mockPreRevertVersion"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.version.VersionHistory)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getContainingHistory()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.Version mockPreRevertVersion"
        },
        {
          "type": "CtExecutableReference",
          "value": "getContainingHistory()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.version.VersionHistory)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionHistory mockHistory"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockPreRevertVersion",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        122
      ]
    },
    "aCommitTime": 1416596852,
    "ID": "fcrepo/fcrepo:461",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.NodeServiceImplTest.testMoveObject()",
    "bSource": {
      "startLine": 104,
      "code": "@Test\n    public void testMoveObject() throws RepositoryException {\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        testObj.moveObject(mockSession, \"foo\", \"bar\");\n        verify(mockWorkspace).move(\"foo\", \"bar\");\n    }"
    },
    "aSource": {
      "startLine": 104,
      "code": "@Test\n    public void testMoveObject() throws RepositoryException {\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockSession.getNode(\"foo\")).thenReturn(mockObjNode);\n        when(mockObjNode.getDepth()).thenReturn(0);\n        testObj.moveObject(mockSession, \"foo\", \"bar\");\n        verify(mockWorkspace).move(\"foo\", \"bar\");\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/NodeServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/NodeServiceImplTest.java",
    "bCommit": "ff3db089b7",
    "aCommit": "58676ec495",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockSession.getNode(\"foo\")).thenReturn(mockObjNode);",
          "type": "ADD",
          "lineNo": 107
        },
        {
          "line": "when(mockObjNode.getDepth()).thenReturn(0);",
          "type": "ADD",
          "lineNo": 108
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'foo'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockObjNode"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(int)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getDepth()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockObjNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getDepth()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        107
      ]
    },
    "aCommitTime": 1416409185,
    "ID": "fcrepo/fcrepo:209",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.BinaryServiceImplTest.testFindOrCreateBinary()",
    "bSource": {
      "startLine": 62,
      "code": "@Test\n    public void testFindOrCreateBinary() throws Exception {\n        final String testPath = \"/foo/bar\";\n        when(mockRoot.getNode(testPath.substring(1))).thenReturn(mockDsNode);\n        when(mockNode.isNodeType(FEDORA_BINARY)).thenReturn(true);\n        testObj.findOrCreate(mockSession, testPath);\n        verify(mockRoot).getNode(testPath.substring(1));\n    }"
    },
    "aSource": {
      "startLine": 62,
      "code": "@Test\n    public void testFindOrCreateBinary() throws Exception {\n        final String testPath = \"/foo/bar\";\n        when(mockRoot.getNode(testPath.substring(1))).thenReturn(mockDsNode);\n        when(mockNode.isNodeType(FEDORA_BINARY)).thenReturn(true);\n        when(mockSession.getNode(\"/\")).thenReturn(mockRoot);\n        testObj.findOrCreate(mockSession, testPath);\n        verify(mockRoot).getNode(testPath.substring(1));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/BinaryServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/BinaryServiceImplTest.java",
    "bCommit": "3aa9e1ff53",
    "aCommit": "538d455f90",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockSession.getNode(\"/\")).thenReturn(mockRoot);",
          "type": "ADD",
          "lineNo": 67
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRoot"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        67
      ]
    },
    "aCommitTime": 1415476843,
    "ID": "fcrepo/fcrepo:201",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testPermissiveFAD()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(4)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "3aa9e1ff53",
    "aCommit": "538d455f90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, times(4)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 106
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 106
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '4'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '5'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "4",
          "childCount": 0
        },
        "dstNode": {
          "label": "5",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        106
      ]
    },
    "aCommitTime": 1415476843,
    "ID": "fcrepo/fcrepo:202",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.rdf.JcrRdfToolsTest.shouldCreateHashUriSubjects()",
    "bSource": {
      "startLine": 336,
      "code": "@Test\n    public void shouldCreateHashUriSubjects() throws RepositoryException {\n        final Model m = createDefaultModel();\n        final Statement x = m.createStatement(testSubjects.toDomain(\"/some/#/abc\"),\n                createProperty(\"info:x\"),\n                testSubjects.toDomain(\"/\"));\n        testObj.jcrTools = mock(JcrTools.class);\n        when(mockNode.getParent()).thenReturn(mockHashNode);\n        when(mockHashNode.getParent()).thenReturn(mockChildNode);\n        when(mockRootNode.hasNode(\"some\")).thenReturn(true);\n        when(mockRootNode.getNode(\"some\")).thenReturn(mockChildNode);\n        when(mockChildNode.isNew()).thenReturn(false);\n        when(testObj.jcrTools.findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER)).thenReturn(mockNode);\n        when(mockHashNode.isNew()).thenReturn(true);\n        final Statement statement = testObj.skolemize(testSubjects, x);\n        assertEquals(x, statement);\n        verify(testObj.jcrTools).findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER);\n        verify(mockNode).addMixin(FEDORA_RESOURCE);\n        verify(mockHashNode).addMixin(FEDORA_PAIRTREE);\n    }"
    },
    "aSource": {
      "startLine": 336,
      "code": "@Test\n    public void shouldCreateHashUriSubjects() throws RepositoryException {\n        final Model m = createDefaultModel();\n        final Statement x = m.createStatement(testSubjects.toDomain(\"/some/#/abc\"),\n                createProperty(\"info:x\"),\n                testSubjects.toDomain(\"/\"));\n        testObj.jcrTools = mock(JcrTools.class);\n        when(mockNode.getParent()).thenReturn(mockHashNode);\n        when(mockHashNode.getParent()).thenReturn(mockChildNode);\n        when(mockSession.nodeExists(\"/some\")).thenReturn(true);\n        when(mockSession.getNode(\"/some\")).thenReturn(mockChildNode);\n        when(mockChildNode.isNew()).thenReturn(false);\n        when(testObj.jcrTools.findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER)).thenReturn(mockNode);\n        when(mockHashNode.isNew()).thenReturn(true);\n        final Statement statement = testObj.skolemize(testSubjects, x);\n        assertEquals(x, statement);\n        verify(testObj.jcrTools).findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER);\n        verify(mockNode).addMixin(FEDORA_RESOURCE);\n        verify(mockHashNode).addMixin(FEDORA_PAIRTREE);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/JcrRdfToolsTest.java",
    "bCommit": "3aa9e1ff53",
    "aCommit": "538d455f90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRootNode.hasNode(\"some\")).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 345
        },
        {
          "line": "when(mockRootNode.getNode(\"some\")).thenReturn(mockChildNode);",
          "type": "DELETE",
          "lineNo": 346
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSession.nodeExists(\"/some\")).thenReturn(true);",
          "type": "ADD",
          "lineNo": 345
        },
        {
          "line": "when(mockSession.getNode(\"/some\")).thenReturn(mockChildNode);",
          "type": "ADD",
          "lineNo": 346
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockChildNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockChildNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "hasNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "nodeExists",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"some\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"some\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        350
      ]
    },
    "aCommitTime": 1415476843,
    "ID": "fcrepo/fcrepo:203",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.rdf.JcrRdfToolsTest.shouldCreateHashUriObjects()",
    "bSource": {
      "startLine": 393,
      "code": "@Test\n    public void shouldCreateHashUriObjects() throws RepositoryException {\n        final Model m = createDefaultModel();\n        final Statement x = m.createStatement(\n                testSubjects.toDomain(\"/\"),\n                createProperty(\"info:x\"),\n                testSubjects.toDomain(\"/some/#/abc\"));\n        testObj.jcrTools = mock(JcrTools.class);\n        when(mockNode.getParent()).thenReturn(mockHashNode);\n        when(mockHashNode.getParent()).thenReturn(mockChildNode);\n        when(mockRootNode.hasNode(\"some\")).thenReturn(true);\n        when(mockRootNode.getNode(\"some\")).thenReturn(mockChildNode);\n        when(testObj.jcrTools.findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER)).thenReturn(mockNode);\n        final Statement statement = testObj.skolemize(testSubjects, x);\n        assertEquals(x, statement);\n        verify(testObj.jcrTools).findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER);\n        verify(mockNode).addMixin(FEDORA_RESOURCE);\n    }"
    },
    "aSource": {
      "startLine": 393,
      "code": "@Test\n    public void shouldCreateHashUriObjects() throws RepositoryException {\n        final Model m = createDefaultModel();\n        final Statement x = m.createStatement(\n                testSubjects.toDomain(\"/\"),\n                createProperty(\"info:x\"),\n                testSubjects.toDomain(\"/some/#/abc\"));\n        testObj.jcrTools = mock(JcrTools.class);\n        when(mockNode.getParent()).thenReturn(mockHashNode);\n        when(mockHashNode.getParent()).thenReturn(mockChildNode);\n        when(mockSession.nodeExists(\"/some\")).thenReturn(true);\n        when(mockSession.getNode(\"/some\")).thenReturn(mockChildNode);\n        when(testObj.jcrTools.findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER)).thenReturn(mockNode);\n        final Statement statement = testObj.skolemize(testSubjects, x);\n        assertEquals(x, statement);\n        verify(testObj.jcrTools).findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER);\n        verify(mockNode).addMixin(FEDORA_RESOURCE);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/JcrRdfToolsTest.java",
    "bCommit": "3aa9e1ff53",
    "aCommit": "538d455f90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRootNode.hasNode(\"some\")).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 403
        },
        {
          "line": "when(mockRootNode.getNode(\"some\")).thenReturn(mockChildNode);",
          "type": "DELETE",
          "lineNo": 404
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSession.nodeExists(\"/some\")).thenReturn(true);",
          "type": "ADD",
          "lineNo": 403
        },
        {
          "line": "when(mockSession.getNode(\"/some\")).thenReturn(mockChildNode);",
          "type": "ADD",
          "lineNo": 404
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockChildNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockChildNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "hasNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "nodeExists",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"some\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"some\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        406
      ]
    },
    "aCommitTime": 1415476843,
    "ID": "fcrepo/fcrepo:204",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.rdf.JcrRdfToolsTest.shouldCreateHashUriSubjectsWithExistingHashUri()",
    "bSource": {
      "startLine": 357,
      "code": "@Test\n    public void shouldCreateHashUriSubjectsWithExistingHashUri() throws RepositoryException {\n        final Model m = createDefaultModel();\n        final Statement x = m.createStatement(testSubjects.toDomain(\"/some/#/abc\"),\n                createProperty(\"info:x\"),\n                testSubjects.toDomain(\"/\"));\n        testObj.jcrTools = mock(JcrTools.class);\n        when(mockNode.getParent()).thenReturn(mockHashNode);\n        when(mockHashNode.getParent()).thenReturn(mockChildNode);\n        when(mockRootNode.hasNode(\"some\")).thenReturn(true);\n        when(mockRootNode.getNode(\"some\")).thenReturn(mockChildNode);\n        when(mockChildNode.isNew()).thenReturn(false);\n        when(mockChildNode.hasNode(\"#\")).thenReturn(true);\n        when(mockChildNode.getNode(\"#\")).thenReturn(mockHashNode);\n        when(mockHashNode.isNew()).thenReturn(false);\n        when(testObj.jcrTools.findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER)).thenReturn(mockNode);\n        final Statement statement = testObj.skolemize(testSubjects, x);\n        assertEquals(x, statement);\n        verify(testObj.jcrTools).findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER);\n        verify(mockNode).addMixin(FEDORA_RESOURCE);\n    }"
    },
    "aSource": {
      "startLine": 357,
      "code": "@Test\n    public void shouldCreateHashUriSubjectsWithExistingHashUri() throws RepositoryException {\n        final Model m = createDefaultModel();\n        final Statement x = m.createStatement(testSubjects.toDomain(\"/some/#/abc\"),\n                createProperty(\"info:x\"),\n                testSubjects.toDomain(\"/\"));\n        testObj.jcrTools = mock(JcrTools.class);\n        when(mockNode.getParent()).thenReturn(mockHashNode);\n        when(mockHashNode.getParent()).thenReturn(mockChildNode);\n        when(mockSession.nodeExists(\"/some\")).thenReturn(true);\n        when(mockSession.getNode(\"/some\")).thenReturn(mockChildNode);\n        when(mockChildNode.isNew()).thenReturn(false);\n        when(mockChildNode.hasNode(\"#\")).thenReturn(true);\n        when(mockChildNode.getNode(\"#\")).thenReturn(mockHashNode);\n        when(mockHashNode.isNew()).thenReturn(false);\n        when(testObj.jcrTools.findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER)).thenReturn(mockNode);\n        final Statement statement = testObj.skolemize(testSubjects, x);\n        assertEquals(x, statement);\n        verify(testObj.jcrTools).findOrCreateNode(mockSession, \"/some/#/abc\", NT_FOLDER);\n        verify(mockNode).addMixin(FEDORA_RESOURCE);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/JcrRdfToolsTest.java",
    "bCommit": "3aa9e1ff53",
    "aCommit": "538d455f90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRootNode.hasNode(\"some\")).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 366
        },
        {
          "line": "when(mockRootNode.getNode(\"some\")).thenReturn(mockChildNode);",
          "type": "DELETE",
          "lineNo": 367
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSession.nodeExists(\"/some\")).thenReturn(true);",
          "type": "ADD",
          "lineNo": 366
        },
        {
          "line": "when(mockSession.getNode(\"/some\")).thenReturn(mockChildNode);",
          "type": "ADD",
          "lineNo": 367
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockChildNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockChildNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "hasNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "nodeExists",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"some\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"some\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        373
      ]
    },
    "aCommitTime": 1415476843,
    "ID": "fcrepo/fcrepo:205",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.FedoraTypesUtilsTest.testGetClosestExistingAncestorRoot()",
    "bSource": {
      "startLine": 338,
      "code": "@Test\n    public void testGetClosestExistingAncestorRoot() throws RepositoryException {\n        when(mockSession.getRootNode()).thenReturn(mockRootNode);\n        when(mockRootNode.hasNode(anyString())).thenReturn(false);\n\n        final Node closestExistingAncestor = getClosestExistingAncestor(mockSession, \"/some/path\");\n        assertEquals(mockRootNode, closestExistingAncestor);\n    }"
    },
    "aSource": {
      "startLine": 338,
      "code": "@Test\n    public void testGetClosestExistingAncestorRoot() throws RepositoryException {\n        when(mockSession.getNode(\"/\")).thenReturn(mockRootNode);\n        when(mockSession.nodeExists(anyString())).thenReturn(false);\n\n        final Node closestExistingAncestor = getClosestExistingAncestor(mockSession, \"/some/path\");\n        assertEquals(mockRootNode, closestExistingAncestor);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "bCommit": "3aa9e1ff53",
    "aCommit": "538d455f90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockSession.getRootNode()).thenReturn(mockRootNode);",
          "type": "DELETE",
          "lineNo": 340
        },
        {
          "line": "when(mockRootNode.hasNode(anyString())).thenReturn(false);",
          "type": "DELETE",
          "lineNo": 341
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSession.getNode(\"/\")).thenReturn(mockRootNode);",
          "type": "ADD",
          "lineNo": 340
        },
        {
          "line": "when(mockSession.nodeExists(anyString())).thenReturn(false);",
          "type": "ADD",
          "lineNo": 341
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRootNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRootNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasNode()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "nodeExists()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "nodeExists()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "getNode",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "hasNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "nodeExists",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        344
      ]
    },
    "aCommitTime": 1415476843,
    "ID": "fcrepo/fcrepo:206",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.FedoraTypesUtilsTest.testGetClosestExistingAncestorNode()",
    "bSource": {
      "startLine": 357,
      "code": "@Test\n    public void testGetClosestExistingAncestorNode() throws RepositoryException {\n        when(mockSession.getRootNode()).thenReturn(mockRootNode);\n        when(mockRootNode.hasNode(\"some\")).thenReturn(true);\n        when(mockRootNode.getNode(\"some\")).thenReturn(mockContainer);\n        when(mockContainer.hasNode(\"path\")).thenReturn(true);\n        when(mockContainer.getNode(\"path\")).thenReturn(mockNode);\n\n        final Node closestExistingAncestor = getClosestExistingAncestor(mockSession, \"/some/path\");\n        assertEquals(mockNode, closestExistingAncestor);\n    }"
    },
    "aSource": {
      "startLine": 357,
      "code": "@Test\n    public void testGetClosestExistingAncestorNode() throws RepositoryException {\n        when(mockSession.getNode(\"/\")).thenReturn(mockRootNode);\n        when(mockSession.nodeExists(\"/some\")).thenReturn(true);\n        when(mockSession.getNode(\"/some\")).thenReturn(mockContainer);\n        when(mockSession.nodeExists(\"/some/path\")).thenReturn(true);\n        when(mockSession.getNode(\"/some/path\")).thenReturn(mockNode);\n\n        final Node closestExistingAncestor = getClosestExistingAncestor(mockSession, \"/some/path\");\n        assertEquals(mockNode, closestExistingAncestor);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "bCommit": "3aa9e1ff53",
    "aCommit": "538d455f90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockSession.getRootNode()).thenReturn(mockRootNode);",
          "type": "DELETE",
          "lineNo": 359
        },
        {
          "line": "when(mockRootNode.hasNode(\"some\")).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 360
        },
        {
          "line": "when(mockRootNode.getNode(\"some\")).thenReturn(mockContainer);",
          "type": "DELETE",
          "lineNo": 361
        },
        {
          "line": "when(mockContainer.hasNode(\"path\")).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 362
        },
        {
          "line": "when(mockContainer.getNode(\"path\")).thenReturn(mockNode);",
          "type": "DELETE",
          "lineNo": 363
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSession.getNode(\"/\")).thenReturn(mockRootNode);",
          "type": "ADD",
          "lineNo": 359
        },
        {
          "line": "when(mockSession.nodeExists(\"/some\")).thenReturn(true);",
          "type": "ADD",
          "lineNo": 360
        },
        {
          "line": "when(mockSession.getNode(\"/some\")).thenReturn(mockContainer);",
          "type": "ADD",
          "lineNo": 361
        },
        {
          "line": "when(mockSession.nodeExists(\"/some/path\")).thenReturn(true);",
          "type": "ADD",
          "lineNo": 362
        },
        {
          "line": "when(mockSession.getNode(\"/some/path\")).thenReturn(mockNode);",
          "type": "ADD",
          "lineNo": 363
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRootNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRootNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContainer"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContainer"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContainer"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContainer"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "getNode",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "hasNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "nodeExists",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "hasNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "nodeExists",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"some\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"some\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockContainer",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"path\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some/path\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockContainer",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"path\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some/path\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        366
      ]
    },
    "aCommitTime": 1415476843,
    "ID": "fcrepo/fcrepo:207",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.FedoraTypesUtilsTest.testGetClosestExistingAncestorContainer()",
    "bSource": {
      "startLine": 347,
      "code": "@Test\n    public void testGetClosestExistingAncestorContainer() throws RepositoryException {\n        when(mockSession.getRootNode()).thenReturn(mockRootNode);\n        when(mockRootNode.hasNode(\"some\")).thenReturn(true);\n        when(mockRootNode.getNode(\"some\")).thenReturn(mockContainer);\n\n        final Node closestExistingAncestor = getClosestExistingAncestor(mockSession, \"/some/path\");\n        assertEquals(mockContainer, closestExistingAncestor);\n    }"
    },
    "aSource": {
      "startLine": 347,
      "code": "@Test\n    public void testGetClosestExistingAncestorContainer() throws RepositoryException {\n        when(mockSession.getNode(\"/\")).thenReturn(mockRootNode);\n        when(mockSession.nodeExists(\"/some\")).thenReturn(true);\n        when(mockSession.getNode(\"/some\")).thenReturn(mockContainer);\n\n        final Node closestExistingAncestor = getClosestExistingAncestor(mockSession, \"/some/path\");\n        assertEquals(mockContainer, closestExistingAncestor);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "bCommit": "3aa9e1ff53",
    "aCommit": "538d455f90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockSession.getRootNode()).thenReturn(mockRootNode);",
          "type": "DELETE",
          "lineNo": 349
        },
        {
          "line": "when(mockRootNode.hasNode(\"some\")).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 350
        },
        {
          "line": "when(mockRootNode.getNode(\"some\")).thenReturn(mockContainer);",
          "type": "DELETE",
          "lineNo": 351
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSession.getNode(\"/\")).thenReturn(mockRootNode);",
          "type": "ADD",
          "lineNo": 349
        },
        {
          "line": "when(mockSession.nodeExists(\"/some\")).thenReturn(true);",
          "type": "ADD",
          "lineNo": 350
        },
        {
          "line": "when(mockSession.getNode(\"/some\")).thenReturn(mockContainer);",
          "type": "ADD",
          "lineNo": 351
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRootNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRootNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContainer"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockRootNode"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "nodeExists(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContainer"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "getNode",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "hasNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "nodeExists",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"some\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRootNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"some\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/some\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        354
      ]
    },
    "aCommitTime": 1415476843,
    "ID": "fcrepo/fcrepo:208",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.FedoraTransformIT.testLdpathWithProgramBody()",
    "bSource": {
      "startLine": 79,
      "code": "@Test\n    public void testLdpathWithProgramBody() throws Exception {\n\n        final String pid = UUID.randomUUID().toString();\n        createObject(pid);\n\n        final HttpPost postLdpathProgramRequest = new HttpPost(serverAddress + \"/\" + pid + \"/fcr:transform\");\n        final BasicHttpEntity e = new BasicHttpEntity();\n\n        final String s = \"id = . :: xsd:string ;\\n\";\n\n        e.setContent(new ByteArrayInputStream(s.getBytes()));\n\n        postLdpathProgramRequest.setEntity(e);\n        postLdpathProgramRequest.setHeader(\"Content-Type\", APPLICATION_RDF_LDPATH);\n        final HttpResponse response = client.execute(postLdpathProgramRequest);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        final String content = EntityUtils.toString(response.getEntity());\n        logger.debug(\"Retrieved LDPath result:\\n\" + content);\n\n        final JsonNode rootNode = new ObjectMapper().readTree(new JsonFactory().createParser(content));\n\n        assertEquals(\"Failed to retrieve correct identifier in JSON!\", serverAddress + \"/\" + pid, rootNode\n                .get(\"id\").elements().next().asText());\n\n    }"
    },
    "aSource": {
      "startLine": 79,
      "code": "@Test\n    public void testLdpathWithProgramBody() throws Exception {\n\n        final String pid = UUID.randomUUID().toString();\n        createObject(pid);\n\n        final HttpPost postLdpathProgramRequest = new HttpPost(serverAddress + \"/\" + pid + \"/fcr:transform\");\n        final BasicHttpEntity e = new BasicHttpEntity();\n\n        final String s = \"id = . :: xsd:string ;\\n\";\n\n        e.setContent(new ByteArrayInputStream(s.getBytes()));\n\n        postLdpathProgramRequest.setEntity(e);\n        postLdpathProgramRequest.setHeader(\"Content-Type\", APPLICATION_RDF_LDPATH);\n        final HttpResponse response = client.execute(postLdpathProgramRequest);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        final String content = EntityUtils.toString(response.getEntity());\n        logger.debug(\"Retrieved LDPath result:\\n\" + content);\n\n        final JsonNode rootNode = new ObjectMapper().readTree(new JsonFactory().createParser(content));\n\n        assertEquals(\"Failed to retrieve correct identifier in JSON!\", serverAddress + \"/\" + pid, rootNode\n                .get(0).get(\"id\").elements().next().asText());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/FedoraTransformIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/FedoraTransformIT.java",
    "bCommit": "671b99143f",
    "aCommit": "001ce23cac",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".get(\"id\").elements().next().asText());",
          "type": "DELETE",
          "lineNo": 102
        }
      ],
      "targetChanges": [
        {
          "line": ".get(0).get(\"id\").elements().next().asText());",
          "type": "ADD",
          "lineNo": 102
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.get(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'id'"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.elements()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Iterator.next()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.asText()"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.get(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.get(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'id'"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.elements()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Iterator.next()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.asText()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "get",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "rootNode",
          "childCount": 0
        },
        "dstNode": {
          "label": "rootNode",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        102
      ]
    },
    "aCommitTime": 1414791715,
    "ID": "fcrepo/fcrepo:0",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.FedoraTransformIT.testLdpathWithConfiguredProgram()",
    "bSource": {
      "startLine": 60,
      "code": "@Test\n    public void testLdpathWithConfiguredProgram() throws RepositoryException, IOException {\n\n        final String pid = UUID.randomUUID().toString();\n        createObject(pid);\n        final HttpGet postLdpathProgramRequest\n                = new HttpGet(serverAddress + \"/\" + pid + \"/fcr:transform/default\");\n        final HttpResponse response = client.execute(postLdpathProgramRequest);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        final String content = EntityUtils.toString(response.getEntity());\n        logger.debug(\"Retrieved ldpath feed:\\n\" + content);\n\n        final JsonNode rootNode = new ObjectMapper().readTree(new JsonFactory().createParser(content));\n\n        assertEquals(\"Failed to retrieve correct identifier in JSON!\", serverAddress + \"/\" + pid,\n                rootNode.get(\"id\").elements().next().asText());\n\n    }"
    },
    "aSource": {
      "startLine": 60,
      "code": "@Test\n    public void testLdpathWithConfiguredProgram() throws RepositoryException, IOException {\n\n        final String pid = UUID.randomUUID().toString();\n        createObject(pid);\n        final HttpGet postLdpathProgramRequest\n                = new HttpGet(serverAddress + \"/\" + pid + \"/fcr:transform/default\");\n        final HttpResponse response = client.execute(postLdpathProgramRequest);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        final String content = EntityUtils.toString(response.getEntity());\n        logger.debug(\"Retrieved ldpath feed:\\n\" + content);\n\n        final JsonNode rootNode = new ObjectMapper().readTree(new JsonFactory().createParser(content));\n\n        assertEquals(\"Failed to retrieve correct identifier in JSON!\", serverAddress + \"/\" + pid,\n                rootNode.get(0).get(\"id\").elements().next().asText());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/FedoraTransformIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/FedoraTransformIT.java",
    "bCommit": "671b99143f",
    "aCommit": "001ce23cac",
    "hunk": {
      "sourceChanges": [
        {
          "line": "rootNode.get(\"id\").elements().next().asText());",
          "type": "DELETE",
          "lineNo": 75
        }
      ],
      "targetChanges": [
        {
          "line": "rootNode.get(0).get(\"id\").elements().next().asText());",
          "type": "ADD",
          "lineNo": 75
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.JsonNode.asText()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Iterator.next()"
        },
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.JsonNode.elements()"
        },
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.JsonNode.get(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.fasterxml.jackson.databind.JsonNode rootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.get(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'id'"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.elements()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Iterator.next()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.asText()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.JsonNode.asText()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Iterator.next()"
        },
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.JsonNode.elements()"
        },
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.JsonNode.get(String)"
        },
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.JsonNode.get(int)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.fasterxml.jackson.databind.JsonNode rootNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.get(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.get(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'id'"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.elements()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Iterator.next()"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.JsonNode.asText()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "get",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "rootNode",
          "childCount": 0
        },
        "dstNode": {
          "label": "rootNode",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        75
      ]
    },
    "aCommitTime": 1414791715,
    "ID": "fcrepo/fcrepo:1",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.transformations.LDPathTransformTest.testProgramQuery()",
    "bSource": {
      "startLine": 133,
      "code": "@Test\n    public void testProgramQuery() {\n\n        final RdfStream rdfStream = new RdfStream();\n        rdfStream.concat(new Triple(createResource(\"abc\").asNode(),\n                createProperty(\"http://purl.org/dc/elements/1.1/title\").asNode(),\n                createLiteral(\"some-title\")));\n        rdfStream.topic(createResource(\"abc\").asNode());\n        final InputStream testReader = new ByteArrayInputStream(\"title = dc:title :: xsd:string ;\".getBytes());\n\n        testObj = new LDPathTransform(testReader);\n        final Map<String,Collection<Object>> stringCollectionMap = testObj.apply(rdfStream);\n\n        assert(stringCollectionMap != null);\n        assertEquals(1, stringCollectionMap.size());\n        assertEquals(1, stringCollectionMap.get(\"title\").size());\n        assertTrue(stringCollectionMap.get(\"title\").contains(\"some-title\"));\n    }"
    },
    "aSource": {
      "startLine": 134,
      "code": "@Test\n    public void testProgramQuery() {\n\n        final RdfStream rdfStream = new RdfStream();\n        rdfStream.concat(new Triple(createResource(\"abc\").asNode(),\n                createProperty(\"http://purl.org/dc/elements/1.1/title\").asNode(),\n                createLiteral(\"some-title\")));\n        rdfStream.topic(createResource(\"abc\").asNode());\n        final InputStream testReader = new ByteArrayInputStream(\"title = dc:title :: xsd:string ;\".getBytes());\n\n        testObj = new LDPathTransform(testReader);\n        final List<Map<String,Collection<Object>>> stringCollectionMapList = testObj.apply(rdfStream);\n        final Map<String,Collection<Object>> stringCollectionMap = stringCollectionMapList.get(0);\n\n        assert(stringCollectionMap != null);\n        assertEquals(1, stringCollectionMap.size());\n        assertEquals(1, stringCollectionMap.get(\"title\").size());\n        assertTrue(stringCollectionMap.get(\"title\").contains(\"some-title\"));\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/transformations/LDPathTransformTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/transformations/LDPathTransformTest.java",
    "bCommit": "671b99143f",
    "aCommit": "001ce23cac",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Map<String,Collection<Object>> stringCollectionMap = testObj.apply(rdfStream);",
          "type": "DELETE",
          "lineNo": 144
        }
      ],
      "targetChanges": [
        {
          "line": "final List<Map<String,Collection<Object>>> stringCollectionMapList = testObj.apply(rdfStream);",
          "type": "ADD",
          "lineNo": 145
        },
        {
          "line": "final Map<String,Collection<Object>> stringCollectionMap = stringCollectionMapList.get(0);",
          "type": "ADD",
          "lineNo": 146
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.Map stringCollectionMap"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Object"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.transformations.LDPathTransform.apply(RdfStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.transformations.LDPathTransform testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.transformations.LDPathTransform.apply(RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream rdfStream"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List stringCollectionMapList"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Object"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.transformations.LDPathTransform.apply(RdfStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.transformations.LDPathTransform testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.transformations.LDPathTransform.apply(RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream rdfStream"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.util.Map stringCollectionMap"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Object"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.List.get(int)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List stringCollectionMapList"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.List.get(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "stringCollectionMapList",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "get",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "apply",
          "childCount": 2
        },
        "dstNode": {
          "label": "apply",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        145
      ]
    },
    "aCommitTime": 1414791715,
    "ID": "fcrepo/fcrepo:2",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.http.FedoraTransformTest.testEvaluateTransform()",
    "bSource": {
      "startLine": 92,
      "code": "@Test\n    public void testEvaluateTransform() {\n        final RdfStream stream = new RdfStream();\n        when(mockResource.getTriples(any(IdentifierConverter.class), any(Class.class))).thenReturn(stream);\n\n        final InputStream query = new ByteArrayInputStream((\"SELECT ?title WHERE\\n\" +\n                \"{\\n\" +\n                \"  <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\\n\" +\n                \"} \").getBytes());\n\n        when(mockTransformationFactory.getTransform(MediaType.valueOf(contentTypeSPARQLQuery), query)).thenReturn(\n                mockTransform);\n\n        testObj.evaluateTransform(MediaType.valueOf(contentTypeSPARQLQuery), null, query);\n\n        verify(mockTransform).apply(any(RdfStream.class));\n    }"
    },
    "aSource": {
      "startLine": 92,
      "code": "@Test\n    public void testEvaluateTransform() {\n        final RdfStream stream = new RdfStream();\n        when(mockResource.getTriples(any(IdentifierConverter.class), any(Class.class))).thenReturn(stream);\n\n        final InputStream query = new ByteArrayInputStream((\"SELECT ?title WHERE\\n\" +\n                \"{\\n\" +\n                \"  <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\\n\" +\n                \"} \").getBytes());\n\n        when(mockTransformationFactory.getTransform(MediaType.valueOf(contentTypeSPARQLQuery), query)).thenReturn(\n                mockTransform);\n\n        testObj.evaluateTransform(MediaType.valueOf(contentTypeSPARQLQuery), query);\n\n        verify(mockTransform).apply(any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/FedoraTransformTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/FedoraTransformTest.java",
    "bCommit": "e619ab49f2",
    "aCommit": "41738ff286",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.evaluateTransform(MediaType.valueOf(contentTypeSPARQLQuery), null, query);",
          "type": "DELETE",
          "lineNo": 105
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.evaluateTransform(MediaType.valueOf(contentTypeSPARQLQuery), query);",
          "type": "ADD",
          "lineNo": 105
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.http.FedoraTransform.evaluateTransform(MediaType,Prefer,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.http.FedoraTransform testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.http.FedoraTransform.evaluateTransform(MediaType,Prefer,InputStream)"
        },
        {
          "type": "CtInvocation",
          "value": "valueOf()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.MediaType"
        },
        {
          "type": "CtExecutableReference",
          "value": "valueOf()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.http.FedoraTransformTest contentTypeSPARQLQuery"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.InputStream query"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.http.FedoraTransform.evaluateTransform(MediaType,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.http.FedoraTransform testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.http.FedoraTransform.evaluateTransform(MediaType,InputStream)"
        },
        {
          "type": "CtInvocation",
          "value": "valueOf()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.MediaType"
        },
        {
          "type": "CtExecutableReference",
          "value": "valueOf()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.http.FedoraTransformTest contentTypeSPARQLQuery"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.InputStream query"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        105
      ]
    },
    "aCommitTime": 1414773664,
    "ID": "fcrepo/fcrepo:155",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testIsWritableFalseJunk()",
    "bSource": {
      "startLine": 169,
      "code": "@Test\n    public void testIsWritableFalseJunk() {\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(createURI(\"a/b/c\"), HAS_CONTENT.asNode(), createLiteral(\"junk\")));\n        assertFalse(\"Node should not be writable.\", testObj.isWritable(mem, createURI(\"a/b/c\")));\n    }"
    },
    "aSource": {
      "startLine": 169,
      "code": "@Test\n    public void testIsWritableFalseJunk() {\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(createURI(\"a/b/c\"), DESCRIBES.asNode(), createLiteral(\"junk\")));\n        assertFalse(\"Node should not be writable.\", testObj.isWritable(mem, createURI(\"a/b/c\")));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "bc44e2da38",
    "aCommit": "3ad9b11595",
    "hunk": {
      "sourceChanges": [
        {
          "line": "mem.add(new Triple(createURI(\"a/b/c\"), HAS_CONTENT.asNode(), createLiteral(\"junk\")));",
          "type": "DELETE",
          "lineNo": 172
        }
      ],
      "targetChanges": [
        {
          "line": "mem.add(new Triple(createURI(\"a/b/c\"), DESCRIBES.asNode(), createLiteral(\"junk\")));",
          "type": "ADD",
          "lineNo": 172
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_CONTENT"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'junk'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property DESCRIBES"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'junk'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "RdfLexicon$HAS_CONTENT",
          "childCount": 0
        },
        "dstNode": {
          "label": "RdfLexicon$DESCRIBES",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        172
      ]
    },
    "aCommitTime": 1414704495,
    "ID": "fcrepo/fcrepo:136",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testGetChildVersions()",
    "bSource": {
      "startLine": 116,
      "code": "@Test\n    public void testGetChildVersions() {\n        final Graph mem = createDefaultModel().getGraph();\n        final Node version = createURI(\"http://localhost/fcrepo/abc/fcr:version/adcd\");\n        final Node contentVersion = createURI(\"http://localhost/fcrepo/abc/fcr:version/adcd/fcr:content\");\n        final String date = new Date().toString();\n        mem.add(new Triple(version, HAS_VERSION.asNode(), version));\n        mem.add(new Triple(version, HAS_CONTENT.asNode(), contentVersion));\n        mem.add(new Triple(contentVersion, LAST_MODIFIED_DATE.asNode(), createLiteral(date)));\n        assertEquals(\"Content version should be available.\",\n                     contentVersion, testObj.getChildVersions(mem, version).next());\n    }"
    },
    "aSource": {
      "startLine": 116,
      "code": "@Test\n    public void testGetChildVersions() {\n        final Graph mem = createDefaultModel().getGraph();\n        final Node version = createURI(\"http://localhost/fcrepo/abc/fcr:version/adcd\");\n        final Node contentVersion = createURI(\"http://localhost/fcrepo/abc/fcr:version/adcd/fcr:content\");\n        final String date = new Date().toString();\n        mem.add(new Triple(version, HAS_VERSION.asNode(), version));\n        mem.add(new Triple(version, DESCRIBES.asNode(), contentVersion));\n        mem.add(new Triple(contentVersion, LAST_MODIFIED_DATE.asNode(), createLiteral(date)));\n        assertEquals(\"Content version should be available.\",\n                     contentVersion, testObj.getChildVersions(mem, version).next());\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "bc44e2da38",
    "aCommit": "3ad9b11595",
    "hunk": {
      "sourceChanges": [
        {
          "line": "mem.add(new Triple(version, HAS_CONTENT.asNode(), contentVersion));",
          "type": "DELETE",
          "lineNo": 123
        }
      ],
      "targetChanges": [
        {
          "line": "mem.add(new Triple(version, DESCRIBES.asNode(), contentVersion));",
          "type": "ADD",
          "lineNo": 123
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node version"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_CONTENT"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node contentVersion"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node version"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property DESCRIBES"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node contentVersion"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "RdfLexicon$HAS_CONTENT",
          "childCount": 0
        },
        "dstNode": {
          "label": "RdfLexicon$DESCRIBES",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        123
      ]
    },
    "aCommitTime": 1414704495,
    "ID": "fcrepo/fcrepo:137",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.rdf.impl.ContentRdfContextTest.testFedoraBinaryTriples()",
    "bSource": {
      "startLine": 66,
      "code": "@Test\n    public void testFedoraBinaryTriples() throws IOException {\n\n        final Model results =\n                new ContentRdfContext(mockBinary, idTranslator).asModel();\n        assertTrue(\"Didn't find triple showing content has node!\", results\n                .contains(mockContentSubject, IS_CONTENT_OF, mockSubject));\n    }"
    },
    "aSource": {
      "startLine": 66,
      "code": "@Test\n    public void testFedoraBinaryTriples() throws IOException {\n\n        final Model results =\n                new ContentRdfContext(mockBinary, idTranslator).asModel();\n        assertTrue(\"Didn't find triple showing content has node!\", results\n                .contains(mockContentSubject, DESCRIBED_BY, mockSubject));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/impl/ContentRdfContextTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/impl/ContentRdfContextTest.java",
    "bCommit": "bc44e2da38",
    "aCommit": "3ad9b11595",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".contains(mockContentSubject, IS_CONTENT_OF, mockSubject));",
          "type": "DELETE",
          "lineNo": 72
        }
      ],
      "targetChanges": [
        {
          "line": ".contains(mockContentSubject, DESCRIBED_BY, mockSubject));",
          "type": "ADD",
          "lineNo": 72
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property,com.hp.hpl.jena.rdf.model.Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockContentSubject"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property IS_CONTENT_OF"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockSubject"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property,com.hp.hpl.jena.rdf.model.Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockContentSubject"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property DESCRIBED_BY"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockSubject"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.RdfLexicon$IS_CONTENT_OF",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.RdfLexicon$DESCRIBED_BY",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        72
      ]
    },
    "aCommitTime": 1414704495,
    "ID": "fcrepo/fcrepo:138",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.rdf.impl.ContentRdfContextTest.testForLowLevelStorageTriples()",
    "bSource": {
      "startLine": 57,
      "code": "@Test\n    public void testForLowLevelStorageTriples() throws IOException {\n        final Model results =\n            new ContentRdfContext(mockResource, idTranslator).asModel();\n        logRdf(\"Retrieved RDF for testForLowLevelStorageTriples():\", results);\n        assertTrue(\"Didn't find triple showing node has content!\", results\n                .contains(mockSubject, HAS_CONTENT, mockContentSubject));\n    }"
    },
    "aSource": {
      "startLine": 57,
      "code": "@Test\n    public void testForLowLevelStorageTriples() throws IOException {\n        final Model results =\n            new ContentRdfContext(mockResource, idTranslator).asModel();\n        logRdf(\"Retrieved RDF for testForLowLevelStorageTriples():\", results);\n        assertTrue(\"Didn't find triple showing node has content!\", results\n                .contains(mockSubject, DESCRIBES, mockContentSubject));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/impl/ContentRdfContextTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/rdf/impl/ContentRdfContextTest.java",
    "bCommit": "bc44e2da38",
    "aCommit": "3ad9b11595",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".contains(mockSubject, HAS_CONTENT, mockContentSubject));",
          "type": "DELETE",
          "lineNo": 63
        }
      ],
      "targetChanges": [
        {
          "line": ".contains(mockSubject, DESCRIBES, mockContentSubject));",
          "type": "ADD",
          "lineNo": 63
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property,com.hp.hpl.jena.rdf.model.Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockSubject"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_CONTENT"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockContentSubject"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property,com.hp.hpl.jena.rdf.model.Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockSubject"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property DESCRIBES"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockContentSubject"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.RdfLexicon$HAS_CONTENT",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.RdfLexicon$DESCRIBES",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        63
      ]
    },
    "aCommitTime": 1414704495,
    "ID": "fcrepo/fcrepo:139",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testRestrictiveFAD()",
    "bSource": {
      "startLine": 109,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictiveFAD() throws Throwable {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ObjectService os = new ObjectServiceImpl();\n        try {\n            os.findOrCreate(session, \"/myobject\");\n        } catch (final RepositoryRuntimeException e) {\n            throw e.getCause();\n        }\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 109,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictiveFAD() throws Throwable {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ContainerService os = new ContainerServiceImpl();\n        try {\n            os.findOrCreate(session, \"/myobject\");\n        } catch (final RepositoryRuntimeException e) {\n            throw e.getCause();\n        }\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ObjectService os = new ObjectServiceImpl();",
          "type": "DELETE",
          "lineNo": 125
        }
      ],
      "targetChanges": [
        {
          "line": "final ContainerService os = new ContainerServiceImpl();",
          "type": "ADD",
          "lineNo": 125
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.services.ObjectServiceImpl.ObjectServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.services.ObjectServiceImpl"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ContainerService os"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ContainerService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.services.ContainerServiceImpl.ContainerServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.services.ContainerServiceImpl"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.services.ObjectService",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.services.ContainerService",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.services.ObjectServiceImpl()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.impl.services.ContainerServiceImpl()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        125
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:385",
    "trivial": [
      "RENAME_CLASS",
      "MOVE_RENAME_CLASS",
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testPermissiveFAD()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(4)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ContainerService os = new ContainerServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(4)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ObjectService os = new ObjectServiceImpl();",
          "type": "DELETE",
          "lineNo": 104
        }
      ],
      "targetChanges": [
        {
          "line": "final ContainerService os = new ContainerServiceImpl();",
          "type": "ADD",
          "lineNo": 104
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.services.ObjectServiceImpl.ObjectServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.services.ObjectServiceImpl"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ContainerService os"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ContainerService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.services.ContainerServiceImpl.ContainerServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.services.ContainerServiceImpl"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.services.ObjectService",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.services.ContainerService",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.services.ObjectServiceImpl()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.impl.services.ContainerServiceImpl()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        104
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:386",
    "trivial": [
      "RENAME_CLASS",
      "MOVE_RENAME_CLASS",
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.observer.SimpleObserverIT.TestEventBusPublishing()",
    "bSource": {
      "startLine": 52,
      "code": "@Test\n    public void TestEventBusPublishing() throws RepositoryException {\n\n        final Session se = repository.login();\n        se.getRootNode().addNode(\"/object1\").addMixin(FEDORA_OBJECT);\n        se.getRootNode().addNode(\"/object2\").addMixin(FEDORA_OBJECT);\n        se.save();\n        se.logout();\n\n        try {\n            Thread.sleep(500);\n        } catch (final InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Should be two messages, for each time\n        // each node becomes a Fedora object\n\n        assertEquals(\"Where are my messages!?\", (Integer) 2,\n                eventBusMessageCount);\n\n    }"
    },
    "aSource": {
      "startLine": 52,
      "code": "@Test\n    public void TestEventBusPublishing() throws RepositoryException {\n\n        final Session se = repository.login();\n        se.getRootNode().addNode(\"/object1\").addMixin(FEDORA_CONTAINER);\n        se.getRootNode().addNode(\"/object2\").addMixin(FEDORA_CONTAINER);\n        se.save();\n        se.logout();\n\n        try {\n            Thread.sleep(500);\n        } catch (final InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Should be two messages, for each time\n        // each node becomes a Fedora object\n\n        assertEquals(\"Where are my messages!?\", (Integer) 2,\n                eventBusMessageCount);\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/observer/SimpleObserverIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/observer/SimpleObserverIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "se.getRootNode().addNode(\"/object1\").addMixin(FEDORA_OBJECT);",
          "type": "DELETE",
          "lineNo": 56
        },
        {
          "line": "se.getRootNode().addNode(\"/object2\").addMixin(FEDORA_OBJECT);",
          "type": "DELETE",
          "lineNo": 57
        }
      ],
      "targetChanges": [
        {
          "line": "se.getRootNode().addNode(\"/object1\").addMixin(FEDORA_CONTAINER);",
          "type": "ADD",
          "lineNo": 56
        },
        {
          "line": "se.getRootNode().addNode(\"/object2\").addMixin(FEDORA_CONTAINER);",
          "type": "ADD",
          "lineNo": 57
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "addNode(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getRootNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session se"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRootNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "addNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/object1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_OBJECT"
        },
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "addNode(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getRootNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session se"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRootNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "addNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/object2'"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_OBJECT"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "addNode(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getRootNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session se"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRootNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "addNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/object1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_CONTAINER"
        },
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "addNode(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getRootNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session se"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRootNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "addNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/object2'"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_CONTAINER"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FedoraJcrTypes$FEDORA_OBJECT",
          "childCount": 0
        },
        "dstNode": {
          "label": "FedoraJcrTypes$FEDORA_CONTAINER",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FedoraJcrTypes$FEDORA_OBJECT",
          "childCount": 0
        },
        "dstNode": {
          "label": "FedoraJcrTypes$FEDORA_CONTAINER",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        56,
        57
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:387",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.jms.observer.HeadersJMSIT.testRemoval()",
    "bSource": {
      "startLine": 131,
      "code": "@Test\n    public void testRemoval() throws RepositoryException, InterruptedException,\n                             JMSException {\n\n        final String pid = \"/testRemoval\";\n        final String expectedEventType =\n            REPOSITORY_NAMESPACE + EventType.valueOf(NODE_REMOVED).toString();\n        LOGGER.debug(\"Expecting a {} event\", expectedEventType);\n        Boolean success = false;\n\n        final Session session = repository.login();\n        try {\n            final Node node = jcrTools.findOrCreateNode(session, pid);\n            node.addMixin(FEDORA_OBJECT);\n            session.save();\n            node.remove();\n            session.save();\n\n            final Long start = currentTimeMillis();\n            synchronized (this) {\n                while ((currentTimeMillis() - start < TIMEOUT) && (!success)) {\n                    for (final Message message : messages) {\n                        if (getIdentifier(message).equals(pid)) {\n                            if (getEventTypes(message).contains(expectedEventType)) {\n                                success = true;\n                            }\n                        }\n                    }\n                    LOGGER.debug(\"Waiting for next message...\");\n                    wait(1000);\n                }\n            }\n        } finally {\n            session.logout();\n        }\n        assertTrue(\n                \"Found no message with correct identifer and correct event type!\",\n                success);\n    }"
    },
    "aSource": {
      "startLine": 131,
      "code": "@Test\n    public void testRemoval() throws RepositoryException, InterruptedException,\n                             JMSException {\n\n        final String pid = \"/testRemoval\";\n        final String expectedEventType =\n            REPOSITORY_NAMESPACE + EventType.valueOf(NODE_REMOVED).toString();\n        LOGGER.debug(\"Expecting a {} event\", expectedEventType);\n        Boolean success = false;\n\n        final Session session = repository.login();\n        try {\n            final Node node = jcrTools.findOrCreateNode(session, pid);\n            node.addMixin(FEDORA_CONTAINER);\n            session.save();\n            node.remove();\n            session.save();\n\n            final Long start = currentTimeMillis();\n            synchronized (this) {\n                while ((currentTimeMillis() - start < TIMEOUT) && (!success)) {\n                    for (final Message message : messages) {\n                        if (getIdentifier(message).equals(pid)) {\n                            if (getEventTypes(message).contains(expectedEventType)) {\n                                success = true;\n                            }\n                        }\n                    }\n                    LOGGER.debug(\"Waiting for next message...\");\n                    wait(1000);\n                }\n            }\n        } finally {\n            session.logout();\n        }\n        assertTrue(\n                \"Found no message with correct identifer and correct event type!\",\n                success);\n    }"
    },
    "bPath": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/HeadersJMSIT.java",
    "aPath": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/HeadersJMSIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "node.addMixin(FEDORA_OBJECT);",
          "type": "DELETE",
          "lineNo": 144
        }
      ],
      "targetChanges": [
        {
          "line": "node.addMixin(FEDORA_CONTAINER);",
          "type": "ADD",
          "lineNo": 144
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Node node"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_OBJECT"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Node node"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_CONTAINER"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Try",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FedoraJcrTypes$FEDORA_OBJECT",
          "childCount": 0
        },
        "dstNode": {
          "label": "FedoraJcrTypes$FEDORA_CONTAINER",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        144
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:388",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.jms.observer.HeadersJMSIT.testIngestion()",
    "bSource": {
      "startLine": 93,
      "code": "@Test\n    public void testIngestion() throws RepositoryException,\n                               InterruptedException, JMSException {\n\n        final String pid = \"/testIngestion\";\n        final String expectedEventType =\n            REPOSITORY_NAMESPACE + EventType.valueOf(NODE_ADDED).toString();\n        LOGGER.debug(\"Expecting a {} event\", expectedEventType);\n        Boolean success = false;\n\n        final Session session = repository.login();\n        try {\n            final Node node = jcrTools.findOrCreateNode(session, pid);\n            node.addMixin(FEDORA_OBJECT);\n            session.save();\n\n            final Long start = currentTimeMillis();\n            synchronized (this) {\n                while ((currentTimeMillis() - start < TIMEOUT) && (!success)) {\n                    for (final Message message : messages) {\n                        if (getIdentifier(message).equals(pid)) {\n                            if (getEventTypes(message).contains(expectedEventType)) {\n                                success = true;\n                            }\n                        }\n                    }\n                    LOGGER.debug(\"Waiting for next message...\");\n                    wait(1000);\n                }\n            }\n        } finally {\n            session.logout();\n        }\n        assertTrue(\n                \"Found no message with correct identifer and correct event type!\",\n                success);\n    }"
    },
    "aSource": {
      "startLine": 93,
      "code": "@Test\n    public void testIngestion() throws RepositoryException,\n                               InterruptedException, JMSException {\n\n        final String pid = \"/testIngestion\";\n        final String expectedEventType =\n            REPOSITORY_NAMESPACE + EventType.valueOf(NODE_ADDED).toString();\n        LOGGER.debug(\"Expecting a {} event\", expectedEventType);\n        Boolean success = false;\n\n        final Session session = repository.login();\n        try {\n            final Node node = jcrTools.findOrCreateNode(session, pid);\n            node.addMixin(FEDORA_CONTAINER);\n            session.save();\n\n            final Long start = currentTimeMillis();\n            synchronized (this) {\n                while ((currentTimeMillis() - start < TIMEOUT) && (!success)) {\n                    for (final Message message : messages) {\n                        if (getIdentifier(message).equals(pid)) {\n                            if (getEventTypes(message).contains(expectedEventType)) {\n                                success = true;\n                            }\n                        }\n                    }\n                    LOGGER.debug(\"Waiting for next message...\");\n                    wait(1000);\n                }\n            }\n        } finally {\n            session.logout();\n        }\n        assertTrue(\n                \"Found no message with correct identifer and correct event type!\",\n                success);\n    }"
    },
    "bPath": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/HeadersJMSIT.java",
    "aPath": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/HeadersJMSIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "node.addMixin(FEDORA_OBJECT);",
          "type": "DELETE",
          "lineNo": 106
        }
      ],
      "targetChanges": [
        {
          "line": "node.addMixin(FEDORA_CONTAINER);",
          "type": "ADD",
          "lineNo": 106
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Node node"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_OBJECT"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Node node"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_CONTAINER"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Try",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FedoraJcrTypes$FEDORA_OBJECT",
          "childCount": 0
        },
        "dstNode": {
          "label": "FedoraJcrTypes$FEDORA_CONTAINER",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        106
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:389",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testDistinctFilterReturningJcrSubject()",
    "bSource": {
      "startLine": 106,
      "code": "@Test\n    public void testDistinctFilterReturningJcrSubject() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT DISTINCT ?subject WHERE { \" +\n                \"?subject dc:title \\\"xyz\\\"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \" +\n                        \"[fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title] = 'xyz'\",\n                testObj.getStatement());\n    }"
    },
    "aSource": {
      "startLine": 107,
      "code": "@Test\n    public void testDistinctFilterReturningJcrSubject() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT DISTINCT ?subject WHERE { \" +\n                \"?subject dc:title \\\"xyz\\\"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \" +\n                        \"[fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title] = 'xyz'\",\n                testObj.getStatement());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 112
        }
      ],
      "targetChanges": [
        {
          "line": "\"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 113
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        112
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:390",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testContainsFilter()",
    "bSource": {
      "startLine": 210,
      "code": "@Test\n    public void testContainsFilter() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"SELECT  ?title \\n\" +\n                \"WHERE   { ?x dc:title ?title\\n\" +\n                \"    FILTER contains(?title, \\\"SPARQL\\\")\\n\" +\n                \"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \" +\n                             \"[fedoraResource_x] WHERE ([fedoraResource_x].[dc:title] IS NOT NULL AND \" +\n                             \"[fedoraResource_x].[dc:title] LIKE '%SPARQL%')\",\n                     testObj.getStatement());\n\n    }"
    },
    "aSource": {
      "startLine": 211,
      "code": "@Test\n    public void testContainsFilter() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"SELECT  ?title \\n\" +\n                \"WHERE   { ?x dc:title ?title\\n\" +\n                \"    FILTER contains(?title, \\\"SPARQL\\\")\\n\" +\n                \"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \" +\n                             \"[fedoraResource_x] WHERE ([fedoraResource_x].[dc:title] IS NOT NULL AND \" +\n                             \"[fedoraResource_x].[dc:title] LIKE '%SPARQL%')\",\n                     testObj.getStatement());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 218
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 219
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        219
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:391",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testSimplePropertyRdfTypeFilter()",
    "bSource": {
      "startLine": 93,
      "code": "@Test\n    public void testSimplePropertyRdfTypeFilter() throws RepositoryException {\n\n        final String sparql = \"SELECT ?subject WHERE { ?subject a <http://some/other/uri>}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \" +\n                        \"[fedoraResource_subject] WHERE [fedoraResource_subject].[rdf:type] = CAST\" +\n                        \"('http://some/other/uri' AS URI)\",\n                testObj.getStatement());\n\n    }"
    },
    "aSource": {
      "startLine": 94,
      "code": "@Test\n    public void testSimplePropertyRdfTypeFilter() throws RepositoryException {\n\n        final String sparql = \"SELECT ?subject WHERE { ?subject a <http://some/other/uri>}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \" +\n                        \"[fedoraResource_subject] WHERE [fedoraResource_subject].[rdf:type] = CAST\" +\n                        \"('http://some/other/uri' AS URI)\",\n                testObj.getStatement());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 99
        }
      ],
      "targetChanges": [
        {
          "line": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 100
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        99
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:392",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testConstantSubjectQuery()",
    "bSource": {
      "startLine": 301,
      "code": "@Test\n    public void testConstantSubjectQuery() throws RepositoryException {\n        final String path = \"/foo\";\n        final String selector = \"fedoraResource_\" + path.replace(\"/\", \"_\");\n        final String baseUri = subjects.toDomain(\"/\").getURI();\n        final String subjectUri = (baseUri.endsWith(\"/\") ? baseUri.substring(0, baseUri.length() - 1) : baseUri) + path;\n        final String sparql = \"PREFIX fcrepo: <http://fedora.info/definitions/v4/repository#> \"\n                + \"select ?date where { <\" + subjectUri + \"> fcrepo:created ?date }\";\n        final String expectedQuery =\n                \"SELECT [\" + selector + \"].[jcr:created] AS date \" +\n                        \"FROM [fedora:resource] AS [\" + selector + \"] \" +\n                        \"WHERE ([\" + selector + \"].[jcr:path] = '\" + path + \"' AND \" +\n                        \"[\" + selector + \"].[jcr:created] IS NOT NULL)\";\n        final JQLConverter testObj  = new JQLConverter(session, subjects, sparql);\n\n        assertEquals(expectedQuery, testObj.getStatement());\n    }"
    },
    "aSource": {
      "startLine": 302,
      "code": "@Test\n    public void testConstantSubjectQuery() throws RepositoryException {\n        final String path = \"/foo\";\n        final String selector = \"fedoraResource_\" + path.replace(\"/\", \"_\");\n        final String baseUri = subjects.toDomain(\"/\").getURI();\n        final String subjectUri = (baseUri.endsWith(\"/\") ? baseUri.substring(0, baseUri.length() - 1) : baseUri) + path;\n        final String sparql = \"PREFIX fcrepo: <http://fedora.info/definitions/v4/repository#> \"\n                + \"select ?date where { <\" + subjectUri + \"> fcrepo:created ?date }\";\n        final String expectedQuery =\n                \"SELECT [\" + selector + \"].[jcr:created] AS date \" +\n                        \"FROM [fedora:Resource] AS [\" + selector + \"] \" +\n                        \"WHERE ([\" + selector + \"].[jcr:path] = '\" + path + \"' AND \" +\n                        \"[\" + selector + \"].[jcr:created] IS NOT NULL)\";\n        final JQLConverter testObj  = new JQLConverter(session, subjects, sparql);\n\n        assertEquals(expectedQuery, testObj.getStatement());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"FROM [fedora:resource] AS [\" + selector + \"] \" +",
          "type": "DELETE",
          "lineNo": 311
        }
      ],
      "targetChanges": [
        {
          "line": "\"FROM [fedora:Resource] AS [\" + selector + \"] \" +",
          "type": "ADD",
          "lineNo": 312
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'FROM [fedora:resource] AS ['"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String selector"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '] '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'FROM [fedora:Resource] AS ['"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String selector"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '] '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"FROM [fedora:resource] AS [\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"FROM [fedora:Resource] AS [\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        317
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:393",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testConstantSubjectReferenceQuery()",
    "bSource": {
      "startLine": 338,
      "code": "@Test\n    public void testConstantSubjectReferenceQuery() throws RepositoryException {\n        final String path = \"/foo\";\n        final String selector = \"fedoraResource_\" + path.replace(\"/\", \"_\");\n        final String baseUri = subjects.toDomain(\"/\").getURI();\n        final String subjectUri = (baseUri.endsWith(\"/\") ? baseUri.substring(0, baseUri.length() - 1) : baseUri) + path;\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\" +\n                \"PREFIX fedorarelsext: <http://fedora.info/definitions/v4/rels-ext#>\" +\n                \"SELECT ?title WHERE { <\" + subjectUri + \"> fedorarelsext:hasPart ?part . \" +\n                \"?part dc:title ?title }\";\n        final String expectedQuery =\n                \"SELECT [fedoraResource_part].[dc:title] AS title FROM [fedora:resource] AS \" +\n                        \"[\" + selector + \"] LEFT OUTER JOIN [fedora:resource] AS [fedoraResource_part] ON \" +\n                        \"[\" + selector + \"].[fedorarelsext:hasPart_ref] = [fedoraResource_part].[jcr:uuid] \" +\n                        \"WHERE (([\" + selector + \"].[jcr:path] = '\" + path + \"' AND \" +\n                        \"[\" + selector + \"].[fedorarelsext:hasPart_ref] IS NOT NULL) AND \" +\n                        \"[fedoraResource_part].[dc:title] IS NOT NULL)\";\n        final JQLConverter testObj  = new JQLConverter(session, subjects, sparql);\n        assertEquals(expectedQuery, testObj.getStatement());\n    }"
    },
    "aSource": {
      "startLine": 339,
      "code": "@Test\n    public void testConstantSubjectReferenceQuery() throws RepositoryException {\n        final String path = \"/foo\";\n        final String selector = \"fedoraResource_\" + path.replace(\"/\", \"_\");\n        final String baseUri = subjects.toDomain(\"/\").getURI();\n        final String subjectUri = (baseUri.endsWith(\"/\") ? baseUri.substring(0, baseUri.length() - 1) : baseUri) + path;\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\" +\n                \"PREFIX fedorarelsext: <http://fedora.info/definitions/v4/rels-ext#>\" +\n                \"SELECT ?title WHERE { <\" + subjectUri + \"> fedorarelsext:hasPart ?part . \" +\n                \"?part dc:title ?title }\";\n        final String expectedQuery =\n                \"SELECT [fedoraResource_part].[dc:title] AS title FROM [fedora:Resource] AS \" +\n                        \"[\" + selector + \"] LEFT OUTER JOIN [fedora:Resource] AS [fedoraResource_part] ON \" +\n                        \"[\" + selector + \"].[fedorarelsext:hasPart_ref] = [fedoraResource_part].[jcr:uuid] \" +\n                        \"WHERE (([\" + selector + \"].[jcr:path] = '\" + path + \"' AND \" +\n                        \"[\" + selector + \"].[fedorarelsext:hasPart_ref] IS NOT NULL) AND \" +\n                        \"[fedoraResource_part].[dc:title] IS NOT NULL)\";\n        final JQLConverter testObj  = new JQLConverter(session, subjects, sparql);\n        assertEquals(expectedQuery, testObj.getStatement());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"SELECT [fedoraResource_part].[dc:title] AS title FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 349
        },
        {
          "line": "\"[\" + selector + \"] LEFT OUTER JOIN [fedora:resource] AS [fedoraResource_part] ON \" +",
          "type": "DELETE",
          "lineNo": 350
        }
      ],
      "targetChanges": [
        {
          "line": "\"SELECT [fedoraResource_part].[dc:title] AS title FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 350
        },
        {
          "line": "\"[\" + selector + \"] LEFT OUTER JOIN [fedora:Resource] AS [fedoraResource_part] ON \" +",
          "type": "ADD",
          "lineNo": 351
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_part].[dc:title] AS title FROM [fedora:resource] AS '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '['"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String selector"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '] LEFT OUTER JOIN [fedora:resource] AS [fedoraResource_part] ON '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_part].[dc:title] AS title FROM [fedora:Resource] AS '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '['"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String selector"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '] LEFT OUTER JOIN [fedora:Resource] AS [fedoraResource_part] ON '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"] LEFT OUTER JOIN [fedora:resource] AS [fedoraResource_part] ON \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"] LEFT OUTER JOIN [fedora:Resource] AS [fedoraResource_part] ON \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT [fedoraResource_part].[dc:title] AS title FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT [fedoraResource_part].[dc:title] AS title FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        357
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:394",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testSimpleFilterReturningJcrSubject()",
    "bSource": {
      "startLine": 67,
      "code": "@Test\n    public void testSimpleFilterReturningJcrSubject() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT ?subject WHERE { ?subject \" +\n                \"dc:title \\\"xyz\\\"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \" +\n                        \"[fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title] = 'xyz'\",\n                testObj.getStatement());\n\n    }"
    },
    "aSource": {
      "startLine": 67,
      "code": "@Test\n    public void testSimpleFilterReturningJcrSubject() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT ?subject WHERE { ?subject \" +\n                \"dc:title \\\"xyz\\\"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \" +\n                        \"[fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title] = 'xyz'\",\n                testObj.getStatement());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 73
        }
      ],
      "targetChanges": [
        {
          "line": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 73
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        72
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:395",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testDateConstraintsQuery()",
    "bSource": {
      "startLine": 359,
      "code": "@Test\n    public void testDateConstraintsQuery() throws RepositoryException {\n        final String sparql = \"PREFIX  xsd: <http://www.w3.org/2001/XMLSchema#> SELECT ?s ?o WHERE {?s <\" +\n                RdfLexicon.LAST_MODIFIED_DATE + \"> ?o . FILTER (?o <= \\\"2013-01-01T00:30Z\\\"^^xsd:dateTime)}\";\n        final JQLConverter converter = new JQLConverter(session, subjects, sparql);\n        final String expected = \"SELECT [fedoraResource_s].[jcr:path] AS s, [fedoraResource_s].[jcr:lastModified] \" +\n                \"AS o FROM [fedora:resource] AS [fedoraResource_s] WHERE ([fedoraResource_s].[jcr:lastModified] IS \" +\n                \"NOT NULL AND [fedoraResource_s].[jcr:lastModified] <= '2013-01-01T00:30Z')\";\n        assertEquals(expected, converter.getStatement());\n    }"
    },
    "aSource": {
      "startLine": 360,
      "code": "@Test\n    public void testDateConstraintsQuery() throws RepositoryException {\n        final String sparql = \"PREFIX  xsd: <http://www.w3.org/2001/XMLSchema#> SELECT ?s ?o WHERE {?s <\" +\n                RdfLexicon.LAST_MODIFIED_DATE + \"> ?o . FILTER (?o <= \\\"2013-01-01T00:30Z\\\"^^xsd:dateTime)}\";\n        final JQLConverter converter = new JQLConverter(session, subjects, sparql);\n        final String expected = \"SELECT [fedoraResource_s].[jcr:path] AS s, [fedoraResource_s].[jcr:lastModified] \" +\n                \"AS o FROM [fedora:Resource] AS [fedoraResource_s] WHERE ([fedoraResource_s].[jcr:lastModified] IS \" +\n                \"NOT NULL AND [fedoraResource_s].[jcr:lastModified] <= '2013-01-01T00:30Z')\";\n        assertEquals(expected, converter.getStatement());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"AS o FROM [fedora:resource] AS [fedoraResource_s] WHERE ([fedoraResource_s].[jcr:lastModified] IS \" +",
          "type": "DELETE",
          "lineNo": 365
        }
      ],
      "targetChanges": [
        {
          "line": "\"AS o FROM [fedora:Resource] AS [fedoraResource_s] WHERE ([fedoraResource_s].[jcr:lastModified] IS \" +",
          "type": "ADD",
          "lineNo": 366
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'AS o FROM [fedora:resource] AS [fedoraResource_s] WHERE ([fedoraResource_s].[jcr:lastModified] IS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'AS o FROM [fedora:Resource] AS [fedoraResource_s] WHERE ([fedoraResource_s].[jcr:lastModified] IS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"AS o FROM [fedora:resource] AS [fedoraResource_s] WHERE ([fedoraResource_s].[jcr:lastModified] IS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"AS o FROM [fedora:Resource] AS [fedoraResource_s] WHERE ([fedoraResource_s].[jcr:lastModified] IS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        368
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:396",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testJoinAndSecondOrderReturnValues()",
    "bSource": {
      "startLine": 178,
      "code": "@Test\n    public void testJoinAndSecondOrderReturnValues() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\" +\n                \"PREFIX fedorarelsext: <http://fedora.info/definitions/v4/rels-ext#>\" +\n                \"SELECT ?subject ?relatedTitle WHERE { \" +\n                \"?subject fedorarelsext:hasPart ?part . ?part dc:title ?relatedTitle }\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_subject].[jcr:path] AS subject, [fedoraResource_part].[dc:title] AS \" +\n                             \"relatedTitle FROM [fedora:resource] AS [fedoraResource_subject] LEFT OUTER JOIN \" +\n                             \"[fedora:resource] AS [fedoraResource_part] ON \" +\n                             \"[fedoraResource_subject].[fedorarelsext:hasPart_ref] = \" +\n                             \"[fedoraResource_part].[jcr:uuid] WHERE (\" +\n                             \"[fedoraResource_subject].[fedorarelsext:hasPart_ref] IS NOT NULL AND \" +\n                             \"[fedoraResource_part].[dc:title] IS NOT NULL)\",\n                     testObj.getStatement());\n    }"
    },
    "aSource": {
      "startLine": 179,
      "code": "@Test\n    public void testJoinAndSecondOrderReturnValues() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\" +\n                \"PREFIX fedorarelsext: <http://fedora.info/definitions/v4/rels-ext#>\" +\n                \"SELECT ?subject ?relatedTitle WHERE { \" +\n                \"?subject fedorarelsext:hasPart ?part . ?part dc:title ?relatedTitle }\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_subject].[jcr:path] AS subject, [fedoraResource_part].[dc:title] AS \" +\n                             \"relatedTitle FROM [fedora:Resource] AS [fedoraResource_subject] LEFT OUTER JOIN \" +\n                             \"[fedora:Resource] AS [fedoraResource_part] ON \" +\n                             \"[fedoraResource_subject].[fedorarelsext:hasPart_ref] = \" +\n                             \"[fedoraResource_part].[jcr:uuid] WHERE (\" +\n                             \"[fedoraResource_subject].[fedorarelsext:hasPart_ref] IS NOT NULL AND \" +\n                             \"[fedoraResource_part].[dc:title] IS NOT NULL)\",\n                     testObj.getStatement());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"relatedTitle FROM [fedora:resource] AS [fedoraResource_subject] LEFT OUTER JOIN \" +",
          "type": "DELETE",
          "lineNo": 186
        },
        {
          "line": "\"[fedora:resource] AS [fedoraResource_part] ON \" +",
          "type": "DELETE",
          "lineNo": 187
        }
      ],
      "targetChanges": [
        {
          "line": "\"relatedTitle FROM [fedora:Resource] AS [fedoraResource_subject] LEFT OUTER JOIN \" +",
          "type": "ADD",
          "lineNo": 187
        },
        {
          "line": "\"[fedora:Resource] AS [fedoraResource_part] ON \" +",
          "type": "ADD",
          "lineNo": 188
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'relatedTitle FROM [fedora:resource] AS [fedoraResource_subject] LEFT OUTER JOIN '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedora:resource] AS [fedoraResource_part] ON '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'relatedTitle FROM [fedora:Resource] AS [fedoraResource_subject] LEFT OUTER JOIN '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedora:Resource] AS [fedoraResource_part] ON '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"[fedora:resource] AS [fedoraResource_part] ON \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"[fedora:Resource] AS [fedoraResource_part] ON \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"relatedTitle FROM [fedora:resource] AS [fedoraResource_subject] LEFT OUTER JOIN \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"relatedTitle FROM [fedora:Resource] AS [fedoraResource_subject] LEFT OUTER JOIN \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        186
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:397",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testStrFuncFilter()",
    "bSource": {
      "startLine": 225,
      "code": "@Test\n    public void testStrFuncFilter() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"SELECT ?subject ?title\\n\" +\n                \"WHERE   { ?subject dc:title ?title\\n\" +\n                \"    FILTER (str(?title) = \\\"SPARQL\\\")\\n\" +\n                \"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_subject].[jcr:path] AS subject, \" +\n                \"[fedoraResource_subject].[dc:title] AS title FROM [fedora:resource] AS \" +\n                \"[fedoraResource_subject] WHERE ([fedoraResource_subject].[dc:title] \" +\n                \"IS NOT NULL AND [fedoraResource_subject].[dc:title] = 'SPARQL')\",\n                     testObj.getStatement());\n\n    }"
    },
    "aSource": {
      "startLine": 226,
      "code": "@Test\n    public void testStrFuncFilter() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"SELECT ?subject ?title\\n\" +\n                \"WHERE   { ?subject dc:title ?title\\n\" +\n                \"    FILTER (str(?title) = \\\"SPARQL\\\")\\n\" +\n                \"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_subject].[jcr:path] AS subject, \" +\n                \"[fedoraResource_subject].[dc:title] AS title FROM [fedora:Resource] AS \" +\n                \"[fedoraResource_subject] WHERE ([fedoraResource_subject].[dc:title] \" +\n                \"IS NOT NULL AND [fedoraResource_subject].[dc:title] = 'SPARQL')\",\n                     testObj.getStatement());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"[fedoraResource_subject].[dc:title] AS title FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 234
        }
      ],
      "targetChanges": [
        {
          "line": "\"[fedoraResource_subject].[dc:title] AS title FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 235
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[dc:title] AS title FROM [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[dc:title] AS title FROM [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"[fedoraResource_subject].[dc:title] AS title FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"[fedoraResource_subject].[dc:title] AS title FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        234
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:398",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testSimpleFilterReturningJcrPropertyValue()",
    "bSource": {
      "startLine": 117,
      "code": "@Test\n    public void testSimpleFilterReturningJcrPropertyValue() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT ?title WHERE { ?subject \" +\n                \"dc:title ?title }\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT [fedoraResource_subject].[dc:title] AS title FROM [fedora:resource] AS \" +\n                        \"[fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title] IS NOT NULL\",\n                testObj.getStatement());\n    }"
    },
    "aSource": {
      "startLine": 118,
      "code": "@Test\n    public void testSimpleFilterReturningJcrPropertyValue() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT ?title WHERE { ?subject \" +\n                \"dc:title ?title }\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT [fedoraResource_subject].[dc:title] AS title FROM [fedora:Resource] AS \" +\n                        \"[fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title] IS NOT NULL\",\n                testObj.getStatement());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"SELECT [fedoraResource_subject].[dc:title] AS title FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 123
        }
      ],
      "targetChanges": [
        {
          "line": "\"SELECT [fedoraResource_subject].[dc:title] AS title FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 124
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_subject].[dc:title] AS title FROM [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_subject].[dc:title] AS title FROM [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT [fedoraResource_subject].[dc:title] AS title FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT [fedoraResource_subject].[dc:title] AS title FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        123
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:399",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testSimpleFilterWithLanguageTag()",
    "bSource": {
      "startLine": 150,
      "code": "@Test\n    public void testSimpleFilterWithLanguageTag() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT ?subject WHERE { ?subject \" +\n                \"dc:title \\\"xyz\\\"@it}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \" +\n                        \"[fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title@it] = 'xyz'\",\n                testObj.getStatement());\n\n    }"
    },
    "aSource": {
      "startLine": 151,
      "code": "@Test\n    public void testSimpleFilterWithLanguageTag() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT ?subject WHERE { ?subject \" +\n                \"dc:title \\\"xyz\\\"@it}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \" +\n                        \"[fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title@it] = 'xyz'\",\n                testObj.getStatement());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 156
        }
      ],
      "targetChanges": [
        {
          "line": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 157
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT [fedoraResource_subject].[jcr:path] AS subject FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        156
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:400",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testStrendsFilter()",
    "bSource": {
      "startLine": 256,
      "code": "@Test\n    public void testStrendsFilter() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"SELECT  ?title \\n\" +\n                \"WHERE   { ?x dc:title ?title\\n\" +\n                \"    FILTER strEnds(?title, \\\"SPARQL\\\")\\n\" +\n                \"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \" +\n                             \"[fedoraResource_x] WHERE ([fedoraResource_x].[dc:title] IS NOT NULL AND \" +\n                             \"[fedoraResource_x].[dc:title] LIKE '%SPARQL')\",\n                     testObj.getStatement());\n\n    }"
    },
    "aSource": {
      "startLine": 257,
      "code": "@Test\n    public void testStrendsFilter() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"SELECT  ?title \\n\" +\n                \"WHERE   { ?x dc:title ?title\\n\" +\n                \"    FILTER strEnds(?title, \\\"SPARQL\\\")\\n\" +\n                \"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \" +\n                             \"[fedoraResource_x] WHERE ([fedoraResource_x].[dc:title] IS NOT NULL AND \" +\n                             \"[fedoraResource_x].[dc:title] LIKE '%SPARQL')\",\n                     testObj.getStatement());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 264
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 265
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        265
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:401",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testConstantSubjectSimpleReferenceQuery()",
    "bSource": {
      "startLine": 319,
      "code": "@Test\n    public void testConstantSubjectSimpleReferenceQuery() throws RepositoryException {\n        final String path = \"/foo\";\n        final String selector = \"fedoraResource_\" + path.replace(\"/\", \"_\");\n        final String baseUri = subjects.toDomain(\"/\").getURI();\n        final String subjectUri = (baseUri.endsWith(\"/\") ? baseUri.substring(0, baseUri.length() - 1) : baseUri) + path;\n        final String sparql =\n                \"PREFIX fedorarelsext: <http://fedora.info/definitions/v4/rels-ext#> \" +\n                \"SELECT ?part WHERE { <\" + subjectUri + \"> fedorarelsext:hasPart ?part }\";\n        final String expectedQuery =\n                \"SELECT [\" + selector + \"].[fedorarelsext:hasPart] AS part \" +\n                        \"FROM [fedora:resource] AS [\" + selector + \"] \" +\n                        \"WHERE ([\" + selector + \"].[jcr:path] = '\" + path + \"' AND \" +\n                        \"[\" + selector + \"].[fedorarelsext:hasPart] IS NOT NULL)\";\n        final JQLConverter testObj  = new JQLConverter(session, subjects, sparql);\n        assertEquals(expectedQuery, testObj.getStatement());\n\n    }"
    },
    "aSource": {
      "startLine": 320,
      "code": "@Test\n    public void testConstantSubjectSimpleReferenceQuery() throws RepositoryException {\n        final String path = \"/foo\";\n        final String selector = \"fedoraResource_\" + path.replace(\"/\", \"_\");\n        final String baseUri = subjects.toDomain(\"/\").getURI();\n        final String subjectUri = (baseUri.endsWith(\"/\") ? baseUri.substring(0, baseUri.length() - 1) : baseUri) + path;\n        final String sparql =\n                \"PREFIX fedorarelsext: <http://fedora.info/definitions/v4/rels-ext#> \" +\n                \"SELECT ?part WHERE { <\" + subjectUri + \"> fedorarelsext:hasPart ?part }\";\n        final String expectedQuery =\n                \"SELECT [\" + selector + \"].[fedorarelsext:hasPart] AS part \" +\n                        \"FROM [fedora:Resource] AS [\" + selector + \"] \" +\n                        \"WHERE ([\" + selector + \"].[jcr:path] = '\" + path + \"' AND \" +\n                        \"[\" + selector + \"].[fedorarelsext:hasPart] IS NOT NULL)\";\n        final JQLConverter testObj  = new JQLConverter(session, subjects, sparql);\n        assertEquals(expectedQuery, testObj.getStatement());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"FROM [fedora:resource] AS [\" + selector + \"] \" +",
          "type": "DELETE",
          "lineNo": 330
        }
      ],
      "targetChanges": [
        {
          "line": "\"FROM [fedora:Resource] AS [\" + selector + \"] \" +",
          "type": "ADD",
          "lineNo": 331
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'FROM [fedora:resource] AS ['"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String selector"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '] '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'FROM [fedora:Resource] AS ['"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String selector"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '] '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"FROM [fedora:resource] AS [\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"FROM [fedora:Resource] AS [\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        335
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:402",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testRegexFilter()",
    "bSource": {
      "startLine": 195,
      "code": "@Test\n    public void testRegexFilter() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"SELECT  ?title \\n\" +\n                \"WHERE   { ?x dc:title ?title\\n\" +\n                \"    FILTER regex(?title, \\\"^SPARQL\\\")\\n\" +\n                \"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \" +\n                             \"[fedoraResource_x] WHERE ([fedoraResource_x].[dc:title] IS NOT NULL AND \" +\n                             \"[fedoraResource_x].[dc:title] LIKE '^SPARQL')\",\n                     testObj.getStatement());\n\n    }"
    },
    "aSource": {
      "startLine": 196,
      "code": "@Test\n    public void testRegexFilter() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"SELECT  ?title \\n\" +\n                \"WHERE   { ?x dc:title ?title\\n\" +\n                \"    FILTER regex(?title, \\\"^SPARQL\\\")\\n\" +\n                \"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \" +\n                             \"[fedoraResource_x] WHERE ([fedoraResource_x].[dc:title] IS NOT NULL AND \" +\n                             \"[fedoraResource_x].[dc:title] LIKE '^SPARQL')\",\n                     testObj.getStatement());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 203
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 204
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        204
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:403",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testStrstartsFilter()",
    "bSource": {
      "startLine": 241,
      "code": "@Test\n    public void testStrstartsFilter() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"SELECT  ?title \\n\" +\n                \"WHERE   { ?x dc:title ?title\\n\" +\n                \"    FILTER strStarts(?title, \\\"SPARQL\\\")\\n\" +\n                \"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \" +\n                             \"[fedoraResource_x] WHERE ([fedoraResource_x].[dc:title] IS NOT NULL AND \" +\n                             \"[fedoraResource_x].[dc:title] LIKE 'SPARQL%')\",\n                     testObj.getStatement());\n\n    }"
    },
    "aSource": {
      "startLine": 242,
      "code": "@Test\n    public void testStrstartsFilter() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"SELECT  ?title \\n\" +\n                \"WHERE   { ?x dc:title ?title\\n\" +\n                \"    FILTER strStarts(?title, \\\"SPARQL\\\")\\n\" +\n                \"}\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \" +\n                             \"[fedoraResource_x] WHERE ([fedoraResource_x].[dc:title] IS NOT NULL AND \" +\n                             \"[fedoraResource_x].[dc:title] LIKE 'SPARQL%')\",\n                     testObj.getStatement());\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 249
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 250
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT [fedoraResource_x].[dc:title] AS title FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        250
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:404",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testSecondOrderReturnValues()",
    "bSource": {
      "startLine": 162,
      "code": "@Test\n    public void testSecondOrderReturnValues() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\" +\n                \"PREFIX fedorarelsext: <http://fedora.info/definitions/v4/rels-ext#>\" +\n                \"SELECT ?relatedTitle WHERE { \" +\n                \"?subject fedorarelsext:hasPart ?part . ?part dc:title ?relatedTitle }\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_part].[dc:title] AS relatedTitle FROM [fedora:resource] AS \" +\n                             \"[fedoraResource_subject] LEFT OUTER JOIN [fedora:resource] AS \" +\n                             \"[fedoraResource_part] ON [fedoraResource_subject].[fedorarelsext:hasPart_ref] = \" +\n                             \"[fedoraResource_part].[jcr:uuid] WHERE (\" +\n                             \"[fedoraResource_subject].[fedorarelsext:hasPart_ref] IS NOT NULL AND \" +\n                             \"[fedoraResource_part].[dc:title] IS NOT NULL)\",\n                     testObj.getStatement());\n    }"
    },
    "aSource": {
      "startLine": 163,
      "code": "@Test\n    public void testSecondOrderReturnValues() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/>\" +\n                \"PREFIX fedorarelsext: <http://fedora.info/definitions/v4/rels-ext#>\" +\n                \"SELECT ?relatedTitle WHERE { \" +\n                \"?subject fedorarelsext:hasPart ?part . ?part dc:title ?relatedTitle }\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_part].[dc:title] AS relatedTitle FROM [fedora:Resource] AS \" +\n                             \"[fedoraResource_subject] LEFT OUTER JOIN [fedora:Resource] AS \" +\n                             \"[fedoraResource_part] ON [fedoraResource_subject].[fedorarelsext:hasPart_ref] = \" +\n                             \"[fedoraResource_part].[jcr:uuid] WHERE (\" +\n                             \"[fedoraResource_subject].[fedorarelsext:hasPart_ref] IS NOT NULL AND \" +\n                             \"[fedoraResource_part].[dc:title] IS NOT NULL)\",\n                     testObj.getStatement());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(\"SELECT [fedoraResource_part].[dc:title] AS relatedTitle FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 169
        },
        {
          "line": "\"[fedoraResource_subject] LEFT OUTER JOIN [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 170
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(\"SELECT [fedoraResource_part].[dc:title] AS relatedTitle FROM [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 170
        },
        {
          "line": "\"[fedoraResource_subject] LEFT OUTER JOIN [fedora:Resource] AS \" +",
          "type": "ADD",
          "lineNo": 171
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_part].[dc:title] AS relatedTitle FROM [fedora:resource] AS '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject] LEFT OUTER JOIN [fedora:resource] AS '"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT [fedoraResource_part].[dc:title] AS relatedTitle FROM [fedora:Resource] AS '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject] LEFT OUTER JOIN [fedora:Resource] AS '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"SELECT [fedoraResource_part].[dc:title] AS relatedTitle FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"SELECT [fedoraResource_part].[dc:title] AS relatedTitle FROM [fedora:Resource] AS \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"[fedoraResource_subject] LEFT OUTER JOIN [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"[fedoraResource_subject] LEFT OUTER JOIN [fedora:Resource] AS \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        170
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:405",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testSimpleFilterReturningJcrSubjectAndPropertyValue()",
    "bSource": {
      "startLine": 128,
      "code": "@Test\n    public void testSimpleFilterReturningJcrSubjectAndPropertyValue() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT ?subject ?title WHERE { \" +\n                \"?subject dc:title ?title }\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT [fedoraResource_subject].[jcr:path] AS subject, [fedoraResource_subject].[dc:title] AS title \" +\n                        \"FROM [fedora:resource] AS [fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title]\" +\n                        \" IS NOT NULL\",\n                testObj.getStatement());\n    }"
    },
    "aSource": {
      "startLine": 129,
      "code": "@Test\n    public void testSimpleFilterReturningJcrSubjectAndPropertyValue() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT ?subject ?title WHERE { \" +\n                \"?subject dc:title ?title }\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\n                \"SELECT [fedoraResource_subject].[jcr:path] AS subject, [fedoraResource_subject].[dc:title] AS title \" +\n                        \"FROM [fedora:Resource] AS [fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title]\" +\n                        \" IS NOT NULL\",\n                testObj.getStatement());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"FROM [fedora:resource] AS [fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title]\" +",
          "type": "DELETE",
          "lineNo": 135
        }
      ],
      "targetChanges": [
        {
          "line": "\"FROM [fedora:Resource] AS [fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title]\" +",
          "type": "ADD",
          "lineNo": 136
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'FROM [fedora:resource] AS [fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title]'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'FROM [fedora:Resource] AS [fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title]'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"FROM [fedora:resource] AS [fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title]\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"FROM [fedora:Resource] AS [fedoraResource_subject] WHERE [fedoraResource_subject].[dc:title]\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        134
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:406",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testComplexQuery()",
    "bSource": {
      "startLine": 271,
      "code": "@Test\n    public void testComplexQuery() throws RepositoryException {\n\n        final String sparql = \"PREFIX  ns:  <http://libraries.ucsd.edu/ark:/20775/>\"\n                + \" SELECT DISTINCT ?subject ?object WHERE  {\" +\n                \"?subject ns:bb2765355h 'bf2765355h' . ?subject ns:bb3652744n ?object . FILTER regex(\" +\n                \"?object, \\\"r\\\", \\\"i\\\") .FILTER (?object >= 'abc' && ?object < 'efg' || !(?object = 'efg')) } \" +\n                \" ORDER BY DESC(?subject) ?object LIMIT 10 OFFSET 20\";\n\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n\n        final String statement = testObj.getStatement();\n\n        final String namespacePrefix = session.getNamespacePrefix(\"http://libraries.ucsd.edu/ark:/20775/\");\n\n        final String expectedQuery = \"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject, \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] AS object \" +\n                \"FROM [fedora:resource] AS [fedoraResource_subject] \" +\n                \"WHERE ((([fedoraResource_subject].[ns001:bb2765355h] = 'bf2765355h' AND \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] IS NOT NULL) AND \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] LIKE 'r') AND \" +\n                \"(([fedoraResource_subject].[ns001:bb3652744n] >= 'abc' AND \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] < 'efg') OR NOT \" +\n                \"([fedoraResource_subject].[ns001:bb3652744n] = 'efg'))) \" +\n                \"ORDER BY [fedoraResource_subject].[jcr:path] DESC NULLS FIRST, \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] ASC NULLS LAST LIMIT 10 OFFSET 20\";\n\n        assertEquals(expectedQuery.replaceAll(\"ns001\", namespacePrefix), statement);\n    }"
    },
    "aSource": {
      "startLine": 272,
      "code": "@Test\n    public void testComplexQuery() throws RepositoryException {\n\n        final String sparql = \"PREFIX  ns:  <http://libraries.ucsd.edu/ark:/20775/>\"\n                + \" SELECT DISTINCT ?subject ?object WHERE  {\" +\n                \"?subject ns:bb2765355h 'bf2765355h' . ?subject ns:bb3652744n ?object . FILTER regex(\" +\n                \"?object, \\\"r\\\", \\\"i\\\") .FILTER (?object >= 'abc' && ?object < 'efg' || !(?object = 'efg')) } \" +\n                \" ORDER BY DESC(?subject) ?object LIMIT 10 OFFSET 20\";\n\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n\n        final String statement = testObj.getStatement();\n\n        final String namespacePrefix = session.getNamespacePrefix(\"http://libraries.ucsd.edu/ark:/20775/\");\n\n        final String expectedQuery = \"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject, \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] AS object \" +\n                \"FROM [fedora:Resource] AS [fedoraResource_subject] \" +\n                \"WHERE ((([fedoraResource_subject].[ns001:bb2765355h] = 'bf2765355h' AND \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] IS NOT NULL) AND \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] LIKE 'r') AND \" +\n                \"(([fedoraResource_subject].[ns001:bb3652744n] >= 'abc' AND \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] < 'efg') OR NOT \" +\n                \"([fedoraResource_subject].[ns001:bb3652744n] = 'efg'))) \" +\n                \"ORDER BY [fedoraResource_subject].[jcr:path] DESC NULLS FIRST, \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] ASC NULLS LAST LIMIT 10 OFFSET 20\";\n\n        assertEquals(expectedQuery.replaceAll(\"ns001\", namespacePrefix), statement);\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"FROM [fedora:resource] AS [fedoraResource_subject] \" +",
          "type": "DELETE",
          "lineNo": 288
        }
      ],
      "targetChanges": [
        {
          "line": "\"FROM [fedora:Resource] AS [fedoraResource_subject] \" +",
          "type": "ADD",
          "lineNo": 289
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'FROM [fedora:resource] AS [fedoraResource_subject] '"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'FROM [fedora:Resource] AS [fedoraResource_subject] '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"FROM [fedora:resource] AS [fedoraResource_subject] \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"FROM [fedora:Resource] AS [fedoraResource_subject] \"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        299
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:407",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testSimpleFilterReturningJcrSubjectAndOptionalPropertyValue()",
    "bSource": {
      "startLine": 140,
      "code": "@Test\n    public void testSimpleFilterReturningJcrSubjectAndOptionalPropertyValue() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT ?subject ?title WHERE { \" +\n                \"OPTIONAL { ?subject dc:title ?title } }\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_subject].[jcr:path] AS subject, [fedoraResource_subject].[dc:title] AS \" +\n                             \"title FROM [fedora:resource] AS [fedoraResource_subject]\",\n                     testObj.getStatement());\n    }"
    },
    "aSource": {
      "startLine": 141,
      "code": "@Test\n    public void testSimpleFilterReturningJcrSubjectAndOptionalPropertyValue() throws RepositoryException {\n        final String sparql = \"PREFIX  dc:  <http://purl.org/dc/elements/1.1/> SELECT ?subject ?title WHERE { \" +\n                \"OPTIONAL { ?subject dc:title ?title } }\";\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n        assertEquals(\"SELECT [fedoraResource_subject].[jcr:path] AS subject, [fedoraResource_subject].[dc:title] AS \" +\n                             \"title FROM [fedora:Resource] AS [fedoraResource_subject]\",\n                     testObj.getStatement());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"title FROM [fedora:resource] AS [fedoraResource_subject]\",",
          "type": "DELETE",
          "lineNo": 146
        }
      ],
      "targetChanges": [
        {
          "line": "\"title FROM [fedora:Resource] AS [fedoraResource_subject]\",",
          "type": "ADD",
          "lineNo": 147
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'title FROM [fedora:resource] AS [fedoraResource_subject]'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'title FROM [fedora:Resource] AS [fedoraResource_subject]'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"title FROM [fedora:resource] AS [fedoraResource_subject]\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"title FROM [fedora:Resource] AS [fedoraResource_subject]\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        146
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:408",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.RepositoryServiceImplTest.testGetObjectCount()",
    "bSource": {
      "startLine": 213,
      "code": "@Test\n    public void testGetObjectCount() throws RepositoryException {\n        when(mockRepo.login()).thenReturn(mockSession);\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockWorkspace.getQueryManager()).thenReturn(mockQueryManager);\n        when(\n                mockQueryManager.createQuery(\"SELECT [\" + JCR_PATH +\n                        \"] FROM [\" + FEDORA_OBJECT + \"]\", JCR_SQL2))\n                .thenReturn(mockQuery);\n        when(mockQuery.execute()).thenReturn(mockQueryResult);\n        when(mockQueryResult.getRows()).thenReturn(mockRowIterator);\n        when(mockRowIterator.getSize()).thenReturn(3L);\n\n        final long count = testObj.getRepositoryObjectCount();\n        assertEquals(3L, count);\n        verify(mockSession).logout();\n        verify(mockSession, never()).save();\n    }"
    },
    "aSource": {
      "startLine": 213,
      "code": "@Test\n    public void testGetObjectCount() throws RepositoryException {\n        when(mockRepo.login()).thenReturn(mockSession);\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockWorkspace.getQueryManager()).thenReturn(mockQueryManager);\n        when(\n                mockQueryManager.createQuery(\"SELECT [\" + JCR_PATH +\n                        \"] FROM [\" + FEDORA_CONTAINER + \"]\", JCR_SQL2))\n                .thenReturn(mockQuery);\n        when(mockQuery.execute()).thenReturn(mockQueryResult);\n        when(mockQueryResult.getRows()).thenReturn(mockRowIterator);\n        when(mockRowIterator.getSize()).thenReturn(3L);\n\n        final long count = testObj.getRepositoryObjectCount();\n        assertEquals(3L, count);\n        verify(mockSession).logout();\n        verify(mockSession, never()).save();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/RepositoryServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/RepositoryServiceImplTest.java",
    "bCommit": "34326117ce",
    "aCommit": "9b6bd6f5bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"] FROM [\" + FEDORA_OBJECT + \"]\", JCR_SQL2))",
          "type": "DELETE",
          "lineNo": 220
        }
      ],
      "targetChanges": [
        {
          "line": "\"] FROM [\" + FEDORA_CONTAINER + \"]\", JCR_SQL2))",
          "type": "ADD",
          "lineNo": 220
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String '] FROM ['"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_OBJECT"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ']'"
        },
        {
          "type": "CtTypeAccess",
          "value": "Query$JCR_SQL2"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String '] FROM ['"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_CONTAINER"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ']'"
        },
        {
          "type": "CtTypeAccess",
          "value": "Query$JCR_SQL2"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FEDORA_OBJECT",
          "childCount": 0
        },
        "dstNode": {
          "label": "FEDORA_CONTAINER",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        220
      ]
    },
    "aCommitTime": 1414701934,
    "ID": "fcrepo/fcrepo:409",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObject()",
    "bSource": {
      "startLine": 711,
      "code": "@Test\n    public void testCreateNewObject() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null, null, \"b\", null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 711,
      "code": "@Test\n    public void testCreateNewObject() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null, \"b\", null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "d62c1fc30b",
    "aCommit": "b18ae21b81",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response actual = testObj.createObject(null, null, null, null, \"b\", null);",
          "type": "DELETE",
          "lineNo": 718
        }
      ],
      "targetChanges": [
        {
          "line": "final Response actual = testObj.createObject(null, null, null, \"b\", null);",
          "type": "ADD",
          "lineNo": 718
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "createObject(java.lang.String,java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "createObject(java.lang.String,java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "createObject(java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "createObject(java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        718
      ]
    },
    "aCommitTime": 1414691383,
    "ID": "fcrepo/fcrepo:433",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewBinary()",
    "bSource": {
      "startLine": 752,
      "code": "@Test\n    public void testCreateNewBinary() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockBinaryService.findOrCreate(mockSession, \"/b\")).thenReturn(mockBinary);\n\n        try (final InputStream content = toInputStream(\"x\")) {\n            final Response actual = testObj.createObject(null, null, null, APPLICATION_OCTET_STREAM_TYPE, \"b\",\n                    content);\n\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(content, APPLICATION_OCTET_STREAM, null, \"\", null);\n        }\n    }"
    },
    "aSource": {
      "startLine": 752,
      "code": "@Test\n    public void testCreateNewBinary() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockBinaryService.findOrCreate(mockSession, \"/b\")).thenReturn(mockBinary);\n\n        try (final InputStream content = toInputStream(\"x\")) {\n            final Response actual = testObj.createObject(null, null, APPLICATION_OCTET_STREAM_TYPE, \"b\",\n                    content);\n\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(content, APPLICATION_OCTET_STREAM, null, \"\", null);\n        }\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "d62c1fc30b",
    "aCommit": "b18ae21b81",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response actual = testObj.createObject(null, null, null, APPLICATION_OCTET_STREAM_TYPE, \"b\",",
          "type": "DELETE",
          "lineNo": 760
        }
      ],
      "targetChanges": [
        {
          "line": "final Response actual = testObj.createObject(null, null, APPLICATION_OCTET_STREAM_TYPE, \"b\",",
          "type": "ADD",
          "lineNo": 760
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "createObject(java.lang.String,java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "createObject(java.lang.String,java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.MediaType$APPLICATION_OCTET_STREAM_TYPE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "createObject(java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "createObject(java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.MediaType$APPLICATION_OCTET_STREAM_TYPE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        760
      ]
    },
    "aCommitTime": 1414691383,
    "ID": "fcrepo/fcrepo:434",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObjectWithSparql()",
    "bSource": {
      "startLine": 723,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).updateProperties(eq(idTranslator), eq(\"x\"), any(RdfStream.class));\n    }"
    },
    "aSource": {
      "startLine": 723,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).updateProperties(eq(idTranslator), eq(\"x\"), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "d62c1fc30b",
    "aCommit": "b18ae21b81",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response actual = testObj.createObject(null, null, null,",
          "type": "DELETE",
          "lineNo": 730
        }
      ],
      "targetChanges": [
        {
          "line": "final Response actual = testObj.createObject(null, null,",
          "type": "ADD",
          "lineNo": 730
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "createObject(java.lang.String,java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "createObject(java.lang.String,java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "createObject(java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "createObject(java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        730
      ]
    },
    "aCommitTime": 1414691383,
    "ID": "fcrepo/fcrepo:435",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPostToBinary()",
    "bSource": {
      "startLine": 768,
      "code": "@Test(expected = ClientErrorException.class)\n    public void testPostToBinary() throws Exception {\n        final FedoraBinary mockObject = (FedoraBinary)setResource(FedoraBinary.class);\n        doReturn(mockObject).when(testObj).resource();\n\n        testObj.createObject(null, null, null, null, null, null);\n\n    }"
    },
    "aSource": {
      "startLine": 768,
      "code": "@Test(expected = ClientErrorException.class)\n    public void testPostToBinary() throws Exception {\n        final FedoraBinary mockObject = (FedoraBinary)setResource(FedoraBinary.class);\n        doReturn(mockObject).when(testObj).resource();\n\n        testObj.createObject(null, null, null, null, null);\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "d62c1fc30b",
    "aCommit": "b18ae21b81",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.createObject(null, null, null, null, null, null);",
          "type": "DELETE",
          "lineNo": 773
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.createObject(null, null, null, null, null);",
          "type": "ADD",
          "lineNo": 773
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "createObject(java.lang.String,java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "createObject(java.lang.String,java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "createObject(java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "createObject(java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        773
      ]
    },
    "aCommitTime": 1414691383,
    "ID": "fcrepo/fcrepo:436",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObjectWithRdf()",
    "bSource": {
      "startLine": 737,
      "code": "@Test\n    public void testCreateNewObjectWithRdf() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null, NTRIPLES_TYPE, \"b\",\n                toInputStream(\"_:a <info:b> _:c .\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "aSource": {
      "startLine": 737,
      "code": "@Test\n    public void testCreateNewObjectWithRdf() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, NTRIPLES_TYPE, \"b\",\n                toInputStream(\"_:a <info:b> _:c .\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "d62c1fc30b",
    "aCommit": "b18ae21b81",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response actual = testObj.createObject(null, null, null, NTRIPLES_TYPE, \"b\",",
          "type": "DELETE",
          "lineNo": 744
        }
      ],
      "targetChanges": [
        {
          "line": "final Response actual = testObj.createObject(null, null, NTRIPLES_TYPE, \"b\",",
          "type": "ADD",
          "lineNo": 744
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "createObject(java.lang.String,java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "createObject(java.lang.String,java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.MediaType NTRIPLES_TYPE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "createObject(java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLdp testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "createObject(java.lang.String,org.fcrepo.http.api.ContentDisposition,javax.ws.rs.core.MediaType,java.lang.String,java.io.InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.MediaType NTRIPLES_TYPE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        744
      ]
    },
    "aCommitTime": 1414691383,
    "ID": "fcrepo/fcrepo:437",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testWriteProperty()",
    "bSource": {
      "startLine": 58,
      "code": "@Test(expected = RepositoryException.class)\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 58,
      "code": "@Test(expected = RepositoryException.class)\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource object = nodeService.getObject(session, testFilePath());",
          "type": "DELETE",
          "lineNo": 62
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource object = nodeService.find(session, testFilePath());",
          "type": "ADD",
          "lineNo": 62
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testFilePath()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testFilePath()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testFilePath()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testFilePath()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "find",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        62
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:591",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testRemoveProperty()",
    "bSource": {
      "startLine": 84,
      "code": "@Test(expected = RepositoryException.class)\n    public void testRemoveProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:remove \" +\n                \"'some-property-to-remove' }\";\n\n        // Write the properties\n        final DefaultIdentifierTranslator graphSubjects = new DefaultIdentifierTranslator(session);\n        object.updateProperties(graphSubjects, sparql, new RdfStream());\n\n        // Verify property exists\n        final Property property = object.getNode().getProperty(\"fedora:remove\");\n        assertNotNull(property);\n        assertEquals(\"some-property-to-remove\", property.getValues()[0].getString());\n\n        final String sparqlRemove = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"DELETE {\" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s \" +\n                \"} WHERE { \" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s\" +\n                \"}\";\n\n        // Remove the properties\n        object.updateProperties(graphSubjects,\n                sparqlRemove,\n                object.getTriples(graphSubjects, PropertiesRdfContext.class));\n\n        // Persist the object (although the propery will be removed from memory without this.)\n        session.save();\n\n        // Verify\n        boolean thrown = false;\n        try {\n            object.getNode().getProperty(\"fedora:remove\");\n        } catch (final PathNotFoundException e) {\n            thrown = true;\n        }\n        assertTrue(\"Exception expected - property should be missing\", thrown);\n\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test(expected = RepositoryException.class)\n    public void testRemoveProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:remove \" +\n                \"'some-property-to-remove' }\";\n\n        // Write the properties\n        final DefaultIdentifierTranslator graphSubjects = new DefaultIdentifierTranslator(session);\n        object.updateProperties(graphSubjects, sparql, new RdfStream());\n\n        // Verify property exists\n        final Property property = object.getNode().getProperty(\"fedora:remove\");\n        assertNotNull(property);\n        assertEquals(\"some-property-to-remove\", property.getValues()[0].getString());\n\n        final String sparqlRemove = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"DELETE {\" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s \" +\n                \"} WHERE { \" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s\" +\n                \"}\";\n\n        // Remove the properties\n        object.updateProperties(graphSubjects,\n                sparqlRemove,\n                object.getTriples(graphSubjects, PropertiesRdfContext.class));\n\n        // Persist the object (although the propery will be removed from memory without this.)\n        session.save();\n\n        // Verify\n        boolean thrown = false;\n        try {\n            object.getNode().getProperty(\"fedora:remove\");\n        } catch (final PathNotFoundException e) {\n            thrown = true;\n        }\n        assertTrue(\"Exception expected - property should be missing\", thrown);\n\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource object = nodeService.getObject(session, testFilePath());",
          "type": "DELETE",
          "lineNo": 88
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource object = nodeService.find(session, testFilePath());",
          "type": "ADD",
          "lineNo": 88
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testFilePath()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testFilePath()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testFilePath()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testFilePath()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "find",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        88
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:592",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.ReadOnlyExternalPropertiesFedoraFileSystemConnectorIT.verifyThatPropertiesAreExternal()",
    "bSource": {
      "startLine": 54,
      "code": "@Test\n    public void verifyThatPropertiesAreExternal() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertEquals(\"There should be exactly as many visible nodes as actual files (ie, no hidden sidecar files).\",\n                fileForNode(null).getParentFile().list().length,\n                getChildCount(object.getNode().getParent()));\n    }"
    },
    "aSource": {
      "startLine": 54,
      "code": "@Test\n    public void verifyThatPropertiesAreExternal() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraResource object = nodeService.find(session, testFilePath());\n        assertEquals(\"There should be exactly as many visible nodes as actual files (ie, no hidden sidecar files).\",\n                fileForNode(null).getParentFile().list().length,\n                getChildCount(object.getNode().getParent()));\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/ReadOnlyExternalPropertiesFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/ReadOnlyExternalPropertiesFedoraFileSystemConnectorIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource object = nodeService.getObject(session, testFilePath());",
          "type": "DELETE",
          "lineNo": 57
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource object = nodeService.find(session, testFilePath());",
          "type": "ADD",
          "lineNo": 57
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.connector.file.ReadOnlyExternalPropertiesFedoraFileSystemConnectorIT.testFilePath()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.connector.file.ReadOnlyExternalPropertiesFedoraFileSystemConnectorIT.testFilePath()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.connector.file.ReadOnlyExternalPropertiesFedoraFileSystemConnectorIT.testFilePath()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.connector.file.ReadOnlyExternalPropertiesFedoraFileSystemConnectorIT.testFilePath()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "find",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        57
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:593",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testRestrictiveFAD()",
    "bSource": {
      "startLine": 109,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictiveFAD() throws Throwable {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ObjectService os = new ObjectServiceImpl();\n        try {\n            os.findOrCreateObject(session, \"/myobject\");\n        } catch (final RepositoryRuntimeException e) {\n            throw e.getCause();\n        }\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 109,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictiveFAD() throws Throwable {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ObjectService os = new ObjectServiceImpl();\n        try {\n            os.findOrCreate(session, \"/myobject\");\n        } catch (final RepositoryRuntimeException e) {\n            throw e.getCause();\n        }\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "os.findOrCreateObject(session, \"/myobject\");",
          "type": "DELETE",
          "lineNo": 127
        }
      ],
      "targetChanges": [
        {
          "line": "os.findOrCreate(session, \"/myobject\");",
          "type": "ADD",
          "lineNo": 127
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Try",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        127
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:594",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testPermissiveFAD()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectServiceImpl();\n        os.findOrCreateObject(session, \"/myobject\");\n        verify(fad, times(4)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectServiceImpl();\n        os.findOrCreate(session, \"/myobject\");\n        verify(fad, times(4)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "os.findOrCreateObject(session, \"/myobject\");",
          "type": "DELETE",
          "lineNo": 105
        }
      ],
      "targetChanges": [
        {
          "line": "os.findOrCreate(session, \"/myobject\");",
          "type": "ADD",
          "lineNo": 105
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        105
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:595",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraVersioningTest.testGetVersionList()",
    "bSource": {
      "startLine": 111,
      "code": "@Test\n    public void testGetVersionList() {\n        when(mockRequest.selectVariant(POSSIBLE_RDF_VARIANTS)).thenReturn(\n                mockVariant);\n        when(mockNodes.getObject(any(Session.class), anyString())).thenReturn(\n                mockResource);\n        when(mockResource.getTriples(any(IdentifierConverter.class), eq(VersionsRdfContext.class)))\n                .thenReturn(mockRdfStream);\n        when(mockResource.isVersioned()).thenReturn(true);\n        when(mockVariant.getMediaType()).thenReturn(\n                new MediaType(\"text\", \"turtle\"));\n        final RdfStream response = testObj.getVersionList();\n        assertEquals(\"Got wrong RdfStream!\", mockRdfStream, response);\n    }"
    },
    "aSource": {
      "startLine": 111,
      "code": "@Test\n    public void testGetVersionList() {\n        when(mockRequest.selectVariant(POSSIBLE_RDF_VARIANTS)).thenReturn(\n                mockVariant);\n        when(mockNodes.find(any(Session.class), anyString())).thenReturn(\n                mockResource);\n        when(mockResource.getTriples(any(IdentifierConverter.class), eq(VersionsRdfContext.class)))\n                .thenReturn(mockRdfStream);\n        when(mockResource.isVersioned()).thenReturn(true);\n        when(mockVariant.getMediaType()).thenReturn(\n                new MediaType(\"text\", \"turtle\"));\n        final RdfStream response = testObj.getVersionList();\n        assertEquals(\"Got wrong RdfStream!\", mockRdfStream, response);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersioningTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersioningTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockNodes.getObject(any(Session.class), anyString())).thenReturn(",
          "type": "DELETE",
          "lineNo": 115
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockNodes.find(any(Session.class), anyString())).thenReturn(",
          "type": "ADD",
          "lineNo": 115
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "find",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        115
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:596",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPutNewObject()",
    "bSource": {
      "startLine": 593,
      "code": "@Test\n    public void testPutNewObject() throws Exception {\n        setField(testObj, \"externalPath\", \"some/path\");\n        when(mockObject.isNew()).thenReturn(true);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(false);\n        when(mockObjectService.findOrCreateObject(mockSession, \"/some/path\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(null, null, null, null, null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 593,
      "code": "@Test\n    public void testPutNewObject() throws Exception {\n        setField(testObj, \"externalPath\", \"some/path\");\n        when(mockObject.isNew()).thenReturn(true);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(false);\n        when(mockObjectService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(null, null, null, null, null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObjectService.findOrCreateObject(mockSession, \"/some/path\")).thenReturn(mockObject);",
          "type": "DELETE",
          "lineNo": 599
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObjectService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockObject);",
          "type": "ADD",
          "lineNo": 599
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        599
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:597",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObject()",
    "bSource": {
      "startLine": 711,
      "code": "@Test\n    public void testCreateNewObject() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null, null, \"b\", null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 711,
      "code": "@Test\n    public void testCreateNewObject() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null, null, \"b\", null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);",
          "type": "DELETE",
          "lineNo": 716
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);",
          "type": "ADD",
          "lineNo": 716
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/b'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/b'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        716
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:598",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewBinary()",
    "bSource": {
      "startLine": 752,
      "code": "@Test\n    public void testCreateNewBinary() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockBinaryService.findOrCreateBinary(mockSession, \"/b\")).thenReturn(mockBinary);\n\n        try (final InputStream content = toInputStream(\"x\")) {\n            final Response actual = testObj.createObject(null, null, null, APPLICATION_OCTET_STREAM_TYPE, \"b\",\n                    content);\n\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(content, APPLICATION_OCTET_STREAM, null, \"\", null);\n        }\n    }"
    },
    "aSource": {
      "startLine": 752,
      "code": "@Test\n    public void testCreateNewBinary() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockBinaryService.findOrCreate(mockSession, \"/b\")).thenReturn(mockBinary);\n\n        try (final InputStream content = toInputStream(\"x\")) {\n            final Response actual = testObj.createObject(null, null, null, APPLICATION_OCTET_STREAM_TYPE, \"b\",\n                    content);\n\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(content, APPLICATION_OCTET_STREAM, null, \"\", null);\n        }\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockBinaryService.findOrCreateBinary(mockSession, \"/b\")).thenReturn(mockBinary);",
          "type": "DELETE",
          "lineNo": 757
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockBinaryService.findOrCreate(mockSession, \"/b\")).thenReturn(mockBinary);",
          "type": "ADD",
          "lineNo": 757
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService mockBinaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/b'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService mockBinaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/b'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateBinary",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        757
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:599",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPutNewBinary()",
    "bSource": {
      "startLine": 622,
      "code": "@Test\n    public void testPutNewBinary() throws Exception {\n        setField(testObj, \"externalPath\", \"some/path\");\n        when(mockBinary.isNew()).thenReturn(true);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(false);\n        when(mockBinaryService.findOrCreateBinary(mockSession, \"/some/path\")).thenReturn(mockBinary);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(TEXT_PLAIN_TYPE,\n                toInputStream(\"xyz\"), null, null, null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 622,
      "code": "@Test\n    public void testPutNewBinary() throws Exception {\n        setField(testObj, \"externalPath\", \"some/path\");\n        when(mockBinary.isNew()).thenReturn(true);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(false);\n        when(mockBinaryService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockBinary);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(TEXT_PLAIN_TYPE,\n                toInputStream(\"xyz\"), null, null, null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockBinaryService.findOrCreateBinary(mockSession, \"/some/path\")).thenReturn(mockBinary);",
          "type": "DELETE",
          "lineNo": 628
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockBinaryService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockBinary);",
          "type": "ADD",
          "lineNo": 628
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService mockBinaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService mockBinaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateBinary",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        628
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:600",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPutWithStrictIfMatchHandling()",
    "bSource": {
      "startLine": 654,
      "code": "@Test(expected = ClientErrorException.class)\n    public void testPutWithStrictIfMatchHandling() throws Exception {\n\n        when(mockHttpConfiguration.putRequiresIfMatch()).thenReturn(true);\n        final FedoraObject mockObject = (FedoraObject)setResource(FedoraObject.class);\n        doReturn(mockObject).when(testObj).resource();\n        when(mockObject.isNew()).thenReturn(false);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(true);\n        when(mockObjectService.findOrCreateObject(mockSession, \"/some/path\")).thenReturn(mockObject);\n\n        testObj.createOrReplaceObjectRdf(NTRIPLES_TYPE,\n                toInputStream(\"_:a <info:x> _:c .\"), null, null, null);\n\n    }"
    },
    "aSource": {
      "startLine": 654,
      "code": "@Test(expected = ClientErrorException.class)\n    public void testPutWithStrictIfMatchHandling() throws Exception {\n\n        when(mockHttpConfiguration.putRequiresIfMatch()).thenReturn(true);\n        final FedoraObject mockObject = (FedoraObject)setResource(FedoraObject.class);\n        doReturn(mockObject).when(testObj).resource();\n        when(mockObject.isNew()).thenReturn(false);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(true);\n        when(mockObjectService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockObject);\n\n        testObj.createOrReplaceObjectRdf(NTRIPLES_TYPE,\n                toInputStream(\"_:a <info:x> _:c .\"), null, null, null);\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObjectService.findOrCreateObject(mockSession, \"/some/path\")).thenReturn(mockObject);",
          "type": "DELETE",
          "lineNo": 663
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObjectService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockObject);",
          "type": "ADD",
          "lineNo": 663
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        663
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:601",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObjectWithSparql()",
    "bSource": {
      "startLine": 723,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).updateProperties(eq(idTranslator), eq(\"x\"), any(RdfStream.class));\n    }"
    },
    "aSource": {
      "startLine": 723,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).updateProperties(eq(idTranslator), eq(\"x\"), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);",
          "type": "DELETE",
          "lineNo": 728
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);",
          "type": "ADD",
          "lineNo": 728
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/b'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/b'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        728
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:602",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPutNewObjectWithRdf()",
    "bSource": {
      "startLine": 606,
      "code": "@Test\n    public void testPutNewObjectWithRdf() throws Exception {\n\n        setField(testObj, \"externalPath\", \"some/path\");\n        when(mockObject.isNew()).thenReturn(true);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(false);\n        when(mockObjectService.findOrCreateObject(mockSession, \"/some/path\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(NTRIPLES_TYPE,\n                toInputStream(\"_:a <info:x> _:c .\"), null, null, null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "aSource": {
      "startLine": 606,
      "code": "@Test\n    public void testPutNewObjectWithRdf() throws Exception {\n\n        setField(testObj, \"externalPath\", \"some/path\");\n        when(mockObject.isNew()).thenReturn(true);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(false);\n        when(mockObjectService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(NTRIPLES_TYPE,\n                toInputStream(\"_:a <info:x> _:c .\"), null, null, null);\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObjectService.findOrCreateObject(mockSession, \"/some/path\")).thenReturn(mockObject);",
          "type": "DELETE",
          "lineNo": 613
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObjectService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockObject);",
          "type": "ADD",
          "lineNo": 613
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        613
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:603",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPutReplaceRdfObject()",
    "bSource": {
      "startLine": 636,
      "code": "@Test\n    public void testPutReplaceRdfObject() throws Exception {\n\n        setField(testObj, \"externalPath\", \"some/path\");\n        final FedoraObject mockObject = (FedoraObject)setResource(FedoraObject.class);\n        doReturn(mockObject).when(testObj).resource();\n        when(mockObject.isNew()).thenReturn(false);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(true);\n        when(mockObjectService.findOrCreateObject(mockSession, \"/some/path\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(NTRIPLES_TYPE,\n                toInputStream(\"_:a <info:x> _:c .\"), null, null, null);\n\n        assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n        verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "aSource": {
      "startLine": 636,
      "code": "@Test\n    public void testPutReplaceRdfObject() throws Exception {\n\n        setField(testObj, \"externalPath\", \"some/path\");\n        final FedoraObject mockObject = (FedoraObject)setResource(FedoraObject.class);\n        doReturn(mockObject).when(testObj).resource();\n        when(mockObject.isNew()).thenReturn(false);\n\n        when(mockNodeService.exists(mockSession, \"/some/path\")).thenReturn(true);\n        when(mockObjectService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createOrReplaceObjectRdf(NTRIPLES_TYPE,\n                toInputStream(\"_:a <info:x> _:c .\"), null, null, null);\n\n        assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n        verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObjectService.findOrCreateObject(mockSession, \"/some/path\")).thenReturn(mockObject);",
          "type": "DELETE",
          "lineNo": 645
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObjectService.findOrCreate(mockSession, \"/some/path\")).thenReturn(mockObject);",
          "type": "ADD",
          "lineNo": 645
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        645
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:604",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObjectWithRdf()",
    "bSource": {
      "startLine": 737,
      "code": "@Test\n    public void testCreateNewObjectWithRdf() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null, NTRIPLES_TYPE, \"b\",\n                toInputStream(\"_:a <info:b> _:c .\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "aSource": {
      "startLine": 737,
      "code": "@Test\n    public void testCreateNewObjectWithRdf() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null, NTRIPLES_TYPE, \"b\",\n                toInputStream(\"_:a <info:b> _:c .\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).replaceProperties(eq(idTranslator), any(Model.class), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);",
          "type": "DELETE",
          "lineNo": 742
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObjectService.findOrCreate(mockSession, \"/b\")).thenReturn(mockObject);",
          "type": "ADD",
          "lineNo": 742
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/b'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/b'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        742
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:605",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.BinaryServiceImplIT.testCreateDatastreamNodeWithfilename()",
    "bSource": {
      "startLine": 78,
      "code": "@Test\n    public void testCreateDatastreamNodeWithfilename() throws Exception {\n        Session session = repository.login();\n        binaryService.findOrCreateBinary(session, \"/testDatastreamNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                \"xyz.jpg\",\n                null\n        );\n\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"xyz.jpg\", session.getNode(\"/testDatastreamNode\").getNode(JCR_CONTENT)\n                .getProperty(PREMIS_FILE_NAME).getString());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 78,
      "code": "@Test\n    public void testCreateDatastreamNodeWithfilename() throws Exception {\n        Session session = repository.login();\n        binaryService.findOrCreate(session, \"/testDatastreamNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                \"xyz.jpg\",\n                null\n        );\n\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"xyz.jpg\", session.getNode(\"/testDatastreamNode\").getNode(JCR_CONTENT)\n                .getProperty(PREMIS_FILE_NAME).getString());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/BinaryServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/BinaryServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "binaryService.findOrCreateBinary(session, \"/testDatastreamNode\").setContent(",
          "type": "DELETE",
          "lineNo": 81
        }
      ],
      "targetChanges": [
        {
          "line": "binaryService.findOrCreate(session, \"/testDatastreamNode\").setContent(",
          "type": "ADD",
          "lineNo": 81
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,java.lang.String,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService binaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,java.lang.String,<unknown>)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,java.lang.String,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService binaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,java.lang.String,<unknown>)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateBinary",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        81
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:606",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.BinaryServiceImplIT.testCreateDatastreamNode()",
    "bSource": {
      "startLine": 56,
      "code": "@Test\n    public void testCreateDatastreamNode() throws Exception {\n        Session session = repository.login();\n\n        binaryService.findOrCreateBinary(session, \"/testDatastreamNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"asdf\", session.getNode(\"/testDatastreamNode\").getNode(\n                JCR_CONTENT).getProperty(JCR_DATA).getString());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 56,
      "code": "@Test\n    public void testCreateDatastreamNode() throws Exception {\n        Session session = repository.login();\n\n        binaryService.findOrCreate(session, \"/testDatastreamNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"asdf\", session.getNode(\"/testDatastreamNode\").getNode(\n                JCR_CONTENT).getProperty(JCR_DATA).getString());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/BinaryServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/BinaryServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "binaryService.findOrCreateBinary(session, \"/testDatastreamNode\").setContent(",
          "type": "DELETE",
          "lineNo": 60
        }
      ],
      "targetChanges": [
        {
          "line": "binaryService.findOrCreate(session, \"/testDatastreamNode\").setContent(",
          "type": "ADD",
          "lineNo": 60
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService binaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService binaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateBinary",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        60
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:607",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.RepositoryServiceImplIT.testBackupRepository()",
    "bSource": {
      "startLine": 89,
      "code": "@Test\n    public void testBackupRepository() throws Exception {\n        final Session session = repository.login();\n\n        binaryService.findOrCreateBinary(session, \"/testObjectServiceNode0\").setContent(\n                new ByteArrayInputStream(\"asdfx\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        final Problems problems = repositoryService.backupRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 89,
      "code": "@Test\n    public void testBackupRepository() throws Exception {\n        final Session session = repository.login();\n\n        binaryService.findOrCreate(session, \"/testObjectServiceNode0\").setContent(\n                new ByteArrayInputStream(\"asdfx\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        final Problems problems = repositoryService.backupRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "binaryService.findOrCreateBinary(session, \"/testObjectServiceNode0\").setContent(",
          "type": "DELETE",
          "lineNo": 93
        }
      ],
      "targetChanges": [
        {
          "line": "binaryService.findOrCreate(session, \"/testObjectServiceNode0\").setContent(",
          "type": "ADD",
          "lineNo": 93
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService binaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObjectServiceNode0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService binaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObjectServiceNode0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateBinary",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        93
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:608",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.RepositoryServiceImplIT.testRestoreRepository()",
    "bSource": {
      "startLine": 111,
      "code": "@Test\n    public void testRestoreRepository() throws Exception {\n        final Session session = repository.login();\n\n        binaryService.findOrCreateBinary(session, \"/testObjectServiceNode1\").setContent(\n                new ByteArrayInputStream(\"asdfy\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        repositoryService.backupRepository(session, backupDirectory);\n\n        final Problems problems = repositoryService.restoreRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 111,
      "code": "@Test\n    public void testRestoreRepository() throws Exception {\n        final Session session = repository.login();\n\n        binaryService.findOrCreate(session, \"/testObjectServiceNode1\").setContent(\n                new ByteArrayInputStream(\"asdfy\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        repositoryService.backupRepository(session, backupDirectory);\n\n        final Problems problems = repositoryService.restoreRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "binaryService.findOrCreateBinary(session, \"/testObjectServiceNode1\").setContent(",
          "type": "DELETE",
          "lineNo": 115
        }
      ],
      "targetChanges": [
        {
          "line": "binaryService.findOrCreate(session, \"/testObjectServiceNode1\").setContent(",
          "type": "ADD",
          "lineNo": 115
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService binaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObjectServiceNode1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService binaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObjectServiceNode1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateBinary",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        115
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:609",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.RepositoryServiceImplIT.testGetAllObjectsDatastreamSize()",
    "bSource": {
      "startLine": 62,
      "code": "@Test\n    public void testGetAllObjectsDatastreamSize() throws Exception {\n        Session session = repository.login();\n\n        final double originalSize = repositoryService.getRepositorySize();\n\n\n        binaryService.findOrCreateBinary(session, \"/testObjectServiceNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n        session.logout();\n\n        session = repository.login();\n\n        final double afterSize = repositoryService.getRepositorySize();\n\n        assertEquals(4.0, afterSize - originalSize);\n\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 62,
      "code": "@Test\n    public void testGetAllObjectsDatastreamSize() throws Exception {\n        Session session = repository.login();\n\n        final double originalSize = repositoryService.getRepositorySize();\n\n\n        binaryService.findOrCreate(session, \"/testObjectServiceNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n        session.logout();\n\n        session = repository.login();\n\n        final double afterSize = repositoryService.getRepositorySize();\n\n        assertEquals(4.0, afterSize - originalSize);\n\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "binaryService.findOrCreateBinary(session, \"/testObjectServiceNode\").setContent(",
          "type": "DELETE",
          "lineNo": 69
        }
      ],
      "targetChanges": [
        {
          "line": "binaryService.findOrCreate(session, \"/testObjectServiceNode\").setContent(",
          "type": "ADD",
          "lineNo": 69
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService binaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.BinaryService.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObjectServiceNode'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.BinaryService binaryService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObjectServiceNode'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateBinary",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        69
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:610",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.TransactionServiceImplIT.testCommit()",
    "bSource": {
      "startLine": 113,
      "code": "@Test\n    public void testCommit() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        transactionService.commit( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertTrue( nodeService.exists(session2,\"/\" + pid) );\n    }"
    },
    "aSource": {
      "startLine": 113,
      "code": "@Test\n    public void testCommit() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreate(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        transactionService.commit( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertTrue( nodeService.exists(session2,\"/\" + pid) );\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.findOrCreateObject(txSession, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 119
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreate(txSession, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 119
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        119
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:611",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.TransactionServiceImplIT.testRollback()",
    "bSource": {
      "startLine": 97,
      "code": "@Test\n    public void testRollback() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        transactionService.rollback( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertFalse( nodeService.exists(session2,\"/\" + pid) );\n    }"
    },
    "aSource": {
      "startLine": 97,
      "code": "@Test\n    public void testRollback() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreate(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        transactionService.rollback( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertFalse( nodeService.exists(session2,\"/\" + pid) );\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.findOrCreateObject(txSession, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 103
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreate(txSession, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 103
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        103
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:612",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.TransactionServiceImplIT.testTransactionExpire()",
    "bSource": {
      "startLine": 81,
      "code": "@Test\n    public void testTransactionExpire() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        t.expire();\n        transactionService.removeAndRollbackExpired();\n\n        final Session session2 = repository.login();\n        assertFalse( nodeService.exists(session2,\"/\" + pid) );\n    }"
    },
    "aSource": {
      "startLine": 81,
      "code": "@Test\n    public void testTransactionExpire() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreate(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        t.expire();\n        transactionService.removeAndRollbackExpired();\n\n        final Session session2 = repository.login();\n        assertFalse( nodeService.exists(session2,\"/\" + pid) );\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.findOrCreateObject(txSession, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 87
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreate(txSession, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 87
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        87
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:613",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.BinaryServiceImplTest.testAsBinaryWithNonbinary()",
    "bSource": {
      "startLine": 77,
      "code": "@Test(expected = ResourceTypeException.class)\n    public void testAsBinaryWithNonbinary() throws Exception {\n        when(mockNode.isNodeType(FEDORA_BINARY)).thenReturn(false);\n        testObj.asBinary(mockNode);\n    }"
    },
    "aSource": {
      "startLine": 77,
      "code": "@Test(expected = ResourceTypeException.class)\n    public void testAsBinaryWithNonbinary() throws Exception {\n        when(mockNode.isNodeType(FEDORA_BINARY)).thenReturn(false);\n        testObj.cast(mockNode);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/BinaryServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/BinaryServiceImplTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.asBinary(mockNode);",
          "type": "DELETE",
          "lineNo": 80
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.cast(mockNode);",
          "type": "ADD",
          "lineNo": 80
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.asBinary(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.asBinary(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.cast(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.cast(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asBinary",
          "childCount": 2
        },
        "dstNode": {
          "label": "cast",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        80
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:614",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.impl.services.BinaryServiceImplTest.testFindOrCreateBinary()",
    "bSource": {
      "startLine": 62,
      "code": "@Test\n    public void testFindOrCreateBinary() throws Exception {\n        final String testPath = \"/foo/bar\";\n        when(mockRoot.getNode(testPath.substring(1))).thenReturn(mockDsNode);\n        when(mockNode.isNodeType(FEDORA_BINARY)).thenReturn(true);\n        testObj.findOrCreateBinary(mockSession, testPath);\n        verify(mockRoot).getNode(testPath.substring(1));\n    }"
    },
    "aSource": {
      "startLine": 62,
      "code": "@Test\n    public void testFindOrCreateBinary() throws Exception {\n        final String testPath = \"/foo/bar\";\n        when(mockRoot.getNode(testPath.substring(1))).thenReturn(mockDsNode);\n        when(mockNode.isNodeType(FEDORA_BINARY)).thenReturn(true);\n        testObj.findOrCreate(mockSession, testPath);\n        verify(mockRoot).getNode(testPath.substring(1));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/BinaryServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/BinaryServiceImplTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.findOrCreateBinary(mockSession, testPath);",
          "type": "DELETE",
          "lineNo": 67
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.findOrCreate(mockSession, testPath);",
          "type": "ADD",
          "lineNo": 67
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.findOrCreateBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String testPath"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String testPath"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateBinary",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        67
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:615",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.impl.services.BinaryServiceImplTest.testAsBinary()",
    "bSource": {
      "startLine": 71,
      "code": "@Test\n    public void testAsBinary() throws Exception {\n        when(mockNode.isNodeType(FEDORA_BINARY)).thenReturn(true);\n        testObj.asBinary(mockNode);\n    }"
    },
    "aSource": {
      "startLine": 71,
      "code": "@Test\n    public void testAsBinary() throws Exception {\n        when(mockNode.isNodeType(FEDORA_BINARY)).thenReturn(true);\n        testObj.cast(mockNode);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/BinaryServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/BinaryServiceImplTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.asBinary(mockNode);",
          "type": "DELETE",
          "lineNo": 74
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.cast(mockNode);",
          "type": "ADD",
          "lineNo": 74
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.asBinary(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.asBinary(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.cast(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.services.BinaryServiceImpl.cast(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asBinary",
          "childCount": 2
        },
        "dstNode": {
          "label": "cast",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        74
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:616",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.SparqlQueryTransformIT.shouldDoStuff()",
    "bSource": {
      "startLine": 57,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");\n\n        final String s = \"SELECT ?x ?uuid\\n\" +\n                \"WHERE { ?x  <\" + REPOSITORY_NAMESPACE + \"uuid> ?uuid }\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new SparqlQueryTransform(stringReader);\n\n        final RdfStream stream = object.getTriples(new DefaultIdentifierTranslator(session),\n                PropertiesRdfContext.class);\n        try (final QueryExecution qexec = testObj.apply(stream)) {\n            assert (qexec != null);\n            final ResultSet results = qexec.execSelect();\n            assert (results != null);\n            assertTrue(results.hasNext());\n        }\n    }"
    },
    "aSource": {
      "startLine": 57,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreate(session, \"/testObject\");\n\n        final String s = \"SELECT ?x ?uuid\\n\" +\n                \"WHERE { ?x  <\" + REPOSITORY_NAMESPACE + \"uuid> ?uuid }\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new SparqlQueryTransform(stringReader);\n\n        final RdfStream stream = object.getTriples(new DefaultIdentifierTranslator(session),\n                PropertiesRdfContext.class);\n        try (final QueryExecution qexec = testObj.apply(stream)) {\n            assert (qexec != null);\n            final ResultSet results = qexec.execSelect();\n            assert (results != null);\n            assertTrue(results.hasNext());\n        }\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/SparqlQueryTransformIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/SparqlQueryTransformIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");",
          "type": "DELETE",
          "lineNo": 61
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreate(session, \"/testObject\");",
          "type": "ADD",
          "lineNo": 61
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        61
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:617",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testRevertToVersion()",
    "bSource": {
      "startLine": 97,
      "code": "@Test\n    public void testRevertToVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        final String label = versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // create another version\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(3L, countVersions(session, resource));\n\n        // revert to the old version and make sure there two versions again\n        versionService.revertToVersion( session, \"/\" + pid, label );\n        session.save();\n        assertEquals(label, currentVersion(session,resource));\n    }"
    },
    "aSource": {
      "startLine": 97,
      "code": "@Test\n    public void testRevertToVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreate(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        final String label = versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // create another version\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(3L, countVersions(session, resource));\n\n        // revert to the old version and make sure there two versions again\n        versionService.revertToVersion( session, \"/\" + pid, label );\n        session.save();\n        assertEquals(label, currentVersion(session,resource));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 101
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreate(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 101
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        101
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:618",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testCreateVersion()",
    "bSource": {
      "startLine": 55,
      "code": "/*\n  versionService.createVersion( workspace, paths )\n  versionService.revertToVersion( workspace, path, label )\n  versionService.removeVersion( workspace, path, label )\n*/\n\n    @Test\n    public void testCreateVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n    }"
    },
    "aSource": {
      "startLine": 55,
      "code": "/*\n  versionService.createVersion( workspace, paths )\n  versionService.revertToVersion( workspace, path, label )\n  versionService.removeVersion( workspace, path, label )\n*/\n\n    @Test\n    public void testCreateVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreate(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 65
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreate(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 65
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        65
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:619",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testRevertToInvalidVersion()",
    "bSource": {
      "startLine": 120,
      "code": "@Test( expected = PathNotFoundException.class )\n    public void testRevertToInvalidVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // revert to an invalid version\n        versionService.revertToVersion( session, \"/\" + pid, \"invalid-version-label\" );\n        session.save();\n    }"
    },
    "aSource": {
      "startLine": 120,
      "code": "@Test( expected = PathNotFoundException.class )\n    public void testRevertToInvalidVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreate(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // revert to an invalid version\n        versionService.revertToVersion( session, \"/\" + pid, \"invalid-version-label\" );\n        session.save();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 124
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreate(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 124
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        124
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:620",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testRemoveVersion()",
    "bSource": {
      "startLine": 74,
      "code": "@Test\n    public void testRemoveVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        final String label = versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // create another version\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(3L, countVersions(session, resource));\n\n        // remove the old version and make sure there two versions again\n        versionService.removeVersion( session, \"/\" + pid, label );\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n    }"
    },
    "aSource": {
      "startLine": 74,
      "code": "@Test\n    public void testRemoveVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreate(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        final String label = versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // create another version\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(3L, countVersions(session, resource));\n\n        // remove the old version and make sure there two versions again\n        versionService.removeVersion( session, \"/\" + pid, label );\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 78
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreate(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 78
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        78
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:621",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testRemoveInvalidVersion()",
    "bSource": {
      "startLine": 137,
      "code": "@Test( expected = PathNotFoundException.class )\n    public void testRemoveInvalidVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // revert to an invalid version\n        versionService.removeVersion( session, \"/\" + pid, \"invalid-version-label\" );\n        session.save();\n    }"
    },
    "aSource": {
      "startLine": 137,
      "code": "@Test( expected = PathNotFoundException.class )\n    public void testRemoveInvalidVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreate(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // revert to an invalid version\n        versionService.removeVersion( session, \"/\" + pid, \"invalid-version-label\" );\n        session.save();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 141
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreate(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 141
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        141
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:622",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.LDPathServiceIT.shouldDoStuff()",
    "bSource": {
      "startLine": 70,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");\n        object.getNode().setProperty(\"dc:title\", \"some-title\");\n\n        final String s = \"@prefix dces : <http://purl.org/dc/elements/1.1/>\\n\" +\n                       \"@prefix fcrepo : <\" + REPOSITORY_NAMESPACE + \">\\n\" +\n                           \"id      = . :: xsd:string ;\\n\" +\n                           \"title = dc:title :: xsd:string ;\\n\" +\n                           \"uuid = fcrepo:uuid :: xsd:string ;\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new LDPathTransform(stringReader);\n\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Resource topic = subjects.reverse().convert(object);\n        final RdfStream triples = object.getTriples(subjects, PropertiesRdfContext.class)\n                                        .topic(topic.asNode());\n        final Map<String, Collection<Object>> stuff = testObj.apply(triples);\n\n        assertNotNull(\"Failed to retrieve results!\", stuff);\n\n        assertTrue(\"Results didn't contain an identifier!\", stuff.containsKey(\"id\"));\n        assertTrue(\"Results didn't contain a title!\", stuff.containsKey(\"title\"));\n\n        assertEquals(\"Received more than one identifier!\", 1, stuff.get(\"id\").size());\n        assertEquals(\"Got wrong subject in identifier!\", subjects.toDomain(\"/testObject\").getURI(), stuff.get(\n                \"id\").iterator().next());\n        assertEquals(\"Got wrong title!\", \"some-title\", stuff.get(\"title\").iterator().next());\n        assertEquals(\"Got wrong UUID!\", object.getNode().getIdentifier(), stuff.get(\"uuid\").iterator().next());\n    }"
    },
    "aSource": {
      "startLine": 70,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreate(session, \"/testObject\");\n        object.getNode().setProperty(\"dc:title\", \"some-title\");\n\n        final String s = \"@prefix dces : <http://purl.org/dc/elements/1.1/>\\n\" +\n                       \"@prefix fcrepo : <\" + REPOSITORY_NAMESPACE + \">\\n\" +\n                           \"id      = . :: xsd:string ;\\n\" +\n                           \"title = dc:title :: xsd:string ;\\n\" +\n                           \"uuid = fcrepo:uuid :: xsd:string ;\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new LDPathTransform(stringReader);\n\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Resource topic = subjects.reverse().convert(object);\n        final RdfStream triples = object.getTriples(subjects, PropertiesRdfContext.class)\n                                        .topic(topic.asNode());\n        final Map<String, Collection<Object>> stuff = testObj.apply(triples);\n\n        assertNotNull(\"Failed to retrieve results!\", stuff);\n\n        assertTrue(\"Results didn't contain an identifier!\", stuff.containsKey(\"id\"));\n        assertTrue(\"Results didn't contain a title!\", stuff.containsKey(\"title\"));\n\n        assertEquals(\"Received more than one identifier!\", 1, stuff.get(\"id\").size());\n        assertEquals(\"Got wrong subject in identifier!\", subjects.toDomain(\"/testObject\").getURI(), stuff.get(\n                \"id\").iterator().next());\n        assertEquals(\"Got wrong title!\", \"some-title\", stuff.get(\"title\").iterator().next());\n        assertEquals(\"Got wrong UUID!\", object.getNode().getIdentifier(), stuff.get(\"uuid\").iterator().next());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/LDPathServiceIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/LDPathServiceIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");",
          "type": "DELETE",
          "lineNo": 74
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreate(session, \"/testObject\");",
          "type": "ADD",
          "lineNo": 74
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        74
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:623",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testMoveObjectToExistingDestination()",
    "bSource": {
      "startLine": 232,
      "code": "@Test(expected = WebApplicationException.class)\n    public void testMoveObjectToExistingDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, path)).thenReturn(true);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        doThrow(new RepositoryRuntimeException(new ItemExistsException()))\n                .when(mockNodes).moveObject(mockSession, path, \"/baz\");\n\n        final Response response = testObj.moveObject(\"http://localhost/fcrepo/baz\");\n\n        assertEquals(PRECONDITION_FAILED.getStatusCode(), response.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 232,
      "code": "@Test(expected = WebApplicationException.class)\n    public void testMoveObjectToExistingDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, path)).thenReturn(true);\n        when(mockNodes.find(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        doThrow(new RepositoryRuntimeException(new ItemExistsException()))\n                .when(mockNodes).moveObject(mockSession, path, \"/baz\");\n\n        final Response response = testObj.moveObject(\"http://localhost/fcrepo/baz\");\n\n        assertEquals(PRECONDITION_FAILED.getStatusCode(), response.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockNodes.getObject(isA(Session.class), isA(String.class)))",
          "type": "DELETE",
          "lineNo": 237
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockNodes.find(isA(Session.class), isA(String.class)))",
          "type": "ADD",
          "lineNo": 237
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "find",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        237
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:624",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testMoveMissingObject()",
    "bSource": {
      "startLine": 220,
      "code": "@Test(expected = ClientErrorException.class)\n    public void testMoveMissingObject() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, path)).thenReturn(false);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        testObj.moveObject(\"http://localhost/fcrepo/bar\");\n    }"
    },
    "aSource": {
      "startLine": 220,
      "code": "@Test(expected = ClientErrorException.class)\n    public void testMoveMissingObject() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, path)).thenReturn(false);\n        when(mockNodes.find(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        testObj.moveObject(\"http://localhost/fcrepo/bar\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockNodes.getObject(isA(Session.class), isA(String.class)))",
          "type": "DELETE",
          "lineNo": 225
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockNodes.find(isA(Session.class), isA(String.class)))",
          "type": "ADD",
          "lineNo": 225
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "find",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        225
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:625",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testMoveObject()",
    "bSource": {
      "startLine": 205,
      "code": "@Test\n    public void testMoveObject() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockObject.getPath()).thenReturn(path);\n\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, path)).thenReturn(true);\n\n        testObj.moveObject(\"http://localhost/fcrepo/bar\");\n        verify(mockNodes).moveObject(mockSession, path, \"/bar\");\n    }"
    },
    "aSource": {
      "startLine": 205,
      "code": "@Test\n    public void testMoveObject() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockNodes.find(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockObject.getPath()).thenReturn(path);\n\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, path)).thenReturn(true);\n\n        testObj.moveObject(\"http://localhost/fcrepo/bar\");\n        verify(mockNodes).moveObject(mockSession, path, \"/bar\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockNodes.getObject(isA(Session.class), isA(String.class)))",
          "type": "DELETE",
          "lineNo": 208
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockNodes.find(isA(Session.class), isA(String.class)))",
          "type": "ADD",
          "lineNo": 208
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "find",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        208
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:626",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testMoveObjectWithBadDestination()",
    "bSource": {
      "startLine": 248,
      "code": "@Test(expected = ServerErrorException.class)\n    public void testMoveObjectWithBadDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockNodes.exists(mockSession, path)).thenReturn(true);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        testObj.moveObject(\"http://somewhere/else/baz\");\n    }"
    },
    "aSource": {
      "startLine": 248,
      "code": "@Test(expected = ServerErrorException.class)\n    public void testMoveObjectWithBadDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.find(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockNodes.exists(mockSession, path)).thenReturn(true);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        testObj.moveObject(\"http://somewhere/else/baz\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockNodes.getObject(isA(Session.class), isA(String.class)))",
          "type": "DELETE",
          "lineNo": 252
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockNodes.find(isA(Session.class), isA(String.class)))",
          "type": "ADD",
          "lineNo": 252
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.find(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "find",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        252
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:627",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.ObjectServiceImplTest.testCreateObject()",
    "bSource": {
      "startLine": 78,
      "code": "@Test\n    public void testCreateObject() {\n        final Node actual = testObj.findOrCreateObject(mockSession, testPath).getNode();\n        assertEquals(mockNode, actual);\n    }"
    },
    "aSource": {
      "startLine": 78,
      "code": "@Test\n    public void testCreateObject() {\n        final Node actual = testObj.findOrCreate(mockSession, testPath).getNode();\n        assertEquals(mockNode, actual);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ObjectServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ObjectServiceImplTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Node actual = testObj.findOrCreateObject(mockSession, testPath).getNode();",
          "type": "DELETE",
          "lineNo": 80
        }
      ],
      "targetChanges": [
        {
          "line": "final Node actual = testObj.findOrCreate(mockSession, testPath).getNode();",
          "type": "ADD",
          "lineNo": 80
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.Node actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.Node"
        },
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String testPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.Node actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.Node"
        },
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String testPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        80
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:628",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.ObjectServiceImplTest.testCreateObjectWithHierarchy()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testCreateObjectWithHierarchy() throws Exception {\n        when(mockNode.getParent()).thenReturn(mockParent);\n        when(mockParent.getParent()).thenReturn(mockRoot);\n        when(mockParent.isNew()).thenReturn(true);\n        when(mockRoot.getNode(\"foo/bar\")).thenReturn(mockNode);\n        when(mockNode.isNew()).thenReturn(true);\n\n        final Node actual =\n                testObj.findOrCreateObject(mockSession, \"/foo/bar\").getNode();\n        assertEquals(mockNode, actual);\n        verify(mockParent).addMixin(FedoraJcrTypes.FEDORA_PAIRTREE);\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testCreateObjectWithHierarchy() throws Exception {\n        when(mockNode.getParent()).thenReturn(mockParent);\n        when(mockParent.getParent()).thenReturn(mockRoot);\n        when(mockParent.isNew()).thenReturn(true);\n        when(mockRoot.getNode(\"foo/bar\")).thenReturn(mockNode);\n        when(mockNode.isNew()).thenReturn(true);\n\n        final Node actual =\n                testObj.findOrCreate(mockSession, \"/foo/bar\").getNode();\n        assertEquals(mockNode, actual);\n        verify(mockParent).addMixin(FedoraJcrTypes.FEDORA_PAIRTREE);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ObjectServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ObjectServiceImplTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.findOrCreateObject(mockSession, \"/foo/bar\").getNode();",
          "type": "DELETE",
          "lineNo": 93
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.findOrCreate(mockSession, \"/foo/bar\").getNode();",
          "type": "ADD",
          "lineNo": 93
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/foo/bar'"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/foo/bar'"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        93
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:629",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.ObjectServiceImplTest.testGetObject()",
    "bSource": {
      "startLine": 114,
      "code": "@Test\n    public void testGetObject() throws RepositoryException {\n        final String testPath = \"/foo\";\n        when(mockSession.getNode(testPath)).thenReturn(mockNode);\n        when(mockJcrTools.findOrCreateNode(mockSession, \"/foo\", NT_FOLDER, NT_FOLDER)).thenReturn(mockNode);\n        final FedoraObject actual = testObj.findOrCreateObject(mockSession, \"/foo\");\n        assertEquals(mockNode, actual.getNode());\n    }"
    },
    "aSource": {
      "startLine": 114,
      "code": "@Test\n    public void testGetObject() throws RepositoryException {\n        final String testPath = \"/foo\";\n        when(mockSession.getNode(testPath)).thenReturn(mockNode);\n        when(mockJcrTools.findOrCreateNode(mockSession, \"/foo\", NT_FOLDER, NT_FOLDER)).thenReturn(mockNode);\n        final FedoraObject actual = testObj.findOrCreate(mockSession, \"/foo\");\n        assertEquals(mockNode, actual.getNode());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ObjectServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ObjectServiceImplTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraObject actual = testObj.findOrCreateObject(mockSession, \"/foo\");",
          "type": "DELETE",
          "lineNo": 119
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraObject actual = testObj.findOrCreate(mockSession, \"/foo\");",
          "type": "ADD",
          "lineNo": 119
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject actual"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/foo'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject actual"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/foo'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        119
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:630",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.ObjectServiceImplTest.testThrowsTombstoneExceptionOnCreateOnTombstone()",
    "bSource": {
      "startLine": 123,
      "code": "@Test(expected = TombstoneException.class)\n    public void testThrowsTombstoneExceptionOnCreateOnTombstone() throws RepositoryException {\n\n        when(mockNode.getParent()).thenReturn(mockParent);\n        when(mockParent.getParent()).thenReturn(mockRoot);\n        when(mockParent.isNew()).thenReturn(false);\n        when(mockParent.isNodeType(FEDORA_TOMBSTONE)).thenReturn(true);\n        when(mockRoot.hasNode(\"foo\")).thenReturn(true);\n        when(mockRoot.getNode(\"foo\")).thenReturn(mockParent);\n        when(mockRoot.getNode(\"foo/bar\")).thenReturn(mockNode);\n        when(mockNode.isNew()).thenReturn(true);\n\n        testObj.findOrCreateObject(mockSession, \"/foo/bar\");\n\n    }"
    },
    "aSource": {
      "startLine": 123,
      "code": "@Test(expected = TombstoneException.class)\n    public void testThrowsTombstoneExceptionOnCreateOnTombstone() throws RepositoryException {\n\n        when(mockNode.getParent()).thenReturn(mockParent);\n        when(mockParent.getParent()).thenReturn(mockRoot);\n        when(mockParent.isNew()).thenReturn(false);\n        when(mockParent.isNodeType(FEDORA_TOMBSTONE)).thenReturn(true);\n        when(mockRoot.hasNode(\"foo\")).thenReturn(true);\n        when(mockRoot.getNode(\"foo\")).thenReturn(mockParent);\n        when(mockRoot.getNode(\"foo/bar\")).thenReturn(mockNode);\n        when(mockNode.isNew()).thenReturn(true);\n\n        testObj.findOrCreate(mockSession, \"/foo/bar\");\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ObjectServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ObjectServiceImplTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.findOrCreateObject(mockSession, \"/foo/bar\");",
          "type": "DELETE",
          "lineNo": 135
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.findOrCreate(mockSession, \"/foo/bar\");",
          "type": "ADD",
          "lineNo": 135
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/foo/bar'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/foo/bar'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        135
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:631",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.ObjectServiceImplTest.testCreateObjectWithExistingHierarchy()",
    "bSource": {
      "startLine": 98,
      "code": "@Test\n    public void testCreateObjectWithExistingHierarchy() throws Exception {\n        when(mockNode.getParent()).thenReturn(mockParent);\n        when(mockParent.getParent()).thenReturn(mockRoot);\n        when(mockParent.isNew()).thenReturn(false);\n        when(mockRoot.hasNode(\"foo\")).thenReturn(true);\n        when(mockRoot.getNode(\"foo\")).thenReturn(mockParent);\n        when(mockRoot.getNode(\"foo/bar\")).thenReturn(mockNode);\n        when(mockNode.isNew()).thenReturn(true);\n\n        final Node actual = testObj.findOrCreateObject(mockSession, \"/foo/bar\").getNode();\n        assertEquals(mockNode, actual);\n        verify(mockParent, never()).addMixin(FedoraJcrTypes.FEDORA_PAIRTREE);\n    }"
    },
    "aSource": {
      "startLine": 98,
      "code": "@Test\n    public void testCreateObjectWithExistingHierarchy() throws Exception {\n        when(mockNode.getParent()).thenReturn(mockParent);\n        when(mockParent.getParent()).thenReturn(mockRoot);\n        when(mockParent.isNew()).thenReturn(false);\n        when(mockRoot.hasNode(\"foo\")).thenReturn(true);\n        when(mockRoot.getNode(\"foo\")).thenReturn(mockParent);\n        when(mockRoot.getNode(\"foo/bar\")).thenReturn(mockNode);\n        when(mockNode.isNew()).thenReturn(true);\n\n        final Node actual = testObj.findOrCreate(mockSession, \"/foo/bar\").getNode();\n        assertEquals(mockNode, actual);\n        verify(mockParent, never()).addMixin(FedoraJcrTypes.FEDORA_PAIRTREE);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ObjectServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ObjectServiceImplTest.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Node actual = testObj.findOrCreateObject(mockSession, \"/foo/bar\").getNode();",
          "type": "DELETE",
          "lineNo": 108
        }
      ],
      "targetChanges": [
        {
          "line": "final Node actual = testObj.findOrCreate(mockSession, \"/foo/bar\").getNode();",
          "type": "ADD",
          "lineNo": 108
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.Node actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.Node"
        },
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/foo/bar'"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.Node actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.Node"
        },
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/foo/bar'"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        108
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:632",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraObjectImplIT.testReplaceObjectGraphWithErrors()",
    "bSource": {
      "startLine": 207,
      "code": "@Test\n    public void testReplaceObjectGraphWithErrors() {\n        final String pid = getRandomPid();\n        final FedoraObject object = objectService.findOrCreateObject(session, pid);\n\n        final Model model = ModelFactory.createDefaultModel().read(\n                IOUtils.toInputStream(\"<> <info:some-property> <relative-url> . \\n\" +\n                                      \"<> <info:some-other-property> <another-relative-url>\"),\n                subjects.reverse().convert(object).toString(),\n                \"TTL\");\n        MalformedRdfException e = null;\n        try {\n            object.replaceProperties(subjects, model, new RdfStream());\n        } catch (final MalformedRdfException ex) {\n            e = ex;\n        }\n\n        assertNotNull(\"Expected an exception to get thrown\", e);\n        assertEquals(\"Excepted two nested exceptions\", 2, e.getMessage().split(\"\\n\").length);\n        assertTrue(e.getMessage().contains(\"/relative-url\"));\n        assertTrue(e.getMessage().contains(\"/another-relative-url\"));\n    }"
    },
    "aSource": {
      "startLine": 207,
      "code": "@Test\n    public void testReplaceObjectGraphWithErrors() {\n        final String pid = getRandomPid();\n        final FedoraObject object = objectService.findOrCreate(session, pid);\n\n        final Model model = ModelFactory.createDefaultModel().read(\n                IOUtils.toInputStream(\"<> <info:some-property> <relative-url> . \\n\" +\n                                      \"<> <info:some-other-property> <another-relative-url>\"),\n                subjects.reverse().convert(object).toString(),\n                \"TTL\");\n        MalformedRdfException e = null;\n        try {\n            object.replaceProperties(subjects, model, new RdfStream());\n        } catch (final MalformedRdfException ex) {\n            e = ex;\n        }\n\n        assertNotNull(\"Expected an exception to get thrown\", e);\n        assertEquals(\"Excepted two nested exceptions\", 2, e.getMessage().split(\"\\n\").length);\n        assertTrue(e.getMessage().contains(\"/relative-url\"));\n        assertTrue(e.getMessage().contains(\"/another-relative-url\"));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreateObject(session, pid);",
          "type": "DELETE",
          "lineNo": 210
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreate(session, pid);",
          "type": "ADD",
          "lineNo": 210
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        210
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:633",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraObjectImplIT.testObjectGraphWithUriProperty()",
    "bSource": {
      "startLine": 153,
      "code": "@Test\n    public void testObjectGraphWithUriProperty() throws RepositoryException {\n        final FedoraObject object =\n            objectService.findOrCreateObject(session, \"/graphObject\");\n        final Resource graphSubject = subjects.reverse().convert(object);\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> some:urlProperty \" +\n                \"<\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        final String prefix = session.getWorkspace().getNamespaceRegistry().getPrefix(\"info:some#\");\n\n        assertNotNull(object.getNode().getProperty(prefix + \":urlProperty\"));\n\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"DELETE { <\" + graphSubject + \"> some:urlProperty \" +\n                \"<\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertFalse(object.getNode().hasProperty(prefix + \":urlProperty_ref\"));\n\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"INSERT DATA { <\" + graphSubject + \"> some:urlProperty <\" + graphSubject + \">;\\n\" +\n                \"       some:urlProperty <info:somewhere/else> . }\",\n                object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertEquals(1, object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues().length);\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n    }"
    },
    "aSource": {
      "startLine": 153,
      "code": "@Test\n    public void testObjectGraphWithUriProperty() throws RepositoryException {\n        final FedoraObject object =\n            objectService.findOrCreate(session, \"/graphObject\");\n        final Resource graphSubject = subjects.reverse().convert(object);\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> some:urlProperty \" +\n                \"<\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        final String prefix = session.getWorkspace().getNamespaceRegistry().getPrefix(\"info:some#\");\n\n        assertNotNull(object.getNode().getProperty(prefix + \":urlProperty\"));\n\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"DELETE { <\" + graphSubject + \"> some:urlProperty \" +\n                \"<\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertFalse(object.getNode().hasProperty(prefix + \":urlProperty_ref\"));\n\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"INSERT DATA { <\" + graphSubject + \"> some:urlProperty <\" + graphSubject + \">;\\n\" +\n                \"       some:urlProperty <info:somewhere/else> . }\",\n                object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertEquals(1, object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues().length);\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/graphObject\");",
          "type": "DELETE",
          "lineNo": 156
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreate(session, \"/graphObject\");",
          "type": "ADD",
          "lineNo": 156
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        156
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:634",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraObjectImplIT.testObjectGraph()",
    "bSource": {
      "startLine": 81,
      "code": "@Test\n    public void testObjectGraph() throws Exception {\n        final FedoraObject object =\n            objectService.findOrCreateObject(session, \"/graphObject\");\n        final Model model = object.getTriples(subjects, PropertiesRdfContext.class).asModel();\n\n        final Resource graphSubject = subjects.reverse().convert(object);\n\n        assertFalse(\"Graph store should not contain JCR prefixes\",\n                    compile(\"jcr\").matcher(model.toString()).find());\n        assertFalse(\"Graph store should contain our fcrepo prefix\",\n                    compile(\"fcrepo\")\n                    .matcher(model.toString()).find());\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"INSERT { <http://example/egbook> dc:title \" +\n                \"\\\"This is an example of an update that will be \" +\n                \"ignored\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> dc:title \" +\n                \"\\\"This is an example title\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n\n        final Value[] values = object.getNode().getProperty(\"dc:title\").getValues();\n        assertTrue(values.length > 0);\n\n        assertTrue(values[0]\n                       .getString(),\n                      values[0]\n                          .getString().equals(\"This is an example title\"));\n\n\n        object.updateProperties(subjects, \"PREFIX myurn: <info:myurn/>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> myurn:info \" +\n                \"\\\"This is some example data\\\"} WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        final Value value =\n            object.getNode().getProperty(object.getNode().getSession()\n                                         .getNamespacePrefix(\"info:myurn/\") +\n                                         \":info\").getValues()[0];\n\n        assertEquals(\"This is some example data\", value.getString());\n\n        object.updateProperties(subjects, \"PREFIX fedora-rels-ext: <\"\n                + RELATIONS_NAMESPACE + \">\\n\" +\n                \"INSERT { <\" + graphSubject + \"> fedora-rels-ext:\" +\n                \"isPartOf <\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        final Value refValue = object.getNode().getProperty(\"fedorarelsext:isPartOf_ref\").getValues()[0];\n        assertTrue(refValue.getString(), refValue.getString().equals(object.getNode().getIdentifier()));\n\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"DELETE { <\" + graphSubject + \"> dc:title \" +\n                \"\\\"This is an example title\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertFalse(\"Found unexpected dc:title\",\n                    object.getNode().hasProperty(\"dc:title\"));\n\n        object.updateProperties(subjects, \"PREFIX fedora-rels-ext: <\" +\n                RELATIONS_NAMESPACE + \">\\n\" +\n                \"DELETE { <\" + graphSubject + \"> \" +\n                \"fedora-rels-ext:isPartOf <\" + graphSubject + \"> \" +\n                \"} WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n        assertFalse(\"found unexpected reference\",\n                    object.getNode().hasProperty(\"fedorarelsext:isPartOf\"));\n\n        session.save();\n\n    }"
    },
    "aSource": {
      "startLine": 81,
      "code": "@Test\n    public void testObjectGraph() throws Exception {\n        final FedoraObject object =\n            objectService.findOrCreate(session, \"/graphObject\");\n        final Model model = object.getTriples(subjects, PropertiesRdfContext.class).asModel();\n\n        final Resource graphSubject = subjects.reverse().convert(object);\n\n        assertFalse(\"Graph store should not contain JCR prefixes\",\n                    compile(\"jcr\").matcher(model.toString()).find());\n        assertFalse(\"Graph store should contain our fcrepo prefix\",\n                    compile(\"fcrepo\")\n                    .matcher(model.toString()).find());\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"INSERT { <http://example/egbook> dc:title \" +\n                \"\\\"This is an example of an update that will be \" +\n                \"ignored\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> dc:title \" +\n                \"\\\"This is an example title\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n\n        final Value[] values = object.getNode().getProperty(\"dc:title\").getValues();\n        assertTrue(values.length > 0);\n\n        assertTrue(values[0]\n                       .getString(),\n                      values[0]\n                          .getString().equals(\"This is an example title\"));\n\n\n        object.updateProperties(subjects, \"PREFIX myurn: <info:myurn/>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> myurn:info \" +\n                \"\\\"This is some example data\\\"} WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        final Value value =\n            object.getNode().getProperty(object.getNode().getSession()\n                                         .getNamespacePrefix(\"info:myurn/\") +\n                                         \":info\").getValues()[0];\n\n        assertEquals(\"This is some example data\", value.getString());\n\n        object.updateProperties(subjects, \"PREFIX fedora-rels-ext: <\"\n                + RELATIONS_NAMESPACE + \">\\n\" +\n                \"INSERT { <\" + graphSubject + \"> fedora-rels-ext:\" +\n                \"isPartOf <\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        final Value refValue = object.getNode().getProperty(\"fedorarelsext:isPartOf_ref\").getValues()[0];\n        assertTrue(refValue.getString(), refValue.getString().equals(object.getNode().getIdentifier()));\n\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"DELETE { <\" + graphSubject + \"> dc:title \" +\n                \"\\\"This is an example title\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertFalse(\"Found unexpected dc:title\",\n                    object.getNode().hasProperty(\"dc:title\"));\n\n        object.updateProperties(subjects, \"PREFIX fedora-rels-ext: <\" +\n                RELATIONS_NAMESPACE + \">\\n\" +\n                \"DELETE { <\" + graphSubject + \"> \" +\n                \"fedora-rels-ext:isPartOf <\" + graphSubject + \"> \" +\n                \"} WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n        assertFalse(\"found unexpected reference\",\n                    object.getNode().hasProperty(\"fedorarelsext:isPartOf\"));\n\n        session.save();\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/graphObject\");",
          "type": "DELETE",
          "lineNo": 84
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreate(session, \"/graphObject\");",
          "type": "ADD",
          "lineNo": 84
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        84
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:635",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraObjectImplIT.testUpdatingObjectGraphWithErrors()",
    "bSource": {
      "startLine": 188,
      "code": "@Test\n    public void testUpdatingObjectGraphWithErrors() {\n        final String pid = getRandomPid();\n        final FedoraObject object = objectService.findOrCreateObject(session, pid);\n\n        MalformedRdfException e = null;\n        try {\n            object.updateProperties(subjects, \"INSERT DATA { <> <info:some-property> <relative-url> . \\n\" +\n                    \"<> <info:some-other-property> <another-relative-url> }\", new RdfStream());\n        } catch (final MalformedRdfException ex) {\n            e = ex;\n        }\n\n        assertNotNull(\"Expected an exception to get thrown\", e);\n        assertEquals(\"Excepted two nested exceptions\", 2, e.getMessage().split(\"\\n\").length);\n        assertTrue(e.getMessage().contains(\"/relative-url\"));\n        assertTrue(e.getMessage().contains(\"/another-relative-url\"));\n    }"
    },
    "aSource": {
      "startLine": 188,
      "code": "@Test\n    public void testUpdatingObjectGraphWithErrors() {\n        final String pid = getRandomPid();\n        final FedoraObject object = objectService.findOrCreate(session, pid);\n\n        MalformedRdfException e = null;\n        try {\n            object.updateProperties(subjects, \"INSERT DATA { <> <info:some-property> <relative-url> . \\n\" +\n                    \"<> <info:some-other-property> <another-relative-url> }\", new RdfStream());\n        } catch (final MalformedRdfException ex) {\n            e = ex;\n        }\n\n        assertNotNull(\"Expected an exception to get thrown\", e);\n        assertEquals(\"Excepted two nested exceptions\", 2, e.getMessage().split(\"\\n\").length);\n        assertTrue(e.getMessage().contains(\"/relative-url\"));\n        assertTrue(e.getMessage().contains(\"/another-relative-url\"));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "bCommit": "17da4039df",
    "aCommit": "f8c655af5f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreateObject(session, pid);",
          "type": "DELETE",
          "lineNo": 191
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreate(session, pid);",
          "type": "ADD",
          "lineNo": 191
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.findOrCreate(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreate",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        191
      ]
    },
    "aCommitTime": 1414689514,
    "ID": "fcrepo/fcrepo:636",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraFixityTest.testGetDatastreamFixity()",
    "bSource": {
      "startLine": 73,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException {\n        final RdfStream expected = new RdfStream();\n        final String externalPath = \"objects/FedoraDatastreamsTest1/testDS\";\n\n        when(mockNode.getSession()).thenReturn(mockSession);\n\n        doReturn(mockBinary).when(testObj).getResourceFromPath(externalPath);\n        when(mockBinary.getFixity(any(IdentifierConverter.class))).thenReturn(expected);\n\n        final RdfStream actual = testObj.getDatastreamFixity(externalPath, mockRequest, uriInfo);\n\n        assertEquals(expected, actual);\n    }"
    },
    "aSource": {
      "startLine": 73,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException {\n        final RdfStream expected = new RdfStream();\n        final String externalPath = \"objects/FedoraDatastreamsTest1/testDS\";\n\n        when(mockNode.getSession()).thenReturn(mockSession);\n\n        doReturn(mockBinary).when(testObj).getResourceFromPath(externalPath);\n        when(mockBinary.getFixity(any(IdentifierConverter.class))).thenReturn(expected);\n        when(mockBinary.getPath()).thenReturn(externalPath);\n\n        final RdfStream actual = testObj.getDatastreamFixity(externalPath, mockRequest, uriInfo);\n\n        assertEquals(expected, actual);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "bCommit": "9eafbbc66b",
    "aCommit": "0fab585827",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockBinary.getPath()).thenReturn(externalPath);",
          "type": "ADD",
          "lineNo": 82
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getPath()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getPath()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String externalPath"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        83
      ]
    },
    "aCommitTime": 1414616719,
    "ID": "fcrepo/fcrepo:30",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraVersionsTest.testRevertToVersion()",
    "bSource": {
      "startLine": 100,
      "code": "@Test\n    public void testRevertToVersion() throws RepositoryException {\n        doReturn(mockResource).when(testObj).unversionedResource();\n        final Response response = testObj.revertToVersion();\n        verify(mockVersions).revertToVersion(mockSession, path, versionLabel);\n        assertNotNull(response);\n    }"
    },
    "aSource": {
      "startLine": 100,
      "code": "@Test\n    public void testRevertToVersion() throws RepositoryException {\n        doReturn(path).when(testObj).unversionedResourcePath();\n        final Response response = testObj.revertToVersion();\n        verify(mockVersions).revertToVersion(mockSession, path, versionLabel);\n        assertNotNull(response);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "bCommit": "feb74ecc95",
    "aCommit": "8d5e0560b7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "doReturn(mockResource).when(testObj).unversionedResource();",
          "type": "DELETE",
          "lineNo": 102
        }
      ],
      "targetChanges": [
        {
          "line": "doReturn(path).when(testObj).unversionedResourcePath();",
          "type": "ADD",
          "lineNo": 102
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "unversionedResource()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtInvocation",
          "value": "doReturn(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtExecutableReference",
          "value": "doReturn(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraVersions testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "unversionedResource()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "unversionedResourcePath()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtInvocation",
          "value": "doReturn(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "doReturn(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraVersions testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "unversionedResourcePath()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "unversionedResource",
          "childCount": 1
        },
        "dstNode": {
          "label": "unversionedResourcePath",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockResource",
          "childCount": 1
        },
        "dstNode": {
          "label": "path",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        102
      ]
    },
    "aCommitTime": 1414599408,
    "ID": "fcrepo/fcrepo:301",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraVersionsTest.testRemoveVersionFailure()",
    "bSource": {
      "startLine": 122,
      "code": "@Test (expected = PathNotFoundException.class)\n    public void testRemoveVersionFailure() throws RepositoryException {\n        doThrow(PathNotFoundException.class).when(testObj).unversionedResource();\n        testObj.removeVersion();\n    }"
    },
    "aSource": {
      "startLine": 122,
      "code": "@Test (expected = PathNotFoundException.class)\n    public void testRemoveVersionFailure() throws RepositoryException {\n        doThrow(PathNotFoundException.class).when(testObj).unversionedResourcePath();\n        testObj.removeVersion();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "bCommit": "feb74ecc95",
    "aCommit": "8d5e0560b7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "doThrow(PathNotFoundException.class).when(testObj).unversionedResource();",
          "type": "DELETE",
          "lineNo": 124
        }
      ],
      "targetChanges": [
        {
          "line": "doThrow(PathNotFoundException.class).when(testObj).unversionedResourcePath();",
          "type": "ADD",
          "lineNo": 124
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "unversionedResource()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtInvocation",
          "value": "doThrow(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "doThrow(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraVersions testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "unversionedResource()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "unversionedResourcePath()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtInvocation",
          "value": "doThrow(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "doThrow(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraVersions testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "unversionedResourcePath()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "unversionedResource",
          "childCount": 1
        },
        "dstNode": {
          "label": "unversionedResourcePath",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        124
      ]
    },
    "aCommitTime": 1414599408,
    "ID": "fcrepo/fcrepo:302",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraVersionsTest.testRevertToVersionFailure()",
    "bSource": {
      "startLine": 108,
      "code": "@Test (expected = PathNotFoundException.class)\n    public void testRevertToVersionFailure() throws RepositoryException {\n        doThrow(PathNotFoundException.class).when(testObj).unversionedResource();\n        testObj.revertToVersion();\n    }"
    },
    "aSource": {
      "startLine": 108,
      "code": "@Test (expected = PathNotFoundException.class)\n    public void testRevertToVersionFailure() throws RepositoryException {\n        doThrow(PathNotFoundException.class).when(testObj).unversionedResourcePath();\n        testObj.revertToVersion();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "bCommit": "feb74ecc95",
    "aCommit": "8d5e0560b7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "doThrow(PathNotFoundException.class).when(testObj).unversionedResource();",
          "type": "DELETE",
          "lineNo": 110
        }
      ],
      "targetChanges": [
        {
          "line": "doThrow(PathNotFoundException.class).when(testObj).unversionedResourcePath();",
          "type": "ADD",
          "lineNo": 110
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "unversionedResource()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtInvocation",
          "value": "doThrow(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "doThrow(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraVersions testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "unversionedResource()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "unversionedResourcePath()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtInvocation",
          "value": "doThrow(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "doThrow(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraVersions testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "unversionedResourcePath()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "unversionedResource",
          "childCount": 1
        },
        "dstNode": {
          "label": "unversionedResourcePath",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        110
      ]
    },
    "aCommitTime": 1414599408,
    "ID": "fcrepo/fcrepo:303",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraVersionsTest.testRemoveVersion()",
    "bSource": {
      "startLine": 114,
      "code": "@Test\n    public void testRemoveVersion() throws RepositoryException {\n        doReturn(mockResource).when(testObj).unversionedResource();\n        final Response response = testObj.removeVersion();\n        verify(mockVersions).removeVersion(mockSession, path, versionLabel);\n        assertNotNull(response);\n    }"
    },
    "aSource": {
      "startLine": 114,
      "code": "@Test\n    public void testRemoveVersion() throws RepositoryException {\n        doReturn(path).when(testObj).unversionedResourcePath();\n        final Response response = testObj.removeVersion();\n        verify(mockVersions).removeVersion(mockSession, path, versionLabel);\n        assertNotNull(response);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "bCommit": "feb74ecc95",
    "aCommit": "8d5e0560b7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "doReturn(mockResource).when(testObj).unversionedResource();",
          "type": "DELETE",
          "lineNo": 116
        }
      ],
      "targetChanges": [
        {
          "line": "doReturn(path).when(testObj).unversionedResourcePath();",
          "type": "ADD",
          "lineNo": 116
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "unversionedResource()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtInvocation",
          "value": "doReturn(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtExecutableReference",
          "value": "doReturn(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraVersions testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "unversionedResource()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "unversionedResourcePath()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtInvocation",
          "value": "doReturn(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "doReturn(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.http.api.FedoraVersions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraVersions testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "unversionedResourcePath()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "unversionedResource",
          "childCount": 1
        },
        "dstNode": {
          "label": "unversionedResourcePath",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockResource",
          "childCount": 1
        },
        "dstNode": {
          "label": "path",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        116
      ]
    },
    "aCommitTime": 1414599408,
    "ID": "fcrepo/fcrepo:304",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testWriteProperty()",
    "bSource": {
      "startLine": 58,
      "code": "@Test\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 58,
      "code": "@Test(expected = RepositoryException.class)\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "bCommit": "9b27b817b5",
    "aCommit": "b7cdce2c73",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test",
          "type": "DELETE",
          "lineNo": 58
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = RepositoryException.class)",
          "type": "ADD",
          "lineNo": 58
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Annotation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "class",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        80
      ]
    },
    "aCommitTime": 1414543221,
    "ID": "fcrepo/fcrepo:445",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testRemoveProperty()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testRemoveProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:remove \" +\n                \"'some-property-to-remove' }\";\n\n        // Write the properties\n        final DefaultIdentifierTranslator graphSubjects = new DefaultIdentifierTranslator(session);\n        object.updateProperties(graphSubjects, sparql, new RdfStream());\n\n        // Verify property exists\n        final Property property = object.getNode().getProperty(\"fedora:remove\");\n        assertNotNull(property);\n        assertEquals(\"some-property-to-remove\", property.getValues()[0].getString());\n\n        final String sparqlRemove = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"DELETE {\" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s \" +\n                \"} WHERE { \" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s\" +\n                \"}\";\n\n        // Remove the properties\n        object.updateProperties(graphSubjects,\n                sparqlRemove,\n                object.getTriples(graphSubjects, PropertiesRdfContext.class));\n\n        // Persist the object (although the propery will be removed from memory without this.)\n        session.save();\n\n        // Verify\n        boolean thrown = false;\n        try {\n            object.getNode().getProperty(\"fedora:remove\");\n        } catch (final PathNotFoundException e) {\n            thrown = true;\n        }\n        assertTrue(\"Exception expected - property should be missing\", thrown);\n\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test(expected = RepositoryException.class)\n    public void testRemoveProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:remove \" +\n                \"'some-property-to-remove' }\";\n\n        // Write the properties\n        final DefaultIdentifierTranslator graphSubjects = new DefaultIdentifierTranslator(session);\n        object.updateProperties(graphSubjects, sparql, new RdfStream());\n\n        // Verify property exists\n        final Property property = object.getNode().getProperty(\"fedora:remove\");\n        assertNotNull(property);\n        assertEquals(\"some-property-to-remove\", property.getValues()[0].getString());\n\n        final String sparqlRemove = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"DELETE {\" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s \" +\n                \"} WHERE { \" +\n                \"  <info:fedora\" + testFilePath() + \"> fedora:remove ?s\" +\n                \"}\";\n\n        // Remove the properties\n        object.updateProperties(graphSubjects,\n                sparqlRemove,\n                object.getTriples(graphSubjects, PropertiesRdfContext.class));\n\n        // Persist the object (although the propery will be removed from memory without this.)\n        session.save();\n\n        // Verify\n        boolean thrown = false;\n        try {\n            object.getNode().getProperty(\"fedora:remove\");\n        } catch (final PathNotFoundException e) {\n            thrown = true;\n        }\n        assertTrue(\"Exception expected - property should be missing\", thrown);\n\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "bCommit": "9b27b817b5",
    "aCommit": "b7cdce2c73",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test",
          "type": "DELETE",
          "lineNo": 84
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = RepositoryException.class)",
          "type": "ADD",
          "lineNo": 84
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Annotation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "class",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        119
      ]
    },
    "aCommitTime": 1414543221,
    "ID": "fcrepo/fcrepo:446",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPatchBinaryDescription()",
    "bSource": {
      "startLine": 679,
      "code": "@Test\n    public void testPatchBinaryDescription() throws Exception {\n\n        final Datastream mockObject = (Datastream)setResource(Datastream.class);\n        when(mockObject.getBinary()).thenReturn(mockBinary);\n\n        when(mockBinary.getTriples(idTranslator, PropertiesRdfContext.class)).thenReturn(\n                new RdfStream(new Triple(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n\n        doReturn(mockObject).when(testObj).resource();\n\n        testObj.updateSparql(toInputStream(\"xyz\"));\n    }"
    },
    "aSource": {
      "startLine": 678,
      "code": "@Test\n    public void testPatchBinaryDescription() throws Exception {\n\n        final Datastream mockObject = (Datastream)setResource(Datastream.class);\n        when(mockObject.getBinary()).thenReturn(mockBinary);\n\n        when(mockBinary.getTriples(eq(idTranslator), any(List.class))).thenReturn(\n                new RdfStream(new Triple(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n\n        doReturn(mockObject).when(testObj).resource();\n\n        testObj.updateSparql(toInputStream(\"xyz\"));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "feb74ecc95",
    "aCommit": "420a80a974",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockBinary.getTriples(idTranslator, PropertiesRdfContext.class)).thenReturn(",
          "type": "DELETE",
          "lineNo": 685
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockBinary.getTriples(eq(idTranslator), any(List.class))).thenReturn(",
          "type": "ADD",
          "lineNo": 684
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.util.List",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "idTranslator",
          "childCount": 1
        },
        "dstNode": {
          "label": "idTranslator",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "class",
          "childCount": 1
        },
        "dstNode": {
          "label": "class",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        684
      ]
    },
    "aCommitTime": 1414530366,
    "ID": "fcrepo/fcrepo:156",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithBinaryDescription()",
    "bSource": {
      "startLine": 547,
      "code": "@Test\n    public void testGetWithBinaryDescription() throws Exception {\n        final Datastream mockResource = (Datastream)setResource(Datastream.class);\n        when(mockResource.getBinary()).thenReturn(mockBinary);\n        when(mockBinary.getTriples(idTranslator, PropertiesRdfContext.class)).thenReturn(\n                new RdfStream(new Triple(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + idTranslator.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\",\n                \"child:properties\"\n        )));\n\n    }"
    },
    "aSource": {
      "startLine": 546,
      "code": "@Test\n    public void testGetWithBinaryDescription() throws Exception {\n        final Datastream mockResource = (Datastream)setResource(Datastream.class);\n        when(mockResource.getBinary()).thenReturn(mockBinary);\n        when(mockBinary.getTriples(eq(idTranslator), any(List.class))).thenReturn(new RdfStream(new Triple\n                (createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + idTranslator.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\",\n                \"child:properties\"\n        )));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "feb74ecc95",
    "aCommit": "420a80a974",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockBinary.getTriples(idTranslator, PropertiesRdfContext.class)).thenReturn(",
          "type": "DELETE",
          "lineNo": 551
        },
        {
          "line": "new RdfStream(new Triple(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));",
          "type": "DELETE",
          "lineNo": 552
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockBinary.getTriples(eq(idTranslator), any(List.class))).thenReturn(new RdfStream(new Triple",
          "type": "ADD",
          "lineNo": 550
        },
        {
          "line": "(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));",
          "type": "ADD",
          "lineNo": 551
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream(Iterator)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'mockBinary'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'called'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'child:properties'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter idTranslator"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream(Iterator)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'mockBinary'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'called'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'child:properties'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.util.List",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "idTranslator",
          "childCount": 1
        },
        "dstNode": {
          "label": "idTranslator",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "class",
          "childCount": 1
        },
        "dstNode": {
          "label": "class",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        550
      ]
    },
    "aCommitTime": 1414530366,
    "ID": "fcrepo/fcrepo:157",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.FedoraResourceImplTest.testDeleteLeavesATombstone()",
    "bSource": {
      "startLine": 432,
      "code": "@Test\n    public void testDeleteLeavesATombstone() throws RepositoryException {\n        when(mockNode.getReferences()).thenReturn(new TestPropertyIterator());\n        when(mockNode.getName()).thenReturn(\"a\");\n        when(mockNode.getParent()).thenReturn(mockContainer);\n        when(mockNode.getDepth()).thenReturn(2);\n        when(mockContainer.getNode(\"a\")).thenThrow(new PathNotFoundException());\n        testObj.delete();\n        verify(mockNode).remove();\n        verify(mockContainer).addNode(\"a\", FEDORA_TOMBSTONE);\n    }"
    },
    "aSource": {
      "startLine": 433,
      "code": "@Test\n    public void testDeleteLeavesATombstone() throws RepositoryException {\n        when(mockNode.getReferences()).thenReturn(new TestPropertyIterator());\n        when(mockNode.getWeakReferences()).thenReturn(new TestPropertyIterator());\n        when(mockNode.getName()).thenReturn(\"a\");\n        when(mockNode.getParent()).thenReturn(mockContainer);\n        when(mockNode.getDepth()).thenReturn(2);\n        when(mockContainer.getNode(\"a\")).thenThrow(new PathNotFoundException());\n        testObj.delete();\n        verify(mockNode).remove();\n        verify(mockContainer).addNode(\"a\", FEDORA_TOMBSTONE);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraResourceImplTest.java",
    "bCommit": "a91c46bced",
    "aCommit": "e84d26a4d6",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockNode.getWeakReferences()).thenReturn(new TestPropertyIterator());",
          "type": "ADD",
          "lineNo": 436
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.impl.testutilities.TestPropertyIterator)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getWeakReferences()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getWeakReferences()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.impl.testutilities.TestPropertyIterator)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.testutilities.TestPropertyIterator.TestPropertyIterator(Property[])"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.testutilities.TestPropertyIterator"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        440
      ]
    },
    "aCommitTime": 1414450490,
    "ID": "fcrepo/fcrepo:522",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.FedoraResourceImplTest.testDelete()",
    "bSource": {
      "startLine": 425,
      "code": "@Test\n    public void testDelete() throws RepositoryException {\n        when(mockNode.getReferences()).thenReturn(new TestPropertyIterator());\n        testObj.delete();\n        verify(mockNode).remove();\n    }"
    },
    "aSource": {
      "startLine": 425,
      "code": "@Test\n    public void testDelete() throws RepositoryException {\n        when(mockNode.getReferences()).thenReturn(new TestPropertyIterator());\n        when(mockNode.getWeakReferences()).thenReturn(new TestPropertyIterator());\n        testObj.delete();\n        verify(mockNode).remove();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraResourceImplTest.java",
    "bCommit": "a91c46bced",
    "aCommit": "e84d26a4d6",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockNode.getWeakReferences()).thenReturn(new TestPropertyIterator());",
          "type": "ADD",
          "lineNo": 428
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.impl.testutilities.TestPropertyIterator)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getWeakReferences()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getWeakReferences()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.impl.testutilities.TestPropertyIterator)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.testutilities.TestPropertyIterator.TestPropertyIterator(Property[])"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.testutilities.TestPropertyIterator"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        428
      ]
    },
    "aCommitTime": 1414450490,
    "ID": "fcrepo/fcrepo:523",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.sparql.JQLResultSetTest.testNextWithLiteralBoolean()",
    "bSource": {
      "startLine": 128,
      "code": "@Test\n    public void testNextWithLiteralBoolean() throws Exception {\n        when(mockValue.getType()).thenReturn(PropertyType.BOOLEAN);\n        when(mockValue.getString()).thenReturn(\"true\");\n        final QuerySolution solution = testObj.next();\n\n        assertEquals(\"true\", solution.get(\"a\").asLiteral().getLexicalForm());\n    }"
    },
    "aSource": {
      "startLine": 128,
      "code": "@Test\n    public void testNextWithLiteralBoolean() throws Exception {\n        when(mockValue.getType()).thenReturn(PropertyType.BOOLEAN);\n        when(mockValue.getBoolean()).thenReturn(true);\n        final QuerySolution solution = testObj.next();\n\n        assertEquals(\"true\", solution.get(\"a\").asLiteral().getLexicalForm());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/sparql/JQLResultSetTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/sparql/JQLResultSetTest.java",
    "bCommit": "e8d77fdee8",
    "aCommit": "6d684a32d1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockValue.getString()).thenReturn(\"true\");",
          "type": "DELETE",
          "lineNo": 131
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockValue.getBoolean()).thenReturn(true);",
          "type": "ADD",
          "lineNo": 131
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getString()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Value mockValue"
        },
        {
          "type": "CtExecutableReference",
          "value": "getString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'true'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getBoolean()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Value mockValue"
        },
        {
          "type": "CtExecutableReference",
          "value": "getBoolean()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"true\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "true",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getString",
          "childCount": 1
        },
        "dstNode": {
          "label": "getBoolean",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        134
      ]
    },
    "aCommitTime": 1414189203,
    "ID": "fcrepo/fcrepo:227",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfRollbackIsNotCalledAtTheRepoRoot()",
    "bSource": {
      "startLine": 143,
      "code": "@Test\n    public void shouldErrorIfRollbackIsNotCalledAtTheRepoRoot()\n            throws RepositoryException {\n        setField(testObj, \"session\", regularSession);\n        final Response commit = testObj.rollback(\"a\");\n        assertEquals(400, commit.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 138,
      "code": "@Test\n    public void shouldErrorIfRollbackIsNotCalledAtTheRepoRoot() {\n        setField(testObj, \"session\", regularSession);\n        final Response commit = testObj.rollback(\"a\");\n        assertEquals(400, commit.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldErrorIfRollbackIsNotCalledAtTheRepoRoot()",
          "type": "DELETE",
          "lineNo": 144
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 145
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldErrorIfRollbackIsNotCalledAtTheRepoRoot() {",
          "type": "ADD",
          "lineNo": 139
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfRollbackIsNotCalledAtTheRepoRoot()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfRollbackIsNotCalledAtTheRepoRoot()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        140
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:249",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfTheContextSessionIsNotATransactionAtRollback()",
    "bSource": {
      "startLine": 135,
      "code": "@Test\n    public void shouldErrorIfTheContextSessionIsNotATransactionAtRollback()\n            throws RepositoryException {\n        setField(testObj, \"session\", regularSession);\n        final Response commit = testObj.rollback(null);\n        assertEquals(400, commit.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 131,
      "code": "@Test\n    public void shouldErrorIfTheContextSessionIsNotATransactionAtRollback() {\n        setField(testObj, \"session\", regularSession);\n        final Response commit = testObj.rollback(null);\n        assertEquals(400, commit.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldErrorIfTheContextSessionIsNotATransactionAtRollback()",
          "type": "DELETE",
          "lineNo": 136
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 137
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldErrorIfTheContextSessionIsNotATransactionAtRollback() {",
          "type": "ADD",
          "lineNo": 132
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfTheContextSessionIsNotATransactionAtRollback()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfTheContextSessionIsNotATransactionAtRollback()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        133
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:250",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldRollBackATransaction()",
    "bSource": {
      "startLine": 129,
      "code": "@Test\n    public void shouldRollBackATransaction() throws RepositoryException {\n        testObj.commit(null);\n        verify(mockTxService).commit(\"123\");\n    }"
    },
    "aSource": {
      "startLine": 125,
      "code": "@Test\n    public void shouldRollBackATransaction() {\n        testObj.commit(null);\n        verify(mockTxService).commit(\"123\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldRollBackATransaction() throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 130
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldRollBackATransaction() {",
          "type": "ADD",
          "lineNo": 126
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldRollBackATransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldRollBackATransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        126
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:251",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldStartANewTransaction()",
    "bSource": {
      "startLine": 89,
      "code": "@Test\n    public void shouldStartANewTransaction() throws RepositoryException, URISyntaxException {\n        setField(testObj, \"session\", regularSession);\n        when(mockTxService.beginTransaction(regularSession, USER_NAME)).thenReturn(mockTx);\n        when(mockRequest.getUserPrincipal()).thenReturn(mockPrincipal);\n        when(mockPrincipal.getName()).thenReturn(USER_NAME);\n        testObj.createTransaction(null, mockRequest);\n        verify(mockTxService).beginTransaction(regularSession, USER_NAME);\n    }"
    },
    "aSource": {
      "startLine": 88,
      "code": "@Test\n    public void shouldStartANewTransaction() throws URISyntaxException {\n        setField(testObj, \"session\", regularSession);\n        when(mockTxService.beginTransaction(regularSession, USER_NAME)).thenReturn(mockTx);\n        when(mockRequest.getUserPrincipal()).thenReturn(mockPrincipal);\n        when(mockPrincipal.getName()).thenReturn(USER_NAME);\n        testObj.createTransaction(null, mockRequest);\n        verify(mockTxService).beginTransaction(regularSession, USER_NAME);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldStartANewTransaction() throws RepositoryException, URISyntaxException {",
          "type": "DELETE",
          "lineNo": 90
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldStartANewTransaction() throws URISyntaxException {",
          "type": "ADD",
          "lineNo": 89
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldStartANewTransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldStartANewTransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        89
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:252",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfCommitIsNotCalledAtTheRepoRoot()",
    "bSource": {
      "startLine": 121,
      "code": "@Test\n    public void shouldErrorIfCommitIsNotCalledAtTheRepoRoot()\n            throws RepositoryException {\n        setField(testObj, \"session\", regularSession);\n        final Response commit = testObj.commit(\"a\");\n        assertEquals(400, commit.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 118,
      "code": "@Test\n    public void shouldErrorIfCommitIsNotCalledAtTheRepoRoot() {\n        setField(testObj, \"session\", regularSession);\n        final Response commit = testObj.commit(\"a\");\n        assertEquals(400, commit.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldErrorIfCommitIsNotCalledAtTheRepoRoot()",
          "type": "DELETE",
          "lineNo": 122
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 123
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldErrorIfCommitIsNotCalledAtTheRepoRoot() {",
          "type": "ADD",
          "lineNo": 119
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfCommitIsNotCalledAtTheRepoRoot()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfCommitIsNotCalledAtTheRepoRoot()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        120
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:253",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldUpdateExpiryOnExistingTransaction()",
    "bSource": {
      "startLine": 99,
      "code": "@Test\n    public void shouldUpdateExpiryOnExistingTransaction()\n            throws RepositoryException, URISyntaxException {\n        when(mockTxService.getTransaction(Mockito.any(TxSession.class))).thenReturn(mockTx);\n        testObj.createTransaction(null, mockRequest);\n        verify(mockTx).updateExpiryDate();\n    }"
    },
    "aSource": {
      "startLine": 98,
      "code": "@Test\n    public void shouldUpdateExpiryOnExistingTransaction() throws URISyntaxException {\n        when(mockTxService.getTransaction(Mockito.any(TxSession.class))).thenReturn(mockTx);\n        testObj.createTransaction(null, mockRequest);\n        verify(mockTx).updateExpiryDate();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldUpdateExpiryOnExistingTransaction()",
          "type": "DELETE",
          "lineNo": 100
        },
        {
          "line": "throws RepositoryException, URISyntaxException {",
          "type": "DELETE",
          "lineNo": 101
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldUpdateExpiryOnExistingTransaction() throws URISyntaxException {",
          "type": "ADD",
          "lineNo": 99
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldUpdateExpiryOnExistingTransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldUpdateExpiryOnExistingTransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        100
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:254",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldCommitATransaction()",
    "bSource": {
      "startLine": 107,
      "code": "@Test\n    public void shouldCommitATransaction() throws RepositoryException {\n        testObj.commit(null);\n        verify(mockTxService).commit(\"123\");\n    }"
    },
    "aSource": {
      "startLine": 105,
      "code": "@Test\n    public void shouldCommitATransaction() {\n        testObj.commit(null);\n        verify(mockTxService).commit(\"123\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldCommitATransaction() throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 108
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldCommitATransaction() {",
          "type": "ADD",
          "lineNo": 106
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldCommitATransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldCommitATransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        106
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:255",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfTheContextSessionIsNotATransaction()",
    "bSource": {
      "startLine": 113,
      "code": "@Test\n    public void shouldErrorIfTheContextSessionIsNotATransaction()\n            throws RepositoryException {\n        setField(testObj, \"session\", regularSession);\n        final Response commit = testObj.commit(null);\n        assertEquals(400, commit.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 111,
      "code": "@Test\n    public void shouldErrorIfTheContextSessionIsNotATransaction() {\n        setField(testObj, \"session\", regularSession);\n        final Response commit = testObj.commit(null);\n        assertEquals(400, commit.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldErrorIfTheContextSessionIsNotATransaction()",
          "type": "DELETE",
          "lineNo": 114
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 115
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldErrorIfTheContextSessionIsNotATransaction() {",
          "type": "ADD",
          "lineNo": 112
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfTheContextSessionIsNotATransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldErrorIfTheContextSessionIsNotATransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        113
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:256",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.api.rdf.HttpTripleUtilTest.shouldAddTriplesFromRegisteredBeans()",
    "bSource": {
      "startLine": 77,
      "code": "@Test\n    public void shouldAddTriplesFromRegisteredBeans()\n            throws RepositoryException {\n        final Map<String, UriAwareResourceModelFactory> mockBeans =\n                of(\"doesnt\", mockBean1, \"matter\", mockBean2);\n        when(mockContext.getBeansOfType(UriAwareResourceModelFactory.class))\n                .thenReturn(mockBeans);\n        when(\n                mockBean1.createModelForResource(eq(mockResource),\n                        eq(mockUriInfo), eq(mockSubjects))).thenReturn(\n                ModelFactory.createDefaultModel());\n        when(\n                mockBean2.createModelForResource(eq(mockResource),\n                        eq(mockUriInfo), eq(mockSubjects))).thenReturn(\n                createDefaultModel());\n\n        final RdfStream rdfStream = new RdfStream();\n        testObj.addHttpComponentModelsForResourceToStream(rdfStream, mockResource,\n                mockUriInfo, mockSubjects);\n        verify(mockBean1).createModelForResource(eq(mockResource),\n                eq(mockUriInfo), eq(mockSubjects));\n        verify(mockBean2).createModelForResource(eq(mockResource),\n                eq(mockUriInfo), eq(mockSubjects));\n    }"
    },
    "aSource": {
      "startLine": 76,
      "code": "@Test\n    public void shouldAddTriplesFromRegisteredBeans() {\n        final Map<String, UriAwareResourceModelFactory> mockBeans =\n                of(\"doesnt\", mockBean1, \"matter\", mockBean2);\n        when(mockContext.getBeansOfType(UriAwareResourceModelFactory.class))\n                .thenReturn(mockBeans);\n        when(\n                mockBean1.createModelForResource(eq(mockResource),\n                        eq(mockUriInfo), eq(mockSubjects))).thenReturn(\n                ModelFactory.createDefaultModel());\n        when(\n                mockBean2.createModelForResource(eq(mockResource),\n                        eq(mockUriInfo), eq(mockSubjects))).thenReturn(\n                createDefaultModel());\n\n        final RdfStream rdfStream = new RdfStream();\n        testObj.addHttpComponentModelsForResourceToStream(rdfStream, mockResource,\n                mockUriInfo, mockSubjects);\n        verify(mockBean1).createModelForResource(eq(mockResource),\n                eq(mockUriInfo), eq(mockSubjects));\n        verify(mockBean2).createModelForResource(eq(mockResource),\n                eq(mockUriInfo), eq(mockSubjects));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpTripleUtilTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpTripleUtilTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldAddTriplesFromRegisteredBeans()",
          "type": "DELETE",
          "lineNo": 78
        },
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 79
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldAddTriplesFromRegisteredBeans() {",
          "type": "ADD",
          "lineNo": 77
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.commons.api.rdf.HttpTripleUtilTest.shouldAddTriplesFromRegisteredBeans()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.commons.api.rdf.HttpTripleUtilTest.shouldAddTriplesFromRegisteredBeans()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        78
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:257",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.http.FedoraSparqlTest.testRunSparqlQuery()",
    "bSource": {
      "startLine": 165,
      "code": "@Test\n    public void testRunSparqlQuery() throws RepositoryException, IOException {\n        final InputStream input = new ByteArrayInputStream(testSparql.getBytes());\n        final ResultSet resultSet = testObj.runSparqlQuery(input, mockRequest, uriInfo);\n        assertEquals(mockResults, ((JQLResultSet) resultSet).getQueryResult());\n    }"
    },
    "aSource": {
      "startLine": 165,
      "code": "@Test\n    public void testRunSparqlQuery() throws RepositoryException, IOException {\n        final InputStream input = new ByteArrayInputStream(testSparql.getBytes());\n        final ResultSet resultSet = testObj.runSparqlQuery(input, uriInfo);\n        assertEquals(mockResults, ((JQLResultSet) resultSet).getQueryResult());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/FedoraSparqlTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/FedoraSparqlTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ResultSet resultSet = testObj.runSparqlQuery(input, mockRequest, uriInfo);",
          "type": "DELETE",
          "lineNo": 168
        }
      ],
      "targetChanges": [
        {
          "line": "final ResultSet resultSet = testObj.runSparqlQuery(input, uriInfo);",
          "type": "ADD",
          "lineNo": 168
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.ResultSet resultSet"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.ResultSet"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.http.FedoraSparql.runSparqlQuery(InputStream,Request,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.http.FedoraSparql testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.http.FedoraSparql.runSparqlQuery(InputStream,Request,UriInfo)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.InputStream input"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.ResultSet resultSet"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.ResultSet"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.http.FedoraSparql.runSparqlQuery(InputStream,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.http.FedoraSparql testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.http.FedoraSparql.runSparqlQuery(InputStream,UriInfo)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.InputStream input"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRequest",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        168
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:258",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.http.FedoraSparqlTest.testSparqlServiceDescription()",
    "bSource": {
      "startLine": 149,
      "code": "@Test\n    public void testSparqlServiceDescription() {\n        final Model response = testObj.sparqlServiceDescription(mockRequest, uriInfo).asModel();\n        assertFalse(response.isEmpty());\n        assertTrue(response.contains(null,\n                createProperty(SPARQL_SD_NAMESPACE + \"resultFormat\")));\n    }"
    },
    "aSource": {
      "startLine": 149,
      "code": "@Test\n    public void testSparqlServiceDescription() {\n        final Model response = testObj.sparqlServiceDescription(uriInfo).asModel();\n        assertFalse(response.isEmpty());\n        assertTrue(response.contains(null,\n                createProperty(SPARQL_SD_NAMESPACE + \"resultFormat\")));\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/FedoraSparqlTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/FedoraSparqlTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model response = testObj.sparqlServiceDescription(mockRequest, uriInfo).asModel();",
          "type": "DELETE",
          "lineNo": 151
        }
      ],
      "targetChanges": [
        {
          "line": "final Model response = testObj.sparqlServiceDescription(uriInfo).asModel();",
          "type": "ADD",
          "lineNo": 151
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model response"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.http.FedoraSparql.sparqlServiceDescription(Request,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.http.FedoraSparql testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.http.FedoraSparql.sparqlServiceDescription(Request,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model response"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.http.FedoraSparql.sparqlServiceDescription(UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.http.FedoraSparql testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.http.FedoraSparql.sparqlServiceDescription(UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockRequest",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        151
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:259",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.http.responses.QueryExecutionProviderTest.testWriteTo()",
    "bSource": {
      "startLine": 80,
      "code": "@Test\n    public void testWriteTo() throws WebApplicationException,\n            IllegalArgumentException, IOException {\n\n        final Query sparqlQuery =\n            QueryFactory.create(\"SELECT ?x WHERE { ?x ?y ?z }\");\n\n        try (final QueryExecution testResult =\n                QueryExecutionFactory.create(sparqlQuery, testData)) {\n\n            final ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\n            testObj.writeTo(testResult, QueryExecution.class, mock(Type.class),\n                    null, valueOf(contentTypeResultsXML),\n                    mockMultivaluedMap, outStream);\n            final byte[] results = outStream.toByteArray();\n            assertTrue(\"Got no output from serialization!\", results.length > 0);\n            assertTrue(\"Couldn't find test RDF-object mentioned!\", new String(\n                    results).contains(\"test:subject\"));\n        }\n    }"
    },
    "aSource": {
      "startLine": 79,
      "code": "@Test\n    public void testWriteTo() throws WebApplicationException,\n            IllegalArgumentException {\n\n        final Query sparqlQuery =\n            QueryFactory.create(\"SELECT ?x WHERE { ?x ?y ?z }\");\n\n        try (final QueryExecution testResult =\n                QueryExecutionFactory.create(sparqlQuery, testData)) {\n\n            final ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\n            testObj.writeTo(testResult, QueryExecution.class, mock(Type.class),\n                    null, valueOf(contentTypeResultsXML),\n                    mockMultivaluedMap, outStream);\n            final byte[] results = outStream.toByteArray();\n            assertTrue(\"Got no output from serialization!\", results.length > 0);\n            assertTrue(\"Couldn't find test RDF-object mentioned!\", new String(\n                    results).contains(\"test:subject\"));\n        }\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/responses/QueryExecutionProviderTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/responses/QueryExecutionProviderTest.java",
    "bCommit": "671b99143f",
    "aCommit": "762f049325",
    "hunk": {
      "sourceChanges": [
        {
          "line": "IllegalArgumentException, IOException {",
          "type": "DELETE",
          "lineNo": 82
        }
      ],
      "targetChanges": [
        {
          "line": "IllegalArgumentException {",
          "type": "ADD",
          "lineNo": 81
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtTypeReference",
          "value": "java.lang.IllegalArgumentException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ],
      "targetElements": [
        {
          "type": "CtTypeReference",
          "value": "java.lang.IllegalArgumentException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        81
      ]
    },
    "aCommitTime": 1414095498,
    "ID": "fcrepo/fcrepo:260",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGet()",
    "bSource": {
      "startLine": 286,
      "code": "@Test\n    public void testGet() throws Exception {\n        setResource(FedoraResource.class);\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should have a Link header\", mockResponse.containsHeader(\"Link\"));\n        assertTrue(\"Should have an Allow header\", mockResponse.containsHeader(\"Allow\"));\n        assertTrue(\"Should be an LDP Resource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"Resource>;rel=\\\"type\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n            @Override\n            public String apply(final RDFNode input) {\n                return input.toString();\n            }\n        });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ReferencesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\"\n        )));\n\n    }"
    },
    "aSource": {
      "startLine": 286,
      "code": "@Test\n    public void testGet() throws Exception {\n        setResource(FedoraResource.class);\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should have a Link header\", mockResponse.containsHeader(\"Link\"));\n        assertTrue(\"Should have an Allow header\", mockResponse.containsHeader(\"Allow\"));\n        assertTrue(\"Should be an LDP Resource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"Resource>;rel=\\\"type\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n            @Override\n            public String apply(final RDFNode input) {\n                return input.toString();\n            }\n        });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ReferencesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\"\n        )));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "58e32d1305",
    "aCommit": "53e2b1ab20",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\",",
          "type": "DELETE",
          "lineNo": 310
        }
      ],
      "targetChanges": [
        {
          "line": "\"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",",
          "type": "ADD",
          "lineNo": 310
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        305
      ]
    },
    "aCommitTime": 1413820405,
    "ID": "fcrepo/fcrepo:197",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithBinaryDescription()",
    "bSource": {
      "startLine": 476,
      "code": "@Test\n    public void testGetWithBinaryDescription() throws Exception {\n        final Datastream mockResource = (Datastream)setResource(Datastream.class);\n        when(mockResource.getBinary()).thenReturn(mockBinary);\n        when(mockBinary.getTriples(identifierConverter, PropertiesRdfContext.class)).thenReturn(\n                new RdfStream(new Triple(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">;rel=\\\"describes\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ReferencesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\",\n                \"child:properties\"\n        )));\n\n    }"
    },
    "aSource": {
      "startLine": 476,
      "code": "@Test\n    public void testGetWithBinaryDescription() throws Exception {\n        final Datastream mockResource = (Datastream)setResource(Datastream.class);\n        when(mockResource.getBinary()).thenReturn(mockBinary);\n        when(mockBinary.getTriples(identifierConverter, PropertiesRdfContext.class)).thenReturn(\n                new RdfStream(new Triple(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">;rel=\\\"describes\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ReferencesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\",\n                \"child:properties\"\n        )));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "58e32d1305",
    "aCommit": "53e2b1ab20",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\",",
          "type": "DELETE",
          "lineNo": 506
        }
      ],
      "targetChanges": [
        {
          "line": "\"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",",
          "type": "ADD",
          "lineNo": 506
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        501
      ]
    },
    "aCommitTime": 1413820405,
    "ID": "fcrepo/fcrepo:198",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithObject()",
    "bSource": {
      "startLine": 319,
      "code": "@Test\n    public void testGetWithObject() throws Exception {\n        setResource(FedoraObject.class);\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP DirectContainer\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"DirectContainer>;rel=\\\"type\\\"\"));\n        assertTrue(\"Should advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ReferencesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\"\n        )));\n\n    }"
    },
    "aSource": {
      "startLine": 319,
      "code": "@Test\n    public void testGetWithObject() throws Exception {\n        setResource(FedoraObject.class);\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP DirectContainer\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"DirectContainer>;rel=\\\"type\\\"\"));\n        assertTrue(\"Should advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ReferencesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\"\n        )));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "58e32d1305",
    "aCommit": "53e2b1ab20",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\",",
          "type": "DELETE",
          "lineNo": 343
        }
      ],
      "targetChanges": [
        {
          "line": "\"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\",",
          "type": "ADD",
          "lineNo": 343
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"class org.fcrepo.kernel.impl.rdf.impl.LdpRdfContext\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        338
      ]
    },
    "aCommitTime": 1413820405,
    "ID": "fcrepo/fcrepo:199",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testHeadWithBinary()",
    "bSource": {
      "startLine": 210,
      "code": "@Test\n    public void testHeadWithBinary() throws Exception {\n        final FedoraBinary mockResource = (FedoraBinary)setResource(FedoraBinary.class);\n        when(mockResource.getDescription()).thenReturn(mockDatastream);\n        final Response actual = testObj.head();\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP NonRDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"NonRDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertFalse(\"Should not advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary description\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryDescriptionPath + \"/fcr:metadata\")\n                                + \">;rel=\\\"describedby\\\"\"));\n    }"
    },
    "aSource": {
      "startLine": 210,
      "code": "@Test\n    public void testHeadWithBinary() throws Exception {\n        final FedoraBinary mockResource = (FedoraBinary)setResource(FedoraBinary.class);\n        when(mockResource.getDescription()).thenReturn(mockDatastream);\n        final Response actual = testObj.head();\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP NonRDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"NonRDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertFalse(\"Should not advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary description\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryDescriptionPath + \"/fcr:metadata\")\n                                + \">; rel=\\\"describedby\\\"\"));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "58e32d1305",
    "aCommit": "22ac6bee18",
    "hunk": {
      "sourceChanges": [
        {
          "line": "+ \">;rel=\\\"describedby\\\"\"));",
          "type": "DELETE",
          "lineNo": 223
        }
      ],
      "targetChanges": [
        {
          "line": "+ \">; rel=\\\"describedby\\\"\"));",
          "type": "ADD",
          "lineNo": 223
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>;rel=\"describedby\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>; rel=\"describedby\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\">;rel=\\\"describedby\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\">; rel=\\\"describedby\\\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        220
      ]
    },
    "aCommitTime": 1413818557,
    "ID": "fcrepo/fcrepo:76",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testOptionWithBinaryDescription()",
    "bSource": {
      "startLine": 272,
      "code": "@Test\n    public void testOptionWithBinaryDescription() throws Exception {\n        final Datastream mockResource = (Datastream)setResource(Datastream.class);\n        when(mockResource.getBinary()).thenReturn(mockBinary);\n        final Response actual = testObj.options();\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">;rel=\\\"describes\\\"\"));\n    }"
    },
    "aSource": {
      "startLine": 272,
      "code": "@Test\n    public void testOptionWithBinaryDescription() throws Exception {\n        final Datastream mockResource = (Datastream)setResource(Datastream.class);\n        when(mockResource.getBinary()).thenReturn(mockBinary);\n        final Response actual = testObj.options();\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "58e32d1305",
    "aCommit": "22ac6bee18",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">;rel=\\\"describes\\\"\"));",
          "type": "DELETE",
          "lineNo": 282
        }
      ],
      "targetChanges": [
        {
          "line": ".contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));",
          "type": "ADD",
          "lineNo": 282
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '<'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String binaryPath"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>;rel=\"describes\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '<'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String binaryPath"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>; rel=\"describes\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\">;rel=\\\"describes\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\">; rel=\\\"describes\\\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        280
      ]
    },
    "aCommitTime": 1413818557,
    "ID": "fcrepo/fcrepo:77",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testOptionWithBinary()",
    "bSource": {
      "startLine": 258,
      "code": "@Test\n    public void testOptionWithBinary() throws Exception {\n        final FedoraBinary mockResource = (FedoraBinary)setResource(FedoraBinary.class);\n        when(mockResource.getDescription()).thenReturn(mockDatastream);\n        final Response actual = testObj.options();\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertFalse(\"Should not advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary description\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryDescriptionPath + \"/fcr:metadata\")\n                                + \">;rel=\\\"describedby\\\"\"));\n    }"
    },
    "aSource": {
      "startLine": 258,
      "code": "@Test\n    public void testOptionWithBinary() throws Exception {\n        final FedoraBinary mockResource = (FedoraBinary)setResource(FedoraBinary.class);\n        when(mockResource.getDescription()).thenReturn(mockDatastream);\n        final Response actual = testObj.options();\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertFalse(\"Should not advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary description\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryDescriptionPath + \"/fcr:metadata\")\n                                + \">; rel=\\\"describedby\\\"\"));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "58e32d1305",
    "aCommit": "22ac6bee18",
    "hunk": {
      "sourceChanges": [
        {
          "line": "+ \">;rel=\\\"describedby\\\"\"));",
          "type": "DELETE",
          "lineNo": 269
        }
      ],
      "targetChanges": [
        {
          "line": "+ \">; rel=\\\"describedby\\\"\"));",
          "type": "ADD",
          "lineNo": 269
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>;rel=\"describedby\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>; rel=\"describedby\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\">;rel=\\\"describedby\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\">; rel=\\\"describedby\\\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        266
      ]
    },
    "aCommitTime": 1413818557,
    "ID": "fcrepo/fcrepo:78",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testHeadWithBinaryDescription()",
    "bSource": {
      "startLine": 226,
      "code": "@Test\n    public void testHeadWithBinaryDescription() throws Exception {\n        final Datastream mockResource = (Datastream)setResource(Datastream.class);\n        when(mockResource.getBinary()).thenReturn(mockBinary);\n        final Response actual = testObj.head();\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">;rel=\\\"describes\\\"\"));\n    }"
    },
    "aSource": {
      "startLine": 226,
      "code": "@Test\n    public void testHeadWithBinaryDescription() throws Exception {\n        final Datastream mockResource = (Datastream)setResource(Datastream.class);\n        when(mockResource.getBinary()).thenReturn(mockBinary);\n        final Response actual = testObj.head();\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "58e32d1305",
    "aCommit": "22ac6bee18",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">;rel=\\\"describes\\\"\"));",
          "type": "DELETE",
          "lineNo": 238
        }
      ],
      "targetChanges": [
        {
          "line": ".contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));",
          "type": "ADD",
          "lineNo": 238
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '<'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String binaryPath"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>;rel=\"describes\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '<'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String binaryPath"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>; rel=\"describes\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\">;rel=\\\"describes\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\">; rel=\\\"describes\\\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        236
      ]
    },
    "aCommitTime": 1413818557,
    "ID": "fcrepo/fcrepo:79",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithBinaryDescription()",
    "bSource": {
      "startLine": 476,
      "code": "@Test\n    public void testGetWithBinaryDescription() throws Exception {\n        final Datastream mockResource = (Datastream)setResource(Datastream.class);\n        when(mockResource.getBinary()).thenReturn(mockBinary);\n        when(mockBinary.getTriples(identifierConverter, PropertiesRdfContext.class)).thenReturn(\n                new RdfStream(new Triple(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">;rel=\\\"describes\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ReferencesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\",\n                \"child:properties\"\n        )));\n\n    }"
    },
    "aSource": {
      "startLine": 476,
      "code": "@Test\n    public void testGetWithBinaryDescription() throws Exception {\n        final Datastream mockResource = (Datastream)setResource(Datastream.class);\n        when(mockResource.getBinary()).thenReturn(mockBinary);\n        when(mockBinary.getTriples(identifierConverter, PropertiesRdfContext.class)).thenReturn(\n                new RdfStream(new Triple(createURI(\"mockBinary\"), createURI(\"called\"), createURI(\"child:properties\"))));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP RDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"RDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertTrue(\"Should advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));\n\n        final RdfStream entity = (RdfStream) actual.getEntity();\n        final Model model = entity.asModel();\n        final List<String> rdfNodes = Lists.transform(Lists.newArrayList(model.listObjects()),\n                new Function<RDFNode, String>() {\n                    @Override\n                    public String apply(final RDFNode input) {\n                        return input.toString();\n                    }\n                });\n        assertTrue(\"Expected RDF contexts missing\", rdfNodes.containsAll(ImmutableSet.of(\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.LdpIsMemberOfRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ReferencesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.TypeRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ContainerRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.PropertiesRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ChildrenRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.AclRdfContext\",\n                \"class org.fcrepo.kernel.impl.rdf.impl.ParentRdfContext\",\n                \"child:properties\"\n        )));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "58e32d1305",
    "aCommit": "22ac6bee18",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">;rel=\\\"describes\\\"\"));",
          "type": "DELETE",
          "lineNo": 490
        }
      ],
      "targetChanges": [
        {
          "line": ".contains(\"<\" + identifierConverter.toDomain(binaryPath) + \">; rel=\\\"describes\\\"\"));",
          "type": "ADD",
          "lineNo": 490
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '<'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String binaryPath"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>;rel=\"describes\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '<'"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter.toDomain(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String binaryPath"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>; rel=\"describes\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\">;rel=\\\"describes\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\">; rel=\\\"describes\\\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        488
      ]
    },
    "aCommitTime": 1413818557,
    "ID": "fcrepo/fcrepo:80",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testGetWithBinary()",
    "bSource": {
      "startLine": 457,
      "code": "@Test\n    public void testGetWithBinary() throws Exception {\n        final FedoraBinary mockResource = (FedoraBinary)setResource(FedoraBinary.class);\n        when(mockResource.getDescription()).thenReturn(mockDatastream);\n        when(mockResource.getMimeType()).thenReturn(\"text/plain\");\n        when(mockResource.getContent()).thenReturn(toInputStream(\"xyz\"));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP NonRDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"NonRDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertFalse(\"Should not advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary description\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryDescriptionPath + \"/fcr:metadata\")\n                                + \">;rel=\\\"describedby\\\"\"));\n        assertTrue(IOUtils.toString((InputStream)actual.getEntity()).equals(\"xyz\"));\n    }"
    },
    "aSource": {
      "startLine": 457,
      "code": "@Test\n    public void testGetWithBinary() throws Exception {\n        final FedoraBinary mockResource = (FedoraBinary)setResource(FedoraBinary.class);\n        when(mockResource.getDescription()).thenReturn(mockDatastream);\n        when(mockResource.getMimeType()).thenReturn(\"text/plain\");\n        when(mockResource.getContent()).thenReturn(toInputStream(\"xyz\"));\n        final Response actual = testObj.describe(null);\n        assertEquals(OK.getStatusCode(), actual.getStatus());\n        assertTrue(\"Should be an LDP NonRDFSource\",\n                mockResponse.getHeaders(\"Link\").contains(\"<\" + LDP_NAMESPACE + \"NonRDFSource>;rel=\\\"type\\\"\"));\n        assertFalse(\"Should not advertise Accept-Post flavors\", mockResponse.containsHeader(\"Accept-Post\"));\n        assertFalse(\"Should not advertise Accept-Patch flavors\", mockResponse.containsHeader(\"Accept-Patch\"));\n        assertTrue(\"Should contain a link to the binary description\",\n                mockResponse.getHeaders(\"Link\")\n                        .contains(\"<\" + identifierConverter.toDomain(binaryDescriptionPath + \"/fcr:metadata\")\n                                + \">; rel=\\\"describedby\\\"\"));\n        assertTrue(IOUtils.toString((InputStream)actual.getEntity()).equals(\"xyz\"));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "58e32d1305",
    "aCommit": "22ac6bee18",
    "hunk": {
      "sourceChanges": [
        {
          "line": "+ \">;rel=\\\"describedby\\\"\"));",
          "type": "DELETE",
          "lineNo": 472
        }
      ],
      "targetChanges": [
        {
          "line": "+ \">; rel=\\\"describedby\\\"\"));",
          "type": "ADD",
          "lineNo": 472
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>;rel=\"describedby\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>; rel=\"describedby\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\">;rel=\\\"describedby\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\">; rel=\\\"describedby\\\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        469
      ]
    },
    "aCommitTime": 1413818557,
    "ID": "fcrepo/fcrepo:81",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraBackupIT.shouldRoundTripBackups()",
    "bSource": {
      "startLine": 40,
      "code": "@Test\n    public void shouldRoundTripBackups() throws Exception {\n        final String objName = randomUUID().toString();\n\n        // set up the object\n        final StringBuilder text = new StringBuilder();\n        for (int x = 0; x < 1000; ++x) {\n            text.append(\"data-\" + x);\n        }\n\n        HttpResponse response;\n        // Create object\n        createObject(objName);\n\n        // Create datastream\n        createDatastream(objName, \"testDS\", text.toString());\n\n        // Verify object exists\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n        // back it up\n        final File dir = createTempDir();\n        logger.debug(\"Backing up repository to {}\", dir.getCanonicalPath());\n        final HttpPost backupMethod =\n                new HttpPost(serverAddress + \"fcr:backup\");\n        backupMethod.setEntity(new StringEntity(dir.getCanonicalPath()));\n        response = execute(backupMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n        final String content = EntityUtils.toString(response.getEntity());\n        assertEquals(dir.getCanonicalPath(), content);\n        logger.debug(\"Back up directory was {}\", content);\n\n        // delete it\n        response = execute(new HttpDelete(serverAddress + objName));\n        assertEquals(204, response.getStatusLine().getStatusCode());\n\n        // Verify object removed\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(404, response.getStatusLine().getStatusCode());\n\n        // try to restore it\n        final HttpPost restoreMethod =\n                new HttpPost(serverAddress + \"fcr:restore\");\n        restoreMethod.setEntity(new StringEntity(content));\n        assertEquals(\"Couldn't import!\", 204, getStatus(restoreMethod));\n\n        //check that we made it\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n    }"
    },
    "aSource": {
      "startLine": 39,
      "code": "@Test\n    public void shouldRoundTripBackups() throws Exception {\n        final String objName = randomUUID().toString();\n\n        // set up the object\n        final StringBuilder text = new StringBuilder();\n        for (int x = 0; x < 1000; ++x) {\n            text.append(\"data-\" + x);\n        }\n\n        HttpResponse response;\n        // Create object\n        createObject(objName);\n\n        // Create datastream\n        createDatastream(objName, \"testDS\", text.toString());\n\n        // Verify object exists\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n        // back it up\n        final File dir = createTempDir();\n        logger.debug(\"Backing up repository to {}\", dir.getCanonicalPath());\n        final HttpPost backupMethod =\n                new HttpPost(serverAddress + \"fcr:backup\");\n        backupMethod.setEntity(new StringEntity(dir.getCanonicalPath()));\n        response = execute(backupMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n        final String content = EntityUtils.toString(response.getEntity());\n        assertEquals(dir.getCanonicalPath(), content);\n        logger.debug(\"Back up directory was {}\", content);\n\n        // delete it\n        response = execute(new HttpDelete(serverAddress + objName));\n        assertEquals(204, response.getStatusLine().getStatusCode());\n\n        // Verify object removed\n        assertDeleted(serverAddress + objName);\n\n        // try to restore it\n        final HttpPost restoreMethod =\n                new HttpPost(serverAddress + \"fcr:restore\");\n        restoreMethod.setEntity(new StringEntity(content));\n        assertEquals(\"Couldn't import!\", 204, getStatus(restoreMethod));\n\n        //check that we made it\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBackupIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBackupIT.java",
    "bCommit": "58bdaa218a",
    "aCommit": "82bb176eb7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "response = execute(new HttpGet(serverAddress + objName));",
          "type": "DELETE",
          "lineNo": 79
        },
        {
          "line": "assertEquals(404, response.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 80
        }
      ],
      "targetChanges": [
        {
          "line": "assertDeleted(serverAddress + objName);",
          "type": "ADD",
          "lineNo": 78
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtVariableWrite",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.http.client.methods.HttpGet(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpGet"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '404'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.assertDeleted(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.assertDeleted(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Assignment",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "execute",
          "childCount": 2
        },
        "dstNode": {
          "label": "assertDeleted",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Assignment",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "=",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Assignment",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "execute",
          "childCount": 2
        },
        "dstNode": {
          "label": "assertDeleted",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        79
      ]
    },
    "aCommitTime": 1413668171,
    "ID": "fcrepo/fcrepo:284",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraExportIT.shouldMoveObjectToTheRootLevelUsingTheRepositoryWideApi()",
    "bSource": {
      "startLine": 76,
      "code": "@Test\n    public\n            void\n            shouldMoveObjectToTheRootLevelUsingTheRepositoryWideApi()\n                                                                     throws IOException {\n        final String objName = getRandomUniquePid();\n\n        // set up the object\n        createObject(objName);\n        createDatastream(objName, \"testDS\", \"stuff\");\n\n        // export it\n        logger.debug(\"Attempting to export: \" + objName);\n        final HttpGet getObjMethod =\n            new HttpGet(serverAddress + objName + \"/fcr:export\");\n        HttpResponse response = execute(getObjMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        logger.debug(\"Successfully exported: \" + objName);\n        final String content = EntityUtils.toString(response.getEntity());\n        logger.debug(\"Found exported object: \" + content);\n\n        // delete it\n        execute(new HttpDelete(serverAddress + objName));\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(404, response.getStatusLine().getStatusCode());\n\n        // try to import it\n        final HttpPost importMethod = new HttpPost(serverAddress + \"fcr:import\");\n        importMethod.setEntity(new StringEntity(content));\n        assertEquals(\"Couldn't import!\", 201, getStatus(importMethod));\n\n        // check that we made it\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n    }"
    },
    "aSource": {
      "startLine": 77,
      "code": "@Test\n    public\n            void\n            shouldMoveObjectToTheRootLevelUsingTheRepositoryWideApi()\n                                                                     throws IOException {\n        final String objName = getRandomUniquePid();\n\n        // set up the object\n        createObject(objName);\n        createDatastream(objName, \"testDS\", \"stuff\");\n\n        // export it\n        logger.debug(\"Attempting to export: \" + objName);\n        final HttpGet getObjMethod =\n            new HttpGet(serverAddress + objName + \"/fcr:export\");\n        HttpResponse response = execute(getObjMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        logger.debug(\"Successfully exported: \" + objName);\n        final String content = EntityUtils.toString(response.getEntity());\n        logger.debug(\"Found exported object: \" + content);\n\n        // delete it\n        execute(new HttpDelete(serverAddress + objName));\n        assertDeleted(serverAddress + objName);\n        execute(new HttpDelete(serverAddress + objName + \"/fcr:tombstone\"));\n\n        // try to import it\n        final HttpPost importMethod = new HttpPost(serverAddress + \"fcr:import\");\n        importMethod.setEntity(new StringEntity(content));\n        assertEquals(\"Couldn't import!\", 201, getStatus(importMethod));\n\n        // check that we made it\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraExportIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraExportIT.java",
    "bCommit": "58bdaa218a",
    "aCommit": "82bb176eb7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "response = execute(new HttpGet(serverAddress + objName));",
          "type": "DELETE",
          "lineNo": 99
        },
        {
          "line": "assertEquals(404, response.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 100
        }
      ],
      "targetChanges": [
        {
          "line": "assertDeleted(serverAddress + objName);",
          "type": "ADD",
          "lineNo": 100
        },
        {
          "line": "execute(new HttpDelete(serverAddress + objName + \"/fcr:tombstone\"));",
          "type": "ADD",
          "lineNo": 101
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtVariableWrite",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.http.client.methods.HttpGet(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpGet"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '404'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.assertDeleted(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.assertDeleted(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.http.client.methods.HttpDelete(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpDelete"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/fcr:tombstone'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Assignment",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.http.client.methods.HttpGet()",
          "childCount": 1
        },
        "dstNode": {
          "label": "org.apache.http.client.methods.HttpDelete()",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Assignment",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "=",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertDeleted",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Assignment",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "execute",
          "childCount": 2
        },
        "dstNode": {
          "label": "execute",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "BinaryOperator",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Assignment",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        },
        "dstNode": {
          "label": "PLUS",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        101
      ]
    },
    "aCommitTime": 1413668171,
    "ID": "fcrepo/fcrepo:285",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraExportIT.shouldRoundTripOneObject()",
    "bSource": {
      "startLine": 40,
      "code": "@Test\n    public void shouldRoundTripOneObject() throws IOException {\n        final String objName = getRandomUniquePid();\n\n        // set up the object\n        createObject(objName);\n        createDatastream(objName, \"testDS\", \"stuff\");\n\n        // export it\n        logger.debug(\"Attempting to export: \" + objName);\n        final HttpGet getObjMethod =\n            new HttpGet(serverAddress + objName + \"/fcr:export\");\n        HttpResponse response = execute(getObjMethod);\n        assertEquals(\"application/xml\", response.getEntity().getContentType()\n                .getValue());\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        logger.debug(\"Successfully exported: \" + objName);\n        final String content = EntityUtils.toString(response.getEntity());\n        logger.debug(\"Found exported object: \" + content);\n\n        // delete it\n        execute(new HttpDelete(serverAddress + objName));\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(404, response.getStatusLine().getStatusCode());\n\n        // try to import it\n        final HttpPost importMethod = new HttpPost(serverAddress + \"fcr:import\");\n        importMethod.setEntity(new StringEntity(content));\n        assertEquals(\"Couldn't import!\", 201, getStatus(importMethod));\n\n        // check that we made it\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n    }"
    },
    "aSource": {
      "startLine": 40,
      "code": "@Test\n    public void shouldRoundTripOneObject() throws IOException {\n        final String objName = getRandomUniquePid();\n\n        // set up the object\n        createObject(objName);\n        createDatastream(objName, \"testDS\", \"stuff\");\n\n        // export it\n        logger.debug(\"Attempting to export: \" + objName);\n        final HttpGet getObjMethod =\n            new HttpGet(serverAddress + objName + \"/fcr:export\");\n        HttpResponse response = execute(getObjMethod);\n        assertEquals(\"application/xml\", response.getEntity().getContentType()\n                .getValue());\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        logger.debug(\"Successfully exported: \" + objName);\n        final String content = EntityUtils.toString(response.getEntity());\n        logger.debug(\"Found exported object: \" + content);\n\n        // delete it\n        execute(new HttpDelete(serverAddress + objName));\n        assertDeleted(serverAddress + objName);\n        final HttpResponse tombstoneResponse = execute(new HttpDelete(serverAddress + objName + \"/fcr:tombstone\"));\n        assertEquals(204, tombstoneResponse.getStatusLine().getStatusCode());\n\n        // try to import it\n        final HttpPost importMethod = new HttpPost(serverAddress + \"fcr:import\");\n        importMethod.setEntity(new StringEntity(content));\n        assertEquals(\"Couldn't import!\", 201, getStatus(importMethod));\n\n        // check that we made it\n        response = execute(new HttpGet(serverAddress + objName));\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraExportIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraExportIT.java",
    "bCommit": "58bdaa218a",
    "aCommit": "82bb176eb7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "response = execute(new HttpGet(serverAddress + objName));",
          "type": "DELETE",
          "lineNo": 62
        },
        {
          "line": "assertEquals(404, response.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 63
        }
      ],
      "targetChanges": [
        {
          "line": "assertDeleted(serverAddress + objName);",
          "type": "ADD",
          "lineNo": 62
        },
        {
          "line": "final HttpResponse tombstoneResponse = execute(new HttpDelete(serverAddress + objName + \"/fcr:tombstone\"));",
          "type": "ADD",
          "lineNo": 63
        },
        {
          "line": "assertEquals(204, tombstoneResponse.getStatusLine().getStatusCode());",
          "type": "ADD",
          "lineNo": 64
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtVariableWrite",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.http.client.methods.HttpGet(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpGet"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '404'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.assertDeleted(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.assertDeleted(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.HttpResponse tombstoneResponse"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.HttpResponse"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.http.client.methods.HttpDelete(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpDelete"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/fcr:tombstone'"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '204'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse tombstoneResponse"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "404",
          "childCount": 0
        },
        "dstNode": {
          "label": "204",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Assignment",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.http.client.methods.HttpGet()",
          "childCount": 1
        },
        "dstNode": {
          "label": "org.apache.http.client.methods.HttpDelete()",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "response",
          "childCount": 0
        },
        "dstNode": {
          "label": "tombstoneResponse",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Assignment",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "=",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertDeleted",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "tombstoneResponse",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Assignment",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "execute",
          "childCount": 2
        },
        "dstNode": {
          "label": "execute",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "BinaryOperator",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Assignment",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        },
        "dstNode": {
          "label": "PLUS",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        63
      ]
    },
    "aCommitTime": 1413668171,
    "ID": "fcrepo/fcrepo:286",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraObjectImplIT.testObjectGraphWithUriProperty()",
    "bSource": {
      "startLine": 143,
      "code": "@Test\n    public void testObjectGraphWithUriProperty() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.findOrCreateObject(session, \"/graphObject\");\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Resource graphSubject = subjects.reverse().convert(object.getNode());\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> some:urlProperty \" +\n                \"<\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        final String prefix = session.getWorkspace().getNamespaceRegistry().getPrefix(\"info:some#\");\n\n        assertNotNull(object.getNode().getProperty(prefix + \":urlProperty\"));\n\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"DELETE { <\" + graphSubject + \"> some:urlProperty \" +\n                \"<\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertFalse(object.getNode().hasProperty(prefix + \":urlProperty_ref\"));\n\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"INSERT DATA { <\" + graphSubject + \"> some:urlProperty <\" + graphSubject + \">;\\n\" +\n                \"       some:urlProperty <info:somewhere/else> . }\",\n                object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertEquals(1, object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues().length);\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n    }"
    },
    "aSource": {
      "startLine": 143,
      "code": "@Test\n    public void testObjectGraphWithUriProperty() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.findOrCreateObject(session, \"/graphObject\");\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Resource graphSubject = subjects.reverse().convert(object);\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> some:urlProperty \" +\n                \"<\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        final String prefix = session.getWorkspace().getNamespaceRegistry().getPrefix(\"info:some#\");\n\n        assertNotNull(object.getNode().getProperty(prefix + \":urlProperty\"));\n\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"DELETE { <\" + graphSubject + \"> some:urlProperty \" +\n                \"<\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertFalse(object.getNode().hasProperty(prefix + \":urlProperty_ref\"));\n\n\n        object.updateProperties(subjects, \"PREFIX some: <info:some#>\\n\" +\n                \"INSERT DATA { <\" + graphSubject + \"> some:urlProperty <\" + graphSubject + \">;\\n\" +\n                \"       some:urlProperty <info:somewhere/else> . }\",\n                object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertEquals(1, object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues().length);\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "bCommit": "019365e504",
    "aCommit": "affd8b051e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Resource graphSubject = subjects.reverse().convert(object.getNode());",
          "type": "DELETE",
          "lineNo": 149
        }
      ],
      "targetChanges": [
        {
          "line": "final Resource graphSubject = subjects.reverse().convert(object);",
          "type": "ADD",
          "lineNo": 149
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Resource"
        },
        {
          "type": "CtInvocation",
          "value": "convert(org.fcrepo.kernel.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "convert(org.fcrepo.kernel.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Resource"
        },
        {
          "type": "CtInvocation",
          "value": "convert(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "convert(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "object",
          "childCount": 0
        },
        "dstNode": {
          "label": "object",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        149
      ]
    },
    "aCommitTime": 1413564426,
    "ID": "fcrepo/fcrepo:412",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraObjectImplIT.testObjectGraph()",
    "bSource": {
      "startLine": 66,
      "code": "@Test\n    public void testObjectGraph() throws Exception {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.findOrCreateObject(session, \"/graphObject\");\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Model model = object.getTriples(subjects, PropertiesRdfContext.class).asModel();\n\n        final Resource graphSubject = subjects.reverse().convert(object.getNode());\n\n        assertFalse(\"Graph store should not contain JCR prefixes\",\n                    compile(\"jcr\").matcher(model.toString()).find());\n        assertFalse(\"Graph store should contain our fcrepo prefix\",\n                    compile(\"fcrepo\")\n                    .matcher(model.toString()).find());\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"INSERT { <http://example/egbook> dc:title \" +\n                \"\\\"This is an example of an update that will be \" +\n                \"ignored\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> dc:title \" +\n                \"\\\"This is an example title\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n\n        final Value[] values = object.getNode().getProperty(\"dc:title\").getValues();\n        assertTrue(values.length > 0);\n\n        assertTrue(values[0]\n                       .getString(),\n                      values[0]\n                          .getString().equals(\"This is an example title\"));\n\n\n        object.updateProperties(subjects, \"PREFIX myurn: <info:myurn/>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> myurn:info \" +\n                \"\\\"This is some example data\\\"} WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        final Value value =\n            object.getNode().getProperty(object.getNode().getSession()\n                                         .getNamespacePrefix(\"info:myurn/\") +\n                                         \":info\").getValues()[0];\n\n        assertEquals(\"This is some example data\", value.getString());\n\n        object.updateProperties(subjects, \"PREFIX fedora-rels-ext: <\"\n                + RELATIONS_NAMESPACE + \">\\n\" +\n                \"INSERT { <\" + graphSubject + \"> fedora-rels-ext:\" +\n                \"isPartOf <\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertTrue(object.getNode().getProperty(\"fedorarelsext:isPartOf\")\n                   .getValues()[0].getString(),\n                   object.getNode().getProperty(\"fedorarelsext:isPartOf\")\n                   .getValues()[0].getString()\n                   .equals(object.getNode().getIdentifier()));\n\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"DELETE { <\" + graphSubject + \"> dc:title \" +\n                \"\\\"This is an example title\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertFalse(\"Found unexpected dc:title\",\n                    object.getNode().hasProperty(\"dc:title\"));\n\n        object.updateProperties(subjects, \"PREFIX fedora-rels-ext: <\" +\n                RELATIONS_NAMESPACE + \">\\n\" +\n                \"DELETE { <\" + graphSubject + \"> \" +\n                \"fedora-rels-ext:isPartOf <\" + graphSubject + \"> \" +\n                \"} WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n        assertFalse(\"found unexpected reference\",\n                    object.getNode().hasProperty(\"fedorarelsext:isPartOf\"));\n\n        session.save();\n\n    }"
    },
    "aSource": {
      "startLine": 66,
      "code": "@Test\n    public void testObjectGraph() throws Exception {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.findOrCreateObject(session, \"/graphObject\");\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Model model = object.getTriples(subjects, PropertiesRdfContext.class).asModel();\n\n        final Resource graphSubject = subjects.reverse().convert(object);\n\n        assertFalse(\"Graph store should not contain JCR prefixes\",\n                    compile(\"jcr\").matcher(model.toString()).find());\n        assertFalse(\"Graph store should contain our fcrepo prefix\",\n                    compile(\"fcrepo\")\n                    .matcher(model.toString()).find());\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"INSERT { <http://example/egbook> dc:title \" +\n                \"\\\"This is an example of an update that will be \" +\n                \"ignored\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> dc:title \" +\n                \"\\\"This is an example title\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n\n        final Value[] values = object.getNode().getProperty(\"dc:title\").getValues();\n        assertTrue(values.length > 0);\n\n        assertTrue(values[0]\n                       .getString(),\n                      values[0]\n                          .getString().equals(\"This is an example title\"));\n\n\n        object.updateProperties(subjects, \"PREFIX myurn: <info:myurn/>\\n\" +\n                \"INSERT { <\" + graphSubject + \"> myurn:info \" +\n                \"\\\"This is some example data\\\"} WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        final Value value =\n            object.getNode().getProperty(object.getNode().getSession()\n                                         .getNamespacePrefix(\"info:myurn/\") +\n                                         \":info\").getValues()[0];\n\n        assertEquals(\"This is some example data\", value.getString());\n\n        object.updateProperties(subjects, \"PREFIX fedora-rels-ext: <\"\n                + RELATIONS_NAMESPACE + \">\\n\" +\n                \"INSERT { <\" + graphSubject + \"> fedora-rels-ext:\" +\n                \"isPartOf <\" + graphSubject + \"> } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertTrue(object.getNode().getProperty(\"fedorarelsext:isPartOf\")\n                   .getValues()[0].getString(),\n                   object.getNode().getProperty(\"fedorarelsext:isPartOf\")\n                   .getValues()[0].getString()\n                   .equals(object.getNode().getIdentifier()));\n\n\n        object.updateProperties(subjects, \"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                \"DELETE { <\" + graphSubject + \"> dc:title \" +\n                \"\\\"This is an example title\\\" } WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n\n        assertFalse(\"Found unexpected dc:title\",\n                    object.getNode().hasProperty(\"dc:title\"));\n\n        object.updateProperties(subjects, \"PREFIX fedora-rels-ext: <\" +\n                RELATIONS_NAMESPACE + \">\\n\" +\n                \"DELETE { <\" + graphSubject + \"> \" +\n                \"fedora-rels-ext:isPartOf <\" + graphSubject + \"> \" +\n                \"} WHERE {}\", object.getTriples(subjects, PropertiesRdfContext.class));\n        assertFalse(\"found unexpected reference\",\n                    object.getNode().hasProperty(\"fedorarelsext:isPartOf\"));\n\n        session.save();\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "bCommit": "019365e504",
    "aCommit": "affd8b051e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Resource graphSubject = subjects.reverse().convert(object.getNode());",
          "type": "DELETE",
          "lineNo": 74
        }
      ],
      "targetChanges": [
        {
          "line": "final Resource graphSubject = subjects.reverse().convert(object);",
          "type": "ADD",
          "lineNo": 74
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Resource"
        },
        {
          "type": "CtInvocation",
          "value": "convert(org.fcrepo.kernel.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "convert(org.fcrepo.kernel.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Resource"
        },
        {
          "type": "CtInvocation",
          "value": "convert(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "convert(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "object",
          "childCount": 0
        },
        "dstNode": {
          "label": "object",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        74
      ]
    },
    "aCommitTime": 1413564426,
    "ID": "fcrepo/fcrepo:413",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.http.TransformResourcesTest.shouldDecorateModeRootNodesWithRepositoryWideLinks()",
    "bSource": {
      "startLine": 70,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n\n        final NodeType mockNodeType = mock(NodeType.class);\n        when(mockNode.isNodeType(FedoraJcrTypes.ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"not-frozen\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockNode);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo,\n                                              mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SPARQL_ENDPOINT));\n    }"
    },
    "aSource": {
      "startLine": 70,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n\n        final NodeType mockNodeType = mock(NodeType.class);\n        when(mockNode.isNodeType(FedoraJcrTypes.ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"not-frozen\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockResource);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo,\n                                              mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SPARQL_ENDPOINT));\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/TransformResourcesTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/TransformResourcesTest.java",
    "bCommit": "019365e504",
    "aCommit": "affd8b051e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Resource graphSubject = mockSubjects.reverse().convert(mockNode);",
          "type": "DELETE",
          "lineNo": 80
        }
      ],
      "targetChanges": [
        {
          "line": "final Resource graphSubject = mockSubjects.reverse().convert(mockResource);",
          "type": "ADD",
          "lineNo": 80
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Resource"
        },
        {
          "type": "CtInvocation",
          "value": "convert(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator mockSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "convert(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Resource"
        },
        {
          "type": "CtInvocation",
          "value": "convert(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator mockSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "convert(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.FedoraResourceImpl mockResource"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockResource",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        80
      ]
    },
    "aCommitTime": 1413564426,
    "ID": "fcrepo/fcrepo:414",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.LDPathServiceIT.shouldDoStuff()",
    "bSource": {
      "startLine": 70,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");\n        object.getNode().setProperty(\"dc:title\", \"some-title\");\n\n        final String s = \"@prefix dces : <http://purl.org/dc/elements/1.1/>\\n\" +\n                       \"@prefix fcrepo : <\" + REPOSITORY_NAMESPACE + \">\\n\" +\n                           \"id      = . :: xsd:string ;\\n\" +\n                           \"title = dc:title :: xsd:string ;\\n\" +\n                           \"uuid = fcrepo:uuid :: xsd:string ;\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new LDPathTransform(stringReader);\n\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Resource topic = subjects.reverse().convert(object.getNode());\n        final RdfStream triples = object.getTriples(subjects, PropertiesRdfContext.class)\n                                        .topic(topic.asNode());\n        final Map<String, Collection<Object>> stuff = testObj.apply(triples);\n\n        assertNotNull(\"Failed to retrieve results!\", stuff);\n\n        assertTrue(\"Results didn't contain an identifier!\", stuff.containsKey(\"id\"));\n        assertTrue(\"Results didn't contain a title!\", stuff.containsKey(\"title\"));\n\n        assertEquals(\"Received more than one identifier!\", 1, stuff.get(\"id\").size());\n        assertEquals(\"Got wrong subject in identifier!\", subjects.toDomain(\"/testObject\").getURI(), stuff.get(\n                \"id\").iterator().next());\n        assertEquals(\"Got wrong title!\", \"some-title\", stuff.get(\"title\").iterator().next());\n        assertEquals(\"Got wrong UUID!\", object.getNode().getIdentifier(), stuff.get(\"uuid\").iterator().next());\n    }"
    },
    "aSource": {
      "startLine": 70,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");\n        object.getNode().setProperty(\"dc:title\", \"some-title\");\n\n        final String s = \"@prefix dces : <http://purl.org/dc/elements/1.1/>\\n\" +\n                       \"@prefix fcrepo : <\" + REPOSITORY_NAMESPACE + \">\\n\" +\n                           \"id      = . :: xsd:string ;\\n\" +\n                           \"title = dc:title :: xsd:string ;\\n\" +\n                           \"uuid = fcrepo:uuid :: xsd:string ;\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new LDPathTransform(stringReader);\n\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Resource topic = subjects.reverse().convert(object);\n        final RdfStream triples = object.getTriples(subjects, PropertiesRdfContext.class)\n                                        .topic(topic.asNode());\n        final Map<String, Collection<Object>> stuff = testObj.apply(triples);\n\n        assertNotNull(\"Failed to retrieve results!\", stuff);\n\n        assertTrue(\"Results didn't contain an identifier!\", stuff.containsKey(\"id\"));\n        assertTrue(\"Results didn't contain a title!\", stuff.containsKey(\"title\"));\n\n        assertEquals(\"Received more than one identifier!\", 1, stuff.get(\"id\").size());\n        assertEquals(\"Got wrong subject in identifier!\", subjects.toDomain(\"/testObject\").getURI(), stuff.get(\n                \"id\").iterator().next());\n        assertEquals(\"Got wrong title!\", \"some-title\", stuff.get(\"title\").iterator().next());\n        assertEquals(\"Got wrong UUID!\", object.getNode().getIdentifier(), stuff.get(\"uuid\").iterator().next());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/LDPathServiceIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/LDPathServiceIT.java",
    "bCommit": "019365e504",
    "aCommit": "affd8b051e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Resource topic = subjects.reverse().convert(object.getNode());",
          "type": "DELETE",
          "lineNo": 87
        }
      ],
      "targetChanges": [
        {
          "line": "final Resource topic = subjects.reverse().convert(object);",
          "type": "ADD",
          "lineNo": 87
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Resource topic"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Resource"
        },
        {
          "type": "CtInvocation",
          "value": "convert(org.fcrepo.kernel.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "convert(org.fcrepo.kernel.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Resource topic"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Resource"
        },
        {
          "type": "CtInvocation",
          "value": "convert(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "convert(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "object",
          "childCount": 0
        },
        "dstNode": {
          "label": "object",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        87
      ]
    },
    "aCommitTime": 1413564426,
    "ID": "fcrepo/fcrepo:415",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.TransactionImplTest.testState()",
    "bSource": {
      "startLine": 100,
      "code": "@Test\n    public void testState() throws RepositoryException {\n        assertEquals(NEW, testObj.getState());\n        when(mockSession.hasPendingChanges()).thenReturn(true, false);\n        assertEquals(DIRTY, testObj.getState());\n        testObj.commit(null);\n    }"
    },
    "aSource": {
      "startLine": 100,
      "code": "@Test\n    public void testState() throws RepositoryException {\n        assertEquals(NEW, testObj.getState());\n        when(mockSession.hasPendingChanges()).thenReturn(true, false);\n        assertEquals(DIRTY, testObj.getState());\n        testObj.commit();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/TransactionImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/TransactionImplTest.java",
    "bCommit": "e81884a30a",
    "aCommit": "6410b59700",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.commit(null);",
          "type": "DELETE",
          "lineNo": 105
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.commit();",
          "type": "ADD",
          "lineNo": 105
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Transaction.commit(VersionService)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Transaction.commit(VersionService)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Transaction.commit()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Transaction.commit()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        105
      ]
    },
    "aCommitTime": 1413413480,
    "ID": "fcrepo/fcrepo:219",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.TransactionImplTest.testCommit()",
    "bSource": {
      "startLine": 69,
      "code": "@Test\n    public void testCommit() throws RepositoryException {\n        testObj.commit(null);\n        verify(mockSession).save();\n        verify(mockSession).logout();\n        assertEquals(COMMITED, testObj.getState());\n        final long update = testObj.getExpires().getTime();\n        assertTrue(update <= currentTimeMillis());\n    }"
    },
    "aSource": {
      "startLine": 69,
      "code": "@Test\n    public void testCommit() throws RepositoryException {\n        testObj.commit();\n        verify(mockSession).save();\n        verify(mockSession).logout();\n        assertEquals(COMMITED, testObj.getState());\n        final long update = testObj.getExpires().getTime();\n        assertTrue(update <= currentTimeMillis());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/TransactionImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/TransactionImplTest.java",
    "bCommit": "e81884a30a",
    "aCommit": "6410b59700",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.commit(null);",
          "type": "DELETE",
          "lineNo": 71
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.commit();",
          "type": "ADD",
          "lineNo": 71
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Transaction.commit(VersionService)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Transaction.commit(VersionService)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Transaction.commit()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Transaction.commit()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        71
      ]
    },
    "aCommitTime": 1413413480,
    "ID": "fcrepo/fcrepo:220",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testCreateVersion()",
    "bSource": {
      "startLine": 59,
      "code": "/*\n  versionService.createVersion( workspace, paths )\n  versionService.revertToVersion( workspace, path, label )\n  versionService.removeVersion( workspace, path, label )\n*/\n\n    @Test\n    public void testCreateVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n    }"
    },
    "aSource": {
      "startLine": 55,
      "code": "/*\n  versionService.createVersion( workspace, paths )\n  versionService.revertToVersion( workspace, path, label )\n  versionService.removeVersion( workspace, path, label )\n*/\n\n    @Test\n    public void testCreateVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session, \"/\" + pid);\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "e81884a30a",
    "aCommit": "6410b59700",
    "hunk": {
      "sourceChanges": [
        {
          "line": "versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));",
          "type": "DELETE",
          "lineNo": 73
        }
      ],
      "targetChanges": [
        {
          "line": "versionService.createVersion(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 69
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "createVersion(org.fcrepo.kernel.services.Workspace,java.util.Collection)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.VersionService versionService"
        },
        {
          "type": "CtExecutableReference",
          "value": "createVersion(org.fcrepo.kernel.services.Workspace,java.util.Collection)"
        },
        {
          "type": "CtInvocation",
          "value": "getWorkspace()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtExecutableReference",
          "value": "getWorkspace()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Collections.singleton(Object)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Collections.singleton(Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.VersionService.createVersion(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.VersionService versionService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.VersionService.createVersion(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "singleton",
          "childCount": 2
        },
        "dstNode": {
          "label": "createVersion",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createVersion",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "singleton",
          "childCount": 2
        },
        "dstNode": {
          "label": "createVersion",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        69
      ]
    },
    "aCommitTime": 1413413480,
    "ID": "fcrepo/fcrepo:221",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.TransactionServiceImplTest.testCommitTx()",
    "bSource": {
      "startLine": 156,
      "code": "@Test\n    public void testCommitTx() {\n        final Transaction tx = service.commit(IS_A_TX);\n        assertNotNull(tx);\n        verify(mockTx).commit(null);\n    }"
    },
    "aSource": {
      "startLine": 156,
      "code": "@Test\n    public void testCommitTx() {\n        final Transaction tx = service.commit(IS_A_TX);\n        assertNotNull(tx);\n        verify(mockTx).commit();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "bCommit": "e81884a30a",
    "aCommit": "6410b59700",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockTx).commit(null);",
          "type": "DELETE",
          "lineNo": 160
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockTx).commit();",
          "type": "ADD",
          "lineNo": 160
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "commit(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction mockTx"
        },
        {
          "type": "CtExecutableReference",
          "value": "commit(<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "commit()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction mockTx"
        },
        {
          "type": "CtExecutableReference",
          "value": "commit()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        160
      ]
    },
    "aCommitTime": 1413413480,
    "ID": "fcrepo/fcrepo:222",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.http.responses.QueryExecutionProviderTest.testWriteTo()",
    "bSource": {
      "startLine": 79,
      "code": "@Test\n    public void testWriteTo() throws WebApplicationException,\n                             IllegalArgumentException {\n\n        final Query sparqlQuery =\n            QueryFactory.create(\"SELECT ?x WHERE { ?x ?y ?z }\");\n\n        try (final QueryExecution testResult =\n                QueryExecutionFactory.create(sparqlQuery, testData)) {\n\n            final ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\n            testObj.writeTo(testResult, QueryExecution.class, mock(Type.class),\n                    null, valueOf(contentTypeResultsXML),\n                    mockMultivaluedMap, outStream);\n            final byte[] results = outStream.toByteArray();\n            assertTrue(\"Got no output from serialization!\", results.length > 0);\n            assertTrue(\"Couldn't find test RDF-object mentioned!\", new String(\n                    results).contains(\"test:subject\"));\n        }\n    }"
    },
    "aSource": {
      "startLine": 80,
      "code": "@Test\n    public void testWriteTo() throws WebApplicationException,\n            IllegalArgumentException, IOException {\n\n        final Query sparqlQuery =\n            QueryFactory.create(\"SELECT ?x WHERE { ?x ?y ?z }\");\n\n        try (final QueryExecution testResult =\n                QueryExecutionFactory.create(sparqlQuery, testData)) {\n\n            final ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\n            testObj.writeTo(testResult, QueryExecution.class, mock(Type.class),\n                    null, valueOf(contentTypeResultsXML),\n                    mockMultivaluedMap, outStream);\n            final byte[] results = outStream.toByteArray();\n            assertTrue(\"Got no output from serialization!\", results.length > 0);\n            assertTrue(\"Couldn't find test RDF-object mentioned!\", new String(\n                    results).contains(\"test:subject\"));\n        }\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/responses/QueryExecutionProviderTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/responses/QueryExecutionProviderTest.java",
    "bCommit": "a03838304d",
    "aCommit": "e5729eec00",
    "hunk": {
      "sourceChanges": [
        {
          "line": "IllegalArgumentException {",
          "type": "DELETE",
          "lineNo": 81
        }
      ],
      "targetChanges": [
        {
          "line": "IllegalArgumentException, IOException {",
          "type": "ADD",
          "lineNo": 82
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtTypeReference",
          "value": "java.lang.IllegalArgumentException"
        }
      ],
      "targetElements": [
        {
          "type": "CtTypeReference",
          "value": "java.lang.IllegalArgumentException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "ADD_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        92
      ]
    },
    "aCommitTime": 1413406798,
    "ID": "fcrepo/fcrepo:513",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.http.FedoraSparqlTest.testSparqlServiceDescription()",
    "bSource": {
      "startLine": 161,
      "code": "@Test\n    public void testSparqlServiceDescription() {\n        final Response response = testObj.sparqlServiceDescription(mockRequest, uriInfo);\n        assertTrue(response.getStatus() == OK.getStatusCode());\n        final StreamingOutput stream = new StreamingOutput() {\n            @Override\n            public void write(final OutputStream output) {\n                final SparqlServiceDescription sd = new SparqlServiceDescription(mockSession, uriInfo);\n                final Lang rdfLang = RDFLanguages.contentTypeToLang(response.getMediaType().toString());\n                final Writer outWriter = new OutputStreamWriter(output);\n                sd.createServiceDescription().asModel().write(outWriter, rdfLang.getName());\n            }\n        };\n        final String expected = ok(stream).header(\"Content-Type\",\n                RDFLanguages.contentTypeToLang(response.getMediaType().toString()))\n                .build().toString();\n        assertEquals(expected, response.toString());\n    }"
    },
    "aSource": {
      "startLine": 158,
      "code": "@Test\n    public void testSparqlServiceDescription() {\n        final Model response = testObj.sparqlServiceDescription(mockRequest, uriInfo).asModel();\n        assertFalse(response.isEmpty());\n        assertTrue(response.contains(null,\n                createProperty(SPARQL_SD_NAMESPACE + \"resultFormat\")));\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/FedoraSparqlTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/FedoraSparqlTest.java",
    "bCommit": "eb51549c2a",
    "aCommit": "e085c4af0a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response response = testObj.sparqlServiceDescription(mockRequest, uriInfo);",
          "type": "DELETE",
          "lineNo": 163
        },
        {
          "line": "assertTrue(response.getStatus() == OK.getStatusCode());",
          "type": "DELETE",
          "lineNo": 164
        },
        {
          "line": "final StreamingOutput stream = new StreamingOutput() {",
          "type": "DELETE",
          "lineNo": 165
        },
        {
          "line": "@Override",
          "type": "DELETE",
          "lineNo": 166
        },
        {
          "line": "public void write(final OutputStream output) {",
          "type": "DELETE",
          "lineNo": 167
        },
        {
          "line": "final SparqlServiceDescription sd = new SparqlServiceDescription(mockSession, uriInfo);",
          "type": "DELETE",
          "lineNo": 168
        },
        {
          "line": "final Lang rdfLang = RDFLanguages.contentTypeToLang(response.getMediaType().toString());",
          "type": "DELETE",
          "lineNo": 169
        },
        {
          "line": "final Writer outWriter = new OutputStreamWriter(output);",
          "type": "DELETE",
          "lineNo": 170
        },
        {
          "line": "sd.createServiceDescription().asModel().write(outWriter, rdfLang.getName());",
          "type": "DELETE",
          "lineNo": 171
        },
        {
          "line": "}",
          "type": "DELETE",
          "lineNo": 172
        },
        {
          "line": "};",
          "type": "DELETE",
          "lineNo": 173
        },
        {
          "line": "final String expected = ok(stream).header(\"Content-Type\",",
          "type": "DELETE",
          "lineNo": 174
        },
        {
          "line": "RDFLanguages.contentTypeToLang(response.getMediaType().toString()))",
          "type": "DELETE",
          "lineNo": 175
        },
        {
          "line": ".build().toString();",
          "type": "DELETE",
          "lineNo": 176
        },
        {
          "line": "assertEquals(expected, response.toString());",
          "type": "DELETE",
          "lineNo": 177
        }
      ],
      "targetChanges": [
        {
          "line": "final Model response = testObj.sparqlServiceDescription(mockRequest, uriInfo).asModel();",
          "type": "ADD",
          "lineNo": 160
        },
        {
          "line": "assertFalse(response.isEmpty());",
          "type": "ADD",
          "lineNo": 161
        },
        {
          "line": "assertTrue(response.contains(null,",
          "type": "ADD",
          "lineNo": 162
        },
        {
          "line": "createProperty(SPARQL_SD_NAMESPACE + \"resultFormat\")));",
          "type": "ADD",
          "lineNo": 163
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.http.FedoraSparql.sparqlServiceDescription(Request,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.http.FedoraSparql testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.http.FedoraSparql.sparqlServiceDescription(Request,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getStatus()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatus()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.Response.Status$OK"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        },
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.StreamingOutput stream"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.StreamingOutput"
        },
        {
          "type": "CtNewClass",
          "value": "javax.ws.rs.core.StreamingOutput()"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.StreamingOutput"
        },
        {
          "type": "CtClass",
          "value": "org.fcrepo.transform.http.FedoraSparqlTest$1"
        },
        {
          "type": "CtMethod",
          "value": "org.fcrepo.transform.http.FedoraSparqlTest$1.write(OutputStream)"
        },
        {
          "type": "CtAnnotation",
          "value": "java.lang.Override"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtParameter",
          "value": "java.io.OutputStream output"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.OutputStream"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.transform.sparql.SparqlServiceDescription sd"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.transform.sparql.SparqlServiceDescription"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.transform.sparql.SparqlServiceDescription.SparqlServiceDescription(Session,UriInfo)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.transform.sparql.SparqlServiceDescription"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.jena.riot.Lang rdfLang"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.jena.riot.Lang"
        },
        {
          "type": "CtInvocation",
          "value": "contentTypeToLang()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.jena.riot.RDFLanguages"
        },
        {
          "type": "CtExecutableReference",
          "value": "contentTypeToLang()"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtInvocation",
          "value": "getMediaType()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getMediaType()"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.io.Writer outWriter"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.Writer"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.OutputStreamWriter.OutputStreamWriter(OutputStream)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.OutputStreamWriter"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.OutputStream output"
        },
        {
          "type": "CtInvocation",
          "value": "write(java.io.Writer)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.sparql.SparqlServiceDescription.createServiceDescription()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.transform.sparql.SparqlServiceDescription sd"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.sparql.SparqlServiceDescription.createServiceDescription()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "write(java.io.Writer)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.Writer outWriter"
        },
        {
          "type": "CtInvocation",
          "value": "getName()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.jena.riot.Lang rdfLang"
        },
        {
          "type": "CtExecutableReference",
          "value": "getName()"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String expected"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtInvocation",
          "value": "build()"
        },
        {
          "type": "CtInvocation",
          "value": "header(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "ok(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "ok(<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.StreamingOutput stream"
        },
        {
          "type": "CtExecutableReference",
          "value": "header(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Content-Type'"
        },
        {
          "type": "CtInvocation",
          "value": "contentTypeToLang()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.jena.riot.RDFLanguages"
        },
        {
          "type": "CtExecutableReference",
          "value": "contentTypeToLang()"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtInvocation",
          "value": "getMediaType()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getMediaType()"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "build()"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String expected"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model response"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.http.FedoraSparql.sparqlServiceDescription(Request,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.http.FedoraSparql testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.http.FedoraSparql.sparqlServiceDescription(Request,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model response"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains(<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model response"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String SPARQL_SD_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'resultFormat'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertFalse",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "build",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.ws.rs.core.Response",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.rdf.model.Model",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getStatus",
          "childCount": 1
        },
        "dstNode": {
          "label": "isEmpty",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "header",
          "childCount": 3
        },
        "dstNode": {
          "label": "contains",
          "childCount": 3
        }
      },
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "stream",
          "childCount": 0
        },
        "dstNode": {
          "label": "response",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Content-Type\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "null",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "contentTypeToLang",
          "childCount": 2
        },
        "dstNode": {
          "label": "createProperty",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "stream",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "expected",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "build",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getStatus",
          "childCount": 1
        },
        "dstNode": {
          "label": "isEmpty",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "sparqlServiceDescription",
          "childCount": 3
        },
        "dstNode": {
          "label": "sparqlServiceDescription",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "stream",
          "childCount": 0
        },
        "dstNode": {
          "label": "response",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        160,
        162,
        172
      ]
    },
    "aCommitTime": 1413395530,
    "ID": "fcrepo/fcrepo:487",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testGetLockUrl()",
    "bSource": {
      "startLine": 219,
      "code": "@Test\n    public void testGetLockUrl() {\n        final Node lockUrl = createURI(\"a/b/fcr:lock\");\n        final DatasetGraph mem = createMem();\n        mem.add(createAnon(), createURI(\"a/b\"), RdfLexicon.HAS_LOCK.asNode(), lockUrl);\n\n        assertEquals(\"Wrong lock url returned!\", lockUrl.getURI(),\n                testObj.getLockUrl(mem, createURI(\"a/b\")));\n    }"
    },
    "aSource": {
      "startLine": 206,
      "code": "@Test\n    public void testGetLockUrl() {\n        final Node lockUrl = createURI(\"a/b/fcr:lock\");\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(createURI(\"a/b\"), RdfLexicon.HAS_LOCK.asNode(), lockUrl));\n\n        assertEquals(\"Wrong lock url returned!\", lockUrl.getURI(),\n                testObj.getLockUrl(mem, createURI(\"a/b\")));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 222
        },
        {
          "line": "mem.add(createAnon(), createURI(\"a/b\"), RdfLexicon.HAS_LOCK.asNode(), lockUrl);",
          "type": "DELETE",
          "lineNo": 223
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 209
        },
        {
          "line": "mem.add(new Triple(createURI(\"a/b\"), RdfLexicon.HAS_LOCK.asNode(), lockUrl));",
          "type": "ADD",
          "lineNo": 210
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_LOCK"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.RdfLexicon"
        },
        {
          "type": "CtFieldReference",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_LOCK"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node lockUrl"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_LOCK"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.RdfLexicon"
        },
        {
          "type": "CtFieldReference",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_LOCK"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node lockUrl"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "lockUrl",
          "childCount": 0
        },
        "dstNode": {
          "label": "lockUrl",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        209
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:57",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.shouldUsetheBNodeIdIfItIsABNode()",
    "bSource": {
      "startLine": 287,
      "code": "@Test\n    public void shouldUsetheBNodeIdIfItIsABNode() {\n        final DatasetGraph mem = createMem();\n        final Node anon = createAnon();\n        assertEquals(anon.getBlankNodeLabel(), testObj\n                .getObjectTitle(mem, anon));\n    }"
    },
    "aSource": {
      "startLine": 274,
      "code": "@Test\n    public void shouldUsetheBNodeIdIfItIsABNode() {\n        final Graph mem = createDefaultModel().getGraph();\n        final Node anon = createAnon();\n        assertEquals(anon.getBlankNodeLabel(), testObj\n                .getObjectTitle(mem, anon));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 289
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 276
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        276
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:58",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testGetMissingVersionDate()",
    "bSource": {
      "startLine": 264,
      "code": "@Test\n    public void testGetMissingVersionDate() {\n        final DatasetGraph mem = createMem();\n        assertEquals(\"Date should not be available.\", testObj.getVersionDate(mem, createURI(\"a/b/c\")), \"\");\n    }"
    },
    "aSource": {
      "startLine": 251,
      "code": "@Test\n    public void testGetMissingVersionDate() {\n        final Graph mem = createDefaultModel().getGraph();\n        assertEquals(\"Date should not be available.\", testObj.getVersionDate(mem, createURI(\"a/b/c\")), \"\");\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 266
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 253
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        253
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:59",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testIsWritableFalseJunk()",
    "bSource": {
      "startLine": 180,
      "code": "@Test\n    public void testIsWritableFalseJunk() {\n        final DatasetGraph mem = createMem();\n        mem.add(createAnon(), createURI(\"a/b/c\"), HAS_CONTENT.asNode(), createLiteral(\"junk\"));\n        assertFalse(\"Node should not be writable.\", testObj.isWritable(mem, createURI(\"a/b/c\")));\n    }"
    },
    "aSource": {
      "startLine": 170,
      "code": "@Test\n    public void testIsWritableFalseJunk() {\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(createURI(\"a/b/c\"), HAS_CONTENT.asNode(), createLiteral(\"junk\")));\n        assertFalse(\"Node should not be writable.\", testObj.isWritable(mem, createURI(\"a/b/c\")));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 182
        },
        {
          "line": "mem.add(createAnon(), createURI(\"a/b/c\"), HAS_CONTENT.asNode(), createLiteral(\"junk\"));",
          "type": "DELETE",
          "lineNo": 183
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 172
        },
        {
          "line": "mem.add(new Triple(createURI(\"a/b/c\"), HAS_CONTENT.asNode(), createLiteral(\"junk\")));",
          "type": "ADD",
          "lineNo": 173
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        },
        {
          "type": "CtInvocation",
          "value": "add()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add()"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_CONTENT"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'junk'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_CONTENT"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'junk'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 1
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        172
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:60",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testIsFrozenNode()",
    "bSource": {
      "startLine": 187,
      "code": "@Test\n    public void testIsFrozenNode() {\n        final DatasetGraph mem = createMem();\n        mem.add(createAnon(), createURI(\"a/b/c\"), HAS_PRIMARY_TYPE.asNode(),\n                createLiteral(\"nt:frozenNode\"));\n        assertTrue(\"Node is a frozen node.\", testObj.isFrozenNode(mem, createURI(\"a/b/c\")));\n    }"
    },
    "aSource": {
      "startLine": 177,
      "code": "@Test\n    public void testIsFrozenNode() {\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(createURI(\"a/b/c\"), HAS_PRIMARY_TYPE.asNode(), createLiteral(\"nt:frozenNode\")));\n        assertTrue(\"Node is a frozen node.\", testObj.isFrozenNode(mem, createURI(\"a/b/c\")));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 189
        },
        {
          "line": "mem.add(createAnon(), createURI(\"a/b/c\"), HAS_PRIMARY_TYPE.asNode(),",
          "type": "DELETE",
          "lineNo": 190
        },
        {
          "line": "createLiteral(\"nt:frozenNode\"));",
          "type": "DELETE",
          "lineNo": 191
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 179
        },
        {
          "line": "mem.add(new Triple(createURI(\"a/b/c\"), HAS_PRIMARY_TYPE.asNode(), createLiteral(\"nt:frozenNode\")));",
          "type": "ADD",
          "lineNo": 180
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        },
        {
          "type": "CtInvocation",
          "value": "add()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add()"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_PRIMARY_TYPE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'nt:frozenNode'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_PRIMARY_TYPE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'nt:frozenNode'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 1
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        179
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:61",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.shouldJustUseTheStringIfItIsALiteral()",
    "bSource": {
      "startLine": 295,
      "code": "@Test\n    public void shouldJustUseTheStringIfItIsALiteral() {\n        final DatasetGraph mem = createMem();\n        final Node lit = createLiteral(\"xyz\");\n        assertEquals(\"\\\"xyz\\\"\", testObj.getObjectTitle(mem, lit));\n    }"
    },
    "aSource": {
      "startLine": 282,
      "code": "@Test\n    public void shouldJustUseTheStringIfItIsALiteral() {\n        final Graph mem = createDefaultModel().getGraph();\n        final Node lit = createLiteral(\"xyz\");\n        assertEquals(\"\\\"xyz\\\"\", testObj.getObjectTitle(mem, lit));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 297
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 284
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        284
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:62",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testGetOrderedVersions()",
    "bSource": {
      "startLine": 95,
      "code": "@Test\n    public void testGetOrderedVersions() {\n        final Node resource = createURI(\"http://localhost/fcrepo/abc\");\n        final Node v1 = createURI(\"http://localhost/fcrepo/abc/fcr:version/1\");\n        final Node v2 = createURI(\"http://localhost/fcrepo/abc/fcr:version/2\");\n        final Node v3 = createURI(\"http://localhost/fcrepo/abc/fcr:version/3\");\n        final Date now = new Date();\n        final Date later = new Date();\n        later.setTime(later.getTime() + 10000l);\n\n        final DatasetGraph mem = createMem();\n        final Node anon = createAnon();\n        mem.add(anon, resource, HAS_VERSION.asNode(), v1);\n        mem.add(anon, v1, LAST_MODIFIED_DATE.asNode(),\n                createLiteral(now.toString()));\n        mem.add(anon, resource, HAS_VERSION.asNode(), v2);\n        mem.add(anon, v2, LAST_MODIFIED_DATE.asNode(),\n                createLiteral(now.toString()));\n        mem.add(anon, resource, HAS_VERSION.asNode(), v3);\n        mem.add(anon, v3, LAST_MODIFIED_DATE.asNode(),\n                createLiteral(later.toString()));\n\n        final Iterator<Node> versions = testObj.getOrderedVersions(mem, resource, HAS_VERSION);\n        versions.next();\n        versions.next();\n        final Node r3 = versions.next();\n        assertEquals(\"Latest version should be last.\", v3, r3);\n    }"
    },
    "aSource": {
      "startLine": 90,
      "code": "@Test\n    public void testGetOrderedVersions() {\n        final Node resource = createURI(\"http://localhost/fcrepo/abc\");\n        final Node v1 = createURI(\"http://localhost/fcrepo/abc/fcr:version/1\");\n        final Node v2 = createURI(\"http://localhost/fcrepo/abc/fcr:version/2\");\n        final Node v3 = createURI(\"http://localhost/fcrepo/abc/fcr:version/3\");\n        final Date now = new Date();\n        final Date later = new Date();\n        later.setTime(later.getTime() + 10000l);\n\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(resource, HAS_VERSION.asNode(), v1));\n        mem.add(new Triple(v1, LAST_MODIFIED_DATE.asNode(),\n                createLiteral(now.toString())));\n        mem.add(new Triple(resource, HAS_VERSION.asNode(), v2));\n        mem.add(new Triple(v2, LAST_MODIFIED_DATE.asNode(),\n                createLiteral(now.toString())));\n        mem.add(new Triple(resource, HAS_VERSION.asNode(), v3));\n        mem.add(new Triple(v3, LAST_MODIFIED_DATE.asNode(),\n                createLiteral(later.toString())));\n\n        final Iterator<Node> versions = testObj.getOrderedVersions(mem, resource, HAS_VERSION);\n        versions.next();\n        versions.next();\n        final Node r3 = versions.next();\n        assertEquals(\"Latest version should be last.\", v3, r3);\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 105
        },
        {
          "line": "final Node anon = createAnon();",
          "type": "DELETE",
          "lineNo": 106
        },
        {
          "line": "mem.add(anon, resource, HAS_VERSION.asNode(), v1);",
          "type": "DELETE",
          "lineNo": 107
        },
        {
          "line": "mem.add(anon, v1, LAST_MODIFIED_DATE.asNode(),",
          "type": "DELETE",
          "lineNo": 108
        },
        {
          "line": "createLiteral(now.toString()));",
          "type": "DELETE",
          "lineNo": 109
        },
        {
          "line": "mem.add(anon, resource, HAS_VERSION.asNode(), v2);",
          "type": "DELETE",
          "lineNo": 110
        },
        {
          "line": "mem.add(anon, v2, LAST_MODIFIED_DATE.asNode(),",
          "type": "DELETE",
          "lineNo": 111
        },
        {
          "line": "createLiteral(now.toString()));",
          "type": "DELETE",
          "lineNo": 112
        },
        {
          "line": "mem.add(anon, resource, HAS_VERSION.asNode(), v3);",
          "type": "DELETE",
          "lineNo": 113
        },
        {
          "line": "mem.add(anon, v3, LAST_MODIFIED_DATE.asNode(),",
          "type": "DELETE",
          "lineNo": 114
        },
        {
          "line": "createLiteral(later.toString()));",
          "type": "DELETE",
          "lineNo": 115
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 100
        },
        {
          "line": "mem.add(new Triple(resource, HAS_VERSION.asNode(), v1));",
          "type": "ADD",
          "lineNo": 101
        },
        {
          "line": "mem.add(new Triple(v1, LAST_MODIFIED_DATE.asNode(),",
          "type": "ADD",
          "lineNo": 102
        },
        {
          "line": "createLiteral(now.toString())));",
          "type": "ADD",
          "lineNo": 103
        },
        {
          "line": "mem.add(new Triple(resource, HAS_VERSION.asNode(), v2));",
          "type": "ADD",
          "lineNo": 104
        },
        {
          "line": "mem.add(new Triple(v2, LAST_MODIFIED_DATE.asNode(),",
          "type": "ADD",
          "lineNo": 105
        },
        {
          "line": "createLiteral(now.toString())));",
          "type": "ADD",
          "lineNo": 106
        },
        {
          "line": "mem.add(new Triple(resource, HAS_VERSION.asNode(), v3));",
          "type": "ADD",
          "lineNo": 107
        },
        {
          "line": "mem.add(new Triple(v3, LAST_MODIFIED_DATE.asNode(),",
          "type": "ADD",
          "lineNo": 108
        },
        {
          "line": "createLiteral(later.toString())));",
          "type": "ADD",
          "lineNo": 109
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Node anon"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Node"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node anon"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node resource"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_VERSION"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v1"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node anon"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v1"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property LAST_MODIFIED_DATE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.Date now"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node anon"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node resource"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_VERSION"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v2"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node anon"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v2"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property LAST_MODIFIED_DATE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.Date now"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node anon"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node resource"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_VERSION"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v3"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node anon"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v3"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property LAST_MODIFIED_DATE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.Date later"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Date.toString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node resource"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_VERSION"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v1"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v1"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property LAST_MODIFIED_DATE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.Date now"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node resource"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_VERSION"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v2"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v2"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property LAST_MODIFIED_DATE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.Date now"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node resource"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_VERSION"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v3"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Node v3"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property LAST_MODIFIED_DATE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.Date later"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Date.toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anon",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anon",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "resource",
          "childCount": 0
        },
        "dstNode": {
          "label": "resource",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "v1",
          "childCount": 0
        },
        "dstNode": {
          "label": "v1",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "v1",
          "childCount": 0
        },
        "dstNode": {
          "label": "v1",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 1
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "resource",
          "childCount": 0
        },
        "dstNode": {
          "label": "resource",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "v2",
          "childCount": 0
        },
        "dstNode": {
          "label": "v2",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "v2",
          "childCount": 0
        },
        "dstNode": {
          "label": "v2",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 1
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "resource",
          "childCount": 0
        },
        "dstNode": {
          "label": "resource",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "v3",
          "childCount": 0
        },
        "dstNode": {
          "label": "v3",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "v3",
          "childCount": 0
        },
        "dstNode": {
          "label": "v3",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 1
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        100
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:63",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testIsWritableFalse()",
    "bSource": {
      "startLine": 173,
      "code": "@Test\n    public void testIsWritableFalse() {\n        final DatasetGraph mem = createMem();\n        mem.add(createAnon(), createURI(\"a/b/c\"), WRITABLE.asNode(), createLiteral(Boolean.FALSE.toString()));\n        assertFalse(\"Node should not be writable.\", testObj.isWritable(mem, createURI(\"a/b/c\")));\n    }"
    },
    "aSource": {
      "startLine": 163,
      "code": "@Test\n    public void testIsWritableFalse() {\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(createURI(\"a/b/c\"), WRITABLE.asNode(), createLiteral(Boolean.FALSE.toString())));\n        assertFalse(\"Node should not be writable.\", testObj.isWritable(mem, createURI(\"a/b/c\")));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 175
        },
        {
          "line": "mem.add(createAnon(), createURI(\"a/b/c\"), WRITABLE.asNode(), createLiteral(Boolean.FALSE.toString()));",
          "type": "DELETE",
          "lineNo": 176
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 165
        },
        {
          "line": "mem.add(new Triple(createURI(\"a/b/c\"), WRITABLE.asNode(), createLiteral(Boolean.FALSE.toString())));",
          "type": "ADD",
          "lineNo": 166
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        },
        {
          "type": "CtInvocation",
          "value": "add()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add()"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property WRITABLE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Boolean.toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Boolean FALSE"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.lang.Boolean"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.Boolean FALSE"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Boolean.toString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property WRITABLE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Boolean.toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Boolean FALSE"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.lang.Boolean"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.Boolean FALSE"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Boolean.toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 1
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        165
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:64",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.shouldConvertRdfObjectsToStrings()",
    "bSource": {
      "startLine": 316,
      "code": "@Test\n    public void shouldConvertRdfObjectsToStrings() {\n\n        final DatasetGraph mem = createMem();\n        mem.add(createAnon(), createURI(\"subject\"), createURI(\"a/b/c\"),\n                NodeFactory.createLiteral(\"abc\"));\n        mem.add(createAnon(), createURI(\"subject\"),\n                createURI(\"a-numeric-type\"), createTypedLiteral(0).asNode());\n        mem.add(createAnon(), createURI(\"subject\"),\n                createURI(\"an-empty-string\"), createLiteral(\"\"));\n        mem.add(createAnon(), createURI(\"subject\"), createURI(\"a-uri\"),\n                createURI(\"some-uri\"));\n\n        assertEquals(\"abc\", testObj.getObjectsAsString(mem,\n                createURI(\"subject\"), createResource(\"a/b/c\"), true));\n        assertEquals(\"0\", testObj.getObjectsAsString(mem, createURI(\"subject\"),\n                createResource(\"a-numeric-type\"), true));\n        assertEquals(\"<empty>\", testObj.getObjectsAsString(mem,\n                createURI(\"subject\"), createResource(\"an-empty-string\"), true));\n        assertEquals(\"&lt;<a href=\\\"some-uri\\\">some-uri</a>&gt;\", testObj\n                .getObjectsAsString(mem, createURI(\"subject\"),\n                        createResource(\"a-uri\"), true));\n\n        assertEquals(\"some-uri\", testObj\n                .getObjectsAsString(mem, createURI(\"subject\"),\n                        createResource(\"a-uri\"), false));\n        assertEquals(\"\", testObj.getObjectsAsString(mem, createURI(\"subject\"),\n                createResource(\"a-nonexistent-uri\"), true));\n\n    }"
    },
    "aSource": {
      "startLine": 303,
      "code": "@Test\n    public void shouldConvertRdfObjectsToStrings() {\n\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(createURI(\"subject\"), createURI(\"a/b/c\"),\n                NodeFactory.createLiteral(\"abc\")));\n        mem.add(new Triple(createURI(\"subject\"),\n                createURI(\"a-numeric-type\"), createTypedLiteral(0).asNode()));\n        mem.add(new Triple(createURI(\"subject\"),\n                createURI(\"an-empty-string\"), createLiteral(\"\")));\n        mem.add(new Triple( createURI(\"subject\"), createURI(\"a-uri\"),\n                createURI(\"some-uri\")));\n\n        assertEquals(\"abc\", testObj.getObjectsAsString(mem,\n                createURI(\"subject\"), createResource(\"a/b/c\"), true));\n        assertEquals(\"0\", testObj.getObjectsAsString(mem, createURI(\"subject\"),\n                createResource(\"a-numeric-type\"), true));\n        assertEquals(\"<empty>\", testObj.getObjectsAsString(mem,\n                createURI(\"subject\"), createResource(\"an-empty-string\"), true));\n        assertEquals(\"&lt;<a href=\\\"some-uri\\\">some-uri</a>&gt;\", testObj\n                .getObjectsAsString(mem, createURI(\"subject\"),\n                        createResource(\"a-uri\"), true));\n\n        assertEquals(\"some-uri\", testObj\n                .getObjectsAsString(mem, createURI(\"subject\"),\n                        createResource(\"a-uri\"), false));\n        assertEquals(\"\", testObj.getObjectsAsString(mem, createURI(\"subject\"),\n                createResource(\"a-nonexistent-uri\"), true));\n\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 319
        },
        {
          "line": "mem.add(createAnon(), createURI(\"subject\"), createURI(\"a/b/c\"),",
          "type": "DELETE",
          "lineNo": 320
        },
        {
          "line": "NodeFactory.createLiteral(\"abc\"));",
          "type": "DELETE",
          "lineNo": 321
        },
        {
          "line": "mem.add(createAnon(), createURI(\"subject\"),",
          "type": "DELETE",
          "lineNo": 322
        },
        {
          "line": "createURI(\"a-numeric-type\"), createTypedLiteral(0).asNode());",
          "type": "DELETE",
          "lineNo": 323
        },
        {
          "line": "mem.add(createAnon(), createURI(\"subject\"),",
          "type": "DELETE",
          "lineNo": 324
        },
        {
          "line": "createURI(\"an-empty-string\"), createLiteral(\"\"));",
          "type": "DELETE",
          "lineNo": 325
        },
        {
          "line": "mem.add(createAnon(), createURI(\"subject\"), createURI(\"a-uri\"),",
          "type": "DELETE",
          "lineNo": 326
        },
        {
          "line": "createURI(\"some-uri\"));",
          "type": "DELETE",
          "lineNo": 327
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 306
        },
        {
          "line": "mem.add(new Triple(createURI(\"subject\"), createURI(\"a/b/c\"),",
          "type": "ADD",
          "lineNo": 307
        },
        {
          "line": "NodeFactory.createLiteral(\"abc\")));",
          "type": "ADD",
          "lineNo": 308
        },
        {
          "line": "mem.add(new Triple(createURI(\"subject\"),",
          "type": "ADD",
          "lineNo": 309
        },
        {
          "line": "createURI(\"a-numeric-type\"), createTypedLiteral(0).asNode()));",
          "type": "ADD",
          "lineNo": 310
        },
        {
          "line": "mem.add(new Triple(createURI(\"subject\"),",
          "type": "ADD",
          "lineNo": 311
        },
        {
          "line": "createURI(\"an-empty-string\"), createLiteral(\"\")));",
          "type": "ADD",
          "lineNo": 312
        },
        {
          "line": "mem.add(new Triple( createURI(\"subject\"), createURI(\"a-uri\"),",
          "type": "ADD",
          "lineNo": 313
        },
        {
          "line": "createURI(\"some-uri\")));",
          "type": "ADD",
          "lineNo": 314
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        },
        {
          "type": "CtInvocation",
          "value": "add()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add()"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'subject'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.NodeFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'abc'"
        },
        {
          "type": "CtInvocation",
          "value": "add()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add()"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'subject'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a-numeric-type'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createTypedLiteral(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createTypedLiteral(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "add()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add()"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'subject'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'an-empty-string'"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtInvocation",
          "value": "add()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add()"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'subject'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a-uri'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some-uri'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'subject'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.NodeFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'abc'"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'subject'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a-numeric-type'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createTypedLiteral(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createTypedLiteral(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'subject'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'an-empty-string'"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'subject'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a-uri'"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'some-uri'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 2
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 1
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        306
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:65",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.shouldTryToExtractDublinCoreTitleFromNode()",
    "bSource": {
      "startLine": 270,
      "code": "@Test\n    public void shouldTryToExtractDublinCoreTitleFromNode() {\n        final DatasetGraph mem = createMem();\n        mem.add(createAnon(), createURI(\"a/b/c\"), DC_TITLE.asNode(),\n                createLiteral(\"abc\"));\n\n        assertEquals(\"abc\", testObj.getObjectTitle(mem, createURI(\"a/b/c\")));\n    }"
    },
    "aSource": {
      "startLine": 257,
      "code": "@Test\n    public void shouldTryToExtractDublinCoreTitleFromNode() {\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(createURI(\"a/b/c\"), DC_TITLE.asNode(),\n                createLiteral(\"abc\")));\n\n        assertEquals(\"abc\", testObj.getObjectTitle(mem, createURI(\"a/b/c\")));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 272
        },
        {
          "line": "mem.add(createAnon(), createURI(\"a/b/c\"), DC_TITLE.asNode(),",
          "type": "DELETE",
          "lineNo": 273
        },
        {
          "line": "createLiteral(\"abc\"));",
          "type": "DELETE",
          "lineNo": 274
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 259
        },
        {
          "line": "mem.add(new Triple(createURI(\"a/b/c\"), DC_TITLE.asNode(),",
          "type": "ADD",
          "lineNo": 260
        },
        {
          "line": "createLiteral(\"abc\")));",
          "type": "ADD",
          "lineNo": 261
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        },
        {
          "type": "CtInvocation",
          "value": "add()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add()"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property DC_TITLE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'abc'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property DC_TITLE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'abc'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 1
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        259
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:66",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testGetUnlabeledVersion()",
    "bSource": {
      "startLine": 248,
      "code": "@Test\n    public void testGetUnlabeledVersion() {\n        final DatasetGraph mem = createMem();\n        assertEquals(\"Default version label should be used.\",\n                     testObj.getVersionLabel(mem, createURI(\"a/b/c\"), \"default\"), \"default\");\n    }"
    },
    "aSource": {
      "startLine": 235,
      "code": "@Test\n    public void testGetUnlabeledVersion() {\n        final Graph mem = createDefaultModel().getGraph();\n        assertEquals(\"Default version label should be used.\",\n                     testObj.getVersionLabel(mem, createURI(\"a/b/c\"), \"default\"), \"default\");\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 250
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 237
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        237
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:67",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testIsWritable()",
    "bSource": {
      "startLine": 166,
      "code": "@Test\n    public void testIsWritable() {\n        final DatasetGraph mem = createMem();\n        mem.add(createAnon(), createURI(\"a/b/c\"), WRITABLE.asNode(), createLiteral(Boolean.TRUE.toString()));\n        assertTrue(\"Node is should be writable.\", testObj.isWritable(mem, createURI(\"a/b/c\")));\n    }"
    },
    "aSource": {
      "startLine": 156,
      "code": "@Test\n    public void testIsWritable() {\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(createURI(\"a/b/c\"), WRITABLE.asNode(), createLiteral(Boolean.TRUE.toString())));\n        assertTrue(\"Node is should be writable.\", testObj.isWritable(mem, createURI(\"a/b/c\")));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 168
        },
        {
          "line": "mem.add(createAnon(), createURI(\"a/b/c\"), WRITABLE.asNode(), createLiteral(Boolean.TRUE.toString()));",
          "type": "DELETE",
          "lineNo": 169
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 158
        },
        {
          "line": "mem.add(new Triple(createURI(\"a/b/c\"), WRITABLE.asNode(), createLiteral(Boolean.TRUE.toString())));",
          "type": "ADD",
          "lineNo": 159
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        },
        {
          "type": "CtInvocation",
          "value": "add()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add()"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property WRITABLE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Boolean.toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Boolean TRUE"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.lang.Boolean"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.Boolean TRUE"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Boolean.toString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property WRITABLE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Boolean.toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Boolean TRUE"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.lang.Boolean"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.Boolean TRUE"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Boolean.toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 1
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        158
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:68",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.testIsNotFrozenNode()",
    "bSource": {
      "startLine": 195,
      "code": "@Test\n    public void testIsNotFrozenNode() {\n        final DatasetGraph mem = createMem();\n        mem.add(createAnon(), createURI(\"a/b/c\"), HAS_PRIMARY_TYPE.asNode(),\n                createLiteral(\"nt:file\"));\n        assertFalse(\"Node is not a frozen node.\", testObj.isFrozenNode(mem, createURI(\"a/b/c\")));\n    }"
    },
    "aSource": {
      "startLine": 184,
      "code": "@Test\n    public void testIsNotFrozenNode() {\n        final Graph mem = createDefaultModel().getGraph();\n        mem.add(new Triple(createURI(\"a/b/c\"), HAS_PRIMARY_TYPE.asNode(), createLiteral(\"nt:file\")));\n        assertFalse(\"Node is not a frozen node.\", testObj.isFrozenNode(mem, createURI(\"a/b/c\")));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 197
        },
        {
          "line": "mem.add(createAnon(), createURI(\"a/b/c\"), HAS_PRIMARY_TYPE.asNode(),",
          "type": "DELETE",
          "lineNo": 198
        },
        {
          "line": "createLiteral(\"nt:file\"));",
          "type": "DELETE",
          "lineNo": 199
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 186
        },
        {
          "line": "mem.add(new Triple(createURI(\"a/b/c\"), HAS_PRIMARY_TYPE.asNode(), createLiteral(\"nt:file\")));",
          "type": "ADD",
          "lineNo": 187
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        },
        {
          "type": "CtInvocation",
          "value": "add()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add()"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_PRIMARY_TYPE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'nt:file'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(com.hp.hpl.jena.graph.Triple)"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.hp.hpl.jena.graph.Triple()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a/b/c'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_PRIMARY_TYPE"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'nt:file'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createAnon",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.Triple()",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createLiteral",
          "childCount": 1
        },
        "dstNode": {
          "label": "createLiteral",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        186
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:69",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.ViewHelpersTest.shouldUseTheObjectUriIfATitleIsNotAvailable()",
    "bSource": {
      "startLine": 279,
      "code": "@Test\n    public void shouldUseTheObjectUriIfATitleIsNotAvailable() {\n        final DatasetGraph mem = createMem();\n\n        assertEquals(\"a/b/c\", testObj.getObjectTitle(mem, createURI(\"a/b/c\")));\n\n    }"
    },
    "aSource": {
      "startLine": 266,
      "code": "@Test\n    public void shouldUseTheObjectUriIfATitleIsNotAvailable() {\n        final Graph mem = createDefaultModel().getGraph();\n\n        assertEquals(\"a/b/c\", testObj.getObjectTitle(mem, createURI(\"a/b/c\")));\n\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/ViewHelpersTest.java",
    "bCommit": "800bd036ec",
    "aCommit": "185b4924e0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DatasetGraph mem = createMem();",
          "type": "DELETE",
          "lineNo": 281
        }
      ],
      "targetChanges": [
        {
          "line": "final Graph mem = createDefaultModel().getGraph();",
          "type": "ADD",
          "lineNo": 268
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.sparql.core.DatasetGraph"
        },
        {
          "type": "CtInvocation",
          "value": "createMem()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createMem()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.graph.Graph mem"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Graph"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.sparql.core.DatasetGraph",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Graph",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createMem",
          "childCount": 0
        },
        "dstNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        268
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:70",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testWriteProperty()",
    "bSource": {
      "startLine": 56,
      "code": "@Test\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updatePropertiesDataset(new DefaultIdentifierTranslator(session), sparql);\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 58,
      "code": "@Test\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "bCommit": "185b4924e0",
    "aCommit": "52232f61ec",
    "hunk": {
      "sourceChanges": [
        {
          "line": "object.updatePropertiesDataset(new DefaultIdentifierTranslator(session), sparql);",
          "type": "DELETE",
          "lineNo": 71
        }
      ],
      "targetChanges": [
        {
          "line": "object.updateProperties(new DefaultIdentifierTranslator(session), sparql, new RdfStream());",
          "type": "ADD",
          "lineNo": 73
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String sparql"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.updateProperties(IdentifierConverter,String,RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.updateProperties(IdentifierConverter,String,RdfStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String sparql"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "updatePropertiesDataset",
          "childCount": 3
        },
        "dstNode": {
          "label": "updateProperties",
          "childCount": 4
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        73
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:189",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObjectWithSparql()",
    "bSource": {
      "startLine": 644,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).updatePropertiesDataset(identifierConverter, \"x\");\n    }"
    },
    "aSource": {
      "startLine": 644,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).updateProperties(eq(identifierConverter), eq(\"x\"), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "185b4924e0",
    "aCommit": "52232f61ec",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockObject).updatePropertiesDataset(identifierConverter, \"x\");",
          "type": "DELETE",
          "lineNo": 655
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockObject).updateProperties(eq(identifierConverter), eq(\"x\"), any(RdfStream.class));",
          "type": "ADD",
          "lineNo": 655
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "updatePropertiesDataset(org.fcrepo.kernel.identifiers.IdentifierConverter,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "updatePropertiesDataset(org.fcrepo.kernel.identifiers.IdentifierConverter,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'x'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "updateProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "updateProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'x'"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "updatePropertiesDataset",
          "childCount": 3
        },
        "dstNode": {
          "label": "updateProperties",
          "childCount": 4
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "identifierConverter",
          "childCount": 1
        },
        "dstNode": {
          "label": "identifierConverter",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"x\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"x\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        655
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:190",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.LDPathServiceIT.shouldDoStuff()",
    "bSource": {
      "startLine": 67,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");\n        object.getNode().setProperty(\"dc:title\", \"some-title\");\n\n        final String s = \"@prefix dces : <http://purl.org/dc/elements/1.1/>\\n\" +\n                       \"@prefix fcrepo : <\" + REPOSITORY_NAMESPACE + \">\\n\" +\n                           \"id      = . :: xsd:string ;\\n\" +\n                           \"title = dc:title :: xsd:string ;\\n\" +\n                           \"uuid = fcrepo:uuid :: xsd:string ;\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new LDPathTransform(stringReader);\n\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Map<String, Collection<Object>> stuff = testObj.apply(object.getPropertiesDataset(subjects));\n\n        assertNotNull(\"Failed to retrieve results!\", stuff);\n\n        assertTrue(\"Results didn't contain an identifier!\", stuff.containsKey(\"id\"));\n        assertTrue(\"Results didn't contain a title!\", stuff.containsKey(\"title\"));\n\n        assertEquals(\"Received more than one identifier!\", 1, stuff.get(\"id\").size());\n        assertEquals(\"Got wrong subject in identifier!\", subjects.toDomain(\"/testObject\").getURI(), stuff.get(\n                \"id\").iterator().next());\n        assertEquals(\"Got wrong title!\", \"some-title\", stuff.get(\"title\").iterator().next());\n        assertEquals(\"Got wrong UUID!\", object.getNode().getIdentifier(), stuff.get(\"uuid\").iterator().next());\n    }"
    },
    "aSource": {
      "startLine": 70,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");\n        object.getNode().setProperty(\"dc:title\", \"some-title\");\n\n        final String s = \"@prefix dces : <http://purl.org/dc/elements/1.1/>\\n\" +\n                       \"@prefix fcrepo : <\" + REPOSITORY_NAMESPACE + \">\\n\" +\n                           \"id      = . :: xsd:string ;\\n\" +\n                           \"title = dc:title :: xsd:string ;\\n\" +\n                           \"uuid = fcrepo:uuid :: xsd:string ;\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new LDPathTransform(stringReader);\n\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Resource topic = subjects.reverse().convert(object.getNode());\n        final RdfStream triples = object.getTriples(subjects, PropertiesRdfContext.class)\n                                        .topic(topic.asNode());\n        final Map<String, Collection<Object>> stuff = testObj.apply(triples);\n\n        assertNotNull(\"Failed to retrieve results!\", stuff);\n\n        assertTrue(\"Results didn't contain an identifier!\", stuff.containsKey(\"id\"));\n        assertTrue(\"Results didn't contain a title!\", stuff.containsKey(\"title\"));\n\n        assertEquals(\"Received more than one identifier!\", 1, stuff.get(\"id\").size());\n        assertEquals(\"Got wrong subject in identifier!\", subjects.toDomain(\"/testObject\").getURI(), stuff.get(\n                \"id\").iterator().next());\n        assertEquals(\"Got wrong title!\", \"some-title\", stuff.get(\"title\").iterator().next());\n        assertEquals(\"Got wrong UUID!\", object.getNode().getIdentifier(), stuff.get(\"uuid\").iterator().next());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/LDPathServiceIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/LDPathServiceIT.java",
    "bCommit": "64c9b10fda",
    "aCommit": "800bd036ec",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Map<String, Collection<Object>> stuff = testObj.apply(object.getPropertiesDataset(subjects));",
          "type": "DELETE",
          "lineNo": 84
        }
      ],
      "targetChanges": [
        {
          "line": "final Resource topic = subjects.reverse().convert(object.getNode());",
          "type": "ADD",
          "lineNo": 87
        },
        {
          "line": "final RdfStream triples = object.getTriples(subjects, PropertiesRdfContext.class)",
          "type": "ADD",
          "lineNo": 88
        },
        {
          "line": ".topic(topic.asNode());",
          "type": "ADD",
          "lineNo": 89
        },
        {
          "line": "final Map<String, Collection<Object>> stuff = testObj.apply(triples);",
          "type": "ADD",
          "lineNo": 90
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.Map stuff"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Object"
        },
        {
          "type": "CtInvocation",
          "value": "apply(org.fcrepo.transform.transformations.Dataset)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.transformations.LDPathTransform testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "apply(org.fcrepo.transform.transformations.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesDataset(IdentifierConverter)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesDataset(IdentifierConverter)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Resource topic"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Resource"
        },
        {
          "type": "CtInvocation",
          "value": "convert(org.fcrepo.kernel.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "convert(org.fcrepo.kernel.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream triples"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtInvocation",
          "value": "topic()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "topic()"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource topic"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.util.Map stuff"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Object"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.transformations.LDPathTransform.apply(RdfStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.transformations.LDPathTransform testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.transformations.LDPathTransform.apply(RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream triples"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "subjects",
          "childCount": 0
        },
        "dstNode": {
          "label": "triples",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getPropertiesDataset",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "topic",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "triples",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "subjects",
          "childCount": 0
        },
        "dstNode": {
          "label": "triples",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        87
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:261",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.SparqlQueryTransformIT.shouldDoStuff()",
    "bSource": {
      "startLine": 55,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");\n\n        final String s = \"SELECT ?x ?uuid\\n\" +\n                \"WHERE { ?x  <\" + REPOSITORY_NAMESPACE + \"uuid> ?uuid }\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new SparqlQueryTransform(stringReader);\n\n        try (final QueryExecution qexec =\n                testObj.apply(object.getPropertiesDataset(new DefaultIdentifierTranslator(session)))) {\n            assert (qexec != null);\n            final ResultSet results = qexec.execSelect();\n            assert (results != null);\n            assertTrue(results.hasNext());\n        }\n    }"
    },
    "aSource": {
      "startLine": 57,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");\n\n        final String s = \"SELECT ?x ?uuid\\n\" +\n                \"WHERE { ?x  <\" + REPOSITORY_NAMESPACE + \"uuid> ?uuid }\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new SparqlQueryTransform(stringReader);\n\n        final RdfStream stream = object.getTriples(new DefaultIdentifierTranslator(session),\n                PropertiesRdfContext.class);\n        try (final QueryExecution qexec = testObj.apply(stream)) {\n            assert (qexec != null);\n            final ResultSet results = qexec.execSelect();\n            assert (results != null);\n            assertTrue(results.hasNext());\n        }\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/SparqlQueryTransformIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/SparqlQueryTransformIT.java",
    "bCommit": "64c9b10fda",
    "aCommit": "800bd036ec",
    "hunk": {
      "sourceChanges": [
        {
          "line": "try (final QueryExecution qexec =",
          "type": "DELETE",
          "lineNo": 67
        },
        {
          "line": "testObj.apply(object.getPropertiesDataset(new DefaultIdentifierTranslator(session)))) {",
          "type": "DELETE",
          "lineNo": 68
        }
      ],
      "targetChanges": [
        {
          "line": "final RdfStream stream = object.getTriples(new DefaultIdentifierTranslator(session),",
          "type": "ADD",
          "lineNo": 69
        },
        {
          "line": "PropertiesRdfContext.class);",
          "type": "ADD",
          "lineNo": 70
        },
        {
          "line": "try (final QueryExecution qexec = testObj.apply(stream)) {",
          "type": "ADD",
          "lineNo": 71
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.QueryExecution qexec"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.QueryExecution"
        },
        {
          "type": "CtInvocation",
          "value": "apply(org.fcrepo.transform.transformations.Dataset)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.transformations.SparqlQueryTransform testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "apply(org.fcrepo.transform.transformations.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesDataset(IdentifierConverter)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesDataset(IdentifierConverter)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream stream"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierConverter,Class)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.QueryExecution qexec"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.QueryExecution"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.transformations.SparqlQueryTransform.apply(RdfStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.transformations.SparqlQueryTransform testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.transformations.SparqlQueryTransform.apply(RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream stream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getPropertiesDataset",
          "childCount": 2
        },
        "dstNode": {
          "label": "getTriples",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "stream",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "TryWithResource",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "stream",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getPropertiesDataset",
          "childCount": 2
        },
        "dstNode": {
          "label": "getTriples",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        70
      ]
    },
    "aCommitTime": 1413324541,
    "ID": "fcrepo/fcrepo:262",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetSessionThrowException()",
    "bSource": {
      "startLine": 114,
      "code": "@Test\n    public void testGetSessionThrowException() throws RepositoryException {\n        when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(mock(Session.class));\n        when(mockTxService.getTransaction(\"123\", null)).thenThrow(\n                new TransactionMissingException(\"\"));\n        try {\n            testObj.getSession(mockRequest);\n        } catch (final RuntimeException e) {\n            final Throwable rootCause = Throwables.getRootCause(e);\n            assertTrue(\"TransactionMissionException expected\",\n                    rootCause instanceof TransactionMissingException);\n        }\n    }"
    },
    "aSource": {
      "startLine": 115,
      "code": "@Test\n    public void testGetSessionThrowException() throws RepositoryException {\n        when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(mock(Session.class));\n        when(mockTxService.getTransaction(\"123\", null)).thenThrow(\n                new TransactionMissingException(\"\"));\n        try {\n            testObj.getSession(mockRequest);\n        } catch (final RuntimeException e) {\n            final Throwable rootCause = Throwables.getRootCause(e);\n            assertTrue(\"TransactionMissionException expected\",\n                    rootCause instanceof TransactionMissingException);\n        }\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "c751b764c7",
    "aCommit": "b4b348128c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");",
          "type": "DELETE",
          "lineNo": 116
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");",
          "type": "ADD",
          "lineNo": 117
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRequestURI()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRequestURI()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPathInfo()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPathInfo()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRequestURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "getPathInfo",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        125
      ]
    },
    "aCommitTime": 1413301771,
    "ID": "fcrepo/fcrepo:438",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetAuthenticatedSessionWithTransaction()",
    "bSource": {
      "startLine": 129,
      "code": "@Test\n    public void testGetAuthenticatedSessionWithTransaction()\n            throws RepositoryException {\n        final String fedoraUser = \"fedoraUser\";\n        when(mockRequest.getUserPrincipal()).thenReturn(mockUser);\n        when(mockUser.getName()).thenReturn(fedoraUser);\n        when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(txSession);\n        when(mockTx.isAssociatedWithUser(eq(fedoraUser))).thenReturn(true);\n        when(mockTxService.getTransaction(\"123\", fedoraUser))\n                .thenReturn(mockTx);\n        final Session session = testObj.getSession(mockRequest);\n        assertEquals(txSession, ((LockReleasingSession) Proxy.getInvocationHandler(session)).getWrappedSession());\n        verify(mockTx).getSession();\n    }"
    },
    "aSource": {
      "startLine": 130,
      "code": "@Test\n    public void testGetAuthenticatedSessionWithTransaction()\n            throws RepositoryException {\n        final String fedoraUser = \"fedoraUser\";\n        when(mockRequest.getUserPrincipal()).thenReturn(mockUser);\n        when(mockUser.getName()).thenReturn(fedoraUser);\n        when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(txSession);\n        when(mockTx.isAssociatedWithUser(eq(fedoraUser))).thenReturn(true);\n        when(mockTxService.getTransaction(\"123\", fedoraUser))\n                .thenReturn(mockTx);\n        final Session session = testObj.getSession(mockRequest);\n        assertEquals(txSession, ((LockReleasingSession) Proxy.getInvocationHandler(session)).getWrappedSession());\n        verify(mockTx).getSession();\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "c751b764c7",
    "aCommit": "b4b348128c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");",
          "type": "DELETE",
          "lineNo": 135
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");",
          "type": "ADD",
          "lineNo": 136
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRequestURI()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRequestURI()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPathInfo()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPathInfo()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRequestURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "getPathInfo",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        141
      ]
    },
    "aCommitTime": 1413301771,
    "ID": "fcrepo/fcrepo:439",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetSessionWithNullPath()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testGetSessionWithNullPath() throws RepositoryException {\n        when(mockRequest.getRequestURI()).thenReturn(null);\n        when(mockRepo.login(any(Credentials.class))).thenReturn(mockSession);\n        testObj.getSession(mockRequest);\n        verify(mockRepo).login(any(ServletCredentials.class));\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testGetSessionWithNullPath() throws RepositoryException {\n        when(mockRequest.getPathInfo()).thenReturn(null);\n        when(mockRequest.getContextPath()).thenReturn(\"\");\n        when(mockRepo.login(any(Credentials.class))).thenReturn(mockSession);\n        testObj.getSession(mockRequest);\n        verify(mockRepo).login(any(ServletCredentials.class));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "c751b764c7",
    "aCommit": "b4b348128c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRequest.getRequestURI()).thenReturn(null);",
          "type": "DELETE",
          "lineNo": 86
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockRequest.getPathInfo()).thenReturn(null);",
          "type": "ADD",
          "lineNo": 86
        },
        {
          "line": "when(mockRequest.getContextPath()).thenReturn(\"\");",
          "type": "ADD",
          "lineNo": 87
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRequestURI()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRequestURI()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPathInfo()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPathInfo()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getContextPath()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getContextPath()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRequestURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "getPathInfo",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        88
      ]
    },
    "aCommitTime": 1413301771,
    "ID": "fcrepo/fcrepo:440",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetEmbeddedIdTx()",
    "bSource": {
      "startLine": 145,
      "code": "@Test\n    public void testGetEmbeddedIdTx() {\n        when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");\n        final String txId = testObj.getEmbeddedId(mockRequest, SessionFactory.Prefix.TX);\n        assertEquals(\"txId should be 123\", \"123\", txId);\n    }"
    },
    "aSource": {
      "startLine": 146,
      "code": "@Test\n    public void testGetEmbeddedIdTx() {\n        when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");\n        final String txId = testObj.getEmbeddedId(mockRequest, SessionFactory.Prefix.TX);\n        assertEquals(\"txId should be 123\", \"123\", txId);\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "c751b764c7",
    "aCommit": "b4b348128c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");",
          "type": "DELETE",
          "lineNo": 147
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");",
          "type": "ADD",
          "lineNo": 148
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRequestURI()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRequestURI()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPathInfo()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPathInfo()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getRequestURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "getPathInfo",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        149
      ]
    },
    "aCommitTime": 1413301771,
    "ID": "fcrepo/fcrepo:441",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateModeRootNodesWithRepositoryWideLinks()",
    "bSource": {
      "startLine": 102,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n        when(mockNodeType.isNodeType(ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"nt:root\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockNode);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SITEMAP));\n        assertTrue(model.contains(graphSubject, HAS_TRANSACTION_SERVICE));\n    }"
    },
    "aSource": {
      "startLine": 101,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n        when(mockNodeType.isNodeType(ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"nt:root\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockNode);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_TRANSACTION_SERVICE));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "b7e8802303",
    "aCommit": "b8881de150",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(model.contains(graphSubject, HAS_SITEMAP));",
          "type": "DELETE",
          "lineNo": 115
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_SITEMAP"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        114
      ]
    },
    "aCommitTime": 1413234432,
    "ID": "fcrepo/fcrepo:447",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateModeRootNodesWithRepositoryWideLinks()",
    "bSource": {
      "startLine": 103,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n        when(mockNodeType.isNodeType(ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"nt:root\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockNode);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SITEMAP));\n        assertTrue(model.contains(graphSubject, HAS_TRANSACTION_SERVICE));\n        assertTrue(model.contains(graphSubject, HAS_NAMESPACE_SERVICE));\n    }"
    },
    "aSource": {
      "startLine": 102,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n        when(mockNodeType.isNodeType(ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"nt:root\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockNode);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SITEMAP));\n        assertTrue(model.contains(graphSubject, HAS_TRANSACTION_SERVICE));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "bed38d6acb",
    "aCommit": "9b52232d4d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(model.contains(graphSubject, HAS_NAMESPACE_SERVICE));",
          "type": "DELETE",
          "lineNo": 118
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_NAMESPACE_SERVICE"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        117
      ]
    },
    "aCommitTime": 1413224424,
    "ID": "fcrepo/fcrepo:331",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateModeRootNodesWithRepositoryWideLinks()",
    "bSource": {
      "startLine": 104,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n        when(mockNodeType.isNodeType(ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"nt:root\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockNode);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SEARCH_SERVICE));\n        assertTrue(model.contains(graphSubject, HAS_SITEMAP));\n        assertTrue(model.contains(graphSubject, HAS_TRANSACTION_SERVICE));\n        assertTrue(model.contains(graphSubject, HAS_NAMESPACE_SERVICE));\n    }"
    },
    "aSource": {
      "startLine": 103,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n        when(mockNodeType.isNodeType(ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"nt:root\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockNode);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SITEMAP));\n        assertTrue(model.contains(graphSubject, HAS_TRANSACTION_SERVICE));\n        assertTrue(model.contains(graphSubject, HAS_NAMESPACE_SERVICE));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "8abf1f9023",
    "aCommit": "7afa958ce7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(model.contains(graphSubject, HAS_SEARCH_SERVICE));",
          "type": "DELETE",
          "lineNo": 117
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_SEARCH_SERVICE"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        116
      ]
    },
    "aCommitTime": 1413223305,
    "ID": "fcrepo/fcrepo:245",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateModeRootNodesWithRepositoryWideLinks()",
    "bSource": {
      "startLine": 105,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n        when(mockNodeType.isNodeType(ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"nt:root\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockNode);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SEARCH_SERVICE));\n        assertTrue(model.contains(graphSubject, HAS_SITEMAP));\n        assertTrue(model.contains(graphSubject, HAS_TRANSACTION_SERVICE));\n        assertTrue(model.contains(graphSubject, HAS_NAMESPACE_SERVICE));\n        assertTrue(model.contains(graphSubject, HAS_WORKSPACE_SERVICE));\n    }"
    },
    "aSource": {
      "startLine": 104,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n        when(mockNodeType.isNodeType(ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"nt:root\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.reverse().convert(mockNode);\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo, mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SEARCH_SERVICE));\n        assertTrue(model.contains(graphSubject, HAS_SITEMAP));\n        assertTrue(model.contains(graphSubject, HAS_TRANSACTION_SERVICE));\n        assertTrue(model.contains(graphSubject, HAS_NAMESPACE_SERVICE));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "7dc0fcd6c2",
    "aCommit": "2256cded5e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(model.contains(graphSubject, HAS_WORKSPACE_SERVICE));",
          "type": "DELETE",
          "lineNo": 122
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model model"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,org.fcrepo.kernel.Property)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_WORKSPACE_SERVICE"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        121
      ]
    },
    "aCommitTime": 1413213964,
    "ID": "fcrepo/fcrepo:72",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.TransactionServiceImplIT.testCommit()",
    "bSource": {
      "startLine": 113,
      "code": "@Test\n    public void testCommit() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        transactionService.commit( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertTrue( objectService.exists(session2,\"/\" + pid) );\n    }"
    },
    "aSource": {
      "startLine": 113,
      "code": "@Test\n    public void testCommit() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        transactionService.commit( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertTrue( nodeService.exists(session2,\"/\" + pid) );\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "bCommit": "93c32e8c76",
    "aCommit": "8656ea7ec2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue( objectService.exists(session2,\"/\" + pid) );",
          "type": "DELETE",
          "lineNo": 126
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue( nodeService.exists(session2,\"/\" + pid) );",
          "type": "ADD",
          "lineNo": 126
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.exists(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.exists(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session2"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.exists(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.exists(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session2"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "objectService",
          "childCount": 1
        },
        "dstNode": {
          "label": "nodeService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        126
      ]
    },
    "aCommitTime": 1413211642,
    "ID": "fcrepo/fcrepo:289",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.TransactionServiceImplIT.testRollback()",
    "bSource": {
      "startLine": 97,
      "code": "@Test\n    public void testRollback() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        transactionService.rollback( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertFalse( objectService.exists(session2,\"/\" + pid) );\n    }"
    },
    "aSource": {
      "startLine": 97,
      "code": "@Test\n    public void testRollback() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        transactionService.rollback( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertFalse( nodeService.exists(session2,\"/\" + pid) );\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "bCommit": "93c32e8c76",
    "aCommit": "8656ea7ec2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertFalse( objectService.exists(session2,\"/\" + pid) );",
          "type": "DELETE",
          "lineNo": 110
        }
      ],
      "targetChanges": [
        {
          "line": "assertFalse( nodeService.exists(session2,\"/\" + pid) );",
          "type": "ADD",
          "lineNo": 110
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.exists(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.exists(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session2"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.exists(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.exists(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session2"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "objectService",
          "childCount": 1
        },
        "dstNode": {
          "label": "nodeService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        110
      ]
    },
    "aCommitTime": 1413211642,
    "ID": "fcrepo/fcrepo:290",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.TransactionServiceImplIT.testTransactionExpire()",
    "bSource": {
      "startLine": 81,
      "code": "@Test\n    public void testTransactionExpire() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        t.expire();\n        transactionService.removeAndRollbackExpired();\n\n        final Session session2 = repository.login();\n        assertFalse( objectService.exists(session2,\"/\" + pid) );\n    }"
    },
    "aSource": {
      "startLine": 81,
      "code": "@Test\n    public void testTransactionExpire() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        t.expire();\n        transactionService.removeAndRollbackExpired();\n\n        final Session session2 = repository.login();\n        assertFalse( nodeService.exists(session2,\"/\" + pid) );\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "bCommit": "93c32e8c76",
    "aCommit": "8656ea7ec2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertFalse( objectService.exists(session2,\"/\" + pid) );",
          "type": "DELETE",
          "lineNo": 94
        }
      ],
      "targetChanges": [
        {
          "line": "assertFalse( nodeService.exists(session2,\"/\" + pid) );",
          "type": "ADD",
          "lineNo": 94
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.Service.exists(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.Service.exists(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session2"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertFalse(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.exists(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.exists(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session2"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "objectService",
          "childCount": 1
        },
        "dstNode": {
          "label": "nodeService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        94
      ]
    },
    "aCommitTime": 1413211642,
    "ID": "fcrepo/fcrepo:291",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testChecksumBlobsForValuesWithoutChecksums()",
    "bSource": {
      "startLine": 292,
      "code": "@Test\n    public void testChecksumBlobsForValuesWithoutChecksums() throws Exception {\n\n        final Session session = repo.login();\n        final javax.jcr.ValueFactory factory = session.getValueFactory();\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testLLObject\");\n\n        final Node testRandomContentNode = object.getNode().addNode(\"testRandomContent\", NT_FILE);\n        testRandomContentNode.addMixin(FEDORA_DATASTREAM);\n        final Node testRandomContent = testRandomContentNode.addNode(JCR_CONTENT, NT_RESOURCE);\n        testRandomContent.setProperty(JCR_DATA,\n                factory.createBinary(new ByteArrayInputStream(\"0123456789\".getBytes())));\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/testRandomContent\");\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            assertFalse(fixityResult.matches(ds.getContentSize(), ds.getContentDigest()));\n            Util.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 292,
      "code": "@Test\n    public void testChecksumBlobsForValuesWithoutChecksums() throws Exception {\n\n        final Session session = repo.login();\n        final javax.jcr.ValueFactory factory = session.getValueFactory();\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testLLObject\");\n\n        final Node testRandomContentNode = object.getNode().addNode(\"testRandomContent\", NT_FILE);\n        testRandomContentNode.addMixin(FEDORA_DATASTREAM);\n        final Node testRandomContent = testRandomContentNode.addNode(JCR_CONTENT, NT_RESOURCE);\n        testRandomContent.setProperty(JCR_DATA,\n                factory.createBinary(new ByteArrayInputStream(\"0123456789\".getBytes())));\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/testRandomContent\");\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(algorithm);\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            assertFalse(fixityResult.matches(ds.getContentSize(), ds.getContentDigest()));\n            Util.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "93c32e8c76",
    "aCommit": "8656ea7ec2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);",
          "type": "DELETE",
          "lineNo": 311
        }
      ],
      "targetChanges": [
        {
          "line": "final Collection<FixityResult> fixityResults = ds.getFixity(algorithm);",
          "type": "ADD",
          "lineNo": 311
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.Collection fixityResults"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResult"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(Repository,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraBinary ds"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(Repository,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Repository repo"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String algorithm"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.Collection fixityResults"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResult"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraBinary ds"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String algorithm"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "repo",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        311
      ]
    },
    "aCommitTime": 1413211642,
    "ID": "fcrepo/fcrepo:292",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testChecksumBlobsForInMemoryValues()",
    "bSource": {
      "startLine": 263,
      "code": "@Test\n    public void testChecksumBlobsForInMemoryValues() throws Exception {\n\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testLLObject\");\n        datastreamService.getBinary(session, \"/testLLObject/testMemoryContent\").setContent(\n                new ByteArrayInputStream(\"0123456789\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/testMemoryContent\");\n\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 263,
      "code": "@Test\n    public void testChecksumBlobsForInMemoryValues() throws Exception {\n\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testLLObject\");\n        datastreamService.getBinary(session, \"/testLLObject/testMemoryContent\").setContent(\n                new ByteArrayInputStream(\"0123456789\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/testMemoryContent\");\n\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(algorithm);\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "93c32e8c76",
    "aCommit": "8656ea7ec2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);",
          "type": "DELETE",
          "lineNo": 283
        }
      ],
      "targetChanges": [
        {
          "line": "final Collection<FixityResult> fixityResults = ds.getFixity(algorithm);",
          "type": "ADD",
          "lineNo": 283
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.Collection fixityResults"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResult"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(Repository,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraBinary ds"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(Repository,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Repository repo"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String algorithm"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.Collection fixityResults"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResult"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraBinary ds"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String algorithm"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "repo",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        283
      ]
    },
    "aCommitTime": 1413211642,
    "ID": "fcrepo/fcrepo:293",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testChecksumBlobs()",
    "bSource": {
      "startLine": 231,
      "code": "@Test\n    public void testChecksumBlobs() throws Exception {\n\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testLLObject\");\n\n        datastreamService.getBinary(session, \"/testLLObject/testRepositoryContent\").setContent(\n                new ByteArrayInputStream(\"01234567890123456789012345678901234567890123456789\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/\"\n                        + \"testRepositoryContent\");\n\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:9578f951955d37f20b601c26591e260c1e5389bf\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 231,
      "code": "@Test\n    public void testChecksumBlobs() throws Exception {\n\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testLLObject\");\n\n        datastreamService.getBinary(session, \"/testLLObject/testRepositoryContent\").setContent(\n                new ByteArrayInputStream(\"01234567890123456789012345678901234567890123456789\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/\"\n                        + \"testRepositoryContent\");\n\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(algorithm);\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:9578f951955d37f20b601c26591e260c1e5389bf\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "93c32e8c76",
    "aCommit": "8656ea7ec2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);",
          "type": "DELETE",
          "lineNo": 253
        }
      ],
      "targetChanges": [
        {
          "line": "final Collection<FixityResult> fixityResults = ds.getFixity(algorithm);",
          "type": "ADD",
          "lineNo": 253
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.Collection fixityResults"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResult"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(Repository,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraBinary ds"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(Repository,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Repository repo"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String algorithm"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.Collection fixityResults"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResult"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraBinary ds"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String algorithm"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "repo",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        253
      ]
    },
    "aCommitTime": 1413211642,
    "ID": "fcrepo/fcrepo:294",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraFixityTest.testGetDatastreamFixity()",
    "bSource": {
      "startLine": 79,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException {\n        final RdfStream expected = new RdfStream();\n        final String externalPath = \"objects/FedoraDatastreamsTest1/testDS\";\n\n        when(mockNode.getSession()).thenReturn(mockSession);\n\n        doReturn(mockBinary).when(testObj).getResourceFromPath(externalPath);\n        when(mockDatastreams.getFixityResultsModel(any(IdentifierConverter.class), eq(mockBinary)))\n                .thenReturn(expected);\n\n        final RdfStream actual = testObj.getDatastreamFixity(externalPath, mockRequest, uriInfo);\n\n        assertEquals(expected, actual);\n    }"
    },
    "aSource": {
      "startLine": 78,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException {\n        final RdfStream expected = new RdfStream();\n        final String externalPath = \"objects/FedoraDatastreamsTest1/testDS\";\n\n        when(mockNode.getSession()).thenReturn(mockSession);\n\n        doReturn(mockBinary).when(testObj).getResourceFromPath(externalPath);\n        when(mockBinary.getFixity(any(IdentifierConverter.class))).thenReturn(expected);\n\n        final RdfStream actual = testObj.getDatastreamFixity(externalPath, mockRequest, uriInfo);\n\n        assertEquals(expected, actual);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "bCommit": "8656ea7ec2",
    "aCommit": "ddcdbc818e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getFixityResultsModel(any(IdentifierConverter.class), eq(mockBinary)))",
          "type": "DELETE",
          "lineNo": 87
        },
        {
          "line": ".thenReturn(expected);",
          "type": "DELETE",
          "lineNo": 88
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockBinary.getFixity(any(IdentifierConverter.class))).thenReturn(expected);",
          "type": "ADD",
          "lineNo": 86
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getFixityResultsModel(IdentifierConverter,FedoraBinary)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getFixityResultsModel(IdentifierConverter,FedoraBinary)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream expected"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(IdentifierConverter)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraBinary mockBinary"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraBinary.getFixity(IdentifierConverter)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream expected"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "when",
          "childCount": 1
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getFixityResultsModel",
          "childCount": 3
        },
        "dstNode": {
          "label": "when",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        },
        "dstNode": {
          "label": "getFixity",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "when",
          "childCount": 1
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        },
        "dstNode": {
          "label": "any",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        86
      ]
    },
    "aCommitTime": 1413211642,
    "ID": "fcrepo/fcrepo:485",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.repository.FedoraRepositoriesPropertiesTest.testSparqlUpdate()",
    "bSource": {
      "startLine": 72,
      "code": "@Test\n    public void testSparqlUpdate() throws RepositoryException, IOException {\n        final InputStream mockStream =\n            new ByteArrayInputStream(\"my-sparql-statement\".getBytes());\n        when(mockNodes.getObject(mockSession, \"/\")).thenReturn(mockObject);\n        when(\n                mockObject.updatePropertiesDataset(any(IdentifierConverter.class),\n                        any(String.class))).thenReturn(mockDataset);\n        testObj.updateSparql(mockStream);\n\n        verify(mockObject).updatePropertiesDataset(any(IdentifierConverter.class),\n                eq(\"my-sparql-statement\"));\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 72,
      "code": "@Test\n    public void testSparqlUpdate() throws RepositoryException, IOException {\n        final InputStream mockStream =\n            new ByteArrayInputStream(\"my-sparql-statement\".getBytes());\n        when(mockNodes.getObject(mockSession, \"/\")).thenReturn(mockObject);\n        testObj.updateSparql(mockStream);\n\n        verify(mockObject).updatePropertiesDataset(any(IdentifierConverter.class),\n                eq(\"my-sparql-statement\"));\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/repository/FedoraRepositoriesPropertiesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/repository/FedoraRepositoriesPropertiesTest.java",
    "bCommit": "ccfa1f6dfe",
    "aCommit": "90e0ead478",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(",
          "type": "DELETE",
          "lineNo": 77
        },
        {
          "line": "mockObject.updatePropertiesDataset(any(IdentifierConverter.class),",
          "type": "DELETE",
          "lineNo": 78
        },
        {
          "line": "any(String.class))).thenReturn(mockDataset);",
          "type": "DELETE",
          "lineNo": 79
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        78
      ]
    },
    "aCommitTime": 1413211641,
    "ID": "fcrepo/fcrepo:316",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testBatchSparqlUpdate()",
    "bSource": {
      "startLine": 169,
      "code": "@Test\n    public void testBatchSparqlUpdate() throws Exception {\n\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockSession.getNode(path)).thenReturn(mockNode);\n        when(mockNodes.exists(mockSession, path + \"/.\")).thenReturn(true);\n        doReturn(mockObject).when(testObj).getResourceFromPath(path + \"/.\");\n\n        final Dataset mockDataset = mock(Dataset.class);\n        final Model mockProblems = mock(Model.class);\n        when(mockDataset.getNamedModel(PROBLEMS_MODEL_NAME)).thenReturn(mockProblems);\n        when(mockProblems.isEmpty()).thenReturn(true);\n        when(mockObject.updatePropertiesDataset(any(IdentifierConverter.class), eq(\"xyz\"))).thenReturn(mockDataset);\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\".\",\n                                                               IOUtils.toInputStream(\"xyz\"),\n                                                               null,\n                                                               MediaType.valueOf(contentTypeSPARQLUpdate));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=\\\".\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        testObj.batchModify(multipart);\n        verify(mockObject).updatePropertiesDataset(any(IdentifierConverter.class), eq(\"xyz\"));\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 167,
      "code": "@Test\n    public void testBatchSparqlUpdate() throws Exception {\n\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockSession.getNode(path)).thenReturn(mockNode);\n        when(mockNodes.exists(mockSession, path + \"/.\")).thenReturn(true);\n        doReturn(mockObject).when(testObj).getResourceFromPath(path + \"/.\");\n\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\".\",\n                                                               IOUtils.toInputStream(\"xyz\"),\n                                                               null,\n                                                               MediaType.valueOf(contentTypeSPARQLUpdate));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=\\\".\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        testObj.batchModify(multipart);\n        verify(mockObject).updatePropertiesDataset(any(IdentifierConverter.class), eq(\"xyz\"));\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "ccfa1f6dfe",
    "aCommit": "90e0ead478",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Dataset mockDataset = mock(Dataset.class);",
          "type": "DELETE",
          "lineNo": 178
        },
        {
          "line": "final Model mockProblems = mock(Model.class);",
          "type": "DELETE",
          "lineNo": 179
        },
        {
          "line": "when(mockDataset.getNamedModel(PROBLEMS_MODEL_NAME)).thenReturn(mockProblems);",
          "type": "DELETE",
          "lineNo": 180
        },
        {
          "line": "when(mockProblems.isEmpty()).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 181
        },
        {
          "line": "when(mockObject.updatePropertiesDataset(any(IdentifierConverter.class), eq(\"xyz\"))).thenReturn(mockDataset);",
          "type": "DELETE",
          "lineNo": 182
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.Dataset"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model mockProblems"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.rdf.model.Model)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNamedModel(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNamedModel(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PROBLEMS_MODEL_NAME"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.rdf.model.Model)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockProblems"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockProblems"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'xyz'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockDataset",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockProblems",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        176,
        178,
        180
      ]
    },
    "aCommitTime": 1413211641,
    "ID": "fcrepo/fcrepo:317",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPatchBinaryDescription()",
    "bSource": {
      "startLine": 608,
      "code": "@Test\n    public void testPatchBinaryDescription() throws Exception {\n\n        final Datastream mockObject = (Datastream)setResource(Datastream.class);\n        doReturn(mockObject).when(testObj).resource();\n        when(mockObject.getContentNode()).thenReturn(mockBinaryNode);\n\n        final Dataset dataset = mock(Dataset.class);\n        final Model mockModel = mock(Model.class);\n        when(dataset.getNamedModel(PROBLEMS_MODEL_NAME)).thenReturn(mockModel);\n        when(mockModel.isEmpty()).thenReturn(true);\n        when(mockObject.updatePropertiesDataset(identifierConverter, \"xyz\")).thenReturn(dataset);\n        testObj.updateSparql(toInputStream(\"xyz\"));\n        verify(mockVersionService).nodeUpdated(mockObject.getNode());\n        verify(mockVersionService).nodeUpdated(mockObject.getContentNode());\n    }"
    },
    "aSource": {
      "startLine": 601,
      "code": "@Test\n    public void testPatchBinaryDescription() throws Exception {\n\n        final Datastream mockObject = (Datastream)setResource(Datastream.class);\n        doReturn(mockObject).when(testObj).resource();\n        when(mockObject.getContentNode()).thenReturn(mockBinaryNode);\n\n        testObj.updateSparql(toInputStream(\"xyz\"));\n        verify(mockVersionService).nodeUpdated(mockObject.getNode());\n        verify(mockVersionService).nodeUpdated(mockObject.getContentNode());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "ccfa1f6dfe",
    "aCommit": "90e0ead478",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Dataset dataset = mock(Dataset.class);",
          "type": "DELETE",
          "lineNo": 615
        },
        {
          "line": "final Model mockModel = mock(Model.class);",
          "type": "DELETE",
          "lineNo": 616
        },
        {
          "line": "when(dataset.getNamedModel(PROBLEMS_MODEL_NAME)).thenReturn(mockModel);",
          "type": "DELETE",
          "lineNo": 617
        },
        {
          "line": "when(mockModel.isEmpty()).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 618
        },
        {
          "line": "when(mockObject.updatePropertiesDataset(identifierConverter, \"xyz\")).thenReturn(dataset);",
          "type": "DELETE",
          "lineNo": 619
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.Dataset"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.rdf.model.Model)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNamedModel(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNamedModel(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PROBLEMS_MODEL_NAME"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.rdf.model.Model)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'xyz'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "dataset",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockModel",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        608,
        610,
        612
      ]
    },
    "aCommitTime": 1413211641,
    "ID": "fcrepo/fcrepo:318",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObjectWithSparql()",
    "bSource": {
      "startLine": 656,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Dataset dataset = mock(Dataset.class);\n        final Model mockModel = mock(Model.class);\n        when(dataset.getNamedModel(PROBLEMS_MODEL_NAME)).thenReturn(mockModel);\n        when(mockModel.isEmpty()).thenReturn(true);\n        when(mockObject.updatePropertiesDataset(identifierConverter, \"x\")).thenReturn(dataset);\n\n        final Response actual = testObj.createObject(null, null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).updatePropertiesDataset(identifierConverter, \"x\");\n    }"
    },
    "aSource": {
      "startLine": 644,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).updatePropertiesDataset(identifierConverter, \"x\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "ccfa1f6dfe",
    "aCommit": "90e0ead478",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Dataset dataset = mock(Dataset.class);",
          "type": "DELETE",
          "lineNo": 663
        },
        {
          "line": "final Model mockModel = mock(Model.class);",
          "type": "DELETE",
          "lineNo": 664
        },
        {
          "line": "when(dataset.getNamedModel(PROBLEMS_MODEL_NAME)).thenReturn(mockModel);",
          "type": "DELETE",
          "lineNo": 665
        },
        {
          "line": "when(mockModel.isEmpty()).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 666
        },
        {
          "line": "when(mockObject.updatePropertiesDataset(identifierConverter, \"x\")).thenReturn(dataset);",
          "type": "DELETE",
          "lineNo": 667
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.Dataset"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.rdf.model.Model)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNamedModel(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNamedModel(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PROBLEMS_MODEL_NAME"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.rdf.model.Model)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'x'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "dataset",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockModel",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        651,
        653,
        655
      ]
    },
    "aCommitTime": 1413211641,
    "ID": "fcrepo/fcrepo:319",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testPatchObject()",
    "bSource": {
      "startLine": 594,
      "code": "@Test\n    public void testPatchObject() throws Exception {\n\n        final FedoraResource mockObject = setResource(FedoraObject.class);\n\n        final Dataset dataset = mock(Dataset.class);\n        final Model mockModel = mock(Model.class);\n        when(dataset.getNamedModel(PROBLEMS_MODEL_NAME)).thenReturn(mockModel);\n        when(mockModel.isEmpty()).thenReturn(true);\n        when(mockObject.updatePropertiesDataset(identifierConverter, \"xyz\")).thenReturn(dataset);\n        testObj.updateSparql(toInputStream(\"xyz\"));\n        verify(mockVersionService).nodeUpdated(mockObject.getNode());\n    }"
    },
    "aSource": {
      "startLine": 592,
      "code": "@Test\n    public void testPatchObject() throws Exception {\n\n        final FedoraResource mockObject = setResource(FedoraObject.class);\n\n        testObj.updateSparql(toInputStream(\"xyz\"));\n        verify(mockVersionService).nodeUpdated(mockObject.getNode());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "ccfa1f6dfe",
    "aCommit": "90e0ead478",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Dataset dataset = mock(Dataset.class);",
          "type": "DELETE",
          "lineNo": 599
        },
        {
          "line": "final Model mockModel = mock(Model.class);",
          "type": "DELETE",
          "lineNo": 600
        },
        {
          "line": "when(dataset.getNamedModel(PROBLEMS_MODEL_NAME)).thenReturn(mockModel);",
          "type": "DELETE",
          "lineNo": 601
        },
        {
          "line": "when(mockModel.isEmpty()).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 602
        },
        {
          "line": "when(mockObject.updatePropertiesDataset(identifierConverter, \"xyz\")).thenReturn(dataset);",
          "type": "DELETE",
          "lineNo": 603
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.Dataset"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.rdf.model.Model)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNamedModel(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNamedModel(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PROBLEMS_MODEL_NAME"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.rdf.model.Model)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraResource mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'xyz'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "dataset",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockModel",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        597,
        599,
        601
      ]
    },
    "aCommitTime": 1413211641,
    "ID": "fcrepo/fcrepo:320",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLdpTest.testCreateNewObjectWithSparql()",
    "bSource": {
      "startLine": 656,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Response actual = testObj.createObject(null, null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).updatePropertiesDataset(identifierConverter, \"x\");\n    }"
    },
    "aSource": {
      "startLine": 656,
      "code": "@Test\n    public void testCreateNewObjectWithSparql() throws Exception {\n\n        setResource(FedoraObject.class);\n\n        when(mockObjectService.findOrCreateObject(mockSession, \"/b\")).thenReturn(mockObject);\n\n        final Dataset dataset = mock(Dataset.class);\n        final Model mockModel = mock(Model.class);\n        when(dataset.getNamedModel(PROBLEMS_MODEL_NAME)).thenReturn(mockModel);\n        when(mockModel.isEmpty()).thenReturn(true);\n        when(mockObject.updatePropertiesDataset(identifierConverter, \"x\")).thenReturn(dataset);\n\n        final Response actual = testObj.createObject(null, null, null,\n                MediaType.valueOf(contentTypeSPARQLUpdate), \"b\", toInputStream(\"x\"));\n\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockObject).updatePropertiesDataset(identifierConverter, \"x\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java",
    "bCommit": "e6f697e701",
    "aCommit": "5026629dca",
    "hunk": {
      "targetChanges": [
        {
          "line": "final Dataset dataset = mock(Dataset.class);",
          "type": "ADD",
          "lineNo": 663
        },
        {
          "line": "final Model mockModel = mock(Model.class);",
          "type": "ADD",
          "lineNo": 664
        },
        {
          "line": "when(dataset.getNamedModel(PROBLEMS_MODEL_NAME)).thenReturn(mockModel);",
          "type": "ADD",
          "lineNo": 665
        },
        {
          "line": "when(mockModel.isEmpty()).thenReturn(true);",
          "type": "ADD",
          "lineNo": 666
        },
        {
          "line": "when(mockObject.updatePropertiesDataset(identifierConverter, \"x\")).thenReturn(dataset);",
          "type": "ADD",
          "lineNo": 667
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.Dataset"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.rdf.model.Model)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNamedModel(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNamedModel(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PROBLEMS_MODEL_NAME"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.rdf.model.Model)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.identifiers.IdentifierConverter identifierConverter"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'x'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "dataset",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockModel",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        663
      ]
    },
    "aCommitTime": 1413211640,
    "ID": "fcrepo/fcrepo:172",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.repository.FedoraRepositoriesPropertiesTest.testSparqlUpdate()",
    "bSource": {
      "startLine": 72,
      "code": "@Test\n    public void testSparqlUpdate() throws RepositoryException, IOException {\n        final InputStream mockStream =\n            new ByteArrayInputStream(\"my-sparql-statement\".getBytes());\n        when(mockNodes.getObject(mockSession, \"/\")).thenReturn(mockObject);\n        when(\n                mockObject.updatePropertiesDataset(any(IdentifierConverter.class),\n                        any(String.class))).thenReturn(mockDataset);\n        testObj.updateSparql(mockStream);\n\n        verify(mockObject).updatePropertiesDataset(any(IdentifierConverter.class),\n                eq(\"my-sparql-statement\"));\n        verify(mockSession).save();\n        verify(mockSession).logout();\n    }"
    },
    "aSource": {
      "startLine": 72,
      "code": "@Test\n    public void testSparqlUpdate() throws RepositoryException, IOException {\n        final InputStream mockStream =\n            new ByteArrayInputStream(\"my-sparql-statement\".getBytes());\n        when(mockNodes.getObject(mockSession, \"/\")).thenReturn(mockObject);\n        when(\n                mockObject.updatePropertiesDataset(any(IdentifierConverter.class),\n                        any(String.class))).thenReturn(mockDataset);\n        testObj.updateSparql(mockStream);\n\n        verify(mockObject).updatePropertiesDataset(any(IdentifierConverter.class),\n                eq(\"my-sparql-statement\"));\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/repository/FedoraRepositoriesPropertiesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/repository/FedoraRepositoriesPropertiesTest.java",
    "bCommit": "5026629dca",
    "aCommit": "ccfa1f6dfe",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockSession).logout();",
          "type": "DELETE",
          "lineNo": 85
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "logout()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "logout()"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "logout",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        85
      ]
    },
    "aCommitTime": 1413211640,
    "ID": "fcrepo/fcrepo:452",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.JcrPropertyStatementListenerTest.testRemovedStatement()",
    "bSource": {
      "startLine": 175,
      "code": "@Test\n    public void testRemovedStatement() throws RepositoryException {\n        final String mockPropertyName = \"mock:property\";\n        when(mockJcrRdfTools.getPropertyNameFromPredicate(mockSubjectNode, mockPredicate))\n                .thenReturn(mockPropertyName);\n        when(mockSubjectNode.hasProperty(mockPropertyName)).thenReturn(true);\n        when(mockPropertiesTools.getPropertyType(mockSubjectNode, mockPropertyName)).thenReturn(\n                STRING);\n        testObj.removedStatement(mockStatement);\n        verify(mockProblems, times(0)).add(any(Resource.class), any(Property.class), any(String.class));\n    }"
    },
    "aSource": {
      "startLine": 175,
      "code": "@Test\n    public void testRemovedStatement() throws RepositoryException {\n        final String mockPropertyName = \"mock:property\";\n        when(mockJcrRdfTools.getPropertyNameFromPredicate(mockSubjectNode, mockPredicate, mockNsMapping))\n                .thenReturn(mockPropertyName);\n        when(mockSubjectNode.hasProperty(mockPropertyName)).thenReturn(true);\n        when(mockPropertiesTools.getPropertyType(mockSubjectNode, mockPropertyName)).thenReturn(\n                STRING);\n        testObj.removedStatement(mockStatement);\n        verify(mockProblems, times(0)).add(any(Resource.class), any(Property.class), any(String.class));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/JcrPropertyStatementListenerTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/JcrPropertyStatementListenerTest.java",
    "bCommit": "4ed728a03a",
    "aCommit": "786548321a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockJcrRdfTools.getPropertyNameFromPredicate(mockSubjectNode, mockPredicate))",
          "type": "DELETE",
          "lineNo": 178
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockJcrRdfTools.getPropertyNameFromPredicate(mockSubjectNode, mockPredicate, mockNsMapping))",
          "type": "ADD",
          "lineNo": 178
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.rdf.JcrRdfTools.getPropertyNameFromPredicate(Node,Property)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.rdf.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.rdf.JcrRdfTools.getPropertyNameFromPredicate(Node,Property)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockSubjectNode"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property mockPredicate"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.impl.rdf.JcrRdfTools.getPropertyNameFromPredicate(Node,Resource,Map)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.rdf.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.impl.rdf.JcrRdfTools.getPropertyNameFromPredicate(Node,Resource,Map)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockSubjectNode"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property mockPredicate"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.Map mockNsMapping"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockNsMapping",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        178
      ]
    },
    "aCommitTime": 1413211636,
    "ID": "fcrepo/fcrepo:244",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testModifyBinaryRdfContent()",
    "bSource": {
      "startLine": 264,
      "code": "@Test\n    public void testModifyBinaryRdfContent() throws Exception {\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\"xyz\",\n                                                               IOUtils.toInputStream(\"<> <info:a> 'xyz'\"),\n                                                               \"filename.txt\",\n                                                               MediaType.valueOf(contentTypeTurtle));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=xyz;filename=\\\"filename.txt\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(\"/{}\" + pid + \"/{}xyz\")))\n                .thenReturn(mockDatastream);\n\n        final FedoraBinary mockBinary = mock(FedoraBinary.class);\n        when(mockDatastream.getBinary()).thenReturn(mockBinary);\n\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockSession.getNode(path)).thenReturn(mockNode);\n        final Response actual =\n            testObj.batchModify(multipart);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockBinary).setContent(any(InputStream.class), eq(\"text/turtle\"), eq((URI) null), eq(\"filename.txt\"),\n                any(StoragePolicyDecisionPoint.class));\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 264,
      "code": "@Test\n    public void testModifyBinaryRdfContent() throws Exception {\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\"xyz\",\n                                                               IOUtils.toInputStream(\"<> <info:a> 'xyz'\"),\n                                                               \"filename.txt\",\n                                                               MediaType.valueOf(contentTypeTurtle));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=xyz;filename=\\\"filename.txt\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(\"/{}\" + pid + \"/{}xyz\")))\n                .thenReturn(mockDatastream);\n\n        final FedoraBinary mockBinary = mock(FedoraBinary.class);\n        when(mockDatastream.getBinary()).thenReturn(mockBinary);\n\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockSession.getNode(path)).thenReturn(mockNode);\n        final Response actual =\n            testObj.batchModify(multipart);\n        assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n        verify(mockBinary).setContent(any(InputStream.class), eq(\"text/turtle\"), eq((URI) null), eq(\"filename.txt\"),\n                any(StoragePolicyDecisionPoint.class));\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(CREATED.getStatusCode(), actual.getStatus());",
          "type": "DELETE",
          "lineNo": 293
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());",
          "type": "ADD",
          "lineNo": 293
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.Response.Status$CREATED"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatus()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatus()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.Response.Status$NO_CONTENT"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatus()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatus()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.ws.rs.core.Response.Status$CREATED",
          "childCount": 0
        },
        "dstNode": {
          "label": "javax.ws.rs.core.Response.Status$NO_CONTENT",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        293
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:271",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testModifyBinaryContent()",
    "bSource": {
      "startLine": 231,
      "code": "@Test\n    public void testModifyBinaryContent() throws Exception {\n        final String dsId1 = \"testDs1\";\n        final String dsId2 = \"testDs2\";\n        final Map<String, String> atts =\n            ImmutableMap.of(dsId1, \"asdf\", dsId2, \"sdfg\");\n        final MultiPart multipart = getStringsAsMultipart(atts);\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockSession.getNode(path)).thenReturn(\n                mockNode);\n\n        when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(\"/{}\" + pid + \"/{}\" + dsId1)))\n                .thenReturn(mockDatastream);\n        final Datastream mockDatastream2 = mock(Datastream.class);\n        when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(\"/{}\" + pid + \"/{}\" + dsId2)))\n                .thenReturn(mockDatastream2);\n\n        final FedoraBinary mockBinary1 = mock(FedoraBinary.class);\n        final FedoraBinary mockBinary2 = mock(FedoraBinary.class);\n        when(mockDatastream.getBinary()).thenReturn(mockBinary1);\n        when(mockDatastream2.getBinary()).thenReturn(mockBinary2);\n\n        final Response actual =\n            testObj.batchModify(multipart);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockBinary1).setContent(any(InputStream.class), anyString(), eq((URI)null), eq(\"testDs1.txt\"),\n                any(StoragePolicyDecisionPoint.class));\n        verify(mockBinary2).setContent(any(InputStream.class), anyString(), eq((URI)null), eq(\"testDs2.txt\"),\n                any(StoragePolicyDecisionPoint.class));\n\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 231,
      "code": "@Test\n    public void testModifyBinaryContent() throws Exception {\n        final String dsId1 = \"testDs1\";\n        final String dsId2 = \"testDs2\";\n        final Map<String, String> atts =\n            ImmutableMap.of(dsId1, \"asdf\", dsId2, \"sdfg\");\n        final MultiPart multipart = getStringsAsMultipart(atts);\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockSession.getNode(path)).thenReturn(\n                mockNode);\n\n        when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(\"/{}\" + pid + \"/{}\" + dsId1)))\n                .thenReturn(mockDatastream);\n        final Datastream mockDatastream2 = mock(Datastream.class);\n        when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(\"/{}\" + pid + \"/{}\" + dsId2)))\n                .thenReturn(mockDatastream2);\n\n        final FedoraBinary mockBinary1 = mock(FedoraBinary.class);\n        final FedoraBinary mockBinary2 = mock(FedoraBinary.class);\n        when(mockDatastream.getBinary()).thenReturn(mockBinary1);\n        when(mockDatastream2.getBinary()).thenReturn(mockBinary2);\n\n        final Response actual =\n            testObj.batchModify(multipart);\n        assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n        verify(mockBinary1).setContent(any(InputStream.class), anyString(), eq((URI)null), eq(\"testDs1.txt\"),\n                any(StoragePolicyDecisionPoint.class));\n        verify(mockBinary2).setContent(any(InputStream.class), anyString(), eq((URI)null), eq(\"testDs2.txt\"),\n                any(StoragePolicyDecisionPoint.class));\n\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(CREATED.getStatusCode(), actual.getStatus());",
          "type": "DELETE",
          "lineNo": 255
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());",
          "type": "ADD",
          "lineNo": 255
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.Response.Status$CREATED"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatus()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatus()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.Response.Status$NO_CONTENT"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatus()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatus()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.ws.rs.core.Response.Status$CREATED",
          "childCount": 0
        },
        "dstNode": {
          "label": "javax.ws.rs.core.Response.Status$NO_CONTENT",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        255
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:272",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraImportTest.testImportObjectAtRoot()",
    "bSource": {
      "startLine": 90,
      "code": "@Test\n    public void testImportObjectAtRoot() throws Exception {\n        when(mockSerializers.getSerializer(\"fake-format\")).thenReturn(\n                mockSerializer);\n        when(mockNode.getPath()).thenReturn(\"/\");\n        when(mockSession.getNode(\"/\")).thenReturn(mockNode);\n        testObj.importObject(createPathList(), \"fake-format\", mockInputStream);\n        verify(mockSerializer).deserialize(mockSession, \"/\", mockInputStream);\n\n    }"
    },
    "aSource": {
      "startLine": 89,
      "code": "@Test\n    public void testImportObjectAtRoot() throws Exception {\n        when(mockSerializers.getSerializer(\"fake-format\")).thenReturn(\n                mockSerializer);\n        when(mockNode.getPath()).thenReturn(\"/\");\n        when(mockSession.getNode(\"/\")).thenReturn(mockNode);\n        testObj.importObject(null, \"fake-format\", mockInputStream);\n        verify(mockSerializer).deserialize(mockSession, \"/\", mockInputStream);\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraImportTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraImportTest.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.importObject(createPathList(), \"fake-format\", mockInputStream);",
          "type": "DELETE",
          "lineNo": 96
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.importObject(null, \"fake-format\", mockInputStream);",
          "type": "ADD",
          "lineNo": 95
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraImport.importObject(List,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraImport testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraImport.importObject(List,String,InputStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fake-format'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.io.InputStream mockInputStream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraImport.importObject(String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraImport testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraImport.importObject(String,String,InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fake-format'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.io.InputStream mockInputStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createPathList",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        95
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:273",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraImportTest.testImportObject()",
    "bSource": {
      "startLine": 80,
      "code": "@Test\n    public void testImportObject() throws Exception {\n        when(mockNode.getPath()).thenReturn(\"/test/object\");\n        when(mockSession.getNode(\"/test/object\")).thenReturn(mockNode);\n        testObj.importObject(createPathList(\"test\", \"object\"), \"fake-format\",\n                mockInputStream);\n        verify(mockSerializer).deserialize(mockSession, \"/test/object\",\n                mockInputStream);\n    }"
    },
    "aSource": {
      "startLine": 79,
      "code": "@Test\n    public void testImportObject() throws Exception {\n        when(mockNode.getPath()).thenReturn(\"/test/object\");\n        when(mockSession.getNode(\"/test/object\")).thenReturn(mockNode);\n        testObj.importObject(\"test/object\", \"fake-format\",\n                mockInputStream);\n        verify(mockSerializer).deserialize(mockSession, \"/test/object\",\n                mockInputStream);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraImportTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraImportTest.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.importObject(createPathList(\"test\", \"object\"), \"fake-format\",",
          "type": "DELETE",
          "lineNo": 84
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.importObject(\"test/object\", \"fake-format\",",
          "type": "ADD",
          "lineNo": 83
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraImport.importObject(List,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraImport testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraImport.importObject(List,String,InputStream)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'test'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'object'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fake-format'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraImport.importObject(String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraImport testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraImport.importObject(String,String,InputStream)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'test/object'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fake-format'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"object\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"test/object\"",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createPathList",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"object\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"test/object\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        83
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:274",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraIdentifiersTest.testGetNextPid()",
    "bSource": {
      "startLine": 114,
      "code": "@Test\n    public void testGetNextPid() throws Exception {\n        when(mockPidMinter.makePid()).thenReturn(\n                new Function<Object, String>() {\n\n                    @Override\n                    public String apply(final Object input) {\n                        return \"asdf:123\";\n                    }\n                });\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n\n        when(uriInfo.getAbsolutePath()).thenReturn(\n                new URI(\"http://localhost/fcrepo/objects/fcr:identifier\"));\n\n        when(mockNode.getPath()).thenReturn(\"/objects/asdf:123\");\n        when(mockSession.getNode(\"/objects/asdf:123\")).thenReturn(mockNode);\n\n        final Model np =\n            testObj.getNextPid(createPathList(\"objects\"), 2, uriInfo).asModel();\n\n        LOGGER.debug(\"Got identifier results:\\n{}\", np.getGraph());\n        assertTrue(np.contains(\n                createResource(\"http://localhost/fcrepo/objects/fcr:identifier\"),\n                HAS_MEMBER_OF_RESULT,\n                createResource(\"http://localhost/fcrepo/objects/asdf:123\")));\n\n    }"
    },
    "aSource": {
      "startLine": 113,
      "code": "@Test\n    public void testGetNextPid() throws Exception {\n        when(mockPidMinter.makePid()).thenReturn(\n                new Function<Object, String>() {\n\n                    @Override\n                    public String apply(final Object input) {\n                        return \"asdf:123\";\n                    }\n                });\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n\n        when(uriInfo.getAbsolutePath()).thenReturn(\n                new URI(\"http://localhost/fcrepo/objects/fcr:identifier\"));\n\n        when(mockNode.getPath()).thenReturn(\"/objects/asdf:123\");\n        when(mockSession.getNode(\"/objects/asdf:123\")).thenReturn(mockNode);\n\n        final Model np =\n            testObj.getNextPid(\"objects\", 2, uriInfo).asModel();\n\n        LOGGER.debug(\"Got identifier results:\\n{}\", np.getGraph());\n        assertTrue(np.contains(\n                createResource(\"http://localhost/fcrepo/objects/fcr:identifier\"),\n                HAS_MEMBER_OF_RESULT,\n                createResource(\"http://localhost/fcrepo/objects/asdf:123\")));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraIdentifiersTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraIdentifiersTest.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.getNextPid(createPathList(\"objects\"), 2, uriInfo).asModel();",
          "type": "DELETE",
          "lineNo": 134
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.getNextPid(\"objects\", 2, uriInfo).asModel();",
          "type": "ADD",
          "lineNo": 133
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(List,Integer,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraIdentifiers testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(List,Integer,UriInfo)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'objects'"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(String,Integer,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraIdentifiers testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(String,Integer,UriInfo)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'objects'"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createPathList",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"objects\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"objects\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        133
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:275",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraIdentifiersTest.testGetNextPidAtRoot()",
    "bSource": {
      "startLine": 85,
      "code": "@Test\n    public void testGetNextPidAtRoot() throws RepositoryException, URISyntaxException {\n        when(mockPidMinter.makePid()).thenReturn(\n                new Function<Object, String>() {\n\n                    @Override\n                    public String apply(final Object input) {\n                        return \"asdf:123\";\n                    }\n                });\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n\n        when(uriInfo.getAbsolutePath()).thenReturn(\n                new URI(\"http://localhost/fcrepo/fcr:identifier\"));\n\n        final Node mockNode = mock(Node.class);\n        when(mockNode.getPath()).thenReturn(\"/asdf:123\");\n        when(mockSession.getNode(\"/asdf:123\")).thenReturn(mockNode);\n\n        final Model np = testObj.getNextPid(createPathList(\"\"), 2, uriInfo).asModel();\n        LOGGER.debug(\"Got identifier results:\\n{}\", np.getGraph());\n        assertTrue(np.contains(\n                createResource(\"http://localhost/fcrepo/fcr:identifier\"),\n                HAS_MEMBER_OF_RESULT,\n                createResource(\"http://localhost/fcrepo/asdf:123\")));\n\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testGetNextPidAtRoot() throws RepositoryException, URISyntaxException {\n        when(mockPidMinter.makePid()).thenReturn(\n                new Function<Object, String>() {\n\n                    @Override\n                    public String apply(final Object input) {\n                        return \"asdf:123\";\n                    }\n                });\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n\n        when(uriInfo.getAbsolutePath()).thenReturn(\n                new URI(\"http://localhost/fcrepo/fcr:identifier\"));\n\n        final Node mockNode = mock(Node.class);\n        when(mockNode.getPath()).thenReturn(\"/asdf:123\");\n        when(mockSession.getNode(\"/asdf:123\")).thenReturn(mockNode);\n\n        final Model np = testObj.getNextPid(\"\", 2, uriInfo).asModel();\n        LOGGER.debug(\"Got identifier results:\\n{}\", np.getGraph());\n        assertTrue(np.contains(\n                createResource(\"http://localhost/fcrepo/fcr:identifier\"),\n                HAS_MEMBER_OF_RESULT,\n                createResource(\"http://localhost/fcrepo/asdf:123\")));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraIdentifiersTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraIdentifiersTest.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model np = testObj.getNextPid(createPathList(\"\"), 2, uriInfo).asModel();",
          "type": "DELETE",
          "lineNo": 105
        }
      ],
      "targetChanges": [
        {
          "line": "final Model np = testObj.getNextPid(\"\", 2, uriInfo).asModel();",
          "type": "ADD",
          "lineNo": 104
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model np"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(List,Integer,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraIdentifiers testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(List,Integer,UriInfo)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model np"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(String,Integer,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraIdentifiers testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(String,Integer,UriInfo)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createPathList",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        104
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:276",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLocksTest.testCreateLock()",
    "bSource": {
      "startLine": 96,
      "code": "@Test\n    public void testCreateLock() throws RepositoryException, URISyntaxException {\n        final String pid = randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n        when(mockLockService.acquireLock(mockSession, path, false)).thenReturn(mockLock);\n\n        final Response response = testObj.createLock(createPathList(pid), false);\n\n        verify(mockLockService).acquireLock(mockSession, path, false);\n        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 95,
      "code": "@Test\n    public void testCreateLock() throws RepositoryException, URISyntaxException {\n        final String pid = randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n        when(mockLockService.acquireLock(mockSession, path, false)).thenReturn(mockLock);\n\n        final Response response = testObj.createLock(pid, false);\n\n        verify(mockLockService).acquireLock(mockSession, path, false);\n        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response response = testObj.createLock(createPathList(pid), false);",
          "type": "DELETE",
          "lineNo": 103
        }
      ],
      "targetChanges": [
        {
          "line": "final Response response = testObj.createLock(pid, false);",
          "type": "ADD",
          "lineNo": 102
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraLocks.createLock(List,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLocks testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraLocks.createLock(List,boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraLocks.createLock(String,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLocks testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraLocks.createLock(String,boolean)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createPathList",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "pid",
          "childCount": 0
        },
        "dstNode": {
          "label": "pid",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        102
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:277",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLocksTest.testDeleteLock()",
    "bSource": {
      "startLine": 109,
      "code": "@Test\n    public void testDeleteLock() throws RepositoryException {\n        final String pid = randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n\n        final Response response = testObj.deleteLock(createPathList(pid));\n\n        verify(mockLockService).releaseLock(mockSession, path);\n        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 108,
      "code": "@Test\n    public void testDeleteLock() throws RepositoryException {\n        final String pid = randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n\n        final Response response = testObj.deleteLock(pid);\n\n        verify(mockLockService).releaseLock(mockSession, path);\n        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response response = testObj.deleteLock(createPathList(pid));",
          "type": "DELETE",
          "lineNo": 115
        }
      ],
      "targetChanges": [
        {
          "line": "final Response response = testObj.deleteLock(pid);",
          "type": "ADD",
          "lineNo": 114
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraLocks.deleteLock(List)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLocks testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraLocks.deleteLock(List)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraLocks.deleteLock(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLocks testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraLocks.deleteLock(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createPathList",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "pid",
          "childCount": 0
        },
        "dstNode": {
          "label": "pid",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        114
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:278",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLocksTest.testGetLock()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testGetLock() throws RepositoryException {\n        final String pid = randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n        when(mockLockService.getLock(mockSession, path)).thenReturn(mockLock);\n\n        testObj.getLock(createPathList(pid));\n\n        verify(mockLockService).getLock(mockSession, path);\n    }"
    },
    "aSource": {
      "startLine": 83,
      "code": "@Test\n    public void testGetLock() throws RepositoryException {\n        final String pid = randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n        when(mockLockService.getLock(mockSession, path)).thenReturn(mockLock);\n\n        testObj.getLock(pid);\n\n        verify(mockLockService).getLock(mockSession, path);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.getLock(createPathList(pid));",
          "type": "DELETE",
          "lineNo": 91
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.getLock(pid);",
          "type": "ADD",
          "lineNo": 90
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraLocks.getLock(List)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLocks testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraLocks.getLock(List)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraLocks.getLock(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLocks testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraLocks.getLock(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createPathList",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "pid",
          "childCount": 0
        },
        "dstNode": {
          "label": "pid",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        90
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:279",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLocksTest.testRDFGenerationForLockToken()",
    "bSource": {
      "startLine": 121,
      "code": "@Test\n    public void testRDFGenerationForLockToken() throws RepositoryException {\n        final String pid = randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n        when(mockLockService.getLock(mockSession, path)).thenReturn(mockLock);\n\n        final RdfStream stream = testObj.getLock(createPathList(pid));\n        while (stream.hasNext()) {\n            final Triple t = stream.next();\n            if (t.getPredicate().getURI().equals(HAS_LOCK_TOKEN.getURI())\n                    && t.getObject().getLiteralValue().equals(mockLock.getLockToken())) {\n                return;\n            }\n        }\n        fail(\"Unable to find the lock token in the returned RDF!\");\n    }"
    },
    "aSource": {
      "startLine": 120,
      "code": "@Test\n    public void testRDFGenerationForLockToken() throws RepositoryException {\n        final String pid = randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n        when(mockLockService.getLock(mockSession, path)).thenReturn(mockLock);\n\n        final RdfStream stream = testObj.getLock(pid);\n        while (stream.hasNext()) {\n            final Triple t = stream.next();\n            if (t.getPredicate().getURI().equals(HAS_LOCK_TOKEN.getURI())\n                    && t.getObject().getLiteralValue().equals(mockLock.getLockToken())) {\n                return;\n            }\n        }\n        fail(\"Unable to find the lock token in the returned RDF!\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final RdfStream stream = testObj.getLock(createPathList(pid));",
          "type": "DELETE",
          "lineNo": 128
        }
      ],
      "targetChanges": [
        {
          "line": "final RdfStream stream = testObj.getLock(pid);",
          "type": "ADD",
          "lineNo": 127
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream stream"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraLocks.getLock(List)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLocks testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraLocks.getLock(List)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream stream"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraLocks.getLock(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraLocks testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraLocks.getLock(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createPathList",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "pid",
          "childCount": 0
        },
        "dstNode": {
          "label": "pid",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        127
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:280",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraBatchIT.testWrongChildren()",
    "bSource": {
      "startLine": 186,
      "code": "@Test\n    public void testWrongChildren() throws Exception {\n        final String pid = randomUUID().toString();\n        createObject(pid);\n\n        final HttpPost post =\n            new HttpPost(serverAddress\n                    + pid + \"/fcr:batch\");\n\n        final MultipartEntityBuilder multiPartEntityBuilder =\n            MultipartEntityBuilder.create().addTextBody(\"ds1\", \"asdfg\", TEXT_PLAIN)\n                    .addTextBody(\"ds2\", \"qwerty\", TEXT_PLAIN);\n\n        post.setEntity(multiPartEntityBuilder.build());\n\n        final HttpResponse postResponse = execute(post);\n        assertEquals(201, postResponse.getStatusLine().getStatusCode());\n\n        final HttpGet getDSesMethod = new HttpGet(serverAddress + pid + \"/fcr:batch?child=ds3\");\n        final HttpResponse response = execute(getDSesMethod);\n        assertEquals(400, response.getStatusLine().getStatusCode());\n    }"
    },
    "aSource": {
      "startLine": 186,
      "code": "@Test\n    public void testWrongChildren() throws Exception {\n        final String pid = randomUUID().toString();\n        createObject(pid);\n\n        final HttpPost post =\n            new HttpPost(serverAddress\n                    + pid + \"/fcr:batch\");\n\n        final MultipartEntityBuilder multiPartEntityBuilder =\n            MultipartEntityBuilder.create().addTextBody(\"ds1\", \"asdfg\", TEXT_PLAIN)\n                    .addTextBody(\"ds2\", \"qwerty\", TEXT_PLAIN);\n\n        post.setEntity(multiPartEntityBuilder.build());\n\n        final HttpResponse postResponse = execute(post);\n        assertEquals(204, postResponse.getStatusLine().getStatusCode());\n\n        final HttpGet getDSesMethod = new HttpGet(serverAddress + pid + \"/fcr:batch?child=ds3\");\n        final HttpResponse response = execute(getDSesMethod);\n        assertEquals(400, response.getStatusLine().getStatusCode());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBatchIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBatchIT.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(201, postResponse.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 202
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(204, postResponse.getStatusLine().getStatusCode());",
          "type": "ADD",
          "lineNo": 202
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '201'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse postResponse"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '204'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse postResponse"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "201",
          "childCount": 0
        },
        "dstNode": {
          "label": "204",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        202
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:281",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraBatchIT.testRetrieveFIlteredMultipartDatastreams()",
    "bSource": {
      "startLine": 152,
      "code": "@Test\n    public void testRetrieveFIlteredMultipartDatastreams() throws Exception {\n        final String pid = randomUUID().toString();\n        createObject(pid);\n\n        final HttpPost post =\n            new HttpPost(serverAddress\n                    + pid + \"/fcr:batch\");\n\n        final MultipartEntityBuilder multiPartEntityBuilder =\n            MultipartEntityBuilder.create().addTextBody(\"ds1\", \"asdfg\", TEXT_PLAIN)\n                    .addTextBody(\"ds2\", \"qwerty\", TEXT_PLAIN);\n\n        post.setEntity(multiPartEntityBuilder.build());\n\n        final HttpResponse postResponse = execute(post);\n        assertEquals(201, postResponse.getStatusLine().getStatusCode());\n\n        // TODO: we should actually evaluate the multipart response for the\n        // things we're expecting\n        final HttpGet getDSesMethod =\n            new HttpGet(serverAddress\n                    + pid + \"/fcr:batch?child=ds1\");\n        final HttpResponse response = execute(getDSesMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        final String content = EntityUtils.toString(response.getEntity());\n\n        assertTrue(\"Didn't find the first datastream!\",\n                compile(\"asdfg\", DOTALL).matcher(content).find());\n        assertFalse(\"Didn't expect to find the second datastream!\", compile(\n                \"qwerty\", DOTALL).matcher(content).find());\n\n    }"
    },
    "aSource": {
      "startLine": 152,
      "code": "@Test\n    public void testRetrieveFIlteredMultipartDatastreams() throws Exception {\n        final String pid = randomUUID().toString();\n        createObject(pid);\n\n        final HttpPost post =\n            new HttpPost(serverAddress\n                    + pid + \"/fcr:batch\");\n\n        final MultipartEntityBuilder multiPartEntityBuilder =\n            MultipartEntityBuilder.create().addTextBody(\"ds1\", \"asdfg\", TEXT_PLAIN)\n                    .addTextBody(\"ds2\", \"qwerty\", TEXT_PLAIN);\n\n        post.setEntity(multiPartEntityBuilder.build());\n\n        final HttpResponse postResponse = execute(post);\n        assertEquals(204, postResponse.getStatusLine().getStatusCode());\n\n        // TODO: we should actually evaluate the multipart response for the\n        // things we're expecting\n        final HttpGet getDSesMethod =\n            new HttpGet(serverAddress\n                    + pid + \"/fcr:batch?child=ds1\");\n        final HttpResponse response = execute(getDSesMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        final String content = EntityUtils.toString(response.getEntity());\n\n        assertTrue(\"Didn't find the first datastream!\",\n                compile(\"asdfg\", DOTALL).matcher(content).find());\n        assertFalse(\"Didn't expect to find the second datastream!\", compile(\n                \"qwerty\", DOTALL).matcher(content).find());\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBatchIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBatchIT.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(201, postResponse.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 168
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(204, postResponse.getStatusLine().getStatusCode());",
          "type": "ADD",
          "lineNo": 168
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '201'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse postResponse"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '204'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse postResponse"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "201",
          "childCount": 0
        },
        "dstNode": {
          "label": "204",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        168
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:282",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraBatchIT.testRetrieveMultipartDatastreams()",
    "bSource": {
      "startLine": 119,
      "code": "@Test\n    public void testRetrieveMultipartDatastreams() throws Exception {\n        final String pid = randomUUID().toString();\n        createObject(pid);\n\n        final HttpPost post =\n            new HttpPost(serverAddress\n                    + pid + \"/fcr:batch/\");\n        final MultipartEntityBuilder multiPartEntityBuilder =\n                MultipartEntityBuilder.create().addTextBody(\"ds1\", \"asdfg\", TEXT_PLAIN)\n                        .addTextBody(\"ds2\", \"qwerty\", TEXT_PLAIN);\n\n        post.setEntity(multiPartEntityBuilder.build());\n\n        final HttpResponse postResponse = execute(post);\n        assertEquals(201, postResponse.getStatusLine().getStatusCode());\n\n        // TODO: we should actually evaluate the multipart response for the\n        // things we're expecting\n        final HttpGet getDSesMethod =\n            new HttpGet(serverAddress\n                    + pid + \"/fcr:batch\");\n        final HttpResponse response = execute(getDSesMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        final String content = EntityUtils.toString(response.getEntity());\n\n        assertTrue(\"Didn't find the first datastream!\",\n                compile(\"asdfg\", DOTALL).matcher(content).find());\n        assertTrue(\"Didn't find the second datastream!\", compile(\"qwerty\",\n                DOTALL).matcher(content).find());\n\n    }"
    },
    "aSource": {
      "startLine": 119,
      "code": "@Test\n    public void testRetrieveMultipartDatastreams() throws Exception {\n        final String pid = randomUUID().toString();\n        createObject(pid);\n\n        final HttpPost post =\n            new HttpPost(serverAddress\n                    + pid + \"/fcr:batch/\");\n        final MultipartEntityBuilder multiPartEntityBuilder =\n                MultipartEntityBuilder.create().addTextBody(\"ds1\", \"asdfg\", TEXT_PLAIN)\n                        .addTextBody(\"ds2\", \"qwerty\", TEXT_PLAIN);\n\n        post.setEntity(multiPartEntityBuilder.build());\n\n        final HttpResponse postResponse = execute(post);\n        assertEquals(204, postResponse.getStatusLine().getStatusCode());\n\n        // TODO: we should actually evaluate the multipart response for the\n        // things we're expecting\n        final HttpGet getDSesMethod =\n            new HttpGet(serverAddress\n                    + pid + \"/fcr:batch\");\n        final HttpResponse response = execute(getDSesMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        final String content = EntityUtils.toString(response.getEntity());\n\n        assertTrue(\"Didn't find the first datastream!\",\n                compile(\"asdfg\", DOTALL).matcher(content).find());\n        assertTrue(\"Didn't find the second datastream!\", compile(\"qwerty\",\n                DOTALL).matcher(content).find());\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBatchIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBatchIT.java",
    "bCommit": "46a43bfd9a",
    "aCommit": "7e8927bd8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(201, postResponse.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 134
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(204, postResponse.getStatusLine().getStatusCode());",
          "type": "ADD",
          "lineNo": 134
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '201'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse postResponse"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '204'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse postResponse"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "201",
          "childCount": 0
        },
        "dstNode": {
          "label": "204",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        134
      ]
    },
    "aCommitTime": 1413211634,
    "ID": "fcrepo/fcrepo:283",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.BasicReadWriteFedoraFileSystemConnectorIT.testWriteProperty()",
    "bSource": {
      "startLine": 57,
      "code": "@Test\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updatePropertiesDataset(new DefaultIdentifierTranslator(), sparql);\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 56,
      "code": "@Test\n    public void testWriteProperty() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertNotNull(object);\n\n        final String sparql = \"PREFIX fedora: <http://fedora.info/definitions/v4/rest-api#> \" +\n                \"INSERT DATA { \" +\n                \"<info:fedora\" + testFilePath() + \"> \" +\n                \"fedora:name \" +\n                \"'some-test-name' }\";\n\n\n        // Write the properties\n        object.updatePropertiesDataset(new DefaultIdentifierTranslator(session), sparql);\n\n        // Verify\n        final Property property = object.getNode().getProperty(\"fedora:name\");\n        assertNotNull(property);\n        assertEquals(\"some-test-name\", property.getValues()[0].toString());\n\n        session.save();\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/BasicReadWriteFedoraFileSystemConnectorIT.java",
    "bCommit": "76a0a72d23",
    "aCommit": "46a43bfd9a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "object.updatePropertiesDataset(new DefaultIdentifierTranslator(), sparql);",
          "type": "DELETE",
          "lineNo": 72
        }
      ],
      "targetChanges": [
        {
          "line": "object.updatePropertiesDataset(new DefaultIdentifierTranslator(session), sparql);",
          "type": "ADD",
          "lineNo": 71
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierTranslator,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierTranslator,String)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String sparql"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.updatePropertiesDataset(IdentifierConverter,String)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String sparql"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "VariableRead",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "session",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        71
      ]
    },
    "aCommitTime": 1413211633,
    "ID": "fcrepo/fcrepo:173",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraFixityTest.testGetDatastreamFixity()",
    "bSource": {
      "startLine": 76,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException {\n        final RdfStream expected = new RdfStream();\n\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String path = \"/objects/\" + pid + \"/testDS\";\n        final String dsId = \"testDS\";\n        final Datastream mockDs = mockDatastream(pid, dsId, null);\n\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockDatastreams.findOrCreateDatastream(mockSession, path)).thenReturn(mockDs);\n        when(mockDatastreams.getFixityResultsModel(any(IdentifierTranslator.class), any(FedoraBinary.class)))\n                .thenReturn(expected);\n\n        final RdfStream actual = testObj.getDatastreamFixity(createPathList(\"objects\", pid, \"testDS\"),\n                mockRequest, uriInfo);\n\n        assertEquals(expected, actual);\n    }"
    },
    "aSource": {
      "startLine": 76,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException {\n        final RdfStream expected = new RdfStream();\n\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String path = \"/objects/\" + pid + \"/testDS\";\n        final String dsId = \"testDS\";\n        final Datastream mockDs = mockDatastream(pid, dsId, null);\n\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockDatastreams.findOrCreateDatastream(mockSession, path)).thenReturn(mockDs);\n        when(mockDatastreams.getFixityResultsModel(any(IdentifierConverter.class), any(FedoraBinary.class)))\n                .thenReturn(expected);\n\n        final RdfStream actual = testObj.getDatastreamFixity(createPathList(\"objects\", pid, \"testDS\"),\n                mockRequest, uriInfo);\n\n        assertEquals(expected, actual);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "bCommit": "76a0a72d23",
    "aCommit": "46a43bfd9a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getFixityResultsModel(any(IdentifierTranslator.class), any(FedoraBinary.class)))",
          "type": "DELETE",
          "lineNo": 88
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockDatastreams.getFixityResultsModel(any(IdentifierConverter.class), any(FedoraBinary.class)))",
          "type": "ADD",
          "lineNo": 88
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getFixityResultsModel(IdentifierTranslator,FedoraBinary)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getFixityResultsModel(IdentifierTranslator,FedoraBinary)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getFixityResultsModel(IdentifierConverter,FedoraBinary)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getFixityResultsModel(IdentifierConverter,FedoraBinary)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.IdentifierTranslator",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.identifiers.IdentifierConverter",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        88
      ]
    },
    "aCommitTime": 1413211633,
    "ID": "fcrepo/fcrepo:174",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraRepositoryNamespacesTest.testUpdateNamespaces()",
    "bSource": {
      "startLine": 81,
      "code": "@Test\n    public void testUpdateNamespaces() throws RepositoryException, IOException {\n\n        final Model model = createDefaultModel();\n        final Dataset mockDataset = DatasetFactory.create(model);\n        when(mockService.getNamespaceRegistryDataset(any(Session.class), any(IdentifierTranslator.class))).thenReturn(\n                mockDataset);\n\n        testObj.updateNamespaces(new ByteArrayInputStream(\n                \"INSERT { <http://example.com/this> <http://example.com/is> \\\"abc\\\"} WHERE { }\"\n                        .getBytes()));\n\n        assertEquals(1, model.size());\n    }"
    },
    "aSource": {
      "startLine": 81,
      "code": "@Test\n    public void testUpdateNamespaces() throws RepositoryException, IOException {\n\n        final Model model = createDefaultModel();\n        final Dataset mockDataset = DatasetFactory.create(model);\n        when(mockService.getNamespaceRegistryDataset(any(Session.class), any(IdentifierConverter.class))).thenReturn(\n                mockDataset);\n\n        testObj.updateNamespaces(new ByteArrayInputStream(\n                \"INSERT { <http://example.com/this> <http://example.com/is> \\\"abc\\\"} WHERE { }\"\n                        .getBytes()));\n\n        assertEquals(1, model.size());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraRepositoryNamespacesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraRepositoryNamespacesTest.java",
    "bCommit": "76a0a72d23",
    "aCommit": "46a43bfd9a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockService.getNamespaceRegistryDataset(any(Session.class), any(IdentifierTranslator.class))).thenReturn(",
          "type": "DELETE",
          "lineNo": 86
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockService.getNamespaceRegistryDataset(any(Session.class), any(IdentifierConverter.class))).thenReturn(",
          "type": "ADD",
          "lineNo": 86
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session,IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.RepositoryService mockService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session,IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session,IdentifierConverter)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.RepositoryService mockService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session,IdentifierConverter)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.IdentifierTranslator",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.identifiers.IdentifierConverter",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        86
      ]
    },
    "aCommitTime": 1413211633,
    "ID": "fcrepo/fcrepo:175",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraRepositoryNamespacesTest.testGetNamespaces()",
    "bSource": {
      "startLine": 74,
      "code": "@Test\n    public void testGetNamespaces() throws RepositoryException {\n        when(mockService.getNamespaceRegistryStream(any(Session.class), any(IdentifierTranslator.class)))\n                .thenReturn(testRdfStream);\n        assertEquals(testRdfStream, testObj.getNamespaces());\n    }"
    },
    "aSource": {
      "startLine": 74,
      "code": "@Test\n    public void testGetNamespaces() throws RepositoryException {\n        when(mockService.getNamespaceRegistryStream(any(Session.class), any(IdentifierConverter.class)))\n                .thenReturn(testRdfStream);\n        assertEquals(testRdfStream, testObj.getNamespaces());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraRepositoryNamespacesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraRepositoryNamespacesTest.java",
    "bCommit": "76a0a72d23",
    "aCommit": "46a43bfd9a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockService.getNamespaceRegistryStream(any(Session.class), any(IdentifierTranslator.class)))",
          "type": "DELETE",
          "lineNo": 76
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockService.getNamespaceRegistryStream(any(Session.class), any(IdentifierConverter.class)))",
          "type": "ADD",
          "lineNo": 76
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryStream(Session,IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.RepositoryService mockService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryStream(Session,IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryStream(Session,IdentifierConverter)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.RepositoryService mockService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryStream(Session,IdentifierConverter)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.IdentifierTranslator",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.identifiers.IdentifierConverter",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        76
      ]
    },
    "aCommitTime": 1413211633,
    "ID": "fcrepo/fcrepo:176",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldStartANewTransaction()",
    "bSource": {
      "startLine": 82,
      "code": "@Test\n    public void shouldStartANewTransaction() throws RepositoryException {\n        setField(testObj, \"session\", regularSession);\n        when(mockTxService.beginTransaction(regularSession, USER_NAME)).thenReturn(mockTx);\n        when(mockRequest.getUserPrincipal()).thenReturn(mockPrincipal);\n        when(mockPrincipal.getName()).thenReturn(USER_NAME);\n        testObj.createTransaction(createPathList(), mockRequest);\n        verify(mockTxService).beginTransaction(regularSession, USER_NAME);\n    }"
    },
    "aSource": {
      "startLine": 83,
      "code": "@Test\n    public void shouldStartANewTransaction() throws RepositoryException, URISyntaxException {\n        setField(testObj, \"session\", regularSession);\n        when(mockTxService.beginTransaction(regularSession, USER_NAME)).thenReturn(mockTx);\n        when(mockRequest.getUserPrincipal()).thenReturn(mockPrincipal);\n        when(mockPrincipal.getName()).thenReturn(USER_NAME);\n        testObj.createTransaction(createPathList(), mockRequest);\n        verify(mockTxService).beginTransaction(regularSession, USER_NAME);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "76a0a72d23",
    "aCommit": "46a43bfd9a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldStartANewTransaction() throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 83
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldStartANewTransaction() throws RepositoryException, URISyntaxException {",
          "type": "ADD",
          "lineNo": 84
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldStartANewTransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraTransactionsTest.shouldStartANewTransaction()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "java.net.URISyntaxException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "ADD_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        89
      ]
    },
    "aCommitTime": 1413211633,
    "ID": "fcrepo/fcrepo:177",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldUpdateExpiryOnExistingTransaction()",
    "bSource": {
      "startLine": 92,
      "code": "@Test\n    public void\n            shouldUpdateExpiryOnExistingTransaction()\n                                                     throws RepositoryException {\n        when(mockTxService.getTransaction(Mockito.any(TxSession.class))).thenReturn(mockTx);\n        testObj.createTransaction(createPathList(), mockRequest);\n        verify(mockTx).updateExpiryDate();\n    }"
    },
    "aSource": {
      "startLine": 93,
      "code": "@Test\n    public void\n            shouldUpdateExpiryOnExistingTransaction()\n            throws RepositoryException, URISyntaxException {\n        when(mockTxService.getTransaction(Mockito.any(TxSession.class))).thenReturn(mockTx);\n        testObj.createTransaction(createPathList(), mockRequest);\n        verify(mockTx).updateExpiryDate();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "76a0a72d23",
    "aCommit": "46a43bfd9a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 95
        }
      ],
      "targetChanges": [
        {
          "line": "throws RepositoryException, URISyntaxException {",
          "type": "ADD",
          "lineNo": 96
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "java.net.URISyntaxException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "ADD_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        98
      ]
    },
    "aCommitTime": 1413211633,
    "ID": "fcrepo/fcrepo:178",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraObjectImplIT.testObjectGraphWithUriProperty()",
    "bSource": {
      "startLine": 147,
      "code": "@Test\n    public void testObjectGraphWithUriProperty() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.findOrCreateObject(session, \"/graphObject\");\n        final IdentifierTranslator subjects = new DefaultIdentifierTranslator();\n        final String graphSubject = subjects.getSubject(\"/graphObject\").getURI();\n        final Dataset graphStore = object.getPropertiesDataset(subjects);\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        final String prefix = session.getWorkspace().getNamespaceRegistry().getPrefix(\"info:some#\");\n\n        assertNotNull(object.getNode().getProperty(prefix + \":urlProperty\"));\n\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"DELETE { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        assertFalse(object.getNode().hasProperty(prefix + \":urlProperty_ref\"));\n\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT DATA { <\" + graphSubject + \"> some:urlProperty <\" + graphSubject + \">;\\n\" +\n                         \"       some:urlProperty <info:somewhere/else> . }\", graphStore);\n\n        assertEquals(1, object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues().length);\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n    }"
    },
    "aSource": {
      "startLine": 147,
      "code": "@Test\n    public void testObjectGraphWithUriProperty() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.findOrCreateObject(session, \"/graphObject\");\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);\n        final Resource graphSubject = subjects.reverse().convert(object.getNode());\n        final Dataset graphStore = object.getPropertiesDataset(subjects);\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        final String prefix = session.getWorkspace().getNamespaceRegistry().getPrefix(\"info:some#\");\n\n        assertNotNull(object.getNode().getProperty(prefix + \":urlProperty\"));\n\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"DELETE { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        assertFalse(object.getNode().hasProperty(prefix + \":urlProperty_ref\"));\n\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT DATA { <\" + graphSubject + \"> some:urlProperty <\" + graphSubject + \">;\\n\" +\n                         \"       some:urlProperty <info:somewhere/else> . }\", graphStore);\n\n        assertEquals(1, object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues().length);\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "bCommit": "76a0a72d23",
    "aCommit": "46a43bfd9a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final IdentifierTranslator subjects = new DefaultIdentifierTranslator();",
          "type": "DELETE",
          "lineNo": 152
        },
        {
          "line": "final String graphSubject = subjects.getSubject(\"/graphObject\").getURI();",
          "type": "DELETE",
          "lineNo": 153
        }
      ],
      "targetChanges": [
        {
          "line": "final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator(session);",
          "type": "ADD",
          "lineNo": 152
        },
        {
          "line": "final Resource graphSubject = subjects.reverse().convert(object.getNode());",
          "type": "ADD",
          "lineNo": 153
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator subjects"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String graphSubject"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getURI()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getSubject(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getSubject(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        },
        {
          "type": "CtExecutableReference",
          "value": "getURI()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Resource graphSubject"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Resource"
        },
        {
          "type": "CtInvocation",
          "value": "convert(org.fcrepo.kernel.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.base.Converter.reverse()"
        },
        {
          "type": "CtExecutableReference",
          "value": "convert(org.fcrepo.kernel.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.IdentifierTranslator",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.impl.rdf.impl.DefaultIdentifierTranslator",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.String",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.rdf.model.Resource",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getURI",
          "childCount": 1
        },
        "dstNode": {
          "label": "convert",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getSubject",
          "childCount": 2
        },
        "dstNode": {
          "label": "reverse",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "VariableRead",
        "parents": [
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "session",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE",
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        152
      ]
    },
    "aCommitTime": 1413211633,
    "ID": "fcrepo/fcrepo:179",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.FedoraTypesUtilsTest.testPredicateExceptionHandling()",
    "bSource": {
      "startLine": 311,
      "code": "@Test\n    public void testPredicateExceptionHandling() throws RepositoryException {\n        when(mockNode.getMixinNodeTypes()).thenThrow(new RepositoryException());\n        try {\n            isFedoraResource.apply(mockNode);\n            fail(\"Unexpected FedoraTypesUtils.isFedoraResource\" +\n                    \" completion after RepositoryException!\");\n        } catch (final RuntimeException e) {\n            // expected\n        }\n        try {\n            isFedoraObject.apply(mockNode);\n            fail(\"Unexpected FedoraTypesUtils.isFedoraObject\" +\n                    \" completion after RepositoryException!\");\n        } catch (final RuntimeException e) {\n            // expected\n        }\n        try {\n            isFedoraDatastream.apply(mockNode);\n            fail(\"Unexpected FedoraTypesUtils.isFedoraDatastream\" +\n                 \" completion after RepositoryException!\");\n        } catch (final RuntimeException e) {\n            // expected\n        }\n    }"
    },
    "aSource": {
      "startLine": 311,
      "code": "@Test\n    public void testPredicateExceptionHandling() throws RepositoryException {\n        when(mockNode.getMixinNodeTypes()).thenThrow(new RepositoryException());\n        when(mockNode.isNodeType(anyString())).thenThrow(new RepositoryException());\n        try {\n            isFedoraResource.apply(mockNode);\n            fail(\"Unexpected FedoraTypesUtils.isFedoraResource\" +\n                    \" completion after RepositoryException!\");\n        } catch (final RuntimeException e) {\n            // expected\n        }\n        try {\n            isFedoraObject.apply(mockNode);\n            fail(\"Unexpected FedoraTypesUtils.isFedoraObject\" +\n                    \" completion after RepositoryException!\");\n        } catch (final RuntimeException e) {\n            // expected\n        }\n        try {\n            isFedoraDatastream.apply(mockNode);\n            fail(\"Unexpected FedoraTypesUtils.isFedoraDatastream\" +\n                 \" completion after RepositoryException!\");\n        } catch (final RuntimeException e) {\n            // expected\n        }\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/FedoraTypesUtilsTest.java",
    "bCommit": "76a0a72d23",
    "aCommit": "46a43bfd9a",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockNode.isNodeType(anyString())).thenThrow(new RepositoryException());",
          "type": "ADD",
          "lineNo": 314
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenThrow(javax.jcr.RepositoryException)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isNodeType()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNodeType()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenThrow(javax.jcr.RepositoryException)"
        },
        {
          "type": "CtConstructorCall",
          "value": "javax.jcr.RepositoryException()"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenThrow",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        323
      ]
    },
    "aCommitTime": 1413211633,
    "ID": "fcrepo/fcrepo:180",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.api.rdf.HttpIdentifierTranslatorTest.testGetGraphSubject()",
    "bSource": {
      "startLine": 85,
      "code": "@Test\n    public void testGetGraphSubject() throws RepositoryException {\n        final String expected = \"http://localhost:8080/fcrepo/rest\" + testPath;\n        when(mockNode.getPath()).thenReturn(testPath);\n        when(mockWorkspace.getName()).thenReturn(\"default\");\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockNode.getSession()).thenReturn(mockSession);\n        Resource actual = testObj.getSubject(mockNode.getPath());\n        assertEquals(expected, actual.getURI());\n        when(mockNode.getPath()).thenReturn(testPath + \"/jcr:content\");\n        actual = testObj.getSubject(mockNode.getPath());\n        assertEquals(expected + \"/fcr:content\", actual.getURI());\n    }"
    },
    "aSource": {
      "startLine": 86,
      "code": "@Test\n    public void testGetGraphSubject() throws RepositoryException {\n        final String expected = \"http://localhost:8080/fcrepo/rest\" + testPath;\n        when(mockNode.getPath()).thenReturn(testPath);\n        when(mockWorkspace.getName()).thenReturn(\"default\");\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockNode.getSession()).thenReturn(mockSession);\n        Resource actual = testObj.getSubject(mockNode.getPath());\n        assertEquals(expected, actual.getURI());\n        when(mockNode.getPath()).thenReturn(testPath + \"/jcr:content\");\n        actual = testObj.getSubject(mockNode.getPath());\n        assertEquals(expected, actual.getURI());\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierTranslatorTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierTranslatorTest.java",
    "bCommit": "3a9b9e50ec",
    "aCommit": "1db9e4ed5b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(expected + \"/fcr:content\", actual.getURI());",
          "type": "DELETE",
          "lineNo": 96
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(expected, actual.getURI());",
          "type": "ADD",
          "lineNo": 97
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String expected"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/fcr:content'"
        },
        {
          "type": "CtInvocation",
          "value": "getURI()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "getURI()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String expected"
        },
        {
          "type": "CtInvocation",
          "value": "getURI()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "getURI()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "BinaryOperator",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "expected",
          "childCount": 0
        },
        "dstNode": {
          "label": "expected",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        97
      ]
    },
    "aCommitTime": 1413211630,
    "ID": "fcrepo/fcrepo:55",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.domain.ContentLocationMessageBodyReaderTest.testReadFromRequestBody()",
    "bSource": {
      "startLine": 64,
      "code": "@Test\n    public void testReadFromRequestBody() throws Exception {\n\n        final InBoundHeaders headers = new InBoundHeaders();\n        try (final InputStream actual =\n                testObj.readFrom(InputStream.class, null, null, null, headers, mockInputStream)) {\n            assertEquals(mockInputStream, actual);\n        }\n\n    }"
    },
    "aSource": {
      "startLine": 64,
      "code": "@Test\n    public void testReadFromRequestBody() throws Exception {\n        final MultivaluedHashMap<String, String> headers = new MultivaluedHashMap<>();\n        try (final InputStream actual =\n                testObj.readFrom(InputStream.class, null, null, null, headers, mockInputStream)) {\n            assertEquals(mockInputStream, actual);\n        }\n\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ContentLocationMessageBodyReaderTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ContentLocationMessageBodyReaderTest.java",
    "bCommit": "5ba4f494bb",
    "aCommit": "3bfc11f2a3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final InBoundHeaders headers = new InBoundHeaders();",
          "type": "DELETE",
          "lineNo": 67
        }
      ],
      "targetChanges": [
        {
          "line": "final MultivaluedHashMap<String, String> headers = new MultivaluedHashMap<>();",
          "type": "ADD",
          "lineNo": 66
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.sun.jersey.core.header.InBoundHeaders headers"
        },
        {
          "type": "CtTypeReference",
          "value": "com.sun.jersey.core.header.InBoundHeaders"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.sun.jersey.core.header.InBoundHeaders()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.sun.jersey.core.header.InBoundHeaders"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.MultivaluedHashMap headers"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedHashMap"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.MultivaluedHashMap<>()"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedHashMap"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.sun.jersey.core.header.InBoundHeaders",
          "childCount": 0
        },
        "dstNode": {
          "label": "javax.ws.rs.core.MultivaluedHashMap",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.sun.jersey.core.header.InBoundHeaders()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.http.commons.domain.MultivaluedHashMap<>()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        67
      ]
    },
    "aCommitTime": 1411592745,
    "ID": "fcrepo/fcrepo:158",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.domain.ContentLocationMessageBodyReaderTest.testReadFromURI()",
    "bSource": {
      "startLine": 53,
      "code": "@Test\n    public void testReadFromURI() throws Exception {\n        final InBoundHeaders headers = new InBoundHeaders();\n        headers.putSingle(\"Content-Location\", \"http://localhost:8080/xyz\");\n        when(mockContentService.retrieveExternalContent(new URI(\"http://localhost:8080/xyz\")))\n            .thenReturn(mockInputStream);\n        try (final InputStream actual = testObj.readFrom(InputStream.class, null, null, null, headers, null)) {\n            assertEquals(mockInputStream, actual);\n        }\n    }"
    },
    "aSource": {
      "startLine": 53,
      "code": "@Test\n    public void testReadFromURI() throws Exception {\n        final MultivaluedHashMap<String, String> headers = new MultivaluedHashMap<>();\n        headers.putSingle(\"Content-Location\", \"http://localhost:8080/xyz\");\n        when(mockContentService.retrieveExternalContent(new URI(\"http://localhost:8080/xyz\")))\n            .thenReturn(mockInputStream);\n        try (final InputStream actual = testObj.readFrom(InputStream.class, null, null, null, headers, null)) {\n            assertEquals(mockInputStream, actual);\n        }\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ContentLocationMessageBodyReaderTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/domain/ContentLocationMessageBodyReaderTest.java",
    "bCommit": "5ba4f494bb",
    "aCommit": "3bfc11f2a3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final InBoundHeaders headers = new InBoundHeaders();",
          "type": "DELETE",
          "lineNo": 55
        }
      ],
      "targetChanges": [
        {
          "line": "final MultivaluedHashMap<String, String> headers = new MultivaluedHashMap<>();",
          "type": "ADD",
          "lineNo": 55
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.sun.jersey.core.header.InBoundHeaders headers"
        },
        {
          "type": "CtTypeReference",
          "value": "com.sun.jersey.core.header.InBoundHeaders"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.sun.jersey.core.header.InBoundHeaders()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.sun.jersey.core.header.InBoundHeaders"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.MultivaluedHashMap headers"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedHashMap"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.domain.MultivaluedHashMap<>()"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedHashMap"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.sun.jersey.core.header.InBoundHeaders",
          "childCount": 0
        },
        "dstNode": {
          "label": "javax.ws.rs.core.MultivaluedHashMap",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.sun.jersey.core.header.InBoundHeaders()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.http.commons.domain.MultivaluedHashMap<>()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        55
      ]
    },
    "aCommitTime": 1411592745,
    "ID": "fcrepo/fcrepo:159",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.RdfSerializationUtilsTest.testSetCachingHeadersWithLastModified()",
    "bSource": {
      "startLine": 118,
      "code": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSetCachingHeadersWithLastModified() {\n        final MultivaluedMap<?, ?> headers = new MultivaluedMapImpl();\n\n        final Model m = createDefaultModel();\n\n        final Calendar c = Calendar.getInstance();\n        m.add(m.createResource(\"test:subject\"), m\n                .createProperty(lastModifiedPredicate.getURI()), m\n                .createTypedLiteral(c));\n        final Dataset testDatasetWithLastModified = DatasetFactory.create(m);\n        final Context context = testDatasetWithLastModified.getContext();\n        context.set(Symbol.create(\"uri\"), \"test:subject\");\n        Mockito.when(segment.getPath()).thenReturn(\"/fedora\");\n\n        setCachingHeaders((MultivaluedMap<String, Object>) headers,\n                testDatasetWithLastModified, info);\n        assertTrue(new DateTime(c).withMillisOfSecond(0).isEqual(\n                RFC2822DATEFORMAT.parseDateTime((String) headers.get(\n                        \"Last-Modified\").get(0))));\n    }"
    },
    "aSource": {
      "startLine": 118,
      "code": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSetCachingHeadersWithLastModified() {\n        final MultivaluedMap<?, ?> headers = new MultivaluedHashMap<>();\n\n        final Model m = createDefaultModel();\n\n        final Calendar c = Calendar.getInstance();\n        m.add(m.createResource(\"test:subject\"), m\n                .createProperty(lastModifiedPredicate.getURI()), m\n                .createTypedLiteral(c));\n        final Dataset testDatasetWithLastModified = DatasetFactory.create(m);\n        final Context context = testDatasetWithLastModified.getContext();\n        context.set(Symbol.create(\"uri\"), \"test:subject\");\n        Mockito.when(segment.getPath()).thenReturn(\"/fedora\");\n\n        setCachingHeaders((MultivaluedMap<String, Object>) headers,\n                testDatasetWithLastModified, info);\n        assertTrue(new DateTime(c).withMillisOfSecond(0).isEqual(\n                RFC2822DATEFORMAT.parseDateTime((String) headers.get(\n                        \"Last-Modified\").get(0))));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/RdfSerializationUtilsTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/RdfSerializationUtilsTest.java",
    "bCommit": "5ba4f494bb",
    "aCommit": "3bfc11f2a3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final MultivaluedMap<?, ?> headers = new MultivaluedMapImpl();",
          "type": "DELETE",
          "lineNo": 121
        }
      ],
      "targetChanges": [
        {
          "line": "final MultivaluedMap<?, ?> headers = new MultivaluedHashMap<>();",
          "type": "ADD",
          "lineNo": 121
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.MultivaluedMap headers"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedMap"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.sun.jersey.core.util.MultivaluedMapImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.sun.jersey.core.util.MultivaluedMapImpl"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.MultivaluedMap headers"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedMap"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.responses.MultivaluedHashMap<>()"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedHashMap"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.sun.jersey.core.util.MultivaluedMapImpl()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.http.commons.responses.MultivaluedHashMap<>()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        121
      ]
    },
    "aCommitTime": 1411592745,
    "ID": "fcrepo/fcrepo:160",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.RdfSerializationUtilsTest.testSetCachingHeaders()",
    "bSource": {
      "startLine": 87,
      "code": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSetCachingHeaders() {\n        final MultivaluedMap<?, ?> headers = new MultivaluedMapImpl();\n        Mockito.when(segment.getPath()).thenReturn(\"/fedora\");\n        setCachingHeaders((MultivaluedMap<String, Object>) headers, testData, info);\n        final List<?> cacheControlHeaders = headers.get(\"Cache-Control\");\n        assertEquals(\"Two cache control headers expected: \", 2, cacheControlHeaders.size());\n        assertEquals(\"max-age=0 expected\", \"max-age=0\", cacheControlHeaders.get(0));\n        assertEquals(\"must-revalidate expected\", \"must-revalidate\", cacheControlHeaders.get(1));\n    }"
    },
    "aSource": {
      "startLine": 87,
      "code": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSetCachingHeaders() {\n        final MultivaluedMap<?, ?> headers = new MultivaluedHashMap<>();\n        Mockito.when(segment.getPath()).thenReturn(\"/fedora\");\n        setCachingHeaders((MultivaluedMap<String, Object>) headers, testData, info);\n        final List<?> cacheControlHeaders = headers.get(\"Cache-Control\");\n        assertEquals(\"Two cache control headers expected: \", 2, cacheControlHeaders.size());\n        assertEquals(\"max-age=0 expected\", \"max-age=0\", cacheControlHeaders.get(0));\n        assertEquals(\"must-revalidate expected\", \"must-revalidate\", cacheControlHeaders.get(1));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/RdfSerializationUtilsTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/RdfSerializationUtilsTest.java",
    "bCommit": "5ba4f494bb",
    "aCommit": "3bfc11f2a3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final MultivaluedMap<?, ?> headers = new MultivaluedMapImpl();",
          "type": "DELETE",
          "lineNo": 90
        }
      ],
      "targetChanges": [
        {
          "line": "final MultivaluedMap<?, ?> headers = new MultivaluedHashMap<>();",
          "type": "ADD",
          "lineNo": 90
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.MultivaluedMap headers"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedMap"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.sun.jersey.core.util.MultivaluedMapImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.sun.jersey.core.util.MultivaluedMapImpl"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.MultivaluedMap headers"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedMap"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.responses.MultivaluedHashMap<>()"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedHashMap"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.sun.jersey.core.util.MultivaluedMapImpl()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.http.commons.responses.MultivaluedHashMap<>()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        90
      ]
    },
    "aCommitTime": 1411592745,
    "ID": "fcrepo/fcrepo:161",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.RdfSerializationUtilsTest.testSetNoLastModifiedHeaderWithinTransaction()",
    "bSource": {
      "startLine": 99,
      "code": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSetNoLastModifiedHeaderWithinTransaction() {\n        final MultivaluedMap<?, ?> headers = new MultivaluedMapImpl();\n\n        final Model m = createDefaultModel();\n        final Calendar c = Calendar.getInstance();\n        m.add(m.createResource(\"test:subject\"),\n              m.createProperty(lastModifiedPredicate.getURI()),\n              m.createTypedLiteral(c));\n        final Dataset testDatasetWithLastModified = DatasetFactory.create(m);\n        final Context context = testDatasetWithLastModified.getContext();\n        context.set(Symbol.create(\"uri\"), \"test:subject\");\n        Mockito.when(segment.getPath()).thenReturn(\"tx:abc\");\n\n        setCachingHeaders((MultivaluedMap<String, Object>) headers, testDatasetWithLastModified, info);\n        assertNull(\"No Last-Modified header expected during transaction\", headers.get(\"Last-Modified\"));\n    }"
    },
    "aSource": {
      "startLine": 99,
      "code": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSetNoLastModifiedHeaderWithinTransaction() {\n        final MultivaluedMap<?, ?> headers = new MultivaluedHashMap<>();\n\n        final Model m = createDefaultModel();\n        final Calendar c = Calendar.getInstance();\n        m.add(m.createResource(\"test:subject\"),\n              m.createProperty(lastModifiedPredicate.getURI()),\n              m.createTypedLiteral(c));\n        final Dataset testDatasetWithLastModified = DatasetFactory.create(m);\n        final Context context = testDatasetWithLastModified.getContext();\n        context.set(Symbol.create(\"uri\"), \"test:subject\");\n        Mockito.when(segment.getPath()).thenReturn(\"tx:abc\");\n\n        setCachingHeaders((MultivaluedMap<String, Object>) headers, testDatasetWithLastModified, info);\n        assertNull(\"No Last-Modified header expected during transaction\", headers.get(\"Last-Modified\"));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/RdfSerializationUtilsTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/RdfSerializationUtilsTest.java",
    "bCommit": "5ba4f494bb",
    "aCommit": "3bfc11f2a3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final MultivaluedMap<?, ?> headers = new MultivaluedMapImpl();",
          "type": "DELETE",
          "lineNo": 102
        }
      ],
      "targetChanges": [
        {
          "line": "final MultivaluedMap<?, ?> headers = new MultivaluedHashMap<>();",
          "type": "ADD",
          "lineNo": 102
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.MultivaluedMap headers"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedMap"
        },
        {
          "type": "CtConstructorCall",
          "value": "com.sun.jersey.core.util.MultivaluedMapImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "com.sun.jersey.core.util.MultivaluedMapImpl"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.MultivaluedMap headers"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedMap"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.responses.MultivaluedHashMap<>()"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.MultivaluedHashMap"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.sun.jersey.core.util.MultivaluedMapImpl()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.http.commons.responses.MultivaluedHashMap<>()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        102
      ]
    },
    "aCommitTime": 1411592745,
    "ID": "fcrepo/fcrepo:162",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetSessionThrowException()",
    "bSource": {
      "startLine": 130,
      "code": "@Test\n    public void testGetSessionThrowException() throws RepositoryException {\n        when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(mock(Session.class));\n        when(mockTxService.getTransaction(\"123\", null)).thenThrow(\n                new TransactionMissingException(\"\"));\n        try {\n            testObj.getSession(mockRequest);\n        } catch (final RuntimeException e) {\n            final Throwable rootCause = Throwables.getRootCause(e);\n            assertTrue(\"TransactionMissionException expected\",\n                    rootCause instanceof TransactionMissingException);\n        }\n    }"
    },
    "aSource": {
      "startLine": 130,
      "code": "@Test\n    public void testGetSessionThrowException() throws RepositoryException {\n        when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(mock(Session.class));\n        when(mockTxService.getTransaction(\"123\", null)).thenThrow(\n                new TransactionMissingException(\"\"));\n        try {\n            testObj.getSession(mockRequest);\n        } catch (final RuntimeException e) {\n            final Throwable rootCause = Throwables.getRootCause(e);\n            assertTrue(\"TransactionMissionException expected\",\n                    rootCause instanceof TransactionMissingException);\n        }\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "5ba4f494bb",
    "aCommit": "3bfc11f2a3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");",
          "type": "DELETE",
          "lineNo": 132
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");",
          "type": "ADD",
          "lineNo": 132
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPathInfo()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPathInfo()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRequestURI()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRequestURI()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getPathInfo",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRequestURI",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        140
      ]
    },
    "aCommitTime": 1411592745,
    "ID": "fcrepo/fcrepo:163",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testCreateSessionWithWorkspace()",
    "bSource": {
      "startLine": 113,
      "code": "@Test\n    public void testCreateSessionWithWorkspace() throws RepositoryException {\n        when(mockRequest.getPathInfo()).thenReturn(\n                \"/workspace:some-workspace/some/path\");\n        testObj.createSession(mockRequest);\n        verify(mockRepo).login(any(ServletCredentials.class), eq(\"some-workspace\"));\n    }"
    },
    "aSource": {
      "startLine": 113,
      "code": "@Test\n    public void testCreateSessionWithWorkspace() throws RepositoryException {\n        when(mockRequest.getRequestURI()).thenReturn(\n                \"/workspace:some-workspace/some/path\");\n        testObj.createSession(mockRequest);\n        verify(mockRepo).login(any(ServletCredentials.class), eq(\"some-workspace\"));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "5ba4f494bb",
    "aCommit": "3bfc11f2a3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRequest.getPathInfo()).thenReturn(",
          "type": "DELETE",
          "lineNo": 115
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockRequest.getRequestURI()).thenReturn(",
          "type": "ADD",
          "lineNo": 115
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPathInfo()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPathInfo()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRequestURI()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRequestURI()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getPathInfo",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRequestURI",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        118
      ]
    },
    "aCommitTime": 1411592745,
    "ID": "fcrepo/fcrepo:164",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetAuthenticatedSessionWithTransaction()",
    "bSource": {
      "startLine": 145,
      "code": "@Test\n    public void testGetAuthenticatedSessionWithTransaction()\n            throws RepositoryException {\n        final String fedoraUser = \"fedoraUser\";\n        when(mockRequest.getUserPrincipal()).thenReturn(mockUser);\n        when(mockUser.getName()).thenReturn(fedoraUser);\n        when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(txSession);\n        when(mockTx.isAssociatedWithUser(eq(fedoraUser))).thenReturn(true);\n        when(mockTxService.getTransaction(\"123\", fedoraUser))\n                .thenReturn(mockTx);\n        final Session session = testObj.getSession(mockRequest);\n        assertEquals(txSession, ((LockReleasingSession) Proxy.getInvocationHandler(session)).getWrappedSession());\n        verify(mockTx).getSession();\n    }"
    },
    "aSource": {
      "startLine": 145,
      "code": "@Test\n    public void testGetAuthenticatedSessionWithTransaction()\n            throws RepositoryException {\n        final String fedoraUser = \"fedoraUser\";\n        when(mockRequest.getUserPrincipal()).thenReturn(mockUser);\n        when(mockUser.getName()).thenReturn(fedoraUser);\n        when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(txSession);\n        when(mockTx.isAssociatedWithUser(eq(fedoraUser))).thenReturn(true);\n        when(mockTxService.getTransaction(\"123\", fedoraUser))\n                .thenReturn(mockTx);\n        final Session session = testObj.getSession(mockRequest);\n        assertEquals(txSession, ((LockReleasingSession) Proxy.getInvocationHandler(session)).getWrappedSession());\n        verify(mockTx).getSession();\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "5ba4f494bb",
    "aCommit": "3bfc11f2a3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");",
          "type": "DELETE",
          "lineNo": 151
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");",
          "type": "ADD",
          "lineNo": 151
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPathInfo()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPathInfo()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRequestURI()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRequestURI()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getPathInfo",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRequestURI",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        156
      ]
    },
    "aCommitTime": 1411592745,
    "ID": "fcrepo/fcrepo:165",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetEmbeddedIdWorkspace()",
    "bSource": {
      "startLine": 168,
      "code": "@Test\n    public void testGetEmbeddedIdWorkspace() {\n        when(mockRequest.getPathInfo()).thenReturn(\"/workspace:some-workspace/some/path\");\n        final String wsId = testObj.getEmbeddedId(mockRequest, SessionFactory.Prefix.WORKSPACE);\n        assertEquals(\"wsId should be some-workspace\", \"some-workspace\", wsId);\n    }"
    },
    "aSource": {
      "startLine": 168,
      "code": "@Test\n    public void testGetEmbeddedIdWorkspace() {\n        when(mockRequest.getRequestURI()).thenReturn(\"/workspace:some-workspace/some/path\");\n        final String wsId = testObj.getEmbeddedId(mockRequest, SessionFactory.Prefix.WORKSPACE);\n        assertEquals(\"wsId should be some-workspace\", \"some-workspace\", wsId);\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "5ba4f494bb",
    "aCommit": "3bfc11f2a3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRequest.getPathInfo()).thenReturn(\"/workspace:some-workspace/some/path\");",
          "type": "DELETE",
          "lineNo": 170
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockRequest.getRequestURI()).thenReturn(\"/workspace:some-workspace/some/path\");",
          "type": "ADD",
          "lineNo": 170
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPathInfo()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPathInfo()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/workspace:some-workspace/some/path'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRequestURI()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRequestURI()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/workspace:some-workspace/some/path'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getPathInfo",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRequestURI",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        172
      ]
    },
    "aCommitTime": 1411592745,
    "ID": "fcrepo/fcrepo:166",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetEmbeddedIdTx()",
    "bSource": {
      "startLine": 161,
      "code": "@Test\n    public void testGetEmbeddedIdTx() {\n        when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");\n        final String txId = testObj.getEmbeddedId(mockRequest, SessionFactory.Prefix.TX);\n        assertEquals(\"txId should be 123\", \"123\", txId);\n    }"
    },
    "aSource": {
      "startLine": 161,
      "code": "@Test\n    public void testGetEmbeddedIdTx() {\n        when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");\n        final String txId = testObj.getEmbeddedId(mockRequest, SessionFactory.Prefix.TX);\n        assertEquals(\"txId should be 123\", \"123\", txId);\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "5ba4f494bb",
    "aCommit": "3bfc11f2a3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");",
          "type": "DELETE",
          "lineNo": 163
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockRequest.getRequestURI()).thenReturn(\"/tx:123/some/path\");",
          "type": "ADD",
          "lineNo": 163
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPathInfo()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPathInfo()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getRequestURI()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRequestURI()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/tx:123/some/path'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getPathInfo",
          "childCount": 1
        },
        "dstNode": {
          "label": "getRequestURI",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        165
      ]
    },
    "aCommitTime": 1411592745,
    "ID": "fcrepo/fcrepo:167",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testRestrictiveFAD()",
    "bSource": {
      "startLine": 109,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictiveFAD() throws Throwable {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ObjectService os = new ObjectServiceImpl();\n        try {\n            os.createObject(session, \"/myobject\");\n        } catch (final RepositoryRuntimeException e) {\n            throw e.getCause();\n        }\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 109,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictiveFAD() throws Throwable {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ObjectService os = new ObjectServiceImpl();\n        try {\n            os.findOrCreateObject(session, \"/myobject\");\n        } catch (final RepositoryRuntimeException e) {\n            throw e.getCause();\n        }\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "os.createObject(session, \"/myobject\");",
          "type": "DELETE",
          "lineNo": 127
        }
      ],
      "targetChanges": [
        {
          "line": "os.findOrCreateObject(session, \"/myobject\");",
          "type": "ADD",
          "lineNo": 127
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Try",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        127
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:96",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testPermissiveFAD()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectServiceImpl();\n        os.createObject(session, \"/myobject\");\n        verify(fad, times(4)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectServiceImpl();\n        os.findOrCreateObject(session, \"/myobject\");\n        verify(fad, times(4)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "os.createObject(session, \"/myobject\");",
          "type": "DELETE",
          "lineNo": 105
        }
      ],
      "targetChanges": [
        {
          "line": "os.findOrCreateObject(session, \"/myobject\");",
          "type": "ADD",
          "lineNo": 105
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        105
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:97",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testModifyBinaryRdfContent()",
    "bSource": {
      "startLine": 250,
      "code": "@Test\n    public void testModifyBinaryRdfContent() throws Exception {\n        final String pid = \"FedoraDatastreamsTest1\";\n\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\"xyz\",\n                                                               IOUtils.toInputStream(\"<> <info:a> 'xyz'\"),\n                                                               \"filename.txt\",\n                                                               MediaType.valueOf(contentTypeTurtle));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=xyz;filename=\\\"filename.txt\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        when(mockDatastreams.getDatastream(any(Session.class), eq(\"/{}\" + pid + \"/{}xyz\"))).thenReturn(mockDatastream);\n\n        final FedoraBinary mockBinary = mock(FedoraBinary.class);\n        when(mockDatastream.getBinary()).thenReturn(mockBinary);\n\n        when(mockNode.getPath()).thenReturn(\"/FedoraDatastreamsTest1\");\n        when(mockSession.getNode(\"/FedoraDatastreamsTest1\")).thenReturn(mockNode);\n        final Response actual =\n            testObj.batchModify(createPathList(pid), multipart);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockBinary).setContent(any(InputStream.class), eq(\"text/turtle\"), eq((URI) null), eq(\"filename.txt\"),\n                any(StoragePolicyDecisionPoint.class));\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 250,
      "code": "@Test\n    public void testModifyBinaryRdfContent() throws Exception {\n        final String pid = \"FedoraDatastreamsTest1\";\n\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\"xyz\",\n                                                               IOUtils.toInputStream(\"<> <info:a> 'xyz'\"),\n                                                               \"filename.txt\",\n                                                               MediaType.valueOf(contentTypeTurtle));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=xyz;filename=\\\"filename.txt\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(\"/{}\" + pid + \"/{}xyz\")))\n                .thenReturn(mockDatastream);\n\n        final FedoraBinary mockBinary = mock(FedoraBinary.class);\n        when(mockDatastream.getBinary()).thenReturn(mockBinary);\n\n        when(mockNode.getPath()).thenReturn(\"/FedoraDatastreamsTest1\");\n        when(mockSession.getNode(\"/FedoraDatastreamsTest1\")).thenReturn(mockNode);\n        final Response actual =\n            testObj.batchModify(createPathList(pid), multipart);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockBinary).setContent(any(InputStream.class), eq(\"text/turtle\"), eq((URI) null), eq(\"filename.txt\"),\n                any(StoragePolicyDecisionPoint.class));\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getDatastream(any(Session.class), eq(\"/{}\" + pid + \"/{}xyz\"))).thenReturn(mockDatastream);",
          "type": "DELETE",
          "lineNo": 271
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(\"/{}\" + pid + \"/{}xyz\")))",
          "type": "ADD",
          "lineNo": 271
        },
        {
          "line": ".thenReturn(mockDatastream);",
          "type": "ADD",
          "lineNo": 272
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/{}'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/{}xyz'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/{}'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/{}xyz'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDatastream",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateDatastream",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        271
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:98",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraFixityTest.testGetDatastreamFixity()",
    "bSource": {
      "startLine": 76,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException {\n        final RdfStream expected = new RdfStream();\n\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String path = \"/objects/\" + pid + \"/testDS\";\n        final String dsId = \"testDS\";\n        final Datastream mockDs = mockDatastream(pid, dsId, null);\n\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(mockDs);\n        when(mockDatastreams.getFixityResultsModel(any(IdentifierTranslator.class), any(FedoraBinary.class)))\n                .thenReturn(expected);\n\n        final RdfStream actual = testObj.getDatastreamFixity(createPathList(\"objects\", pid, \"testDS\"),\n                mockRequest, uriInfo);\n\n        assertEquals(expected, actual);\n    }"
    },
    "aSource": {
      "startLine": 76,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException {\n        final RdfStream expected = new RdfStream();\n\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String path = \"/objects/\" + pid + \"/testDS\";\n        final String dsId = \"testDS\";\n        final Datastream mockDs = mockDatastream(pid, dsId, null);\n\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockDatastreams.findOrCreateDatastream(mockSession, path)).thenReturn(mockDs);\n        when(mockDatastreams.getFixityResultsModel(any(IdentifierTranslator.class), any(FedoraBinary.class)))\n                .thenReturn(expected);\n\n        final RdfStream actual = testObj.getDatastreamFixity(createPathList(\"objects\", pid, \"testDS\"),\n                mockRequest, uriInfo);\n\n        assertEquals(expected, actual);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(mockDs);",
          "type": "DELETE",
          "lineNo": 87
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockDatastreams.findOrCreateDatastream(mockSession, path)).thenReturn(mockDs);",
          "type": "ADD",
          "lineNo": 87
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockDs"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockDs"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDatastream",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateDatastream",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        87
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:99",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraExportTest.testExportObjectNoRecurse()",
    "bSource": {
      "startLine": 108,
      "code": "@Test\n    public void testExportObjectNoRecurse() throws Exception {\n        final String noRecurse = \"true\";\n        when(mockSerializers.getSerializer(FedoraObjectSerializer.JCR_XML)).thenReturn(\n                mockJcrXmlSerializer);\n        when(mockObjects.getObject(mockSession, \"/test/object\")).thenReturn(\n                mockObject);\n        ((StreamingOutput) testObj.exportObject(\n                createPathList(\"test\", \"object\"), FedoraObjectSerializer.JCR_XML,\n                    noRecurse, \"false\").getEntity()).write(new ByteArrayOutputStream());\n        verify(mockJcrXmlSerializer).serialize(eq(mockObject),\n                any(OutputStream.class), eq(Boolean.valueOf(noRecurse)),\n                    eq(Boolean.valueOf(\"false\")));\n    }"
    },
    "aSource": {
      "startLine": 108,
      "code": "@Test\n    public void testExportObjectNoRecurse() throws Exception {\n        final String noRecurse = \"true\";\n        when(mockSerializers.getSerializer(FedoraObjectSerializer.JCR_XML)).thenReturn(\n                mockJcrXmlSerializer);\n        when(mockObjects.findOrCreateObject(mockSession, \"/test/object\")).thenReturn(\n                mockObject);\n        ((StreamingOutput) testObj.exportObject(\n                createPathList(\"test\", \"object\"), FedoraObjectSerializer.JCR_XML,\n                    noRecurse, \"false\").getEntity()).write(new ByteArrayOutputStream());\n        verify(mockJcrXmlSerializer).serialize(eq(mockObject),\n                any(OutputStream.class), eq(Boolean.valueOf(noRecurse)),\n                    eq(Boolean.valueOf(\"false\")));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraExportTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraExportTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObjects.getObject(mockSession, \"/test/object\")).thenReturn(",
          "type": "DELETE",
          "lineNo": 113
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObjects.findOrCreateObject(mockSession, \"/test/object\")).thenReturn(",
          "type": "ADD",
          "lineNo": 113
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/test/object'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/test/object'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        113
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:100",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraExportTest.testExportObject()",
    "bSource": {
      "startLine": 82,
      "code": "@Test\n    public void testExportObject() throws Exception {\n        when(mockObjects.getObject(mockSession, \"/test/object\")).thenReturn(\n                mockObject);\n        ((StreamingOutput) testObj.exportObject(\n                createPathList(\"test\", \"object\"), \"fake-format\",\n                    \"false\", \"false\").getEntity()).write(new ByteArrayOutputStream());\n        verify(mockSerializer).serialize(eq(mockObject), any(OutputStream.class),\n                eq(Boolean.valueOf(\"false\")), eq(Boolean.valueOf(\"false\")));\n\n    }"
    },
    "aSource": {
      "startLine": 82,
      "code": "@Test\n    public void testExportObject() throws Exception {\n        when(mockObjects.findOrCreateObject(mockSession, \"/test/object\")).thenReturn(\n                mockObject);\n        ((StreamingOutput) testObj.exportObject(\n                createPathList(\"test\", \"object\"), \"fake-format\",\n                    \"false\", \"false\").getEntity()).write(new ByteArrayOutputStream());\n        verify(mockSerializer).serialize(eq(mockObject), any(OutputStream.class),\n                eq(Boolean.valueOf(\"false\")), eq(Boolean.valueOf(\"false\")));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraExportTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraExportTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObjects.getObject(mockSession, \"/test/object\")).thenReturn(",
          "type": "DELETE",
          "lineNo": 84
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObjects.findOrCreateObject(mockSession, \"/test/object\")).thenReturn(",
          "type": "ADD",
          "lineNo": 84
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/test/object'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/test/object'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        84
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:101",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraExportTest.testExportObjectSkipBinary()",
    "bSource": {
      "startLine": 94,
      "code": "@Test\n    public void testExportObjectSkipBinary() throws Exception {\n        final String skipBinary = \"true\";\n        when(mockSerializers.getSerializer(FedoraObjectSerializer.JCR_XML)).thenReturn(\n                mockJcrXmlSerializer);\n        when(mockObjects.getObject(mockSession, \"/test/object\")).thenReturn(\n                mockObject);\n        ((StreamingOutput) testObj.exportObject(\n                createPathList(\"test\", \"object\"), FedoraObjectSerializer.JCR_XML,\n                    \"false\", skipBinary).getEntity()).write(new ByteArrayOutputStream());\n        verify(mockJcrXmlSerializer).serialize(eq(mockObject), any(OutputStream.class),\n                eq(Boolean.valueOf(\"false\")), eq(Boolean.valueOf(skipBinary)));\n    }"
    },
    "aSource": {
      "startLine": 94,
      "code": "@Test\n    public void testExportObjectSkipBinary() throws Exception {\n        final String skipBinary = \"true\";\n        when(mockSerializers.getSerializer(FedoraObjectSerializer.JCR_XML)).thenReturn(\n                mockJcrXmlSerializer);\n        when(mockObjects.findOrCreateObject(mockSession, \"/test/object\")).thenReturn(\n                mockObject);\n        ((StreamingOutput) testObj.exportObject(\n                createPathList(\"test\", \"object\"), FedoraObjectSerializer.JCR_XML,\n                    \"false\", skipBinary).getEntity()).write(new ByteArrayOutputStream());\n        verify(mockJcrXmlSerializer).serialize(eq(mockObject), any(OutputStream.class),\n                eq(Boolean.valueOf(\"false\")), eq(Boolean.valueOf(skipBinary)));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraExportTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraExportTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObjects.getObject(mockSession, \"/test/object\")).thenReturn(",
          "type": "DELETE",
          "lineNo": 99
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObjects.findOrCreateObject(mockSession, \"/test/object\")).thenReturn(",
          "type": "ADD",
          "lineNo": 99
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/test/object'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService mockObjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/test/object'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        99
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:102",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.NodeServiceImplIT.testDeleteObjectWithInboundReferences()",
    "bSource": {
      "startLine": 66,
      "code": "@Test\n    public void testDeleteObjectWithInboundReferences() throws RepositoryException {\n\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resourceA = objectService.createObject(session, \"/\" + pid + \"/a\");\n        final FedoraResource resourceB = objectService.createObject(session, \"/\" + pid + \"/b\");\n\n        final Value value = session.getValueFactory().createValue(resourceB.getNode());\n        resourceA.getNode().setProperty(\"fedorarelsext:hasMember\", new Value[] { value });\n\n        session.save();\n        nodeService.deleteObject(session, \"/\" + pid + \"/a\");\n        session.save();\n\n        nodeService.deleteObject(session, \"/\" + pid + \"/b\");\n        session.save();\n\n        assertFalse(session.nodeExists(\"/\" + pid + \"/b\"));\n\n    }"
    },
    "aSource": {
      "startLine": 66,
      "code": "@Test\n    public void testDeleteObjectWithInboundReferences() throws RepositoryException {\n\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resourceA = objectService.findOrCreateObject(session, \"/\" + pid + \"/a\");\n        final FedoraResource resourceB = objectService.findOrCreateObject(session, \"/\" + pid + \"/b\");\n\n        final Value value = session.getValueFactory().createValue(resourceB.getNode());\n        resourceA.getNode().setProperty(\"fedorarelsext:hasMember\", new Value[] { value });\n\n        session.save();\n        nodeService.deleteObject(session, \"/\" + pid + \"/a\");\n        session.save();\n\n        nodeService.deleteObject(session, \"/\" + pid + \"/b\");\n        session.save();\n\n        assertFalse(session.nodeExists(\"/\" + pid + \"/b\"));\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/NodeServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/NodeServiceImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resourceA = objectService.createObject(session, \"/\" + pid + \"/a\");",
          "type": "DELETE",
          "lineNo": 71
        },
        {
          "line": "final FedoraResource resourceB = objectService.createObject(session, \"/\" + pid + \"/b\");",
          "type": "DELETE",
          "lineNo": 72
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resourceA = objectService.findOrCreateObject(session, \"/\" + pid + \"/a\");",
          "type": "ADD",
          "lineNo": 71
        },
        {
          "line": "final FedoraResource resourceB = objectService.findOrCreateObject(session, \"/\" + pid + \"/b\");",
          "type": "ADD",
          "lineNo": 72
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resourceA"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/a'"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resourceB"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/b'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resourceA"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/a'"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resourceB"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/b'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        71,
        72
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:103",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.DatastreamServiceImplIT.testGetDatastreamContentInputStream()",
    "bSource": {
      "startLine": 99,
      "code": "@Test\n    public void testGetDatastreamContentInputStream() throws Exception {\n        Session session = repository.login();\n        final InputStream is = new ByteArrayInputStream(\"asdf\".getBytes());\n        objectService.createObject(session, \"/testDatastreamServiceObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamServiceObject/\" + \"testDatastreamNode\")\n                .setContent(\n                        is,\n                        \"application/octet-stream\",\n                        null,\n                        null,\n                        null\n                );\n\n        session.save();\n        session.logout();\n        session = repository.login();\n        final FedoraBinary binary =\n            datastreamService.getBinary(session,\n                    \"/testDatastreamServiceObject/\" + \"testDatastreamNode\");\n        assertEquals(\"asdf\", IOUtils.toString(binary.getContent(), \"UTF-8\"));\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 99,
      "code": "@Test\n    public void testGetDatastreamContentInputStream() throws Exception {\n        Session session = repository.login();\n        final InputStream is = new ByteArrayInputStream(\"asdf\".getBytes());\n        objectService.findOrCreateObject(session, \"/testDatastreamServiceObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamServiceObject/\" + \"testDatastreamNode\")\n                .setContent(\n                        is,\n                        \"application/octet-stream\",\n                        null,\n                        null,\n                        null\n                );\n\n        session.save();\n        session.logout();\n        session = repository.login();\n        final FedoraBinary binary =\n            datastreamService.getBinary(session,\n                    \"/testDatastreamServiceObject/\" + \"testDatastreamNode\");\n        assertEquals(\"asdf\", IOUtils.toString(binary.getContent(), \"UTF-8\"));\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/DatastreamServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/DatastreamServiceImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/testDatastreamServiceObject\");",
          "type": "DELETE",
          "lineNo": 103
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/testDatastreamServiceObject\");",
          "type": "ADD",
          "lineNo": 103
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamServiceObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamServiceObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        103
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:104",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testCreateObjectWithDatastream()",
    "bSource": {
      "startLine": 285,
      "code": "@Test\n    public void testCreateObjectWithDatastream() throws Exception {\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n        final String pid = \"testCreateObjectWithSparqlUpdate\";\n        final String path = \"/\" + pid + \"/a\";\n        when(mockNodes.exists(mockSession, \"/\" + pid)).thenReturn(true);\n        when(mockPidMinter.mintPid()).thenReturn(\"a\");\n        final Node contentNode = mock(Node.class);\n        final Datastream mockDatastream = mock(Datastream.class);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(mockDatastream);\n        final FedoraBinary mockBinary = mock(FedoraBinary.class);\n        when(mockDatastream.getBinary()).thenReturn(mockBinary);\n        when(mockBinary.getPath()).thenReturn(path + \"/jcr:content\");\n        when(mockDatastream.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockDatastream.getContentNode()).thenReturn(contentNode);\n        when(mockSession.getValueFactory()).thenReturn(mockValueFactory);\n        when(mockValueFactory.createValue(\"a\", PATH)).thenReturn(mockValue);\n        when(mockNodes.getObject(mockSession, \"/\" + pid)).thenReturn(mockResource);\n        when(mockResource.hasContent()).thenReturn(true);\n        when(mockDatastream.getPath()).thenReturn(path);\n        when(mockDatastream.getEtagValue()).thenReturn(\"\");\n\n        final InputStream mockStream =\n                new ByteArrayInputStream(\"random-image-bytes\".getBytes());\n        final Response actual = testObj.createObject(createPathList(pid), FEDORA_DATASTREAM,\n                \"urn:sha1:ebd0438cfbab7365669a7f8a64379e93c8112490\", \"inline; filename=foo.tiff\",\n                MediaType.valueOf(\"image/tiff\"), null, mockResponse, getUriInfoImpl(), mockStream);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockBinary).setContent(mockStream,\n                \"image/tiff\",\n                new URI(\"urn:sha1:ebd0438cfbab7365669a7f8a64379e93c8112490\"),\n                \"foo.tiff\",\n                mockDatastreams.getStoragePolicyDecisionPoint());\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 285,
      "code": "@Test\n    public void testCreateObjectWithDatastream() throws Exception {\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n        final String pid = \"testCreateObjectWithSparqlUpdate\";\n        final String path = \"/\" + pid + \"/a\";\n        when(mockNodes.exists(mockSession, \"/\" + pid)).thenReturn(true);\n        when(mockPidMinter.mintPid()).thenReturn(\"a\");\n        final Node contentNode = mock(Node.class);\n        final Datastream mockDatastream = mock(Datastream.class);\n        when(mockDatastreams.findOrCreateDatastream(mockSession, path)).thenReturn(mockDatastream);\n        final FedoraBinary mockBinary = mock(FedoraBinary.class);\n        when(mockDatastream.getBinary()).thenReturn(mockBinary);\n        when(mockBinary.getPath()).thenReturn(path + \"/jcr:content\");\n        when(mockDatastream.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockDatastream.getContentNode()).thenReturn(contentNode);\n        when(mockSession.getValueFactory()).thenReturn(mockValueFactory);\n        when(mockValueFactory.createValue(\"a\", PATH)).thenReturn(mockValue);\n        when(mockNodes.getObject(mockSession, \"/\" + pid)).thenReturn(mockResource);\n        when(mockResource.hasContent()).thenReturn(true);\n        when(mockDatastream.getPath()).thenReturn(path);\n        when(mockDatastream.getEtagValue()).thenReturn(\"\");\n\n        final InputStream mockStream =\n                new ByteArrayInputStream(\"random-image-bytes\".getBytes());\n        final Response actual = testObj.createObject(createPathList(pid), FEDORA_DATASTREAM,\n                \"urn:sha1:ebd0438cfbab7365669a7f8a64379e93c8112490\", \"inline; filename=foo.tiff\",\n                MediaType.valueOf(\"image/tiff\"), null, mockResponse, getUriInfoImpl(), mockStream);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockBinary).setContent(mockStream,\n                \"image/tiff\",\n                new URI(\"urn:sha1:ebd0438cfbab7365669a7f8a64379e93c8112490\"),\n                \"foo.tiff\",\n                mockDatastreams.getStoragePolicyDecisionPoint());\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(mockDatastream);",
          "type": "DELETE",
          "lineNo": 295
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockDatastreams.findOrCreateDatastream(mockSession, path)).thenReturn(mockDatastream);",
          "type": "ADD",
          "lineNo": 295
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDatastream",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateDatastream",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        295
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:105",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testModifyContent()",
    "bSource": {
      "startLine": 244,
      "code": "@Test\n    public void testModifyContent()\n            throws RepositoryException, InvalidChecksumException, ParseException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid + \"/\" + dsId;\n        final URI checksum = URI.create(\"urn:sha1:some-checksum\");\n        try (final InputStream dsContentStream = IOUtils.toInputStream(dsContent)) {\n            when(mockNode.isNew()).thenReturn(false);\n            final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n            when(mockDatastreams.asDatastream(mockNode)).thenReturn(mockDs);\n\n            when(mockDatastreams.getDatastream(mockSession, dsPath)).thenReturn(\n                    mockDs);\n            when(mockDs.getBinary()).thenReturn(mockBinary);\n            when(mockBinary.getPath()).thenReturn(dsPath + \"/jcr:content\");\n\n            final Request mockRequest = mock(Request.class);\n            when(\n                    mockRequest.evaluatePreconditions(any(Date.class),\n                            any(EntityTag.class))).thenReturn(null);\n            when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n            final Response actual =\n                    testObj.modifyContent(createPathList(pid, dsId), \"urn:sha1:some-checksum\", null, null,\n                            dsContentStream, mockRequest, mockResponse);\n            assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(dsContentStream, \"application/octet-stream\", checksum, null, null);\n            verify(mockSession).save();\n        }\n    }"
    },
    "aSource": {
      "startLine": 246,
      "code": "@Test\n    public void testModifyContent()\n            throws RepositoryException, InvalidChecksumException, ParseException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid + \"/\" + dsId;\n        final URI checksum = URI.create(\"urn:sha1:some-checksum\");\n        try (final InputStream dsContentStream = IOUtils.toInputStream(dsContent)) {\n            when(mockNode.isNew()).thenReturn(false);\n            final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n            when(mockDatastreams.asDatastream(mockNode)).thenReturn(mockDs);\n\n            when(mockDatastreams.findOrCreateDatastream(mockSession, dsPath)).thenReturn(\n                    mockDs);\n            when(mockDs.getBinary()).thenReturn(mockBinary);\n            when(mockBinary.getPath()).thenReturn(dsPath + \"/jcr:content\");\n\n            final Request mockRequest = mock(Request.class);\n            when(\n                    mockRequest.evaluatePreconditions(any(Date.class),\n                            any(EntityTag.class))).thenReturn(null);\n            when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n            final Response actual =\n                    testObj.modifyContent(createPathList(pid, dsId), \"urn:sha1:some-checksum\", null, null,\n                            dsContentStream, mockRequest, mockResponse);\n            assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(dsContentStream, \"application/octet-stream\", checksum, null, null);\n            verify(mockSession).save();\n        }\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getDatastream(mockSession, dsPath)).thenReturn(",
          "type": "DELETE",
          "lineNo": 257
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockDatastreams.findOrCreateDatastream(mockSession, dsPath)).thenReturn(",
          "type": "ADD",
          "lineNo": 259
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDatastream",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateDatastream",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        259
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:106",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testCreateContent()",
    "bSource": {
      "startLine": 161,
      "code": "@Test\n    public void testCreateContent() throws RepositoryException, IOException,\n            InvalidChecksumException, ParseException, URISyntaxException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"xyz\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid + \"/\" + dsId;\n        try (final InputStream dsContentStream = IOUtils.toInputStream(dsContent)) {\n            when(mockNode.isNew()).thenReturn(true);\n            when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContentNode);\n            when(mockDatastreams.getDatastream(any(Session.class), eq(dsPath))).thenReturn(mockDatastream);\n            when(mockDatastream.getBinary()).thenReturn(mockBinary);\n            when(mockBinary.getPath()).thenReturn(dsPath + \"/jcr:content\");\n            when(mockNodeService.exists(mockSession, dsPath)).thenReturn(false);\n            when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n            final Response actual =\n                    testObj.create(createPathList(pid, dsId), null, null, null, TEXT_PLAIN_TYPE,\n                            dsContentStream, mockResponse);\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(dsContentStream, \"text/plain\", null, null, null);\n            verify(mockSession).save();\n        }\n    }"
    },
    "aSource": {
      "startLine": 161,
      "code": "@Test\n    public void testCreateContent() throws RepositoryException, IOException,\n            InvalidChecksumException, ParseException, URISyntaxException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"xyz\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid + \"/\" + dsId;\n        try (final InputStream dsContentStream = IOUtils.toInputStream(dsContent)) {\n            when(mockNode.isNew()).thenReturn(true);\n            when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContentNode);\n            when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(dsPath))).thenReturn(mockDatastream);\n            when(mockDatastream.getBinary()).thenReturn(mockBinary);\n            when(mockBinary.getPath()).thenReturn(dsPath + \"/jcr:content\");\n            when(mockNodeService.exists(mockSession, dsPath)).thenReturn(false);\n            when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n            final Response actual =\n                    testObj.create(createPathList(pid, dsId), null, null, null, TEXT_PLAIN_TYPE,\n                            dsContentStream, mockResponse);\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(dsContentStream, \"text/plain\", null, null, null);\n            verify(mockSession).save();\n        }\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getDatastream(any(Session.class), eq(dsPath))).thenReturn(mockDatastream);",
          "type": "DELETE",
          "lineNo": 171
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(dsPath))).thenReturn(mockDatastream);",
          "type": "ADD",
          "lineNo": 171
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDatastream",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateDatastream",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        171
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:107",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testPutContent()",
    "bSource": {
      "startLine": 137,
      "code": "@Test\n    public void testPutContent()\n            throws RepositoryException, InvalidChecksumException, ParseException, IOException, URISyntaxException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid + \"/\" + dsId;\n        try (final InputStream dsContentStream = IOUtils.toInputStream(dsContent)) {\n            when(mockDatastream.isNew()).thenReturn(true);\n            when(mockDatastreams.getDatastream(any(Session.class), eq(dsPath))).thenReturn(mockDatastream);\n            when(mockDatastream.getBinary()).thenReturn(mockBinary);\n            when(mockBinary.getPath()).thenReturn(dsPath + \"/jcr:content\");\n            when(mockNodeService.exists(mockSession, dsPath)).thenReturn(false);\n\n            when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n            final Response actual =\n                    testObj.modifyContent(createPathList(pid, dsId), null, \"inline; filename=\\\"xyz\\\"\", null,\n                            dsContentStream, null, mockResponse);\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(dsContentStream, \"application/octet-stream\", null, \"xyz\", null);\n            verify(mockSession).save();\n        }\n    }"
    },
    "aSource": {
      "startLine": 137,
      "code": "@Test\n    public void testPutContent()\n            throws RepositoryException, InvalidChecksumException, ParseException, IOException, URISyntaxException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid + \"/\" + dsId;\n        try (final InputStream dsContentStream = IOUtils.toInputStream(dsContent)) {\n            when(mockDatastream.isNew()).thenReturn(true);\n            when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(dsPath))).thenReturn(mockDatastream);\n            when(mockDatastream.getBinary()).thenReturn(mockBinary);\n            when(mockBinary.getPath()).thenReturn(dsPath + \"/jcr:content\");\n            when(mockNodeService.exists(mockSession, dsPath)).thenReturn(false);\n\n            when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n            final Response actual =\n                    testObj.modifyContent(createPathList(pid, dsId), null, \"inline; filename=\\\"xyz\\\"\", null,\n                            dsContentStream, null, mockResponse);\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(dsContentStream, \"application/octet-stream\", null, \"xyz\", null);\n            verify(mockSession).save();\n        }\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getDatastream(any(Session.class), eq(dsPath))).thenReturn(mockDatastream);",
          "type": "DELETE",
          "lineNo": 146
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(dsPath))).thenReturn(mockDatastream);",
          "type": "ADD",
          "lineNo": 146
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDatastream",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateDatastream",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        146
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:108",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testCreateContentAtMintedPath()",
    "bSource": {
      "startLine": 185,
      "code": "@Test\n    public void testCreateContentAtMintedPath() throws RepositoryException, InvalidChecksumException,\n            ParseException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid;\n        try (final InputStream dsContentStream = IOUtils.toInputStream(dsContent)) {\n            when(mockNodeService.exists(mockSession, dsPath)).thenReturn(true);\n            when(mockMinter.mintPid()).thenReturn(\"xyz\");\n            setField(testObj, \"pidMinter\", mockMinter);\n            when(mockNode.isNew()).thenReturn(true);\n\n            when(mockDatastreams.getDatastream(any(Session.class), eq(dsPath + \"/xyz\"))).thenReturn(mockDatastream);\n            when(mockDatastream.getBinary()).thenReturn(mockBinary);\n            when(mockBinary.getPath()).thenReturn(dsPath + \"/jcr:content\");\n\n            when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n            final FedoraResource mockResource = mock(FedoraResource.class);\n            when(mockNodeService.getObject(mockSession, dsPath)).thenReturn(mockResource);\n            when(mockResource.hasContent()).thenReturn(false);\n\n            final Response actual =\n                    testObj.create(createPathList(pid), null, null, null, TEXT_PLAIN_TYPE,\n                            dsContentStream, mockResponse);\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(dsContentStream, \"text/plain\", null, null, null);\n            verify(mockSession).save();\n        }\n    }"
    },
    "aSource": {
      "startLine": 185,
      "code": "@Test\n    public void testCreateContentAtMintedPath() throws RepositoryException, InvalidChecksumException,\n            ParseException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid;\n        try (final InputStream dsContentStream = IOUtils.toInputStream(dsContent)) {\n            when(mockNodeService.exists(mockSession, dsPath)).thenReturn(true);\n            when(mockMinter.mintPid()).thenReturn(\"xyz\");\n            setField(testObj, \"pidMinter\", mockMinter);\n            when(mockNode.isNew()).thenReturn(true);\n\n            when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(dsPath + \"/xyz\")))\n                    .thenReturn(mockDatastream);\n            when(mockDatastream.getBinary()).thenReturn(mockBinary);\n            when(mockBinary.getPath()).thenReturn(dsPath + \"/jcr:content\");\n\n            when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n            final FedoraResource mockResource = mock(FedoraResource.class);\n            when(mockNodeService.getObject(mockSession, dsPath)).thenReturn(mockResource);\n            when(mockResource.hasContent()).thenReturn(false);\n\n            final Response actual =\n                    testObj.create(createPathList(pid), null, null, null, TEXT_PLAIN_TYPE,\n                            dsContentStream, mockResponse);\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(dsContentStream, \"text/plain\", null, null, null);\n            verify(mockSession).save();\n        }\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getDatastream(any(Session.class), eq(dsPath + \"/xyz\"))).thenReturn(mockDatastream);",
          "type": "DELETE",
          "lineNo": 197
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(dsPath + \"/xyz\")))",
          "type": "ADD",
          "lineNo": 197
        },
        {
          "line": ".thenReturn(mockDatastream);",
          "type": "ADD",
          "lineNo": 198
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/xyz'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/xyz'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDatastream",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateDatastream",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        197
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:109",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testCreateContentWithSlug()",
    "bSource": {
      "startLine": 216,
      "code": "@Test\n    public void testCreateContentWithSlug() throws RepositoryException, InvalidChecksumException,\n                                           ParseException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsid = \"slug\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid;\n        try (final InputStream dsContentStream = IOUtils.toInputStream(dsContent)) {\n            when(mockNodeService.exists(mockSession, dsPath)).thenReturn(true);\n            setField(testObj, \"pidMinter\", mockMinter);\n            when(mockNode.isNew()).thenReturn(true);\n            when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContentNode);\n            when(mockDatastreams.getDatastream(any(Session.class), eq(dsPath + \"/slug\"))).thenReturn(mockDatastream);\n            when(mockDatastream.getBinary()).thenReturn(mockBinary);\n            when(mockBinary.getPath()).thenReturn(dsPath + \"/jcr:content\");\n            when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n            final FedoraResource mockResource = mock(FedoraResource.class);\n            when(mockNodeService.getObject(mockSession, dsPath)).thenReturn(mockResource);\n            when(mockResource.hasContent()).thenReturn(false);\n            final Response actual =\n                    testObj.create(createPathList(pid), dsid, null, null, TEXT_PLAIN_TYPE,\n                            dsContentStream, mockResponse);\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(dsContentStream, \"text/plain\", null, null, null);\n            verify(mockSession).save();\n        }\n    }"
    },
    "aSource": {
      "startLine": 217,
      "code": "@Test\n    public void testCreateContentWithSlug() throws RepositoryException, InvalidChecksumException,\n                                           ParseException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsid = \"slug\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid;\n        try (final InputStream dsContentStream = IOUtils.toInputStream(dsContent)) {\n            when(mockNodeService.exists(mockSession, dsPath)).thenReturn(true);\n            setField(testObj, \"pidMinter\", mockMinter);\n            when(mockNode.isNew()).thenReturn(true);\n            when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContentNode);\n            when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(dsPath + \"/slug\")))\n                    .thenReturn(mockDatastream);\n            when(mockDatastream.getBinary()).thenReturn(mockBinary);\n            when(mockBinary.getPath()).thenReturn(dsPath + \"/jcr:content\");\n            when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n            final FedoraResource mockResource = mock(FedoraResource.class);\n            when(mockNodeService.getObject(mockSession, dsPath)).thenReturn(mockResource);\n            when(mockResource.hasContent()).thenReturn(false);\n            final Response actual =\n                    testObj.create(createPathList(pid), dsid, null, null, TEXT_PLAIN_TYPE,\n                            dsContentStream, mockResponse);\n            assertEquals(CREATED.getStatusCode(), actual.getStatus());\n            verify(mockBinary).setContent(dsContentStream, \"text/plain\", null, null, null);\n            verify(mockSession).save();\n        }\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getDatastream(any(Session.class), eq(dsPath + \"/slug\"))).thenReturn(mockDatastream);",
          "type": "DELETE",
          "lineNo": 228
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockDatastreams.findOrCreateDatastream(any(Session.class), eq(dsPath + \"/slug\")))",
          "type": "ADD",
          "lineNo": 229
        },
        {
          "line": ".thenReturn(mockDatastream);",
          "type": "ADD",
          "lineNo": 230
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/slug'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/slug'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDatastream",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateDatastream",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        229
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:110",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testGetContent()",
    "bSource": {
      "startLine": 276,
      "code": "@Test\n    public void testGetContent() throws RepositoryException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String path = \"/\" + pid + \"/\" + dsId;\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockDs.getBinary().getDescription()).thenReturn(mockDs);\n        final Request mockRequest = mock(Request.class);\n        final Response actual =\n            testObj.getContent(createPathList(pid, dsId), null, mockRequest, mockResponse);\n        verify(mockDs.getBinary()).getContent();\n        verify(mockSession, never()).save();\n        final String actualContent =\n            IOUtils.toString((InputStream) actual.getEntity());\n        final List<Object> linkHeaders = actual.getMetadata().get(\"Link\");\n        assertTrue(\"Expected to find describedby Link header\",\n            linkHeaders.contains(\"<http://localhost/fcrepo\" + path + \">;rel=\\\"describedby\\\"\"));\n        assertTrue(\"Expected to find NonRDFSource Link header\",\n            linkHeaders.contains(\"<\" + NON_RDF_SOURCE + \">;rel=\\\"type\\\"\"));\n        assertEquals(\"asdf\", actualContent);\n    }"
    },
    "aSource": {
      "startLine": 278,
      "code": "@Test\n    public void testGetContent() throws RepositoryException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String path = \"/\" + pid + \"/\" + dsId;\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDatastreams.findOrCreateDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockDs.getBinary().getDescription()).thenReturn(mockDs);\n        final Request mockRequest = mock(Request.class);\n        final Response actual =\n            testObj.getContent(createPathList(pid, dsId), null, mockRequest, mockResponse);\n        verify(mockDs.getBinary()).getContent();\n        verify(mockSession, never()).save();\n        final String actualContent =\n            IOUtils.toString((InputStream) actual.getEntity());\n        final List<Object> linkHeaders = actual.getMetadata().get(\"Link\");\n        assertTrue(\"Expected to find describedby Link header\",\n            linkHeaders.contains(\"<http://localhost/fcrepo\" + path + \">;rel=\\\"describedby\\\"\"));\n        assertTrue(\"Expected to find NonRDFSource Link header\",\n            linkHeaders.contains(\"<\" + NON_RDF_SOURCE + \">;rel=\\\"type\\\"\"));\n        assertEquals(\"asdf\", actualContent);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(",
          "type": "DELETE",
          "lineNo": 283
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockDatastreams.findOrCreateDatastream(mockSession, path)).thenReturn(",
          "type": "ADD",
          "lineNo": 285
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.findOrCreateDatastream(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Datastream)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDatastream",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateDatastream",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        285
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:111",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.LDPathServiceIT.shouldDoStuff()",
    "bSource": {
      "startLine": 67,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.createObject(session, \"/testObject\");\n        object.getNode().setProperty(\"dc:title\", \"some-title\");\n\n        final String s = \"@prefix dces : <http://purl.org/dc/elements/1.1/>\\n\" +\n                       \"@prefix fcrepo : <\" + REPOSITORY_NAMESPACE + \">\\n\" +\n                           \"id      = . :: xsd:string ;\\n\" +\n                           \"title = dc:title :: xsd:string ;\\n\" +\n                           \"uuid = fcrepo:uuid :: xsd:string ;\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new LDPathTransform(stringReader);\n\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator();\n        final Map<String, Collection<Object>> stuff = testObj.apply(object.getPropertiesDataset(subjects));\n\n        assertNotNull(\"Failed to retrieve results!\", stuff);\n\n        assertTrue(\"Results didn't contain an identifier!\", stuff.containsKey(\"id\"));\n        assertTrue(\"Results didn't contain a title!\", stuff.containsKey(\"title\"));\n\n        assertEquals(\"Received more than one identifier!\", 1, stuff.get(\"id\").size());\n        assertEquals(\"Got wrong subject in identifier!\", subjects.getSubject(\"/testObject\").getURI(), stuff.get(\n                \"id\").iterator().next());\n        assertEquals(\"Got wrong title!\", \"some-title\", stuff.get(\"title\").iterator().next());\n        assertEquals(\"Got wrong UUID!\", object.getNode().getIdentifier(), stuff.get(\"uuid\").iterator().next());\n    }"
    },
    "aSource": {
      "startLine": 67,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");\n        object.getNode().setProperty(\"dc:title\", \"some-title\");\n\n        final String s = \"@prefix dces : <http://purl.org/dc/elements/1.1/>\\n\" +\n                       \"@prefix fcrepo : <\" + REPOSITORY_NAMESPACE + \">\\n\" +\n                           \"id      = . :: xsd:string ;\\n\" +\n                           \"title = dc:title :: xsd:string ;\\n\" +\n                           \"uuid = fcrepo:uuid :: xsd:string ;\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new LDPathTransform(stringReader);\n\n        final DefaultIdentifierTranslator subjects = new DefaultIdentifierTranslator();\n        final Map<String, Collection<Object>> stuff = testObj.apply(object.getPropertiesDataset(subjects));\n\n        assertNotNull(\"Failed to retrieve results!\", stuff);\n\n        assertTrue(\"Results didn't contain an identifier!\", stuff.containsKey(\"id\"));\n        assertTrue(\"Results didn't contain a title!\", stuff.containsKey(\"title\"));\n\n        assertEquals(\"Received more than one identifier!\", 1, stuff.get(\"id\").size());\n        assertEquals(\"Got wrong subject in identifier!\", subjects.getSubject(\"/testObject\").getURI(), stuff.get(\n                \"id\").iterator().next());\n        assertEquals(\"Got wrong title!\", \"some-title\", stuff.get(\"title\").iterator().next());\n        assertEquals(\"Got wrong UUID!\", object.getNode().getIdentifier(), stuff.get(\"uuid\").iterator().next());\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/LDPathServiceIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/LDPathServiceIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraObject object = objectService.createObject(session, \"/testObject\");",
          "type": "DELETE",
          "lineNo": 71
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");",
          "type": "ADD",
          "lineNo": 71
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        71
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:112",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.TransactionServiceImplIT.testCommit()",
    "bSource": {
      "startLine": 113,
      "code": "@Test\n    public void testCommit() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.createObject(txSession, \"/\" + pid );\n\n        // rollback and make sure the object doesn't exist\n        transactionService.commit( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertTrue( objectService.exists(session2,\"/\" + pid) );\n    }"
    },
    "aSource": {
      "startLine": 113,
      "code": "@Test\n    public void testCommit() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        transactionService.commit( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertTrue( objectService.exists(session2,\"/\" + pid) );\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(txSession, \"/\" + pid );",
          "type": "DELETE",
          "lineNo": 119
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(txSession, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 119
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        119
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:113",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.TransactionServiceImplIT.testRollback()",
    "bSource": {
      "startLine": 97,
      "code": "@Test\n    public void testRollback() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.createObject(txSession, \"/\" + pid );\n\n        // rollback and make sure the object doesn't exist\n        transactionService.rollback( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertFalse( objectService.exists(session2,\"/\" + pid) );\n    }"
    },
    "aSource": {
      "startLine": 97,
      "code": "@Test\n    public void testRollback() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        transactionService.rollback( t.getId() );\n        txSession.save();\n\n        final Session session2 = repository.login();\n        assertFalse( objectService.exists(session2,\"/\" + pid) );\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(txSession, \"/\" + pid );",
          "type": "DELETE",
          "lineNo": 103
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(txSession, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 103
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        103
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:114",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.TransactionServiceImplIT.testTransactionExpire()",
    "bSource": {
      "startLine": 81,
      "code": "@Test\n    public void testTransactionExpire() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.createObject(txSession, \"/\" + pid );\n\n        // rollback and make sure the object doesn't exist\n        t.expire();\n        transactionService.removeAndRollbackExpired();\n\n        final Session session2 = repository.login();\n        assertFalse( objectService.exists(session2,\"/\" + pid) );\n    }"
    },
    "aSource": {
      "startLine": 81,
      "code": "@Test\n    public void testTransactionExpire() throws RepositoryException {\n        final Session session = repository.login();\n        final Transaction t = transactionService.beginTransaction( session, \"fedoraAdmin\" );\n        final String pid = getRandomPid();\n        final Session txSession = TxAwareSession.newInstance(session, t.getId());\n        objectService.findOrCreateObject(txSession, \"/\" + pid);\n\n        // rollback and make sure the object doesn't exist\n        t.expire();\n        transactionService.removeAndRollbackExpired();\n\n        final Session session2 = repository.login();\n        assertFalse( objectService.exists(session2,\"/\" + pid) );\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/TransactionServiceImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(txSession, \"/\" + pid );",
          "type": "DELETE",
          "lineNo": 87
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(txSession, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 87
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        87
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:115",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.SparqlQueryTransformIT.shouldDoStuff()",
    "bSource": {
      "startLine": 55,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.createObject(session, \"/testObject\");\n\n        final String s = \"SELECT ?x ?uuid\\n\" +\n                \"WHERE { ?x  <\" + REPOSITORY_NAMESPACE + \"uuid> ?uuid }\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new SparqlQueryTransform(stringReader);\n\n        try (final QueryExecution qexec =\n                testObj.apply(object.getPropertiesDataset(new DefaultIdentifierTranslator()))) {\n            assert (qexec != null);\n            final ResultSet results = qexec.execSelect();\n            assert (results != null);\n            assertTrue(results.hasNext());\n        }\n    }"
    },
    "aSource": {
      "startLine": 55,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");\n\n        final String s = \"SELECT ?x ?uuid\\n\" +\n                \"WHERE { ?x  <\" + REPOSITORY_NAMESPACE + \"uuid> ?uuid }\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new SparqlQueryTransform(stringReader);\n\n        try (final QueryExecution qexec =\n                testObj.apply(object.getPropertiesDataset(new DefaultIdentifierTranslator()))) {\n            assert (qexec != null);\n            final ResultSet results = qexec.execSelect();\n            assert (results != null);\n            assertTrue(results.hasNext());\n        }\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/SparqlQueryTransformIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/SparqlQueryTransformIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraObject object = objectService.createObject(session, \"/testObject\");",
          "type": "DELETE",
          "lineNo": 59
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreateObject(session, \"/testObject\");",
          "type": "ADD",
          "lineNo": 59
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        59
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:116",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraObjectImplIT.testObjectGraphWithUriProperty()",
    "bSource": {
      "startLine": 147,
      "code": "@Test\n    public void testObjectGraphWithUriProperty() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.createObject(session, \"/graphObject\");\n        final IdentifierTranslator subjects = new DefaultIdentifierTranslator();\n        final String graphSubject = subjects.getSubject(\"/graphObject\").getURI();\n        final Dataset graphStore = object.getPropertiesDataset(subjects);\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        final String prefix = session.getWorkspace().getNamespaceRegistry().getPrefix(\"info:some#\");\n\n        assertNotNull(object.getNode().getProperty(prefix + \":urlProperty\"));\n\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"DELETE { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        assertFalse(object.getNode().hasProperty(prefix + \":urlProperty_ref\"));\n\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT DATA { <\" + graphSubject + \"> some:urlProperty <\" + graphSubject + \">;\\n\" +\n                         \"       some:urlProperty <info:somewhere/else> . }\", graphStore);\n\n        assertEquals(1, object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues().length);\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n    }"
    },
    "aSource": {
      "startLine": 147,
      "code": "@Test\n    public void testObjectGraphWithUriProperty() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.findOrCreateObject(session, \"/graphObject\");\n        final IdentifierTranslator subjects = new DefaultIdentifierTranslator();\n        final String graphSubject = subjects.getSubject(\"/graphObject\").getURI();\n        final Dataset graphStore = object.getPropertiesDataset(subjects);\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        final String prefix = session.getWorkspace().getNamespaceRegistry().getPrefix(\"info:some#\");\n\n        assertNotNull(object.getNode().getProperty(prefix + \":urlProperty\"));\n\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"DELETE { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        assertFalse(object.getNode().hasProperty(prefix + \":urlProperty_ref\"));\n\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT DATA { <\" + graphSubject + \"> some:urlProperty <\" + graphSubject + \">;\\n\" +\n                         \"       some:urlProperty <info:somewhere/else> . }\", graphStore);\n\n        assertEquals(1, object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues().length);\n        assertEquals(object.getNode(), session.getNodeByIdentifier(\n                object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/graphObject\");",
          "type": "DELETE",
          "lineNo": 151
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/graphObject\");",
          "type": "ADD",
          "lineNo": 151
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        151
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:117",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraObjectImplIT.testObjectGraph()",
    "bSource": {
      "startLine": 67,
      "code": "@Test\n    public void testObjectGraph() throws Exception {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.createObject(session, \"/graphObject\");\n        final IdentifierTranslator subjects = new DefaultIdentifierTranslator();\n        final Dataset graphStore = object.getPropertiesDataset(subjects);\n\n        final String graphSubject = subjects.getSubject(\"/graphObject\").getURI();\n\n        assertFalse(\"Graph store should not contain JCR prefixes\",\n                    compile(\"jcr\").matcher(graphStore.toString()).find());\n        assertFalse(\"Graph store should contain our fcrepo prefix\",\n                    compile(\"fcrepo\")\n                    .matcher(graphStore.toString()).find());\n\n        parseExecute(\"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                          \"INSERT { <http://example/egbook> dc:title \" +\n                          \"\\\"This is an example of an update that will be \" +\n                          \"ignored\\\" } WHERE {}\", graphStore);\n\n        parseExecute(\"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                          \"INSERT { <\" + graphSubject + \"> dc:title \" +\n                          \"\\\"This is an example title\\\" } WHERE {}\",\n                          graphStore);\n\n\n        final Value[] values = object.getNode().getProperty(\"dc:title\").getValues();\n        assertTrue(values.length > 0);\n\n        assertTrue(values[0]\n                       .getString(),\n                      values[0]\n                          .getString().equals(\"This is an example title\"));\n\n\n        parseExecute(\"PREFIX myurn: <info:myurn/>\\n\" +\n                          \"INSERT { <\" + graphSubject + \"> myurn:info \" +\n                          \"\\\"This is some example data\\\"} WHERE {}\",\n                          graphStore);\n\n        final Value value =\n            object.getNode().getProperty(object.getNode().getSession()\n                                         .getNamespacePrefix(\"info:myurn/\") +\n                                         \":info\").getValues()[0];\n\n        assertEquals(\"This is some example data\", value.getString());\n\n        parseExecute(\"PREFIX fedora-rels-ext: <\"\n                + RELATIONS_NAMESPACE + \">\\n\" +\n                \"INSERT { <\" + graphSubject + \"> fedora-rels-ext:\" +\n                \"isPartOf <\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        assertTrue(object.getNode().getProperty(\"fedorarelsext:isPartOf\")\n                   .getValues()[0].getString(),\n                   object.getNode().getProperty(\"fedorarelsext:isPartOf\")\n                   .getValues()[0].getString()\n                   .equals(object.getNode().getIdentifier()));\n\n\n        parseExecute(\"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                          \"DELETE { <\" + graphSubject + \"> dc:title \" +\n                          \"\\\"This is an example title\\\" } WHERE {}\",\n                          graphStore);\n\n        assertFalse(\"Found unexpected dc:title\",\n                    object.getNode().hasProperty(\"dc:title\"));\n\n        parseExecute(\"PREFIX fedora-rels-ext: <\" +\n                    RELATIONS_NAMESPACE + \">\\n\" +\n                    \"DELETE { <\" + graphSubject + \"> \" +\n                    \"fedora-rels-ext:isPartOf <\" + graphSubject + \"> \" +\n                    \"} WHERE {}\", graphStore);\n        assertFalse(\"found unexpected reference\",\n                    object.getNode().hasProperty(\"fedorarelsext:isPartOf\"));\n\n        session.save();\n\n    }"
    },
    "aSource": {
      "startLine": 67,
      "code": "@Test\n    public void testObjectGraph() throws Exception {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.findOrCreateObject(session, \"/graphObject\");\n        final IdentifierTranslator subjects = new DefaultIdentifierTranslator();\n        final Dataset graphStore = object.getPropertiesDataset(subjects);\n\n        final String graphSubject = subjects.getSubject(\"/graphObject\").getURI();\n\n        assertFalse(\"Graph store should not contain JCR prefixes\",\n                    compile(\"jcr\").matcher(graphStore.toString()).find());\n        assertFalse(\"Graph store should contain our fcrepo prefix\",\n                    compile(\"fcrepo\")\n                    .matcher(graphStore.toString()).find());\n\n        parseExecute(\"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                          \"INSERT { <http://example/egbook> dc:title \" +\n                          \"\\\"This is an example of an update that will be \" +\n                          \"ignored\\\" } WHERE {}\", graphStore);\n\n        parseExecute(\"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                          \"INSERT { <\" + graphSubject + \"> dc:title \" +\n                          \"\\\"This is an example title\\\" } WHERE {}\",\n                          graphStore);\n\n\n        final Value[] values = object.getNode().getProperty(\"dc:title\").getValues();\n        assertTrue(values.length > 0);\n\n        assertTrue(values[0]\n                       .getString(),\n                      values[0]\n                          .getString().equals(\"This is an example title\"));\n\n\n        parseExecute(\"PREFIX myurn: <info:myurn/>\\n\" +\n                          \"INSERT { <\" + graphSubject + \"> myurn:info \" +\n                          \"\\\"This is some example data\\\"} WHERE {}\",\n                          graphStore);\n\n        final Value value =\n            object.getNode().getProperty(object.getNode().getSession()\n                                         .getNamespacePrefix(\"info:myurn/\") +\n                                         \":info\").getValues()[0];\n\n        assertEquals(\"This is some example data\", value.getString());\n\n        parseExecute(\"PREFIX fedora-rels-ext: <\"\n                + RELATIONS_NAMESPACE + \">\\n\" +\n                \"INSERT { <\" + graphSubject + \"> fedora-rels-ext:\" +\n                \"isPartOf <\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        assertTrue(object.getNode().getProperty(\"fedorarelsext:isPartOf\")\n                   .getValues()[0].getString(),\n                   object.getNode().getProperty(\"fedorarelsext:isPartOf\")\n                   .getValues()[0].getString()\n                   .equals(object.getNode().getIdentifier()));\n\n\n        parseExecute(\"PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n\" +\n                          \"DELETE { <\" + graphSubject + \"> dc:title \" +\n                          \"\\\"This is an example title\\\" } WHERE {}\",\n                          graphStore);\n\n        assertFalse(\"Found unexpected dc:title\",\n                    object.getNode().hasProperty(\"dc:title\"));\n\n        parseExecute(\"PREFIX fedora-rels-ext: <\" +\n                    RELATIONS_NAMESPACE + \">\\n\" +\n                    \"DELETE { <\" + graphSubject + \"> \" +\n                    \"fedora-rels-ext:isPartOf <\" + graphSubject + \"> \" +\n                    \"} WHERE {}\", graphStore);\n        assertFalse(\"found unexpected reference\",\n                    object.getNode().hasProperty(\"fedorarelsext:isPartOf\"));\n\n        session.save();\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraObjectImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/graphObject\");",
          "type": "DELETE",
          "lineNo": 71
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/graphObject\");",
          "type": "ADD",
          "lineNo": 71
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        71
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:118",
    "trivial": null
  },
  {
    "name": "org.fcrepo.storage.policy.TiffStoragePolicyStorageIT.testPolicyDrivenStorage()",
    "bSource": {
      "startLine": 94,
      "code": "@Test\n    public void testPolicyDrivenStorage() throws Exception {\n        ByteArrayInputStream data;\n        final Session session = repo.login();\n\n        objectService.createObject(session, \"/testCompositeObject\");\n\n        data = new ByteArrayInputStream(\n                (\"987654321987654321098765432109876543210987654321098765432109876543210987654\" +\n                        \"3210987654321009876543210\").getBytes());\n\n        final FedoraBinary binary = datastreamService.getBinary(session,\n                \"/testCompositeObject/content\");\n\n        binary.setContent(data, \"application/octet-stream\", null, null,\n                datastreamService.getStoragePolicyDecisionPoint());\n\n        data = new ByteArrayInputStream(\n                (\"87acec17cd9dcd20a716cc2cf67417b71c8a701687acec17cd9dcd20a716cc2cf67417b71c8a70\" +\n                        \"1687acec17cd9dcd20a716cc2cf67417b71c8a701687acec17cd9dcd20a716cc2cf674\" +\n                        \"17b71c8a701687acec17cd9dcd20a716cc2cf67417b71c8a701687acec17cd9dcd20a7\" +\n                        \"16cc2cf67417b71c8a701687acec17cd9dcd20a716cc2cf67417b71c8a7016\")\n                        .getBytes());\n        final FedoraBinary datastream1 = datastreamService.getBinary(session,\n                \"/testCompositeObject/tiffContent\");\n\n        datastream1.setContent(data, \"image/tiff\", null, null,\n                datastreamService.getStoragePolicyDecisionPoint());\n\n        session.save();\n\n        final Node node = session.getNode(\"/testCompositeObject/content\").getNode(JcrConstants.JCR_CONTENT);\n\n        final BinaryKey key =\n            getBinaryKey.apply(node.getProperty(JcrConstants.JCR_DATA));\n\n        logger.info(\"content key: {}\", key);\n\n        final Node tiffNode =\n            session.getNode(\"/testCompositeObject/tiffContent\").getNode(JcrConstants.JCR_CONTENT);\n\n        final BinaryKey tiffKey =\n            getBinaryKey.apply(tiffNode.getProperty(JcrConstants.JCR_DATA));\n\n        logger.info(\"tiff key: {}\", tiffKey);\n\n        final FedoraBinary normalBinary = datastreamService.asBinary(node);\n\n        Collection<FixityResult> fixity = normalBinary.getFixity(repo, SHA_1.toString());\n\n        assertNotEquals(0, fixity.size());\n\n        FixityResult e = fixity.iterator().next();\n\n        assertThat(e.getStoreIdentifier(), containsString(key.toString()));\n\n        final FedoraBinary tiffBinary = datastreamService.asBinary(tiffNode);\n\n        fixity = tiffBinary.getFixity(repo, SHA_1.toString());\n\n        assertNotEquals(0, fixity.size());\n\n        e = fixity.iterator().next();\n\n        assertThat(e.getStoreIdentifier(), containsString(tiffKey.toString()));\n    }"
    },
    "aSource": {
      "startLine": 94,
      "code": "@Test\n    public void testPolicyDrivenStorage() throws Exception {\n        ByteArrayInputStream data;\n        final Session session = repo.login();\n\n        objectService.findOrCreateObject(session, \"/testCompositeObject\");\n\n        data = new ByteArrayInputStream(\n                (\"987654321987654321098765432109876543210987654321098765432109876543210987654\" +\n                        \"3210987654321009876543210\").getBytes());\n\n        final FedoraBinary binary = datastreamService.getBinary(session,\n                \"/testCompositeObject/content\");\n\n        binary.setContent(data, \"application/octet-stream\", null, null,\n                datastreamService.getStoragePolicyDecisionPoint());\n\n        data = new ByteArrayInputStream(\n                (\"87acec17cd9dcd20a716cc2cf67417b71c8a701687acec17cd9dcd20a716cc2cf67417b71c8a70\" +\n                        \"1687acec17cd9dcd20a716cc2cf67417b71c8a701687acec17cd9dcd20a716cc2cf674\" +\n                        \"17b71c8a701687acec17cd9dcd20a716cc2cf67417b71c8a701687acec17cd9dcd20a7\" +\n                        \"16cc2cf67417b71c8a701687acec17cd9dcd20a716cc2cf67417b71c8a7016\")\n                        .getBytes());\n        final FedoraBinary datastream1 = datastreamService.getBinary(session,\n                \"/testCompositeObject/tiffContent\");\n\n        datastream1.setContent(data, \"image/tiff\", null, null,\n                datastreamService.getStoragePolicyDecisionPoint());\n\n        session.save();\n\n        final Node node = session.getNode(\"/testCompositeObject/content\").getNode(JcrConstants.JCR_CONTENT);\n\n        final BinaryKey key =\n            getBinaryKey.apply(node.getProperty(JcrConstants.JCR_DATA));\n\n        logger.info(\"content key: {}\", key);\n\n        final Node tiffNode =\n            session.getNode(\"/testCompositeObject/tiffContent\").getNode(JcrConstants.JCR_CONTENT);\n\n        final BinaryKey tiffKey =\n            getBinaryKey.apply(tiffNode.getProperty(JcrConstants.JCR_DATA));\n\n        logger.info(\"tiff key: {}\", tiffKey);\n\n        final FedoraBinary normalBinary = datastreamService.asBinary(node);\n\n        Collection<FixityResult> fixity = normalBinary.getFixity(repo, SHA_1.toString());\n\n        assertNotEquals(0, fixity.size());\n\n        FixityResult e = fixity.iterator().next();\n\n        assertThat(e.getStoreIdentifier(), containsString(key.toString()));\n\n        final FedoraBinary tiffBinary = datastreamService.asBinary(tiffNode);\n\n        fixity = tiffBinary.getFixity(repo, SHA_1.toString());\n\n        assertNotEquals(0, fixity.size());\n\n        e = fixity.iterator().next();\n\n        assertThat(e.getStoreIdentifier(), containsString(tiffKey.toString()));\n    }"
    },
    "bPath": "fcrepo-storage-policy/src/test/java/org/fcrepo/storage/policy/TiffStoragePolicyStorageIT.java",
    "aPath": "fcrepo-storage-policy/src/test/java/org/fcrepo/storage/policy/TiffStoragePolicyStorageIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/testCompositeObject\");",
          "type": "DELETE",
          "lineNo": 99
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/testCompositeObject\");",
          "type": "ADD",
          "lineNo": 99
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testCompositeObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testCompositeObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        99
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:119",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testChecksumBlobsForValuesWithoutChecksums()",
    "bSource": {
      "startLine": 292,
      "code": "@Test\n    public void testChecksumBlobsForValuesWithoutChecksums() throws Exception {\n\n        final Session session = repo.login();\n        final javax.jcr.ValueFactory factory = session.getValueFactory();\n        final FedoraObject object = objectService.createObject(session, \"/testLLObject\");\n\n        final Node testRandomContentNode = object.getNode().addNode(\"testRandomContent\", NT_FILE);\n        testRandomContentNode.addMixin(FEDORA_DATASTREAM);\n        final Node testRandomContent = testRandomContentNode.addNode(JCR_CONTENT, NT_RESOURCE);\n        testRandomContent.setProperty(JCR_DATA,\n                factory.createBinary(new ByteArrayInputStream(\"0123456789\".getBytes())));\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/testRandomContent\");\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            assertFalse(fixityResult.matches(ds.getContentSize(), ds.getContentDigest()));\n            Util.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 292,
      "code": "@Test\n    public void testChecksumBlobsForValuesWithoutChecksums() throws Exception {\n\n        final Session session = repo.login();\n        final javax.jcr.ValueFactory factory = session.getValueFactory();\n        final FedoraObject object = objectService.findOrCreateObject(session, \"/testLLObject\");\n\n        final Node testRandomContentNode = object.getNode().addNode(\"testRandomContent\", NT_FILE);\n        testRandomContentNode.addMixin(FEDORA_DATASTREAM);\n        final Node testRandomContent = testRandomContentNode.addNode(JCR_CONTENT, NT_RESOURCE);\n        testRandomContent.setProperty(JCR_DATA,\n                factory.createBinary(new ByteArrayInputStream(\"0123456789\".getBytes())));\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/testRandomContent\");\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            assertFalse(fixityResult.matches(ds.getContentSize(), ds.getContentDigest()));\n            Util.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraObject object = objectService.createObject(session, \"/testLLObject\");",
          "type": "DELETE",
          "lineNo": 297
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraObject object = objectService.findOrCreateObject(session, \"/testLLObject\");",
          "type": "ADD",
          "lineNo": 297
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testLLObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testLLObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        297
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:120",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testChecksumBlobsForInMemoryValues()",
    "bSource": {
      "startLine": 263,
      "code": "@Test\n    public void testChecksumBlobsForInMemoryValues() throws Exception {\n\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.getBinary(session, \"/testLLObject/testMemoryContent\").setContent(\n                new ByteArrayInputStream(\"0123456789\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/testMemoryContent\");\n\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 263,
      "code": "@Test\n    public void testChecksumBlobsForInMemoryValues() throws Exception {\n\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testLLObject\");\n        datastreamService.getBinary(session, \"/testLLObject/testMemoryContent\").setContent(\n                new ByteArrayInputStream(\"0123456789\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/testMemoryContent\");\n\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/testLLObject\");",
          "type": "DELETE",
          "lineNo": 267
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/testLLObject\");",
          "type": "ADD",
          "lineNo": 267
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testLLObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testLLObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        267
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:121",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testDatastreamFileName()",
    "bSource": {
      "startLine": 207,
      "code": "@Test\n    public void testDatastreamFileName() throws RepositoryException, InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode5\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                \"xyz.jpg\",\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode5\");\n        final String filename = ds.getFilename();\n\n        assertEquals(\"xyz.jpg\", filename);\n\n    }"
    },
    "aSource": {
      "startLine": 207,
      "code": "@Test\n    public void testDatastreamFileName() throws RepositoryException, InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode5\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                \"xyz.jpg\",\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode5\");\n        final String filename = ds.getFilename();\n\n        assertEquals(\"xyz.jpg\", filename);\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/testDatastreamObject\");",
          "type": "DELETE",
          "lineNo": 210
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/testDatastreamObject\");",
          "type": "ADD",
          "lineNo": 210
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        210
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:122",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testDatastreamContentDigestAndLength()",
    "bSource": {
      "startLine": 117,
      "code": "@Test\n    public void testDatastreamContentDigestAndLength() throws IOException,\n            RepositoryException,\n            InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode2\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode2\");\n        assertEquals(\"urn:sha1:3da541559918a808c2402bba5012f6c60b27661c\", ds\n                .getContentDigest().toString());\n        assertEquals(4L, ds.getContentSize());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n    }"
    },
    "aSource": {
      "startLine": 117,
      "code": "@Test\n    public void testDatastreamContentDigestAndLength() throws IOException,\n            RepositoryException,\n            InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode2\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode2\");\n        assertEquals(\"urn:sha1:3da541559918a808c2402bba5012f6c60b27661c\", ds\n                .getContentDigest().toString());\n        assertEquals(4L, ds.getContentSize());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/testDatastreamObject\");",
          "type": "DELETE",
          "lineNo": 122
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/testDatastreamObject\");",
          "type": "ADD",
          "lineNo": 122
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        122
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:123",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testCreatedDate()",
    "bSource": {
      "startLine": 68,
      "code": "@Test\n    public void testCreatedDate() throws RepositoryException, InvalidChecksumException {\n        Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode1\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n        session.logout();\n        session = repo.login();\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode1\");\n        assertNotNull(\"Couldn't find created date on datastream!\", ds\n                .getCreatedDate());\n    }"
    },
    "aSource": {
      "startLine": 68,
      "code": "@Test\n    public void testCreatedDate() throws RepositoryException, InvalidChecksumException {\n        Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode1\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n        session.logout();\n        session = repo.login();\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode1\");\n        assertNotNull(\"Couldn't find created date on datastream!\", ds\n                .getCreatedDate());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/testDatastreamObject\");",
          "type": "DELETE",
          "lineNo": 71
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/testDatastreamObject\");",
          "type": "ADD",
          "lineNo": 71
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        71
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:124",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testDatastreamContentWithChecksum()",
    "bSource": {
      "startLine": 179,
      "code": "@Test\n    public void testDatastreamContentWithChecksum() throws IOException,\n            RepositoryException,\n            InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode4\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                ContentDigest.asURI(\"SHA-1\", \"3da541559918a808c2402bba5012f6c60b27661c\"),\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode4\");\n        assertEquals(\"urn:sha1:3da541559918a808c2402bba5012f6c60b27661c\", ds\n                .getContentDigest().toString());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n    }"
    },
    "aSource": {
      "startLine": 179,
      "code": "@Test\n    public void testDatastreamContentWithChecksum() throws IOException,\n            RepositoryException,\n            InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode4\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                ContentDigest.asURI(\"SHA-1\", \"3da541559918a808c2402bba5012f6c60b27661c\"),\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode4\");\n        assertEquals(\"urn:sha1:3da541559918a808c2402bba5012f6c60b27661c\", ds\n                .getContentDigest().toString());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/testDatastreamObject\");",
          "type": "DELETE",
          "lineNo": 184
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/testDatastreamObject\");",
          "type": "ADD",
          "lineNo": 184
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        184
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:125",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testModifyDatastreamContentDigestAndLength()",
    "bSource": {
      "startLine": 146,
      "code": "@Test\n    public void\n    testModifyDatastreamContentDigestAndLength() throws IOException,\n            RepositoryException,\n            InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode3\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode3\");\n\n        ds.setContent(new ByteArrayInputStream(\"0123456789\".getBytes()), null, null, null, null);\n\n        assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\", ds\n                .getContentDigest().toString());\n        assertEquals(10L, ds.getContentSize());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"0123456789\", contentString);\n    }"
    },
    "aSource": {
      "startLine": 146,
      "code": "@Test\n    public void\n    testModifyDatastreamContentDigestAndLength() throws IOException,\n            RepositoryException,\n            InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode3\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode3\");\n\n        ds.setContent(new ByteArrayInputStream(\"0123456789\".getBytes()), null, null, null, null);\n\n        assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\", ds\n                .getContentDigest().toString());\n        assertEquals(10L, ds.getContentSize());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"0123456789\", contentString);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/testDatastreamObject\");",
          "type": "DELETE",
          "lineNo": 152
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/testDatastreamObject\");",
          "type": "ADD",
          "lineNo": 152
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        152
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:126",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testChecksumBlobs()",
    "bSource": {
      "startLine": 231,
      "code": "@Test\n    public void testChecksumBlobs() throws Exception {\n\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testLLObject\");\n\n        datastreamService.getBinary(session, \"/testLLObject/testRepositoryContent\").setContent(\n                new ByteArrayInputStream(\"01234567890123456789012345678901234567890123456789\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/\"\n                        + \"testRepositoryContent\");\n\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:9578f951955d37f20b601c26591e260c1e5389bf\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 231,
      "code": "@Test\n    public void testChecksumBlobs() throws Exception {\n\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testLLObject\");\n\n        datastreamService.getBinary(session, \"/testLLObject/testRepositoryContent\").setContent(\n                new ByteArrayInputStream(\"01234567890123456789012345678901234567890123456789\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session, \"/testLLObject/\"\n                        + \"testRepositoryContent\");\n\n\n        final String algorithm = ContentDigest.getAlgorithm(ds.getContentDigest());\n        final Collection<FixityResult> fixityResults = ds.getFixity(repo, algorithm);\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:9578f951955d37f20b601c26591e260c1e5389bf\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/testLLObject\");",
          "type": "DELETE",
          "lineNo": 235
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/testLLObject\");",
          "type": "ADD",
          "lineNo": 235
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testLLObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testLLObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        235
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:127",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.FedoraBinaryImplIT.testDatastreamContent()",
    "bSource": {
      "startLine": 91,
      "code": "@Test\n    public void testDatastreamContent() throws IOException,\n            RepositoryException,\n            InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode1\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode1\");\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n\n    }"
    },
    "aSource": {
      "startLine": 91,
      "code": "@Test\n    public void testDatastreamContent() throws IOException,\n            RepositoryException,\n            InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.findOrCreateObject(session, \"/testDatastreamObject\");\n\n        datastreamService.getBinary(session, \"/testDatastreamObject/testDatastreamNode1\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final FedoraBinary ds =\n                datastreamService.getBinary(session,\n                        \"/testDatastreamObject/testDatastreamNode1\");\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/FedoraBinaryImplIT.java",
    "bCommit": "7f1241eef9",
    "aCommit": "2174c9173a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.createObject(session, \"/testDatastreamObject\");",
          "type": "DELETE",
          "lineNo": 96
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/testDatastreamObject\");",
          "type": "ADD",
          "lineNo": 96
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamObject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "findOrCreateObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        96
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:128",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.NodeServiceImplIT.testDeleteObject()",
    "bSource": {
      "startLine": 53,
      "code": "@Test\n    public void testDeleteObject() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        nodeService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        nodeService.deleteObject(session, \"/\" + pid);\n        session.save();\n\n        assertFalse(session.nodeExists(\"/\" + pid));\n    }"
    },
    "aSource": {
      "startLine": 53,
      "code": "@Test\n    public void testDeleteObject() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        nodeService.deleteObject(session, \"/\" + pid);\n        session.save();\n\n        assertFalse(session.nodeExists(\"/\" + pid));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/NodeServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/NodeServiceImplIT.java",
    "bCommit": "2174c9173a",
    "aCommit": "3c27fc84ab",
    "hunk": {
      "sourceChanges": [
        {
          "line": "nodeService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 57
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 57
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "nodeService",
          "childCount": 1
        },
        "dstNode": {
          "label": "objectService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        57
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:149",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testRevertToVersion()",
    "bSource": {
      "startLine": 101,
      "code": "@Test\n    public void testRevertToVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = nodeService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        final Collection<String> label = versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // create another version\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(3L, countVersions(session, resource));\n\n        // revert to the old version and make sure there two versions again\n        versionService.revertToVersion( session.getWorkspace(), \"/\" + pid, label.iterator().next() );\n        session.save();\n        assertEquals(label.iterator().next(), currentVersion(session,resource));\n    }"
    },
    "aSource": {
      "startLine": 101,
      "code": "@Test\n    public void testRevertToVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        final Collection<String> label = versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // create another version\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(3L, countVersions(session, resource));\n\n        // revert to the old version and make sure there two versions again\n        versionService.revertToVersion( session.getWorkspace(), \"/\" + pid, label.iterator().next() );\n        session.save();\n        assertEquals(label.iterator().next(), currentVersion(session,resource));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "2174c9173a",
    "aCommit": "3c27fc84ab",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resource = nodeService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 105
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 105
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "nodeService",
          "childCount": 1
        },
        "dstNode": {
          "label": "objectService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        105
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:150",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testCreateVersion()",
    "bSource": {
      "startLine": 59,
      "code": "/*\n  versionService.createVersion( workspace, paths )\n  versionService.revertToVersion( workspace, path, label )\n  versionService.removeVersion( workspace, path, label )\n*/\n\n    @Test\n    public void testCreateVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = nodeService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n    }"
    },
    "aSource": {
      "startLine": 59,
      "code": "/*\n  versionService.createVersion( workspace, paths )\n  versionService.revertToVersion( workspace, path, label )\n  versionService.removeVersion( workspace, path, label )\n*/\n\n    @Test\n    public void testCreateVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "2174c9173a",
    "aCommit": "3c27fc84ab",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resource = nodeService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 69
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 69
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "nodeService",
          "childCount": 1
        },
        "dstNode": {
          "label": "objectService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        69
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:151",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testRevertToInvalidVersion()",
    "bSource": {
      "startLine": 124,
      "code": "@Test( expected = PathNotFoundException.class )\n    public void testRevertToInvalidVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = nodeService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // revert to an invalid version\n        versionService.revertToVersion( session.getWorkspace(), \"/\" + pid, \"invalid-version-label\" );\n        session.save();\n    }"
    },
    "aSource": {
      "startLine": 124,
      "code": "@Test( expected = PathNotFoundException.class )\n    public void testRevertToInvalidVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // revert to an invalid version\n        versionService.revertToVersion( session.getWorkspace(), \"/\" + pid, \"invalid-version-label\" );\n        session.save();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "2174c9173a",
    "aCommit": "3c27fc84ab",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resource = nodeService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 128
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 128
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "nodeService",
          "childCount": 1
        },
        "dstNode": {
          "label": "objectService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        128
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:152",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testRemoveVersion()",
    "bSource": {
      "startLine": 78,
      "code": "@Test\n    public void testRemoveVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = nodeService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        final Collection<String> label = versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // create another version\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(3L, countVersions(session, resource));\n\n        // remove the old version and make sure there two versions again\n        versionService.removeVersion( session.getWorkspace(), \"/\" + pid, label.iterator().next() );\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n    }"
    },
    "aSource": {
      "startLine": 78,
      "code": "@Test\n    public void testRemoveVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        final Collection<String> label = versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // create another version\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(3L, countVersions(session, resource));\n\n        // remove the old version and make sure there two versions again\n        versionService.removeVersion( session.getWorkspace(), \"/\" + pid, label.iterator().next() );\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "2174c9173a",
    "aCommit": "3c27fc84ab",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resource = nodeService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 82
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 82
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "nodeService",
          "childCount": 1
        },
        "dstNode": {
          "label": "objectService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        82
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:153",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.VersionServiceImplIT.testRemoveInvalidVersion()",
    "bSource": {
      "startLine": 141,
      "code": "@Test( expected = PathNotFoundException.class )\n    public void testRemoveInvalidVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = nodeService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // revert to an invalid version\n        versionService.removeVersion( session.getWorkspace(), \"/\" + pid, \"invalid-version-label\" );\n        session.save();\n    }"
    },
    "aSource": {
      "startLine": 141,
      "code": "@Test( expected = PathNotFoundException.class )\n    public void testRemoveInvalidVersion() throws RepositoryException {\n        final Session session = repository.login();\n        final String pid = getRandomPid();\n        final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);\n        session.save();\n\n        // create a version and make sure there are 2 versions (root + created)\n        versionService.createVersion(session.getWorkspace(), singleton(\"/\" + pid));\n        session.save();\n        assertEquals(2L, countVersions(session, resource));\n\n        // revert to an invalid version\n        versionService.removeVersion( session.getWorkspace(), \"/\" + pid, \"invalid-version-label\" );\n        session.save();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/VersionServiceImplIT.java",
    "bCommit": "2174c9173a",
    "aCommit": "3c27fc84ab",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource resource = nodeService.findOrCreateObject(session, \"/\" + pid);",
          "type": "DELETE",
          "lineNo": 145
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResource resource = objectService.findOrCreateObject(session, \"/\" + pid);",
          "type": "ADD",
          "lineNo": 145
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService nodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource resource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.findOrCreateObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "nodeService",
          "childCount": 1
        },
        "dstNode": {
          "label": "objectService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        145
      ]
    },
    "aCommitTime": 1411400644,
    "ID": "fcrepo/fcrepo:154",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraFixityIT.testCheckDatastreamFixity()",
    "bSource": {
      "startLine": 42,
      "code": "@Test\n    public void testCheckDatastreamFixity() throws Exception {\n        final String pid = getRandomUniquePid();\n\n        createObject(pid);\n        createDatastream(pid, \"zxc\", \"foo\");\n\n        final HttpGet method = new HttpGet(serverAddress + pid + \"/zxc/fcr:fixity\");\n        final GraphStore graphStore = getGraphStore(method);\n        logger.debug(\"Got triples {}\", graphStore);\n\n        assertTrue(graphStore.contains(ANY,\n                                          createResource(serverAddress + pid + \"/zxc\").asNode(),\n                                          HAS_FIXITY_RESULT.asNode(),\n                                          ANY\n                ));\n        assertTrue(graphStore.contains(ANY, ANY, HAS_FIXITY_STATE.asNode(),\n                createPlainLiteral(\"SUCCESS\").asNode()));\n\n        assertTrue(graphStore.contains(ANY, ANY,\n                HAS_MESSAGE_DIGEST.asNode(), createResource(\n                        \"urn:sha1:0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33\")\n                        .asNode()));\n        assertTrue(graphStore.contains(ANY, ANY, HAS_SIZE.asNode(),\n                createTypedLiteral(3).asNode()));\n    }"
    },
    "aSource": {
      "startLine": 42,
      "code": "@Test\n    public void testCheckDatastreamFixity() throws Exception {\n        final String pid = getRandomUniquePid();\n\n        createObject(pid);\n        createDatastream(pid, \"zxc\", \"foo\");\n\n        final HttpGet method = new HttpGet(serverAddress + pid + \"/zxc/fcr:fixity\");\n        final GraphStore graphStore = getGraphStore(method);\n        logger.debug(\"Got triples {}\", graphStore);\n\n        assertTrue(graphStore.contains(ANY,\n                                          createResource(serverAddress + pid + \"/zxc/fcr:content\").asNode(),\n                                          HAS_FIXITY_RESULT.asNode(),\n                                          ANY\n                ));\n        assertTrue(graphStore.contains(ANY, ANY, HAS_FIXITY_STATE.asNode(),\n                createPlainLiteral(\"SUCCESS\").asNode()));\n\n        assertTrue(graphStore.contains(ANY, ANY,\n                HAS_MESSAGE_DIGEST.asNode(), createResource(\n                        \"urn:sha1:0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33\")\n                        .asNode()));\n        assertTrue(graphStore.contains(ANY, ANY, HAS_SIZE.asNode(),\n                createTypedLiteral(3).asNode()));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraFixityIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraFixityIT.java",
    "bCommit": "6197922d6b",
    "aCommit": "7f1241eef9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "createResource(serverAddress + pid + \"/zxc\").asNode(),",
          "type": "DELETE",
          "lineNo": 54
        }
      ],
      "targetChanges": [
        {
          "line": "createResource(serverAddress + pid + \"/zxc/fcr:content\").asNode(),",
          "type": "ADD",
          "lineNo": 54
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createResource(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createResource(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/zxc'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "createResource(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createResource(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/zxc/fcr:content'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"/zxc\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/zxc/fcr:content\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        53
      ]
    },
    "aCommitTime": 1411400507,
    "ID": "fcrepo/fcrepo:263",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testGetDatastreamsContents()",
    "bSource": {
      "startLine": 321,
      "code": "@Test\n    public void testGetDatastreamsContents() throws RepositoryException,\n                                            IOException,\n                                            NoSuchAlgorithmException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDs.hasContent()).thenReturn(true);\n        when(mockIterator.hasNext()).thenReturn(true, false);\n        when(mockIterator.nextNode()).thenReturn(mockDsNode);\n        when(mockIterator.getSize()).thenReturn(1L);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getNodes(new String[] {dsId})).thenReturn(mockIterator);\n        when(mockNodes.getObject(mockSession, \"/FedoraDatastreamsTest1\"))\n                .thenReturn(mockObject);\n        when(mockDatastreams.asDatastream(mockDsNode)).thenReturn(mockDs);\n\n        final Response resp =\n            testObj.getBinaryContents(createPathList(pid), asList(dsId),\n                                         mockRequest);\n        final MultiPart multipart = (MultiPart) resp.getEntity();\n\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        assertEquals(1, multipart.getBodyParts().size());\n        try (final InputStream actualContent =\n                (InputStream) multipart.getBodyParts().get(0).getEntity()) {\n            assertEquals(\"/FedoraDatastreamsTest1/testDS\", multipart.getBodyParts()\n                    .get(0).getContentDisposition().getFileName());\n            assertEquals(\"asdf\", IOUtils.toString(actualContent, \"UTF-8\"));\n        }\n    }"
    },
    "aSource": {
      "startLine": 326,
      "code": "@Test\n    public void testGetDatastreamsContents() throws RepositoryException,\n                                            IOException,\n                                            NoSuchAlgorithmException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDs.hasContent()).thenReturn(true);\n        when(mockIterator.hasNext()).thenReturn(true, false);\n        when(mockIterator.nextNode()).thenReturn(mockDsNode);\n        when(mockIterator.getSize()).thenReturn(1L);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getNodes(new String[] {dsId})).thenReturn(mockIterator);\n        when(mockNodes.getObject(mockSession, \"/FedoraDatastreamsTest1\"))\n                .thenReturn(mockObject);\n        when(mockDatastreams.asDatastream(mockDsNode)).thenReturn(mockDs);\n\n        final Response resp =\n            testObj.getBinaryContents(createPathList(pid), asList(dsId),\n                                         mockRequest);\n        final MultiPart multipart = (MultiPart) resp.getEntity();\n\n        verify(mockDs.getBinary()).getContent();\n        verify(mockSession, never()).save();\n        assertEquals(1, multipart.getBodyParts().size());\n        try (final InputStream actualContent =\n                (InputStream) multipart.getBodyParts().get(0).getEntity()) {\n            assertEquals(\"/FedoraDatastreamsTest1/testDS\", multipart.getBodyParts()\n                    .get(0).getContentDisposition().getFileName());\n            assertEquals(\"asdf\", IOUtils.toString(actualContent, \"UTF-8\"));\n        }\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "6197922d6b",
    "aCommit": "7f1241eef9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockDs).getContent();",
          "type": "DELETE",
          "lineNo": 344
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockDs.getBinary()).getContent();",
          "type": "ADD",
          "lineNo": 349
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "getContent()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockDs"
        },
        {
          "type": "CtExecutableReference",
          "value": "getContent()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "getContent()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.FedoraBinary)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Datastream.getBinary()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockDs"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Datastream.getBinary()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getContent()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getBinary",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockDs",
          "childCount": 0
        },
        "dstNode": {
          "label": "mockDs",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        349
      ]
    },
    "aCommitTime": 1411400507,
    "ID": "fcrepo/fcrepo:264",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testGetDatastreamsContentsCached()",
    "bSource": {
      "startLine": 355,
      "code": "@Test\n    public void testGetDatastreamsContentsCached() throws RepositoryException,\n                                                  NoSuchAlgorithmException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockIterator.hasNext()).thenReturn(true, false);\n        when(mockIterator.nextNode()).thenReturn(mockDsNode);\n        when(mockIterator.getSize()).thenReturn(1L);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getNodes(new String[] {dsId})).thenReturn(mockIterator);\n        when(mockNodes.getObject(mockSession, \"/FedoraDatastreamsTest1\"))\n                .thenReturn(mockObject);\n        when(mockDatastreams.asDatastream(mockDsNode)).thenReturn(mockDs);\n        when(\n                mockRequest.evaluatePreconditions(any(Date.class),\n                        any(EntityTag.class))).thenReturn(notModified());\n\n        final Response resp =\n            testObj.getBinaryContents(createPathList(pid), asList(dsId),\n                                         mockRequest);\n        verify(mockDs, never()).getContent();\n        verify(mockSession, never()).save();\n        assertEquals(NOT_MODIFIED.getStatusCode(), resp.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 360,
      "code": "@Test\n    public void testGetDatastreamsContentsCached() throws RepositoryException,\n                                                  NoSuchAlgorithmException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockIterator.hasNext()).thenReturn(true, false);\n        when(mockIterator.nextNode()).thenReturn(mockDsNode);\n        when(mockIterator.getSize()).thenReturn(1L);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getNodes(new String[] {dsId})).thenReturn(mockIterator);\n        when(mockNodes.getObject(mockSession, \"/FedoraDatastreamsTest1\"))\n                .thenReturn(mockObject);\n        when(mockDatastreams.asDatastream(mockDsNode)).thenReturn(mockDs);\n        when(\n                mockRequest.evaluatePreconditions(any(Date.class),\n                        any(EntityTag.class))).thenReturn(notModified());\n\n        final Response resp =\n            testObj.getBinaryContents(createPathList(pid), asList(dsId),\n                                         mockRequest);\n        verify(mockDs.getBinary(), never()).getContent();\n        verify(mockSession, never()).save();\n        assertEquals(NOT_MODIFIED.getStatusCode(), resp.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "6197922d6b",
    "aCommit": "7f1241eef9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockDs, never()).getContent();",
          "type": "DELETE",
          "lineNo": 377
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockDs.getBinary(), never()).getContent();",
          "type": "ADD",
          "lineNo": 382
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "getContent()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.Datastream,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.Datastream,<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockDs"
        },
        {
          "type": "CtInvocation",
          "value": "never()"
        },
        {
          "type": "CtExecutableReference",
          "value": "never()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getContent()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "getContent()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.FedoraBinary,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.FedoraBinary,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Datastream.getBinary()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockDs"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Datastream.getBinary()"
        },
        {
          "type": "CtInvocation",
          "value": "never()"
        },
        {
          "type": "CtExecutableReference",
          "value": "never()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getContent()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getBinary",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockDs",
          "childCount": 0
        },
        "dstNode": {
          "label": "mockDs",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        382
      ]
    },
    "aCommitTime": 1411400507,
    "ID": "fcrepo/fcrepo:265",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.DatastreamServiceImplIT.testCreateDatastreamNodeWithfilename()",
    "bSource": {
      "startLine": 72,
      "code": "@Test\n    public void testCreateDatastreamNodeWithfilename() throws Exception {\n        Session session = repository.login();\n        datastreamService.createDatastream(session, \"/testDatastreamNode\",\n                                           \"application/octet-stream\",\n                                           \"xyz.jpg\",\n                                           new ByteArrayInputStream(\"asdf\".getBytes()));\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"xyz.jpg\", session.getNode(\"/testDatastreamNode\").getNode(JCR_CONTENT)\n                .getProperty(PREMIS_FILE_NAME).getString());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 78,
      "code": "@Test\n    public void testCreateDatastreamNodeWithfilename() throws Exception {\n        Session session = repository.login();\n        datastreamService.getBinary(session, \"/testDatastreamNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                \"xyz.jpg\",\n                null\n        );\n\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"xyz.jpg\", session.getNode(\"/testDatastreamNode\").getNode(JCR_CONTENT)\n                .getProperty(PREMIS_FILE_NAME).getString());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/DatastreamServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/DatastreamServiceImplIT.java",
    "bCommit": "6197922d6b",
    "aCommit": "7f1241eef9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastream(session, \"/testDatastreamNode\",",
          "type": "DELETE",
          "lineNo": 75
        },
        {
          "line": "\"application/octet-stream\",",
          "type": "DELETE",
          "lineNo": 76
        },
        {
          "line": "\"xyz.jpg\",",
          "type": "DELETE",
          "lineNo": 77
        },
        {
          "line": "new ByteArrayInputStream(\"asdf\".getBytes()));",
          "type": "DELETE",
          "lineNo": 78
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.getBinary(session, \"/testDatastreamNode\").setContent(",
          "type": "ADD",
          "lineNo": 81
        },
        {
          "line": "new ByteArrayInputStream(\"asdf\".getBytes()),",
          "type": "ADD",
          "lineNo": 82
        },
        {
          "line": "\"application/octet-stream\",",
          "type": "ADD",
          "lineNo": 83
        },
        {
          "line": "null,",
          "type": "ADD",
          "lineNo": 84
        },
        {
          "line": "\"xyz.jpg\",",
          "type": "ADD",
          "lineNo": 85
        },
        {
          "line": "null",
          "type": "ADD",
          "lineNo": 86
        },
        {
          "line": ");",
          "type": "ADD",
          "lineNo": 87
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'xyz.jpg'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdf'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,java.lang.String,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getBinary(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,java.lang.String,<unknown>)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdf'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'xyz.jpg'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastream",
          "childCount": 6
        },
        "dstNode": {
          "label": "setContent",
          "childCount": 6
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "datastreamService",
          "childCount": 1
        },
        "dstNode": {
          "label": "datastreamService",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "session",
          "childCount": 0
        },
        "dstNode": {
          "label": "session",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"/testDatastreamNode\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/testDatastreamNode\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        81
      ]
    },
    "aCommitTime": 1411400507,
    "ID": "fcrepo/fcrepo:266",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.DatastreamServiceImplIT.testCreateDatastreamNode()",
    "bSource": {
      "startLine": 56,
      "code": "@Test\n    public void testCreateDatastreamNode() throws Exception {\n        Session session = repository.login();\n        datastreamService.createDatastream(session, \"/testDatastreamNode\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"asdf\", session.getNode(\"/testDatastreamNode\").getNode(\n                JCR_CONTENT).getProperty(JCR_DATA).getString());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 56,
      "code": "@Test\n    public void testCreateDatastreamNode() throws Exception {\n        Session session = repository.login();\n\n        datastreamService.getBinary(session, \"/testDatastreamNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"asdf\", session.getNode(\"/testDatastreamNode\").getNode(\n                JCR_CONTENT).getProperty(JCR_DATA).getString());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/DatastreamServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/DatastreamServiceImplIT.java",
    "bCommit": "6197922d6b",
    "aCommit": "7f1241eef9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastream(session, \"/testDatastreamNode\",",
          "type": "DELETE",
          "lineNo": 59
        },
        {
          "line": "\"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"",
          "type": "DELETE",
          "lineNo": 60
        },
        {
          "line": ".getBytes()));",
          "type": "DELETE",
          "lineNo": 61
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.getBinary(session, \"/testDatastreamNode\").setContent(",
          "type": "ADD",
          "lineNo": 60
        },
        {
          "line": "new ByteArrayInputStream(\"asdf\".getBytes()),",
          "type": "ADD",
          "lineNo": 61
        },
        {
          "line": "\"application/octet-stream\",",
          "type": "ADD",
          "lineNo": 62
        },
        {
          "line": "null,",
          "type": "ADD",
          "lineNo": 63
        },
        {
          "line": "null,",
          "type": "ADD",
          "lineNo": 64
        },
        {
          "line": "null",
          "type": "ADD",
          "lineNo": 65
        },
        {
          "line": ");",
          "type": "ADD",
          "lineNo": 66
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdf'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getBinary(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdf'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastream",
          "childCount": 6
        },
        "dstNode": {
          "label": "setContent",
          "childCount": 6
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "datastreamService",
          "childCount": 1
        },
        "dstNode": {
          "label": "datastreamService",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "session",
          "childCount": 0
        },
        "dstNode": {
          "label": "session",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"/testDatastreamNode\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/testDatastreamNode\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        59
      ]
    },
    "aCommitTime": 1411400507,
    "ID": "fcrepo/fcrepo:267",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.RepositoryServiceImplIT.testBackupRepository()",
    "bSource": {
      "startLine": 123,
      "code": "@Test\n    public void testBackupRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.createDatastream(session, \"testObjectServiceNode0\", \"application/octet-stream\", null,\n                new ByteArrayInputStream(\"asdfx\".getBytes()));\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        final Problems problems = repositoryService.backupRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 129,
      "code": "@Test\n    public void testBackupRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.getBinary(session, \"/testObjectServiceNode0\").setContent(\n                new ByteArrayInputStream(\"asdfx\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        final Problems problems = repositoryService.backupRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "bCommit": "6197922d6b",
    "aCommit": "7f1241eef9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastream(session, \"testObjectServiceNode0\", \"application/octet-stream\", null,",
          "type": "DELETE",
          "lineNo": 127
        },
        {
          "line": "new ByteArrayInputStream(\"asdfx\".getBytes()));",
          "type": "DELETE",
          "lineNo": 128
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.getBinary(session, \"/testObjectServiceNode0\").setContent(",
          "type": "ADD",
          "lineNo": 133
        },
        {
          "line": "new ByteArrayInputStream(\"asdfx\".getBytes()),",
          "type": "ADD",
          "lineNo": 134
        },
        {
          "line": "\"application/octet-stream\",",
          "type": "ADD",
          "lineNo": 135
        },
        {
          "line": "null,",
          "type": "ADD",
          "lineNo": 136
        },
        {
          "line": "null,",
          "type": "ADD",
          "lineNo": 137
        },
        {
          "line": "null",
          "type": "ADD",
          "lineNo": 138
        },
        {
          "line": ");",
          "type": "ADD",
          "lineNo": 139
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode0'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdfx'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getBinary(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObjectServiceNode0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdfx'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastream",
          "childCount": 6
        },
        "dstNode": {
          "label": "setContent",
          "childCount": 6
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"testObjectServiceNode0\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/testObjectServiceNode0\"",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "datastreamService",
          "childCount": 1
        },
        "dstNode": {
          "label": "datastreamService",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "session",
          "childCount": 0
        },
        "dstNode": {
          "label": "session",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"testObjectServiceNode0\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/testObjectServiceNode0\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        133
      ]
    },
    "aCommitTime": 1411400507,
    "ID": "fcrepo/fcrepo:268",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.RepositoryServiceImplIT.testRestoreRepository()",
    "bSource": {
      "startLine": 139,
      "code": "@Test\n    public void testRestoreRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.createDatastream(session, \"testObjectServiceNode1\", \"application/octet-stream\", null,\n                new ByteArrayInputStream(\"asdfy\".getBytes()));\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        repositoryService.backupRepository(session, backupDirectory);\n\n        final Problems problems = repositoryService.restoreRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 151,
      "code": "@Test\n    public void testRestoreRepository() throws Exception {\n        final Session session = repository.login();\n\n\n        datastreamService.getBinary(session, \"/testObjectServiceNode1\").setContent(\n                new ByteArrayInputStream(\"asdfy\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        repositoryService.backupRepository(session, backupDirectory);\n\n        final Problems problems = repositoryService.restoreRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "bCommit": "6197922d6b",
    "aCommit": "7f1241eef9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastream(session, \"testObjectServiceNode1\", \"application/octet-stream\", null,",
          "type": "DELETE",
          "lineNo": 143
        },
        {
          "line": "new ByteArrayInputStream(\"asdfy\".getBytes()));",
          "type": "DELETE",
          "lineNo": 144
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.getBinary(session, \"/testObjectServiceNode1\").setContent(",
          "type": "ADD",
          "lineNo": 156
        },
        {
          "line": "new ByteArrayInputStream(\"asdfy\".getBytes()),",
          "type": "ADD",
          "lineNo": 157
        },
        {
          "line": "\"application/octet-stream\",",
          "type": "ADD",
          "lineNo": 158
        },
        {
          "line": "null,",
          "type": "ADD",
          "lineNo": 159
        },
        {
          "line": "null,",
          "type": "ADD",
          "lineNo": 160
        },
        {
          "line": "null",
          "type": "ADD",
          "lineNo": 161
        },
        {
          "line": ");",
          "type": "ADD",
          "lineNo": 162
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdfy'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getBinary(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObjectServiceNode1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdfy'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastream",
          "childCount": 6
        },
        "dstNode": {
          "label": "setContent",
          "childCount": 6
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"testObjectServiceNode1\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/testObjectServiceNode1\"",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "datastreamService",
          "childCount": 1
        },
        "dstNode": {
          "label": "datastreamService",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "session",
          "childCount": 0
        },
        "dstNode": {
          "label": "session",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"testObjectServiceNode1\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/testObjectServiceNode1\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        155
      ]
    },
    "aCommitTime": 1411400507,
    "ID": "fcrepo/fcrepo:269",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.RepositoryServiceImplIT.testGetAllObjectsDatastreamSize()",
    "bSource": {
      "startLine": 66,
      "code": "@Test\n    public void testGetAllObjectsDatastreamSize() throws Exception {\n        Session session = repository.login();\n\n        final double originalSize = repositoryService.getRepositorySize();\n\n        datastreamService.createDatastream(session,\n                \"testObjectServiceNode\", \"application/octet-stream\",\n                null, new ByteArrayInputStream(\"asdf\".getBytes()));\n        session.save();\n        session.logout();\n\n        session = repository.login();\n\n        final double afterSize = repositoryService.getRepositorySize();\n\n        assertEquals(4.0, afterSize - originalSize);\n\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 66,
      "code": "@Test\n    public void testGetAllObjectsDatastreamSize() throws Exception {\n        Session session = repository.login();\n\n        final double originalSize = repositoryService.getRepositorySize();\n\n\n        datastreamService.getBinary(session, \"/testObjectServiceNode\").setContent(\n                new ByteArrayInputStream(\"asdf\".getBytes()),\n                \"application/octet-stream\",\n                null,\n                null,\n                null\n        );\n\n        session.save();\n        session.logout();\n\n        session = repository.login();\n\n        final double afterSize = repositoryService.getRepositorySize();\n\n        assertEquals(4.0, afterSize - originalSize);\n\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/RepositoryServiceImplIT.java",
    "bCommit": "6197922d6b",
    "aCommit": "7f1241eef9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "DELETE",
          "lineNo": 72
        },
        {
          "line": "\"testObjectServiceNode\", \"application/octet-stream\",",
          "type": "DELETE",
          "lineNo": 73
        },
        {
          "line": "null, new ByteArrayInputStream(\"asdf\".getBytes()));",
          "type": "DELETE",
          "lineNo": 74
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.getBinary(session, \"/testObjectServiceNode\").setContent(",
          "type": "ADD",
          "lineNo": 73
        },
        {
          "line": "new ByteArrayInputStream(\"asdf\".getBytes()),",
          "type": "ADD",
          "lineNo": 74
        },
        {
          "line": "\"application/octet-stream\",",
          "type": "ADD",
          "lineNo": 75
        },
        {
          "line": "null,",
          "type": "ADD",
          "lineNo": 76
        },
        {
          "line": "null,",
          "type": "ADD",
          "lineNo": 77
        },
        {
          "line": "null",
          "type": "ADD",
          "lineNo": 78
        },
        {
          "line": ");",
          "type": "ADD",
          "lineNo": 79
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdf'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getBinary(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getBinary(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testObjectServiceNode'"
        },
        {
          "type": "CtExecutableReference",
          "value": "setContent(java.io.ByteArrayInputStream,java.lang.String,<unknown>,<unknown>,<unknown>)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdf'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastream",
          "childCount": 6
        },
        "dstNode": {
          "label": "setContent",
          "childCount": 6
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"testObjectServiceNode\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/testObjectServiceNode\"",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "datastreamService",
          "childCount": 1
        },
        "dstNode": {
          "label": "datastreamService",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "session",
          "childCount": 0
        },
        "dstNode": {
          "label": "session",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"testObjectServiceNode\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"/testObjectServiceNode\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        72
      ]
    },
    "aCommitTime": 1411400507,
    "ID": "fcrepo/fcrepo:270",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.DatastreamServiceImplTest.testGetFixityResultsModel()",
    "bSource": {
      "startLine": 174,
      "code": "@Test\n    public void testGetFixityResultsModel() throws Exception {\n        mockStatic(CacheEntryFactory.class);\n\n\n        final IdentifierTranslator mockSubjects = mock(IdentifierTranslator.class);\n        when(mockSubjects.getSubject(mockNode.getPath())).thenReturn(createResource(\"abc\"));\n\n        final FixityResult fixityResult = mock(FixityResult.class);\n        when(fixityResult.matches(any(Long.class), any(URI.class))).thenReturn(true);\n        final ImmutableSet<FixityResult> fixityResults = ImmutableSet.of(fixityResult);\n\n        final Datastream mockDatastream = mock(Datastream.class);\n\n        when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContent);\n        when(mockContent.getProperty(JCR_DATA)).thenReturn(mockProperty);\n        when(mockProperty.getBinary()).thenReturn(mockBinary);\n\n        when(mockDatastream.getContentNode()).thenReturn(mockContent);\n        when(mockDatastream.getNode()).thenReturn(mockNode);\n        when(mockDatastream.getContentDigest()).thenReturn(\n                new URI(\"urn:sha1:abc\"));\n\n        when(CacheEntryFactory.forProperty(mockRepository, mockProperty)).thenReturn(mockCacheEntry);\n\n        when(mockCacheEntry.checkFixity(any(URI.class), any(Long.class))).thenReturn(fixityResults);\n\n        final RdfStream actual = testObj.getFixityResultsModel(mockSubjects, mockDatastream);\n\n        assertEquals(\"Got wrong topic of fixity results!\", createResource(\"abc\").asNode(), actual.topic());\n    }"
    },
    "aSource": {
      "startLine": 174,
      "code": "@Test\n    public void testGetFixityResultsModel() throws Exception {\n        mockStatic(CacheEntryFactory.class);\n\n\n        final IdentifierTranslator mockSubjects = mock(IdentifierTranslator.class);\n        when(mockSubjects.getSubject(mockNode.getPath())).thenReturn(createResource(\"abc\"));\n\n        final FixityResult fixityResult = mock(FixityResult.class);\n        when(fixityResult.matches(any(Long.class), any(URI.class))).thenReturn(true);\n        final ImmutableSet<FixityResult> fixityResults = ImmutableSet.of(fixityResult);\n\n        final Datastream mockDatastream = mock(Datastream.class);\n\n        when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContent);\n        when(mockContent.getProperty(JCR_DATA)).thenReturn(mockProperty);\n        when(mockProperty.getBinary()).thenReturn(mockBinary);\n\n        when(mockDatastream.getContentNode()).thenReturn(mockContent);\n        when(mockDatastream.getNode()).thenReturn(mockNode);\n        when(mockDatastream.getContentDigest()).thenReturn(\n                new URI(\"urn:sha1:abc\"));\n\n        when(CacheEntryFactory.forProperty(mockRepository, mockProperty)).thenReturn(mockCacheEntry);\n\n        when(mockCacheEntry.checkFixity(any(String.class))).thenReturn(fixityResults);\n\n        final RdfStream actual = testObj.getFixityResultsModel(mockSubjects, mockDatastream);\n\n        assertEquals(\"Got wrong topic of fixity results!\", createResource(\"abc\").asNode(), actual.topic());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/DatastreamServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/DatastreamServiceImplTest.java",
    "bCommit": "f4309b2e71",
    "aCommit": "b599d77b70",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockCacheEntry.checkFixity(any(URI.class), any(Long.class))).thenReturn(fixityResults);",
          "type": "DELETE",
          "lineNo": 199
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockCacheEntry.checkFixity(any(String.class))).thenReturn(fixityResults);",
          "type": "ADD",
          "lineNo": 199
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.google.common.collect.ImmutableSet)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.CacheEntry.checkFixity(URI,long)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.CacheEntry mockCacheEntry"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.CacheEntry.checkFixity(URI,long)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.google.common.collect.ImmutableSet)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.google.common.collect.ImmutableSet fixityResults"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.google.common.collect.ImmutableSet)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.CacheEntry.checkFixity(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.CacheEntry mockCacheEntry"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.CacheEntry.checkFixity(String)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.google.common.collect.ImmutableSet)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.google.common.collect.ImmutableSet fixityResults"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.Long",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.String",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        199
      ]
    },
    "aCommitTime": 1411080665,
    "ID": "fcrepo/fcrepo:442",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testDescribeObjectNoInlining()",
    "bSource": {
      "startLine": 380,
      "code": "@Test\n    public void testDescribeObjectNoInlining() throws RepositoryException, ParseException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockObject.getLastModifiedDate()).thenReturn(mockDate);\n        when(mockObject.getTriples(any(IdentifierTranslator.class))).thenReturn(\n                mockRdfStream);\n        when(mockObject.getHierarchyTriples(any(IdentifierTranslator.class),\n                                               any(HierarchyRdfContextOptions.class))).thenReturn(mockRdfStream2);\n        when(mockObject.getReferencesTriples(any(IdentifierTranslator.class))).thenReturn(mockRdfStream3);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final Prefer prefer = new Prefer(\"return=representation;\"\n                                            + \"include=\\\"http://www.w3.org/ns/ldp#PreferMinimalContainer\\\"\");\n        final RdfStream rdfStream =\n            testObj.describe(createPathList(path), 0, -1, prefer, mockRequest, mockResponse, mockUriInfo);\n        assertEquals(\"Got wrong RDF!\", mockRdfStream.concat(mockRdfStream2).concat(mockRdfStream3),\n                rdfStream);\n\n    }"
    },
    "aSource": {
      "startLine": 380,
      "code": "@Test\n    public void testDescribeObjectNoInlining() throws RepositoryException, ParseException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockObject.getLastModifiedDate()).thenReturn(mockDate);\n        when(mockObject.getPropertiesTriples(any(IdentifierTranslator.class))).thenReturn(\n                mockRdfStream);\n        when(mockObject.getHierarchyTriples(any(IdentifierTranslator.class),\n                                               any(HierarchyRdfContextOptions.class))).thenReturn(mockRdfStream2);\n        when(mockObject.getReferencesTriples(any(IdentifierTranslator.class))).thenReturn(mockRdfStream3);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final Prefer prefer = new Prefer(\"return=representation;\"\n                                            + \"include=\\\"http://www.w3.org/ns/ldp#PreferMinimalContainer\\\"\");\n        final RdfStream rdfStream =\n            testObj.describe(createPathList(path), 0, -1, prefer, mockRequest, mockResponse, mockUriInfo);\n        assertEquals(\"Got wrong RDF!\", mockRdfStream.concat(mockRdfStream2).concat(mockRdfStream3),\n                rdfStream);\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "75734b068b",
    "aCommit": "08ce06f1ff",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObject.getTriples(any(IdentifierTranslator.class))).thenReturn(",
          "type": "DELETE",
          "lineNo": 390
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObject.getPropertiesTriples(any(IdentifierTranslator.class))).thenReturn(",
          "type": "ADD",
          "lineNo": 390
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesTriples(IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesTriples(IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getTriples",
          "childCount": 2
        },
        "dstNode": {
          "label": "getPropertiesTriples",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        390
      ]
    },
    "aCommitTime": 1410878373,
    "ID": "fcrepo/fcrepo:27",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testDescribeObject()",
    "bSource": {
      "startLine": 352,
      "code": "@Test\n    public void testDescribeObject() throws RepositoryException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n        when(mockObject.getLastModifiedDate()).thenReturn(mockDate);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockObject.getTriples(any(IdentifierTranslator.class))).thenReturn(\n                mockRdfStream);\n        when(mockObject.getHierarchyTriples(any(IdentifierTranslator.class),\n                                               any(HierarchyRdfContextOptions.class))).thenReturn(\n                mockRdfStream2);\n        when(mockObject.getReferencesTriples(any(IdentifierTranslator.class))).thenReturn(mockRdfStream3);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n                .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final RdfStream rdfStream =\n            testObj.describe(createPathList(path), 0, -2, null, mockRequest,\n                    mockResponse, mockUriInfo);\n        assertEquals(\"Got wrong triples!\", mockRdfStream.concat(mockRdfStream2).concat(mockRdfStream3),\n                rdfStream);\n        verify(mockResponse).addHeader(\"Accept-Patch\", \"application/sparql-update\");\n        verify(mockResponse).addHeader(\"Link\", \"<\" + LDP_NAMESPACE + \"Resource>;rel=\\\"type\\\"\");\n\n    }"
    },
    "aSource": {
      "startLine": 352,
      "code": "@Test\n    public void testDescribeObject() throws RepositoryException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n        when(mockObject.getLastModifiedDate()).thenReturn(mockDate);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockObject.getPropertiesTriples(any(IdentifierTranslator.class))).thenReturn(\n                mockRdfStream);\n        when(mockObject.getHierarchyTriples(any(IdentifierTranslator.class),\n                                               any(HierarchyRdfContextOptions.class))).thenReturn(\n                mockRdfStream2);\n        when(mockObject.getReferencesTriples(any(IdentifierTranslator.class))).thenReturn(mockRdfStream3);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n                .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final RdfStream rdfStream =\n            testObj.describe(createPathList(path), 0, -2, null, mockRequest,\n                    mockResponse, mockUriInfo);\n        assertEquals(\"Got wrong triples!\", mockRdfStream.concat(mockRdfStream2).concat(mockRdfStream3),\n                rdfStream);\n        verify(mockResponse).addHeader(\"Accept-Patch\", \"application/sparql-update\");\n        verify(mockResponse).addHeader(\"Link\", \"<\" + LDP_NAMESPACE + \"Resource>;rel=\\\"type\\\"\");\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "75734b068b",
    "aCommit": "08ce06f1ff",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObject.getTriples(any(IdentifierTranslator.class))).thenReturn(",
          "type": "DELETE",
          "lineNo": 361
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObject.getPropertiesTriples(any(IdentifierTranslator.class))).thenReturn(",
          "type": "ADD",
          "lineNo": 361
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getTriples(IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesTriples(IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesTriples(IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getTriples",
          "childCount": 2
        },
        "dstNode": {
          "label": "getPropertiesTriples",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        361
      ]
    },
    "aCommitTime": 1410878373,
    "ID": "fcrepo/fcrepo:28",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testReplaceRdf()",
    "bSource": {
      "startLine": 475,
      "code": "@Test\n    public void testReplaceRdf() throws Exception {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n        when(mockNodes.exists(mockSession, path)).thenReturn(true);\n        when(mockObject.getLastModifiedDate()).thenReturn(Calendar.getInstance().getTime());\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockNode.getPath()).thenReturn(path);\n\n        final InputStream mockStream =\n            new ByteArrayInputStream(\"<a> <b> <c>\".getBytes());\n        when(mockNodes.getObject(mockSession, path)).thenReturn(mockObject);\n\n        testObj.createOrReplaceObjectRdf(createPathList(pid),\n                                         getUriInfoImpl(),\n                                         MediaType.valueOf(\"application/n3\"),\n                                         mockStream,\n                                         mockRequest,\n                                         mockResponse);\n        verify(mockObject).replaceProperties(any(IdentifierTranslator.class), any(Model.class));\n    }"
    },
    "aSource": {
      "startLine": 475,
      "code": "@Test\n    public void testReplaceRdf() throws Exception {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n        when(mockNodes.exists(mockSession, path)).thenReturn(true);\n        when(mockObject.getLastModifiedDate()).thenReturn(Calendar.getInstance().getTime());\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockNode.getPath()).thenReturn(path);\n\n        final InputStream mockStream =\n            new ByteArrayInputStream(\"<a> <b> <c>\".getBytes());\n        when(mockNodes.getObject(mockSession, path)).thenReturn(mockObject);\n\n        testObj.createOrReplaceObjectRdf(createPathList(pid),\n                                         getUriInfoImpl(),\n                                         MediaType.valueOf(\"application/n3\"),\n                                         mockStream,\n                                         mockRequest,\n                                         mockResponse);\n        verify(mockObject).replaceProperties(any(IdentifierTranslator.class), any(Model.class), any(RdfStream.class));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "08ce06f1ff",
    "aCommit": "109cd42222",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockObject).replaceProperties(any(IdentifierTranslator.class), any(Model.class));",
          "type": "DELETE",
          "lineNo": 495
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockObject).replaceProperties(any(IdentifierTranslator.class), any(Model.class), any(RdfStream.class));",
          "type": "ADD",
          "lineNo": 495
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        495
      ]
    },
    "aCommitTime": 1410878373,
    "ID": "fcrepo/fcrepo:31",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testBatchRdfPost()",
    "bSource": {
      "startLine": 174,
      "code": "@Test\n    public void testBatchRdfPost() throws Exception {\n        final String pid = \"FedoraDatastreamsTest1\";\n\n        final String path = \"/FedoraDatastreamsTest1\";\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockNodes.exists(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(true);\n        when(mockNodes.findOrCreateObject(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockObject.getPath()).thenReturn(path);\n        when(mockSession.getNode(path)).thenReturn(mockNode);\n\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\".\",\n                                                               IOUtils.toInputStream(\"<> <info:a> 'xyz'\"),\n                                                               null,\n                                                               MediaType.valueOf(contentTypeTurtle));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=\\\".\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        testObj.batchModify(createPathList(pid), multipart);\n        final ArgumentCaptor<Model> captor = ArgumentCaptor.forClass(Model.class);\n        verify(mockObject).replaceProperties(any(IdentifierTranslator.class), captor.capture());\n        final Model capturedModel = captor.getValue();\n        assertTrue(capturedModel.contains(capturedModel.createResource(\"http://localhost/fcrepo/\" + pid),\n                                             capturedModel.createProperty(\"info:a\"),\n                                             capturedModel.createLiteral(\"xyz\")));\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 175,
      "code": "@Test\n    public void testBatchRdfPost() throws Exception {\n        final String pid = \"FedoraDatastreamsTest1\";\n\n        final String path = \"/FedoraDatastreamsTest1\";\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockNodes.exists(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(true);\n        when(mockNodes.findOrCreateObject(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockObject.getPath()).thenReturn(path);\n        when(mockSession.getNode(path)).thenReturn(mockNode);\n\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\".\",\n                                                               IOUtils.toInputStream(\"<> <info:a> 'xyz'\"),\n                                                               null,\n                                                               MediaType.valueOf(contentTypeTurtle));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=\\\".\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        testObj.batchModify(createPathList(pid), multipart);\n        final ArgumentCaptor<Model> captor = ArgumentCaptor.forClass(Model.class);\n        verify(mockObject).replaceProperties(any(IdentifierTranslator.class), captor.capture(), any(RdfStream.class));\n        final Model capturedModel = captor.getValue();\n        assertTrue(capturedModel.contains(capturedModel.createResource(\"http://localhost/fcrepo/\" + pid),\n                                             capturedModel.createProperty(\"info:a\"),\n                                             capturedModel.createLiteral(\"xyz\")));\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "08ce06f1ff",
    "aCommit": "109cd42222",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockObject).replaceProperties(any(IdentifierTranslator.class), captor.capture());",
          "type": "DELETE",
          "lineNo": 205
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockObject).replaceProperties(any(IdentifierTranslator.class), captor.capture(), any(RdfStream.class));",
          "type": "ADD",
          "lineNo": 206
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.FedoraResourceImpl mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "capture()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.mockito.ArgumentCaptor captor"
        },
        {
          "type": "CtExecutableReference",
          "value": "capture()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.impl.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.impl.FedoraResourceImpl mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "capture()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.mockito.ArgumentCaptor captor"
        },
        {
          "type": "CtExecutableReference",
          "value": "capture()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        206
      ]
    },
    "aCommitTime": 1410878373,
    "ID": "fcrepo/fcrepo:32",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.http.TransformResourcesTest.shouldDecorateModeRootNodesWithRepositoryWideLinks()",
    "bSource": {
      "startLine": 64,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n\n        final NodeType mockNodeType = mock(NodeType.class);\n        when(mockNodeType.isNodeType(FedoraJcrTypes.ROOT)).thenReturn(true);\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.getSubject(mockNode.getPath());\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo,\n                                              mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SPARQL_ENDPOINT));\n    }"
    },
    "aSource": {
      "startLine": 64,
      "code": "@Test\n    public void shouldDecorateModeRootNodesWithRepositoryWideLinks()\n        throws RepositoryException {\n\n        final NodeType mockNodeType = mock(NodeType.class);\n        when(mockNode.isNodeType(FedoraJcrTypes.ROOT)).thenReturn(true);\n        when(mockNodeType.getName()).thenReturn(\"not-frozen\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPath()).thenReturn(\"/\");\n\n        final Resource graphSubject = mockSubjects.getSubject(mockNode.getPath());\n\n        final Model model =\n            testObj.createModelForResource(mockResource, uriInfo,\n                                              mockSubjects);\n\n        assertTrue(model.contains(graphSubject, HAS_SPARQL_ENDPOINT));\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/TransformResourcesTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/TransformResourcesTest.java",
    "bCommit": "45b3d045e6",
    "aCommit": "9f9e7ac7f7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockNodeType.isNodeType(FedoraJcrTypes.ROOT)).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 69
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockNode.isNodeType(FedoraJcrTypes.ROOT)).thenReturn(true);",
          "type": "ADD",
          "lineNo": 69
        },
        {
          "line": "when(mockNodeType.getName()).thenReturn(\"not-frozen\");",
          "type": "ADD",
          "lineNo": 70
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isNodeType(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.nodetype.NodeType mockNodeType"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNodeType(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String ROOT"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.jcr.FedoraJcrTypes"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String ROOT"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isNodeType(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNodeType(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String ROOT"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.jcr.FedoraJcrTypes"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String ROOT"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getName()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.nodetype.NodeType mockNodeType"
        },
        {
          "type": "CtExecutableReference",
          "value": "getName()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'not-frozen'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockNodeType",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockNode",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        76
      ]
    },
    "aCommitTime": 1410831451,
    "ID": "fcrepo/fcrepo:351",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.TransactionServiceImplTest.testCommitWithNonTx()",
    "bSource": {
      "startLine": 186,
      "code": "@Test(expected = RepositoryException.class)\n    public void testCommitWithNonTx() throws RepositoryException {\n        service.commit(NOT_A_TX);\n    }"
    },
    "aSource": {
      "startLine": 187,
      "code": "@Test(expected = TransactionMissingException.class)\n    public void testCommitWithNonTx() throws RepositoryException {\n        service.commit(NOT_A_TX);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "bCommit": "45b3d045e6",
    "aCommit": "9f9e7ac7f7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test(expected = RepositoryException.class)",
          "type": "DELETE",
          "lineNo": 186
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = TransactionMissingException.class)",
          "type": "ADD",
          "lineNo": 187
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Annotation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.exception.TransactionMissingException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        189
      ]
    },
    "aCommitTime": 1410831451,
    "ID": "fcrepo/fcrepo:352",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.TransactionServiceImplTest.testExpirationThrowsRepositoryException()",
    "bSource": {
      "startLine": 89,
      "code": "@Test\n    public void testExpirationThrowsRepositoryException() throws Exception {\n        final Date fiveSecondsAgo = new Date(currentTimeMillis() - 5000);\n        doThrow(new RepositoryException(\"\")).when(mockTx).rollback();\n        when(mockTx.getExpires()).thenReturn(fiveSecondsAgo);\n        service.removeAndRollbackExpired();\n    }"
    },
    "aSource": {
      "startLine": 90,
      "code": "@Test\n    public void testExpirationThrowsRepositoryException() throws Exception {\n        final Date fiveSecondsAgo = new Date(currentTimeMillis() - 5000);\n        doThrow(new RepositoryRuntimeException(\"\")).when(mockTx).rollback();\n        when(mockTx.getExpires()).thenReturn(fiveSecondsAgo);\n        service.removeAndRollbackExpired();\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "bCommit": "45b3d045e6",
    "aCommit": "9f9e7ac7f7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "doThrow(new RepositoryException(\"\")).when(mockTx).rollback();",
          "type": "DELETE",
          "lineNo": 92
        }
      ],
      "targetChanges": [
        {
          "line": "doThrow(new RepositoryRuntimeException(\"\")).when(mockTx).rollback();",
          "type": "ADD",
          "lineNo": 93
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "rollback()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtInvocation",
          "value": "doThrow(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "doThrow(<unknown>)"
        },
        {
          "type": "CtConstructorCall",
          "value": "javax.jcr.RepositoryException(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction mockTx"
        },
        {
          "type": "CtExecutableReference",
          "value": "rollback()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "rollback()"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtInvocation",
          "value": "doThrow(org.fcrepo.kernel.exception.RepositoryRuntimeException)"
        },
        {
          "type": "CtExecutableReference",
          "value": "doThrow(org.fcrepo.kernel.exception.RepositoryRuntimeException)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.exception.RepositoryRuntimeException.RepositoryRuntimeException(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.exception.RepositoryRuntimeException"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction mockTx"
        },
        {
          "type": "CtExecutableReference",
          "value": "rollback()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException(java.lang.String)",
          "childCount": 1
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.exception.RepositoryRuntimeException(java.lang.String)",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        93
      ]
    },
    "aCommitTime": 1410831451,
    "ID": "fcrepo/fcrepo:353",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.TransactionServiceImplTest.testRollbackWithNonTx()",
    "bSource": {
      "startLine": 181,
      "code": "@Test(expected = RepositoryException.class)\n    public void testRollbackWithNonTx() throws RepositoryException {\n        service.rollback(NOT_A_TX);\n    }"
    },
    "aSource": {
      "startLine": 182,
      "code": "@Test(expected = TransactionMissingException.class)\n    public void testRollbackWithNonTx() throws RepositoryException {\n        service.rollback(NOT_A_TX);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "bCommit": "45b3d045e6",
    "aCommit": "9f9e7ac7f7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test(expected = RepositoryException.class)",
          "type": "DELETE",
          "lineNo": 181
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = TransactionMissingException.class)",
          "type": "ADD",
          "lineNo": 182
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Annotation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.exception.TransactionMissingException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        184
      ]
    },
    "aCommitTime": 1410831451,
    "ID": "fcrepo/fcrepo:354",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.TransactionServiceImplTest.testRollbackRemovedTransaction()",
    "bSource": {
      "startLine": 175,
      "code": "@Test(expected = RepositoryException.class)\n    public void testRollbackRemovedTransaction() throws Exception {\n        final Transaction tx = service.rollback(IS_A_TX);\n        service.getTransaction(tx.getId(), null);\n    }"
    },
    "aSource": {
      "startLine": 176,
      "code": "@Test(expected = TransactionMissingException.class)\n    public void testRollbackRemovedTransaction() throws Exception {\n        final Transaction tx = service.rollback(IS_A_TX);\n        service.getTransaction(tx.getId(), null);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "bCommit": "45b3d045e6",
    "aCommit": "9f9e7ac7f7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test(expected = RepositoryException.class)",
          "type": "DELETE",
          "lineNo": 175
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = TransactionMissingException.class)",
          "type": "ADD",
          "lineNo": 176
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Annotation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.exception.TransactionMissingException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        179
      ]
    },
    "aCommitTime": 1410831451,
    "ID": "fcrepo/fcrepo:355",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.TransactionServiceImplTest.testCommitRemovedTransaction()",
    "bSource": {
      "startLine": 162,
      "code": "@Test(expected = RepositoryException.class)\n    public void testCommitRemovedTransaction() throws Exception {\n        final Transaction tx = service.commit(IS_A_TX);\n        service.getTransaction(tx.getId(), null);\n    }"
    },
    "aSource": {
      "startLine": 163,
      "code": "@Test(expected = TransactionMissingException.class)\n    public void testCommitRemovedTransaction() throws Exception {\n        final Transaction tx = service.commit(IS_A_TX);\n        service.getTransaction(tx.getId(), null);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/TransactionServiceImplTest.java",
    "bCommit": "45b3d045e6",
    "aCommit": "9f9e7ac7f7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test(expected = RepositoryException.class)",
          "type": "DELETE",
          "lineNo": 162
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = TransactionMissingException.class)",
          "type": "ADD",
          "lineNo": 163
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Annotation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.exception.TransactionMissingException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        166
      ]
    },
    "aCommitTime": 1410831451,
    "ID": "fcrepo/fcrepo:356",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.DatastreamServiceImplTest.testGetFixityResultsModel()",
    "bSource": {
      "startLine": 174,
      "code": "@Test\n    public void testGetFixityResultsModel() throws Exception {\n        mockStatic(CacheEntryFactory.class);\n\n\n        final IdentifierTranslator mockSubjects = mock(IdentifierTranslator.class);\n        when(mockSubjects.getSubject(mockNode.getPath())).thenReturn(createResource(\"abc\"));\n\n        final FixityResult fixityResult = mock(FixityResult.class);\n        when(fixityResult.matches(any(Long.class), any(URI.class))).thenReturn(true);\n        final ImmutableSet<FixityResult> fixityResults = ImmutableSet.of(fixityResult);\n\n        final Datastream mockDatastream = mock(Datastream.class);\n\n        when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContent);\n        when(mockContent.getProperty(JCR_DATA)).thenReturn(mockProperty);\n        when(mockProperty.getBinary()).thenReturn(mockBinary);\n\n        when(mockDatastream.getNode()).thenReturn(mockNode);\n        when(mockDatastream.getContentDigest()).thenReturn(\n                new URI(\"urn:sha1:abc\"));\n\n        when(CacheEntryFactory.forProperty(mockRepository, mockProperty)).thenReturn(mockCacheEntry);\n\n        when(mockCacheEntry.checkFixity(any(URI.class), any(Long.class))).thenReturn(fixityResults);\n\n        final RdfStream actual = testObj.getFixityResultsModel(mockSubjects, mockDatastream);\n\n        assertEquals(\"Got wrong topic of fixity results!\", createResource(\"abc\").asNode(), actual.topic());\n    }"
    },
    "aSource": {
      "startLine": 174,
      "code": "@Test\n    public void testGetFixityResultsModel() throws Exception {\n        mockStatic(CacheEntryFactory.class);\n\n\n        final IdentifierTranslator mockSubjects = mock(IdentifierTranslator.class);\n        when(mockSubjects.getSubject(mockNode.getPath())).thenReturn(createResource(\"abc\"));\n\n        final FixityResult fixityResult = mock(FixityResult.class);\n        when(fixityResult.matches(any(Long.class), any(URI.class))).thenReturn(true);\n        final ImmutableSet<FixityResult> fixityResults = ImmutableSet.of(fixityResult);\n\n        final Datastream mockDatastream = mock(Datastream.class);\n\n        when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContent);\n        when(mockContent.getProperty(JCR_DATA)).thenReturn(mockProperty);\n        when(mockProperty.getBinary()).thenReturn(mockBinary);\n\n        when(mockDatastream.getContentNode()).thenReturn(mockContent);\n        when(mockDatastream.getNode()).thenReturn(mockNode);\n        when(mockDatastream.getContentDigest()).thenReturn(\n                new URI(\"urn:sha1:abc\"));\n\n        when(CacheEntryFactory.forProperty(mockRepository, mockProperty)).thenReturn(mockCacheEntry);\n\n        when(mockCacheEntry.checkFixity(any(URI.class), any(Long.class))).thenReturn(fixityResults);\n\n        final RdfStream actual = testObj.getFixityResultsModel(mockSubjects, mockDatastream);\n\n        assertEquals(\"Got wrong topic of fixity results!\", createResource(\"abc\").asNode(), actual.topic());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/DatastreamServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/DatastreamServiceImplTest.java",
    "bCommit": "45b3d045e6",
    "aCommit": "9f9e7ac7f7",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockDatastream.getContentNode()).thenReturn(mockContent);",
          "type": "ADD",
          "lineNo": 192
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Datastream.getContentNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockDatastream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Datastream.getContentNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockContent"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        200
      ]
    },
    "aCommitTime": 1410831451,
    "ID": "fcrepo/fcrepo:357",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.url.HttpApiResourcesTest.shouldDecorateOtherNodesWithCorrectResourceURI()",
    "bSource": {
      "startLine": 195,
      "code": "@Test\n    public void shouldDecorateOtherNodesWithCorrectResourceURI()\n            throws RepositoryException {\n        final NodeType mockNodeType = mock(NodeType.class);\n        when(mockNodeType.isNodeType(ROOT)).thenReturn(false);\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n\n        when(mockSerializers.keySet()).thenReturn(of(\"a\"));\n        when(mockNode.getPath()).thenReturn(\"/some/path/to/object\");\n\n        final Resource graphSubject = mockSubjects.getSubject(mockNode.getPath());\n        final Model model =\n                testObj.createModelForResource(mockResource, uriInfo,\n                        mockSubjects);\n        assertEquals(\n                \"http://localhost/fcrepo/some/path/to/object/fcr:export?format=a\",\n                model.getProperty(graphSubject, HAS_SERIALIZATION)\n                        .getResource().getURI());\n    }"
    },
    "aSource": {
      "startLine": 195,
      "code": "@Test\n    public void shouldDecorateOtherNodesWithCorrectResourceURI()\n            throws RepositoryException {\n        final NodeType mockNodeType = mock(NodeType.class);\n        when(mockNodeType.isNodeType(ROOT)).thenReturn(false);\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNodeType.getName()).thenReturn(\"not-frozen\");\n\n        when(mockSerializers.keySet()).thenReturn(of(\"a\"));\n        when(mockNode.getPath()).thenReturn(\"/some/path/to/object\");\n\n        final Resource graphSubject = mockSubjects.getSubject(mockNode.getPath());\n        final Model model =\n                testObj.createModelForResource(mockResource, uriInfo,\n                        mockSubjects);\n        assertEquals(\n                \"http://localhost/fcrepo/some/path/to/object/fcr:export?format=a\",\n                model.getProperty(graphSubject, HAS_SERIALIZATION)\n                        .getResource().getURI());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/url/HttpApiResourcesTest.java",
    "bCommit": "45b3d045e6",
    "aCommit": "9f9e7ac7f7",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockNodeType.getName()).thenReturn(\"not-frozen\");",
          "type": "ADD",
          "lineNo": 201
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getName()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.nodetype.NodeType mockNodeType"
        },
        {
          "type": "CtExecutableReference",
          "value": "getName()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'not-frozen'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        207
      ]
    },
    "aCommitTime": 1410831451,
    "ID": "fcrepo/fcrepo:358",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.GraphStreamingOutputTest.testStuff()",
    "bSource": {
      "startLine": 49,
      "code": "@Test\n    public void testStuff() throws WebApplicationException, IOException {\n        final GraphStore graphStore =\n                new GraphStoreBasic(DatasetFactory.create(createDefaultModel()));\n        final Graph g = new GraphMem();\n        g.add(new Triple(createURI(\"test:subject\"),\n                createURI(\"test:predicate\"), createURI(\"test:object\")));\n        graphStore.setDefaultGraph(g);\n        final GraphStoreStreamingOutput test =\n                new GraphStoreStreamingOutput(graphStore, NTRIPLES_TYPE);\n        try (final ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            test.write(out);\n            final String serialized = out.toString();\n            LOGGER.debug(\"Created serialized RDF: \\n {}\", serialized);\n            assertTrue(\"Couldn't find test subject!\", serialized\n                    .contains(\"test:subject\"));\n            assertTrue(\"Couldn't find test predicate!\", serialized\n                    .contains(\"test:predicate\"));\n            assertTrue(\"Couldn't find test object!\", serialized\n                    .contains(\"test:object\"));\n        }\n    }"
    },
    "aSource": {
      "startLine": 49,
      "code": "@Test\n    public void testStuff() throws WebApplicationException, IOException {\n        final GraphStore graphStore =\n                new GraphStoreBasic(DatasetFactory.create(createDefaultModel()));\n        final Graph g = new GraphMem();\n        g.add(new Triple(createURI(\"test:subject\"),\n                createURI(\"test:predicate\"), createURI(\"test:object\")));\n        graphStore.setDefaultGraph(g);\n        final GraphStoreStreamingOutput test =\n                new GraphStoreStreamingOutput(graphStore.toDataset(), NTRIPLES_TYPE);\n        try (final ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            test.write(out);\n            final String serialized = out.toString();\n            LOGGER.debug(\"Created serialized RDF: \\n {}\", serialized);\n            assertTrue(\"Couldn't find test subject!\", serialized\n                    .contains(\"test:subject\"));\n            assertTrue(\"Couldn't find test predicate!\", serialized\n                    .contains(\"test:predicate\"));\n            assertTrue(\"Couldn't find test object!\", serialized\n                    .contains(\"test:object\"));\n        }\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/GraphStreamingOutputTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/GraphStreamingOutputTest.java",
    "bCommit": "61f7a8a5ec",
    "aCommit": "8ad9a965f2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "new GraphStoreStreamingOutput(graphStore, NTRIPLES_TYPE);",
          "type": "DELETE",
          "lineNo": 58
        }
      ],
      "targetChanges": [
        {
          "line": "new GraphStoreStreamingOutput(graphStore.toDataset(), NTRIPLES_TYPE);",
          "type": "ADD",
          "lineNo": 58
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.responses.GraphStoreStreamingOutput(com.hp.hpl.jena.update.GraphStore,org.fcrepo.http.commons.responses.MediaType)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.responses.GraphStoreStreamingOutput"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.update.GraphStore graphStore"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.MediaType NTRIPLES_TYPE"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.http.commons.responses.GraphStoreStreamingOutput(org.fcrepo.http.commons.responses.Dataset,org.fcrepo.http.commons.responses.MediaType)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.http.commons.responses.GraphStoreStreamingOutput"
        },
        {
          "type": "CtInvocation",
          "value": "toDataset()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.update.GraphStore graphStore"
        },
        {
          "type": "CtExecutableReference",
          "value": "toDataset()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.MediaType NTRIPLES_TYPE"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "toDataset",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "graphStore",
          "childCount": 0
        },
        "dstNode": {
          "label": "graphStore",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        58
      ]
    },
    "aCommitTime": 1410806893,
    "ID": "fcrepo/fcrepo:295",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.DatastreamImplIT.testModifyDatastreamContentDigestAndLength()",
    "bSource": {
      "startLine": 120,
      "code": "@Test\n    public void\n            testModifyDatastreamContentDigestAndLength() throws IOException,\n                                                        RepositoryException,\n                                                        InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastream(session,\n                \"/testDatastreamObject/testDatastreamNode3\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode3\");\n\n        ds.setContent(new ByteArrayInputStream(\"0123456789\".getBytes()));\n\n        assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\", ds\n                .getContentDigest().toString());\n        assertEquals(10L, ds.getContentSize());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"0123456789\", contentString);\n    }"
    },
    "aSource": {
      "startLine": 120,
      "code": "@Test\n    public void\n            testModifyDatastreamContentDigestAndLength() throws IOException,\n                                                        RepositoryException,\n                                                        InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastream(session,\n                \"/testDatastreamObject/testDatastreamNode3\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode3\");\n\n        ds.setContent(new ByteArrayInputStream(\"0123456789\".getBytes()), null, null, null, null);\n\n        assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\", ds\n                .getContentDigest().toString());\n        assertEquals(10L, ds.getContentSize());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"0123456789\", contentString);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/DatastreamImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/DatastreamImplIT.java",
    "bCommit": "61f7a8a5ec",
    "aCommit": "8ad9a965f2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "ds.setContent(new ByteArrayInputStream(\"0123456789\".getBytes()));",
          "type": "DELETE",
          "lineNo": 138
        }
      ],
      "targetChanges": [
        {
          "line": "ds.setContent(new ByteArrayInputStream(\"0123456789\".getBytes()), null, null, null, null);",
          "type": "ADD",
          "lineNo": 138
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Datastream.setContent(InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream ds"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Datastream.setContent(InputStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '0123456789'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Datastream.setContent(InputStream,String,URI,String,StoragePolicyDecisionPoint)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream ds"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Datastream.setContent(InputStream,String,URI,String,StoragePolicyDecisionPoint)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '0123456789'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        138
      ]
    },
    "aCommitTime": 1410806893,
    "ID": "fcrepo/fcrepo:296",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.common.ContainerRolesPrincipalProviderTest.testSetRoles()",
    "bSource": {
      "startLine": 77,
      "code": "/**\n     * Test for {@link ContainerRolesPrincipalProvider#setRoleNames(Set)}.\n     */\n    @Test\n    public void testSetRoles() {\n        when(request.isUserInRole(\"a\")).thenReturn(true);\n        when(request.isUserInRole(\"b\")).thenReturn(true);\n        provider.setRoleNames(new HashSet<String>(Arrays.asList(new String[] {\"a\", \"b\"})));\n\n        final Set<Principal> principals = provider.getPrincipals(credentials);\n\n        assertEquals(2, principals.size());\n        assertTrue(\"The principals should contain 'a'\", principals.contains(new ContainerRolesPrincipal(\"a\")));\n        assertTrue(\"The principals should contain 'b'\", principals.contains(new ContainerRolesPrincipal(\"b\")));\n    }"
    },
    "aSource": {
      "startLine": 76,
      "code": "/**\n     * Test for {@link ContainerRolesPrincipalProvider#setRoleNames(Set)}.\n     */\n    @Test\n    public void testSetRoles() {\n        when(request.isUserInRole(\"a\")).thenReturn(true);\n        when(request.isUserInRole(\"b\")).thenReturn(true);\n        provider.setRoleNames(newHashSet(\"a\", \"b\"));\n\n        final Set<Principal> principals = provider.getPrincipals(credentials);\n\n        assertEquals(2, principals.size());\n        assertTrue(\"The principals should contain 'a'\", principals.contains(new ContainerRolesPrincipal(\"a\")));\n        assertTrue(\"The principals should contain 'b'\", principals.contains(new ContainerRolesPrincipal(\"b\")));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/common/ContainerRolesPrincipalProviderTest.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/common/ContainerRolesPrincipalProviderTest.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "provider.setRoleNames(new HashSet<String>(Arrays.asList(new String[] {\"a\", \"b\"})));",
          "type": "DELETE",
          "lineNo": 84
        }
      ],
      "targetChanges": [
        {
          "line": "provider.setRoleNames(newHashSet(\"a\", \"b\"));",
          "type": "ADD",
          "lineNo": 83
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider provider"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.util.HashSet.HashSet(Collection)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.HashSet"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Arrays.asList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Arrays"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Arrays.asList(Object[])"
        },
        {
          "type": "CtNewArray",
          "value": "String[]"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider provider"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Sets.newHashSet(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Sets.newHashSet(Object[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asList",
          "childCount": 3
        },
        "dstNode": {
          "label": "newHashSet",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.HashSet(java.util.Collection)",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asList",
          "childCount": 3
        },
        "dstNode": {
          "label": "newHashSet",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        83
      ]
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:574",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.common.ContainerRolesPrincipalProviderTest.testPrincipalEqualsDifferentClass()",
    "bSource": {
      "startLine": 131,
      "code": "/**\n     * Test for {@link ContainerRolesPrincipalProvider#getPrincipals(javax.jcr.Credentials)}.\n     */\n    @Test\n    public void testPrincipalEqualsDifferentClass() {\n        when(request.isUserInRole(\"a\")).thenReturn(true);\n        provider.setRoleNames(new HashSet<String>(Arrays.asList(new String[] {\"a\"})));\n\n        final Set<Principal> principals = provider.getPrincipals(credentials);\n        final Principal principal = principals.iterator().next();\n\n        assertNotEquals(\"Principals should not be equal if not the same class\", principal, mock(Principal.class));\n    }"
    },
    "aSource": {
      "startLine": 130,
      "code": "/**\n     * Test for {@link ContainerRolesPrincipalProvider#getPrincipals(javax.jcr.Credentials)}.\n     */\n    @Test\n    public void testPrincipalEqualsDifferentClass() {\n        when(request.isUserInRole(\"a\")).thenReturn(true);\n        provider.setRoleNames(newHashSet(\"a\"));\n\n        final Set<Principal> principals = provider.getPrincipals(credentials);\n        final Principal principal = principals.iterator().next();\n\n        assertNotEquals(\"Principals should not be equal if not the same class\", principal, mock(Principal.class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/common/ContainerRolesPrincipalProviderTest.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/common/ContainerRolesPrincipalProviderTest.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "provider.setRoleNames(new HashSet<String>(Arrays.asList(new String[] {\"a\"})));",
          "type": "DELETE",
          "lineNo": 137
        }
      ],
      "targetChanges": [
        {
          "line": "provider.setRoleNames(newHashSet(\"a\"));",
          "type": "ADD",
          "lineNo": 136
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider provider"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.util.HashSet.HashSet(Collection)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.HashSet"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Arrays.asList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Arrays"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Arrays.asList(Object[])"
        },
        {
          "type": "CtNewArray",
          "value": "String[]"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider provider"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Sets.newHashSet(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Sets.newHashSet(Object[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asList",
          "childCount": 3
        },
        "dstNode": {
          "label": "newHashSet",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.HashSet(java.util.Collection)",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asList",
          "childCount": 3
        },
        "dstNode": {
          "label": "newHashSet",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        136
      ]
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:575",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.common.ContainerRolesPrincipalProviderTest.testNoRequest()",
    "bSource": {
      "startLine": 118,
      "code": "/**\n     * Test for {@link ContainerRolesPrincipalProvider#getPrincipals(javax.jcr.Credentials)}.\n     */\n    @Test\n    public void testNoRequest() {\n        when(credentials.getRequest()).thenReturn(null);\n        provider.setRoleNames(new HashSet<String>(Arrays.asList(new String[] {\"a\"})));\n\n        final Set<Principal> principals = provider.getPrincipals(credentials);\n        assertTrue(\"Empty set expected when no request supplied\", principals.isEmpty());\n\n    }"
    },
    "aSource": {
      "startLine": 117,
      "code": "/**\n     * Test for {@link ContainerRolesPrincipalProvider#getPrincipals(javax.jcr.Credentials)}.\n     */\n    @Test\n    public void testNoRequest() {\n        when(credentials.getRequest()).thenReturn(null);\n        provider.setRoleNames(newHashSet(\"a\"));\n\n        final Set<Principal> principals = provider.getPrincipals(credentials);\n        assertTrue(\"Empty set expected when no request supplied\", principals.isEmpty());\n\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/common/ContainerRolesPrincipalProviderTest.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/common/ContainerRolesPrincipalProviderTest.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "provider.setRoleNames(new HashSet<String>(Arrays.asList(new String[] {\"a\"})));",
          "type": "DELETE",
          "lineNo": 124
        }
      ],
      "targetChanges": [
        {
          "line": "provider.setRoleNames(newHashSet(\"a\"));",
          "type": "ADD",
          "lineNo": 123
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider provider"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.util.HashSet.HashSet(Collection)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.HashSet"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Arrays.asList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Arrays"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Arrays.asList(Object[])"
        },
        {
          "type": "CtNewArray",
          "value": "String[]"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider provider"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Sets.newHashSet(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Sets.newHashSet(Object[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asList",
          "childCount": 3
        },
        "dstNode": {
          "label": "newHashSet",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.HashSet(java.util.Collection)",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asList",
          "childCount": 3
        },
        "dstNode": {
          "label": "newHashSet",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        123
      ]
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:576",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.common.ContainerRolesPrincipalProviderTest.testSetRole()",
    "bSource": {
      "startLine": 63,
      "code": "/**\n     * Test for {@link ContainerRolesPrincipalProvider#setRoleNames(Set)}.\n     */\n    @Test\n    public void testSetRole() {\n        when(request.isUserInRole(\"a\")).thenReturn(true);\n        provider.setRoleNames(new HashSet<String>(Arrays.asList(new String[] {\"a\"})));\n\n        final Set<Principal> principals = provider.getPrincipals(credentials);\n\n        assertEquals(1, principals.size());\n        assertTrue(\"The principals should contain 'a'\", principals.contains(new ContainerRolesPrincipal(\"a\")));\n    }"
    },
    "aSource": {
      "startLine": 62,
      "code": "/**\n     * Test for {@link ContainerRolesPrincipalProvider#setRoleNames(Set)}.\n     */\n    @Test\n    public void testSetRole() {\n        when(request.isUserInRole(\"a\")).thenReturn(true);\n        provider.setRoleNames(newHashSet(\"a\"));\n\n        final Set<Principal> principals = provider.getPrincipals(credentials);\n\n        assertEquals(1, principals.size());\n        assertTrue(\"The principals should contain 'a'\", principals.contains(new ContainerRolesPrincipal(\"a\")));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/common/ContainerRolesPrincipalProviderTest.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/common/ContainerRolesPrincipalProviderTest.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "provider.setRoleNames(new HashSet<String>(Arrays.asList(new String[] {\"a\"})));",
          "type": "DELETE",
          "lineNo": 69
        }
      ],
      "targetChanges": [
        {
          "line": "provider.setRoleNames(newHashSet(\"a\"));",
          "type": "ADD",
          "lineNo": 68
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider provider"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.util.HashSet.HashSet(Collection)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.HashSet"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Arrays.asList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Arrays"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Arrays.asList(Object[])"
        },
        {
          "type": "CtNewArray",
          "value": "String[]"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider provider"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Sets.newHashSet(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Sets.newHashSet(Object[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'a'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asList",
          "childCount": 3
        },
        "dstNode": {
          "label": "newHashSet",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.HashSet(java.util.Collection)",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asList",
          "childCount": 3
        },
        "dstNode": {
          "label": "newHashSet",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        68
      ]
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:577",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.common.ContainerRolesPrincipalProviderTest.testTrimSetRoles()",
    "bSource": {
      "startLine": 93,
      "code": "/**\n     * Test for {@link ContainerRolesPrincipalProvider#setRoleNames(Set)}.\n     */\n    @Test\n    public void testTrimSetRoles() {\n        when(request.isUserInRole(\"a\")).thenReturn(true);\n        when(request.isUserInRole(\"b\")).thenReturn(true);\n        provider.setRoleNames(new HashSet<String>(Arrays.asList(new String[] {\" a\", \"b \"})));\n\n        final Set<Principal> principals = provider.getPrincipals(credentials);\n\n        assertEquals(2, principals.size());\n        assertTrue(\"The principals should contain 'a'\", principals.contains(new ContainerRolesPrincipal(\"a\")));\n        assertTrue(\"The principals should contain 'b'\", principals.contains(new ContainerRolesPrincipal(\"b\")));\n    }"
    },
    "aSource": {
      "startLine": 92,
      "code": "/**\n     * Test for {@link ContainerRolesPrincipalProvider#setRoleNames(Set)}.\n     */\n    @Test\n    public void testTrimSetRoles() {\n        when(request.isUserInRole(\"a\")).thenReturn(true);\n        when(request.isUserInRole(\"b\")).thenReturn(true);\n        provider.setRoleNames(newHashSet(\" a\", \"b \"));\n\n        final Set<Principal> principals = provider.getPrincipals(credentials);\n\n        assertEquals(2, principals.size());\n        assertTrue(\"The principals should contain 'a'\", principals.contains(new ContainerRolesPrincipal(\"a\")));\n        assertTrue(\"The principals should contain 'b'\", principals.contains(new ContainerRolesPrincipal(\"b\")));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/common/ContainerRolesPrincipalProviderTest.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/common/ContainerRolesPrincipalProviderTest.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "provider.setRoleNames(new HashSet<String>(Arrays.asList(new String[] {\" a\", \"b \"})));",
          "type": "DELETE",
          "lineNo": 100
        }
      ],
      "targetChanges": [
        {
          "line": "provider.setRoleNames(newHashSet(\" a\", \"b \"));",
          "type": "ADD",
          "lineNo": 99
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider provider"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.util.HashSet.HashSet(Collection)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.HashSet"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Arrays.asList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Arrays"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Arrays.asList(Object[])"
        },
        {
          "type": "CtNewArray",
          "value": "String[]"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ' a'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b '"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider provider"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.common.ContainerRolesPrincipalProvider.setRoleNames(Set)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Sets.newHashSet(Object[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Sets.newHashSet(Object[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ' a'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'b '"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asList",
          "childCount": 3
        },
        "dstNode": {
          "label": "newHashSet",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.HashSet(java.util.Collection)",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "asList",
          "childCount": 3
        },
        "dstNode": {
          "label": "newHashSet",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        99
      ]
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:578",
    "trivial": null
  },
  {
    "name": "org.fcrepo.connector.file.FedoraFileSystemConnectorTest.testStoreDocument()",
    "bSource": {
      "startLine": 244,
      "code": "@Test\n    public void testStoreDocument() throws IOException, RepositoryException {\n        final String id = \"/\" + tmpFile.getName();\n        final DocumentReader reader = mock(DocumentReader.class);\n        final FedoraFileSystemConnector spy = spy(connector);\n        doReturn(tmpFile).when(spy).fileFor(anyString());\n        doReturn(reader).when(spy).readDocument(any(Document.class));\n        doReturn(id).when(reader).getDocumentId();\n        doReturn(NT_FILE).when(reader).getPrimaryTypeName();\n        spy.storeDocument(spy.getDocumentById(id));\n        verify(spy).touchParent(id);\n    }"
    },
    "aSource": {
      "startLine": 243,
      "code": "@Test\n    public void testStoreDocument() {\n        final String id = \"/\" + tmpFile.getName();\n        final DocumentReader reader = mock(DocumentReader.class);\n        final FedoraFileSystemConnector spy = spy(connector);\n        doReturn(tmpFile).when(spy).fileFor(anyString());\n        doReturn(reader).when(spy).readDocument(any(Document.class));\n        doReturn(id).when(reader).getDocumentId();\n        doReturn(NT_FILE).when(reader).getPrimaryTypeName();\n        spy.storeDocument(spy.getDocumentById(id));\n        verify(spy).touchParent(id);\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/connector/file/FedoraFileSystemConnectorTest.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/connector/file/FedoraFileSystemConnectorTest.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testStoreDocument() throws IOException, RepositoryException {",
          "type": "DELETE",
          "lineNo": 245
        }
      ],
      "targetChanges": [
        {
          "line": "public void testStoreDocument() {",
          "type": "ADD",
          "lineNo": 244
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.connector.file.FedoraFileSystemConnectorTest.testStoreDocument()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.connector.file.FedoraFileSystemConnectorTest.testStoreDocument()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE",
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        244
      ]
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:579",
    "trivial": null
  },
  {
    "name": "org.fcrepo.connector.file.FedoraFileSystemConnectorTest.testRemoveDocument()",
    "bSource": {
      "startLine": 236,
      "code": "@Test\n    public void testRemoveDocument() throws IOException, RepositoryException {\n        final String id = \"/\" + tmpFile2.getName();\n        final FedoraFileSystemConnector spy = spy(connector);\n        assertTrue(\"Removing document should return true!\", spy.removeDocument(id));\n        verify(spy).touchParent(id);\n    }"
    },
    "aSource": {
      "startLine": 235,
      "code": "@Test\n    public void testRemoveDocument() {\n        final String id = \"/\" + tmpFile2.getName();\n        final FedoraFileSystemConnector spy = spy(connector);\n        assertTrue(\"Removing document should return true!\", spy.removeDocument(id));\n        verify(spy).touchParent(id);\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/connector/file/FedoraFileSystemConnectorTest.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/connector/file/FedoraFileSystemConnectorTest.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testRemoveDocument() throws IOException, RepositoryException {",
          "type": "DELETE",
          "lineNo": 237
        }
      ],
      "targetChanges": [
        {
          "line": "public void testRemoveDocument() {",
          "type": "ADD",
          "lineNo": 236
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.connector.file.FedoraFileSystemConnectorTest.testRemoveDocument()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.connector.file.FedoraFileSystemConnectorTest.testRemoveDocument()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE",
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        236
      ]
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:580",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testGetContent()",
    "bSource": {
      "startLine": 293,
      "code": "@Test\n    public void testGetContent() throws RepositoryException, IOException, URISyntaxException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String path = \"/\" + pid + \"/\" + dsId;\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Request mockRequest = mock(Request.class);\n        final Response actual =\n            testObj.getContent(createPathList(pid, dsId), null, mockRequest, mockResponse);\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        final String actualContent =\n            IOUtils.toString((InputStream) actual.getEntity());\n        final List<Object> linkHeaders = actual.getMetadata().get(\"Link\");\n        assertTrue(\"Expected to find describedby Link header\",\n            linkHeaders.contains(\"<http://localhost/fcrepo\" + path + \">;rel=\\\"describedby\\\"\"));\n        assertTrue(\"Expected to find NonRDFSource Link header\",\n            linkHeaders.contains(\"<\" + NON_RDF_SOURCE + \">;rel=\\\"type\\\"\"));\n        assertEquals(\"asdf\", actualContent);\n    }"
    },
    "aSource": {
      "startLine": 297,
      "code": "@Test\n    public void testGetContent() throws RepositoryException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String path = \"/\" + pid + \"/\" + dsId;\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Request mockRequest = mock(Request.class);\n        final Response actual =\n            testObj.getContent(createPathList(pid, dsId), null, mockRequest, mockResponse);\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        final String actualContent =\n            IOUtils.toString((InputStream) actual.getEntity());\n        final List<Object> linkHeaders = actual.getMetadata().get(\"Link\");\n        assertTrue(\"Expected to find describedby Link header\",\n            linkHeaders.contains(\"<http://localhost/fcrepo\" + path + \">;rel=\\\"describedby\\\"\"));\n        assertTrue(\"Expected to find NonRDFSource Link header\",\n            linkHeaders.contains(\"<\" + NON_RDF_SOURCE + \">;rel=\\\"type\\\"\"));\n        assertEquals(\"asdf\", actualContent);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testGetContent() throws RepositoryException, IOException, URISyntaxException {",
          "type": "DELETE",
          "lineNo": 294
        }
      ],
      "targetChanges": [
        {
          "line": "public void testGetContent() throws RepositoryException, IOException {",
          "type": "ADD",
          "lineNo": 298
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraContentTest.testGetContent()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraContentTest.testGetContent()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.net.URISyntaxException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        298
      ]
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:581",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraHtmlIT.testGetDatastreamNode()",
    "bSource": {
      "startLine": 55,
      "code": "@Test\n    public void testGetDatastreamNode() throws Exception {\n\n        final String pid = getRandomUniquePid();\n        createObject(pid);\n        final HttpPost postDsMethod =\n            postDSMethod(pid, \"ds1\", \"foo\");\n        assertEquals(201, getStatus(postDsMethod));\n\n        final HttpGet method =\n            new HttpGet(serverAddress + pid + \"/ds1\");\n\n        method.addHeader(\"Accept\", \"text/html\");\n\n        final HttpResponse response = client.execute(method);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n    }"
    },
    "aSource": {
      "startLine": 50,
      "code": "@Test\n    public void testGetDatastreamNode() throws Exception {\n\n        final String pid = getRandomUniquePid();\n        createObject(pid);\n        final HttpPost postDsMethod =\n            postDSMethod(pid, \"ds1\", \"foo\");\n        assertEquals(201, getStatus(postDsMethod));\n\n        final HttpGet method =\n            new HttpGet(serverAddress + pid + \"/ds1\");\n\n        method.addHeader(\"Accept\", \"text/html\");\n        assertEquals(200, getStatus(method));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraHtmlIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraHtmlIT.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final HttpResponse response = client.execute(method);",
          "type": "DELETE",
          "lineNo": 69
        },
        {
          "line": "assertEquals(200, response.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 70
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(200, getStatus(method));",
          "type": "ADD",
          "lineNo": 63
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.HttpResponse"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.apache.http.client.methods.HttpGet)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.http.client.HttpClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.apache.http.client.methods.HttpGet)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpGet method"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '200'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '200'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatus(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatus(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpGet method"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getStatusLine",
          "childCount": 1
        },
        "dstNode": {
          "label": "getStatus",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "response",
          "childCount": 0
        },
        "dstNode": {
          "label": "method",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "response",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getStatusCode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getStatusLine",
          "childCount": 1
        },
        "dstNode": {
          "label": "getStatus",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        64
      ]
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:582",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraHtmlIT.testGetNamespaces()",
    "bSource": {
      "startLine": 74,
      "code": "@Test\n    public void testGetNamespaces() throws Exception {\n\n        final HttpGet method = new HttpGet(serverAddress + \"fcr:namespaces\");\n        method.addHeader(\"Accept\", \"text/html\");\n        final HttpResponse response = client.execute(method);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n    }"
    },
    "aSource": {
      "startLine": 66,
      "code": "@Test\n    public void testGetNamespaces() throws Exception {\n\n        final HttpGet method = new HttpGet(serverAddress + \"fcr:namespaces\");\n        method.addHeader(\"Accept\", \"text/html\");\n        assertEquals(200, getStatus(method));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraHtmlIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraHtmlIT.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final HttpResponse response = client.execute(method);",
          "type": "DELETE",
          "lineNo": 79
        },
        {
          "line": "assertEquals(200, response.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 80
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(200, getStatus(method));",
          "type": "ADD",
          "lineNo": 71
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.HttpResponse"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.apache.http.client.methods.HttpGet)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.http.client.HttpClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.apache.http.client.methods.HttpGet)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpGet method"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '200'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '200'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatus(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatus(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpGet method"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getStatusLine",
          "childCount": 1
        },
        "dstNode": {
          "label": "getStatus",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "response",
          "childCount": 0
        },
        "dstNode": {
          "label": "method",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "response",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getStatusCode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getStatusLine",
          "childCount": 1
        },
        "dstNode": {
          "label": "getStatus",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        71
      ]
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:583",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraNodeTypesIT.itShouldAllowUpdatesUsingCNDDeclarations()",
    "bSource": {
      "startLine": 61,
      "code": "@Test\n    public void itShouldAllowUpdatesUsingCNDDeclarations() throws IOException {\n        final HttpPost httpPost = new HttpPost(serverAddress + \"/fcr:nodetypes\");\n        final BasicHttpEntity entity = new BasicHttpEntity();\n        entity.setContent(new ByteArrayInputStream(\n                (\"<fedora = 'http://fedora.info/definitions/v4/rest-api#'>\\n\"\n                        + \"<special = 'info:local#'>\\n\"\n                        + \"[special:object] > fedora:object mixin\").getBytes()));\n        httpPost.setEntity(entity);\n        final HttpResponse response = client.execute(httpPost);\n\n        assertEquals(204, response.getStatusLine().getStatusCode());\n\n\n        final HttpGet httpGet = new HttpGet(serverAddress + \"/fcr:nodetypes\");\n        httpGet.addHeader(\"Accept\", \"application/n-triples\");\n\n        final GraphStore graphStore = getGraphStore(httpGet);\n\n        assertTrue(graphStore.contains(ANY, createURI(\"info:local#object\"),\n                subClassOf.asNode(), createURI(RESTAPI_NAMESPACE + \"object\")));\n\n    }"
    },
    "aSource": {
      "startLine": 61,
      "code": "@Test\n    public void itShouldAllowUpdatesUsingCNDDeclarations() throws IOException {\n        final HttpPost httpPost = new HttpPost(serverAddress + \"/fcr:nodetypes\");\n        final BasicHttpEntity entity = new BasicHttpEntity();\n        entity.setContent(new ByteArrayInputStream(\n                (\"<fedora = 'http://fedora.info/definitions/v4/rest-api#'>\\n\"\n                        + \"<special = 'info:local#'>\\n\"\n                        + \"[special:object] > fedora:object mixin\").getBytes()));\n        httpPost.setEntity(entity);\n        final HttpResponse response = execute(httpPost);\n\n        assertEquals(204, response.getStatusLine().getStatusCode());\n\n\n        final HttpGet httpGet = new HttpGet(serverAddress + \"/fcr:nodetypes\");\n        httpGet.addHeader(\"Accept\", \"application/n-triples\");\n\n        final GraphStore graphStore = getGraphStore(httpGet);\n\n        assertTrue(graphStore.contains(ANY, createURI(\"info:local#object\"),\n                subClassOf.asNode(), createURI(RESTAPI_NAMESPACE + \"object\")));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraNodeTypesIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraNodeTypesIT.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final HttpResponse response = client.execute(httpPost);",
          "type": "DELETE",
          "lineNo": 70
        }
      ],
      "targetChanges": [
        {
          "line": "final HttpResponse response = execute(httpPost);",
          "type": "ADD",
          "lineNo": 70
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.HttpResponse"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.apache.http.client.methods.HttpPost)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.http.client.HttpClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.apache.http.client.methods.HttpPost)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpPost httpPost"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.HttpResponse"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpPost httpPost"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "client",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.integration.http.api.FedoraNodeTypesIT",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:584",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraExportIT.shouldExportUsingTheRepositoryWideApi()",
    "bSource": {
      "startLine": 139,
      "code": "@Test\n    public void shouldExportUsingTheRepositoryWideApi() throws IOException {\n        final String objName = getRandomUniquePid();\n\n        // set up the object\n        client.execute(postObjMethod(objName));\n        client.execute(postDSMethod(objName, \"testDS\", \"stuff\"));\n\n        // export it\n        logger.debug(\"Attempting to export: \" + objName);\n        final HttpGet getObjMethod =\n            new HttpGet(serverAddress + objName + \"/fcr:export\");\n        final HttpResponse response = client.execute(getObjMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        logger.debug(\"Successfully exported: \" + objName);\n        final String content = EntityUtils.toString(response.getEntity());\n        logger.debug(\"Found exported object: \" + content);\n\n    }"
    },
    "aSource": {
      "startLine": 135,
      "code": "@Test\n    public void shouldExportUsingTheRepositoryWideApi() throws IOException {\n        final String objName = getRandomUniquePid();\n\n        // set up the object\n        createObject(objName);\n        createDatastream(objName, \"testDS\", \"stuff\");\n\n        // export it\n        logger.debug(\"Attempting to export: \" + objName);\n        final HttpGet getObjMethod =\n            new HttpGet(serverAddress + objName + \"/fcr:export\");\n        final HttpResponse response = client.execute(getObjMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        logger.debug(\"Successfully exported: \" + objName);\n        final String content = EntityUtils.toString(response.getEntity());\n        logger.debug(\"Found exported object: \" + content);\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraExportIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraExportIT.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "client.execute(postObjMethod(objName));",
          "type": "DELETE",
          "lineNo": 144
        },
        {
          "line": "client.execute(postDSMethod(objName, \"testDS\", \"stuff\"));",
          "type": "DELETE",
          "lineNo": 145
        }
      ],
      "targetChanges": [
        {
          "line": "createObject(objName);",
          "type": "ADD",
          "lineNo": 140
        },
        {
          "line": "createDatastream(objName, \"testDS\", \"stuff\");",
          "type": "ADD",
          "lineNo": 141
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "execute(org.apache.http.client.methods.HttpPost)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.http.client.HttpClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.apache.http.client.methods.HttpPost)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.postObjMethod(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.postObjMethod(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.apache.http.client.methods.HttpPost)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.http.client.HttpClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.apache.http.client.methods.HttpPost)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.postDSMethod(String,String,String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.postDSMethod(String,String,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testDS'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'stuff'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.createObject(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.createObject(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.createDatastream(String,String,String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.createDatastream(String,String,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String objName"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testDS'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'stuff'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "postObjMethod",
          "childCount": 2
        },
        "dstNode": {
          "label": "createObject",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "postDSMethod",
          "childCount": 4
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 4
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "execute",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "execute",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "postObjMethod",
          "childCount": 2
        },
        "dstNode": {
          "label": "createObject",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "postDSMethod",
          "childCount": 4
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 4
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:585",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraBatchIT.testNoChildren()",
    "bSource": {
      "startLine": 210,
      "code": "@Test\n    public void testNoChildren() throws Exception {\n        final String pid = randomUUID().toString();\n        createObject(pid);\n\n        final HttpGet getDSesMethod = new HttpGet(serverAddress + pid\n                + \"/fcr:batch\");\n        final HttpResponse response = client.execute(getDSesMethod);\n        assertEquals(400, response.getStatusLine().getStatusCode());\n    }"
    },
    "aSource": {
      "startLine": 208,
      "code": "@Test\n    public void testNoChildren() throws Exception {\n        final String pid = randomUUID().toString();\n        createObject(pid);\n\n        final HttpGet getDSesMethod = new HttpGet(serverAddress + pid\n                + \"/fcr:batch\");\n        final HttpResponse response = execute(getDSesMethod);\n        assertEquals(400, response.getStatusLine().getStatusCode());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBatchIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraBatchIT.java",
    "bCommit": "11ab17c129",
    "aCommit": "fa464cf184",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final HttpResponse response = client.execute(getDSesMethod);",
          "type": "DELETE",
          "lineNo": 217
        }
      ],
      "targetChanges": [
        {
          "line": "final HttpResponse response = execute(getDSesMethod);",
          "type": "ADD",
          "lineNo": 215
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.HttpResponse"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.apache.http.client.methods.HttpGet)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.http.client.HttpClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.apache.http.client.methods.HttpGet)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpGet getDSesMethod"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.HttpResponse"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpGet getDSesMethod"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "client",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.integration.http.api.FedoraBatchIT",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1410535565,
    "ID": "fcrepo/fcrepo:586",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testGetContent()",
    "bSource": {
      "startLine": 293,
      "code": "@Test\n    public void testGetContent() throws RepositoryException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String path = \"/\" + pid + \"/\" + dsId;\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Request mockRequest = mock(Request.class);\n        final Response actual =\n            testObj.getContent(createPathList(pid, dsId), null, mockRequest, mockResponse);\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        final String actualContent =\n            IOUtils.toString((InputStream) actual.getEntity());\n        final List<Object> linkHeaders = actual.getMetadata().get(\"Link\");\n        assertTrue(\"Expected to find describedby Link header\",\n            linkHeaders.contains(\"<http://localhost/fcrepo\" + path + \">;rel=\\\"describedby\\\"\"));\n        assertTrue(\"Expected to find NonRDFSource Link header\",\n            linkHeaders.contains(\"<\" + NON_RDF_SOURCE + \">;rel=\\\"type\\\"\"));\n        assertEquals(\"asdf\", actualContent);\n    }"
    },
    "aSource": {
      "startLine": 293,
      "code": "@Test\n    public void testGetContent() throws RepositoryException, IOException, URISyntaxException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String path = \"/\" + pid + \"/\" + dsId;\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Request mockRequest = mock(Request.class);\n        final Response actual =\n            testObj.getContent(createPathList(pid, dsId), null, mockRequest, mockResponse);\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        final String actualContent =\n            IOUtils.toString((InputStream) actual.getEntity());\n        final List<Object> linkHeaders = actual.getMetadata().get(\"Link\");\n        assertTrue(\"Expected to find describedby Link header\",\n            linkHeaders.contains(\"<http://localhost/fcrepo\" + path + \">;rel=\\\"describedby\\\"\"));\n        assertTrue(\"Expected to find NonRDFSource Link header\",\n            linkHeaders.contains(\"<\" + NON_RDF_SOURCE + \">;rel=\\\"type\\\"\"));\n        assertEquals(\"asdf\", actualContent);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "e1cfab0223",
    "aCommit": "11ab17c129",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testGetContent() throws RepositoryException, IOException {",
          "type": "DELETE",
          "lineNo": 294
        }
      ],
      "targetChanges": [
        {
          "line": "public void testGetContent() throws RepositoryException, IOException, URISyntaxException {",
          "type": "ADD",
          "lineNo": 294
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraContentTest.testGetContent()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraContentTest.testGetContent()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "java.net.URISyntaxException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "ADD_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        306
      ]
    },
    "aCommitTime": 1410530140,
    "ID": "fcrepo/fcrepo:33",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.connector.file.ReadOnlyExternalPropertiesFedoraFileSystemConnectorIT.verifyThatPropertiesAreExternal()",
    "bSource": {
      "startLine": 54,
      "code": "@Test\n    public void verifyThatPropertiesAreExternal() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertEquals(\"There should be exactly as many visible nodes as actual files (ie, no hidden sidecar files).\",\n                fileForNode(object.getNode()).getParentFile().list().length,\n                getChildCount(object.getNode().getParent()));\n        final File propFile = propertyFileForNode(object.getNode());\n        assertTrue(\"There should be properties file (\" + propFile + \") in the external directory.\",\n                propFile.exists());\n    }"
    },
    "aSource": {
      "startLine": 52,
      "code": "@Test\n    public void verifyThatPropertiesAreExternal() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraResource object = nodeService.getObject(session, testFilePath());\n        assertEquals(\"There should be exactly as many visible nodes as actual files (ie, no hidden sidecar files).\",\n                fileForNode(object.getNode()).getParentFile().list().length,\n                getChildCount(object.getNode().getParent()));\n    }"
    },
    "bPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/ReadOnlyExternalPropertiesFedoraFileSystemConnectorIT.java",
    "aPath": "fcrepo-connector-file/src/test/java/org/fcrepo/integration/connector/file/ReadOnlyExternalPropertiesFedoraFileSystemConnectorIT.java",
    "bCommit": "8a97cfde66",
    "aCommit": "59d3447226",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final File propFile = propertyFileForNode(object.getNode());",
          "type": "DELETE",
          "lineNo": 61
        },
        {
          "line": "assertTrue(\"There should be properties file (\" + propFile + \") in the external directory.\",",
          "type": "DELETE",
          "lineNo": 62
        },
        {
          "line": "propFile.exists());",
          "type": "DELETE",
          "lineNo": 63
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.io.File propFile"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.File"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.connector.file.AbstractFedoraFileSystemConnectorIT.propertyFileForNode(Node)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.connector.file.AbstractFedoraFileSystemConnectorIT.propertyFileForNode(Node)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraResource object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'There should be properties file ('"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.File propFile"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ') in the external directory.'"
        },
        {
          "type": "CtInvocation",
          "value": "java.io.File.exists()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.File propFile"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.io.File.exists()"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "propFile",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        59
      ]
    },
    "aCommitTime": 1410446982,
    "ID": "fcrepo/fcrepo:210",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLocksTest.testGetLock()",
    "bSource": {
      "startLine": 80,
      "code": "@Test\n    public void testGetLock() throws RepositoryException {\n        final String pid = UUID.randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n        when(mockLockService.getLock(mockSession, path)).thenReturn(mockLock);\n\n        testObj.getLock(createPathList(pid));\n\n        verify(mockLockService).getLock(mockSession, path);\n    }"
    },
    "aSource": {
      "startLine": 82,
      "code": "@Test\n    public void testGetLock() throws RepositoryException {\n        final String pid = randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n        when(mockLockService.getLock(mockSession, path)).thenReturn(mockLock);\n\n        testObj.getLock(createPathList(pid));\n\n        verify(mockLockService).getLock(mockSession, path);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "bCommit": "10060d71db",
    "aCommit": "e144f37c0f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = UUID.randomUUID().toString();",
          "type": "DELETE",
          "lineNo": 82
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = randomUUID().toString();",
          "type": "ADD",
          "lineNo": 84
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.UUID.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.UUID.randomUUID()"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.UUID"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.UUID.randomUUID()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.UUID.toString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.UUID.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.UUID.randomUUID()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.UUID.randomUUID()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.UUID.toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.UUID",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        84
      ]
    },
    "aCommitTime": 1409936506,
    "ID": "fcrepo/fcrepo:507",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraLocksTest.testRDFGenerationForLockToken()",
    "bSource": {
      "startLine": 117,
      "code": "@Test\n    public void testRDFGenerationForLockToken() throws RepositoryException {\n        final String pid = UUID.randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n        when(mockLockService.getLock(mockSession, path)).thenReturn(mockLock);\n\n        final RdfStream stream = testObj.getLock(createPathList(pid));\n        while (stream.hasNext()) {\n            final Triple t = stream.next();\n            if (t.getPredicate().getURI().equals(HAS_LOCK_TOKEN.getURI())\n                    && t.getObject().getLiteralValue().equals(mockLock.getLockToken())) {\n                return;\n            }\n        }\n        fail(\"Unable to find the lock token in the returned RDF!\");\n    }"
    },
    "aSource": {
      "startLine": 119,
      "code": "@Test\n    public void testRDFGenerationForLockToken() throws RepositoryException {\n        final String pid = randomUUID().toString();\n        final String path = \"/\" + pid;\n        initializeMockNode(path);\n        when(mockLockService.getLock(mockSession, path)).thenReturn(mockLock);\n\n        final RdfStream stream = testObj.getLock(createPathList(pid));\n        while (stream.hasNext()) {\n            final Triple t = stream.next();\n            if (t.getPredicate().getURI().equals(HAS_LOCK_TOKEN.getURI())\n                    && t.getObject().getLiteralValue().equals(mockLock.getLockToken())) {\n                return;\n            }\n        }\n        fail(\"Unable to find the lock token in the returned RDF!\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLocksTest.java",
    "bCommit": "10060d71db",
    "aCommit": "e144f37c0f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String pid = UUID.randomUUID().toString();",
          "type": "DELETE",
          "lineNo": 119
        }
      ],
      "targetChanges": [
        {
          "line": "final String pid = randomUUID().toString();",
          "type": "ADD",
          "lineNo": 121
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.UUID.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.UUID.randomUUID()"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.UUID"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.UUID.randomUUID()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.UUID.toString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.UUID.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.UUID.randomUUID()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.UUID.randomUUID()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.UUID.toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.UUID",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        121
      ]
    },
    "aCommitTime": 1409936506,
    "ID": "fcrepo/fcrepo:508",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.services.VersionServiceImplTest.testMixinCreationWhenExplicitlyVersioning()",
    "bSource": {
      "startLine": 371,
      "code": "@Test\n    public void testMixinCreationWhenExplicitlyVersioning() throws RepositoryException {\n        testObj.createVersion(mockWorkspace, Collections.singleton(EXAMPLE_UNVERSIONED_PATH));\n\n        final Node unversionedNode = s.getNode(EXAMPLE_UNVERSIONED_PATH);\n        verify(unversionedNode).isNodeType(VersionServiceImpl.VERSIONABLE);\n        verify(unversionedNode).addMixin(VersionServiceImpl.VERSIONABLE);\n    }"
    },
    "aSource": {
      "startLine": 370,
      "code": "@Test\n    public void testMixinCreationWhenExplicitlyVersioning() throws RepositoryException {\n        testObj.createVersion(mockWorkspace, singleton(EXAMPLE_UNVERSIONED_PATH));\n\n        final Node unversionedNode = s.getNode(EXAMPLE_UNVERSIONED_PATH);\n        verify(unversionedNode).isNodeType(VersionServiceImpl.VERSIONABLE);\n        verify(unversionedNode).addMixin(VersionServiceImpl.VERSIONABLE);\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/VersionServiceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/VersionServiceImplTest.java",
    "bCommit": "10060d71db",
    "aCommit": "e144f37c0f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.createVersion(mockWorkspace, Collections.singleton(EXAMPLE_UNVERSIONED_PATH));",
          "type": "DELETE",
          "lineNo": 373
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.createVersion(mockWorkspace, singleton(EXAMPLE_UNVERSIONED_PATH));",
          "type": "ADD",
          "lineNo": 372
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.VersionService.createVersion(Workspace,Collection)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.VersionService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.VersionService.createVersion(Workspace,Collection)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Workspace mockWorkspace"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Collections.singleton(Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Collections"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Collections.singleton(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String EXAMPLE_UNVERSIONED_PATH"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.VersionService.createVersion(Workspace,Collection)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.VersionService testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.VersionService.createVersion(Workspace,Collection)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Workspace mockWorkspace"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Collections.singleton(Object)"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Collections.singleton(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String EXAMPLE_UNVERSIONED_PATH"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.Collections",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        372
      ]
    },
    "aCommitTime": 1409936506,
    "ID": "fcrepo/fcrepo:509",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testWithThisContextIterable()",
    "bSource": {
      "startLine": 156,
      "code": "@Test\n    public void testWithThisContextIterable() {\n        testStream.namespace(prefix1, uri1);\n        testStream.topic(NodeFactory.createAnon());\n        final RdfStream testStream2 =\n            testStream.withThisContext((Iterable<Triple>) new RdfStream());\n        assertEquals(testStream.namespaces(), testStream2.namespaces());\n        assertEquals(testStream.topic(), testStream2.topic());\n    }"
    },
    "aSource": {
      "startLine": 156,
      "code": "@Test\n    public void testWithThisContextIterable() {\n        testStream.namespace(prefix1, uri1);\n        testStream.topic(createAnon());\n        final RdfStream testStream2 = testStream.withThisContext(new RdfStream().iterable());\n        assertEquals(testStream.namespaces(), testStream2.namespaces());\n        assertEquals(testStream.topic(), testStream2.topic());\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "10060d71db",
    "aCommit": "e144f37c0f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testStream.topic(NodeFactory.createAnon());",
          "type": "DELETE",
          "lineNo": 159
        },
        {
          "line": "final RdfStream testStream2 =",
          "type": "DELETE",
          "lineNo": 160
        },
        {
          "line": "testStream.withThisContext((Iterable<Triple>) new RdfStream());",
          "type": "DELETE",
          "lineNo": 161
        }
      ],
      "targetChanges": [
        {
          "line": "testStream.topic(createAnon());",
          "type": "ADD",
          "lineNo": 159
        },
        {
          "line": "final RdfStream testStream2 = testStream.withThisContext(new RdfStream().iterable());",
          "type": "ADD",
          "lineNo": 160
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.topic(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.topic(Node)"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.NodeFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream2"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.withThisContext(Iterator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.withThisContext(Iterator)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Iterable"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.graph.Triple"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.topic(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.topic(Node)"
        },
        {
          "type": "CtInvocation",
          "value": "createAnon()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createAnon()"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream2"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.withThisContext(Iterator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.withThisContext(Iterator)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.iterable()"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.iterable()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.NodeFactory",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TYPE_CAST",
        "parents": [
          "ConstructorCall",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.Iterable",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "iterable",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.utils.iterators.RdfStream()",
          "childCount": 1
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.utils.iterators.RdfStream()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        160
      ]
    },
    "aCommitTime": 1409936506,
    "ID": "fcrepo/fcrepo:510",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testSkip()",
    "bSource": {
      "startLine": 243,
      "code": "@Test\n    public void testSkip() {\n        when(mockIterator.hasNext()).thenReturn(true, true, true, false);\n        testStream = testStream.skip(3);\n        assertFalse(testStream.hasNext());\n        assertEquals(testStream, testStream.skip(-1));\n    }"
    },
    "aSource": {
      "startLine": 246,
      "code": "@Test\n    public void testSkip() {\n        when(mockIterator.hasNext()).thenReturn(true, true, true, false);\n        testStream = testStream.skip(3);\n        assertFalse(testStream.hasNext());\n        setUp();\n        when(mockIterator.hasNext()).thenReturn(true, true, true, false);\n        assertEquals(testStream, testStream.skip(0));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "10060d71db",
    "aCommit": "e144f37c0f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(testStream, testStream.skip(-1));",
          "type": "DELETE",
          "lineNo": 248
        }
      ],
      "targetChanges": [
        {
          "line": "setUp();",
          "type": "ADD",
          "lineNo": 251
        },
        {
          "line": "when(mockIterator.hasNext()).thenReturn(true, true, true, false);",
          "type": "ADD",
          "lineNo": 252
        },
        {
          "line": "assertEquals(testStream, testStream.skip(0));",
          "type": "ADD",
          "lineNo": 253
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.kernel.utils.iterators.RdfStream,org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.kernel.utils.iterators.RdfStream,org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.skip(Integer)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.skip(Integer)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.setUp()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.setUp()"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean,boolean,boolean,boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Iterator.hasNext()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.Iterator mockIterator"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Iterator.hasNext()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean,boolean,boolean,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.kernel.utils.iterators.RdfStream,org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.kernel.utils.iterators.RdfStream,org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.skip(Integer)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.skip(Integer)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "UnaryOperator",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "1",
          "childCount": 0
        },
        "dstNode": {
          "label": "0",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "UnaryOperator",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "NEG",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "setUp",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 5
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "UnaryOperator",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "1",
          "childCount": 0
        },
        "dstNode": {
          "label": "0",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        251
      ]
    },
    "aCommitTime": 1409936506,
    "ID": "fcrepo/fcrepo:511",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testIterator()",
    "bSource": {
      "startLine": 118,
      "code": "@Test\n    public void testIterator() {\n        assertEquals(testStream, testStream.iterator());\n    }"
    },
    "aSource": {
      "startLine": 118,
      "code": "@Test\n    public void testIterator() {\n        assertEquals(testStream, testStream);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "10060d71db",
    "aCommit": "e144f37c0f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(testStream, testStream.iterator());",
          "type": "DELETE",
          "lineNo": 120
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(testStream, testStream);",
          "type": "ADD",
          "lineNo": 120
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.kernel.utils.iterators.RdfStream,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.kernel.utils.iterators.RdfStream,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.iterator()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.iterator()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(org.fcrepo.kernel.utils.iterators.RdfStream,org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(org.fcrepo.kernel.utils.iterators.RdfStream,org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "iterator",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "iterator",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        120
      ]
    },
    "aCommitTime": 1409936506,
    "ID": "fcrepo/fcrepo:512",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsFADResponseIT.testPermissiveFAD()",
    "bSource": {
      "startLine": 83,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectServiceImpl();\n        os.createObject(session, \"/myobject\");\n        verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "aSource": {
      "startLine": 83,
      "code": "@Test\n    public void testPermissiveFAD() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(fad);\n        when(fad.hasPermission(any(Session.class), any(Path.class), any(String[].class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectServiceImpl();\n        os.createObject(session, \"/myobject\");\n        verify(fad, times(4)).hasPermission(any(Session.class), any(Path.class), any(String[].class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsFADResponseIT.java",
    "bCommit": "61f839ecab",
    "aCommit": "b10fd9a9ee",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(fad, times(5)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "DELETE",
          "lineNo": 105
        }
      ],
      "targetChanges": [
        {
          "line": "verify(fad, times(4)).hasPermission(any(Session.class), any(Path.class), any(String[].class));",
          "type": "ADD",
          "lineNo": 105
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '5'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.auth.common.FedoraAuthorizationDelegate,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.common.FedoraAuthorizationDelegate fad"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '4'"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasPermission()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "5",
          "childCount": 0
        },
        "dstNode": {
          "label": "4",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        105
      ]
    },
    "aCommitTime": 1407954794,
    "ID": "fcrepo/fcrepo:417",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testMoveObjectToExistingDestination()",
    "bSource": {
      "startLine": 581,
      "code": "@Test(expected = WebApplicationException.class)\n    public void testMoveObjectToExistingDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(true);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        doThrow(new ItemExistsException()).when(mockNodes).moveObject(mockSession, \"/foo\", \"/baz\");\n\n        final String pid = \"foo\";\n\n        final Response response = testObj.moveObject(createPathList(pid), \"http://localhost/fcrepo/baz\", mockRequest);\n\n        assertEquals(PRECONDITION_FAILED.getStatusCode(), response.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 584,
      "code": "@Test(expected = WebApplicationException.class)\n    public void testMoveObjectToExistingDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(true);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        doThrow(new ItemExistsException()).when(mockNodes).moveObject(mockSession, \"/foo\", \"/baz\");\n\n        final String pid = \"foo\";\n\n        final Response response = testObj.moveObject(createPathList(pid),\n                                                     \"http://localhost/fcrepo/baz\",\n                                                     mockRequest,\n                                                     mockResponse);\n\n        assertEquals(PRECONDITION_FAILED.getStatusCode(), response.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "3c127128ec",
    "aCommit": "9b0ecacf90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response response = testObj.moveObject(createPathList(pid), \"http://localhost/fcrepo/baz\", mockRequest);",
          "type": "DELETE",
          "lineNo": 593
        }
      ],
      "targetChanges": [
        {
          "line": "final Response response = testObj.moveObject(createPathList(pid),",
          "type": "ADD",
          "lineNo": 596
        },
        {
          "line": "\"http://localhost/fcrepo/baz\",",
          "type": "ADD",
          "lineNo": 597
        },
        {
          "line": "mockRequest,",
          "type": "ADD",
          "lineNo": 598
        },
        {
          "line": "mockResponse);",
          "type": "ADD",
          "lineNo": 599
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://localhost/fcrepo/baz'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request,HttpServletResponse)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request,HttpServletResponse)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://localhost/fcrepo/baz'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletResponse mockResponse"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockResponse",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        596
      ]
    },
    "aCommitTime": 1407450766,
    "ID": "fcrepo/fcrepo:332",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testMoveMissingObject()",
    "bSource": {
      "startLine": 566,
      "code": "@Test\n    public void testMoveMissingObject() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(false);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        final String pid = \"foo\";\n\n        final Response response = testObj.moveObject(createPathList(pid), \"http://localhost/fcrepo/bar\", mockRequest);\n        assertEquals(CONFLICT.getStatusCode(), response.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 566,
      "code": "@Test\n    public void testMoveMissingObject() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(false);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        final String pid = \"foo\";\n\n        final Response response = testObj.moveObject(createPathList(pid),\n                                                     \"http://localhost/fcrepo/bar\",\n                                                     mockRequest,\n                                                     mockResponse);\n        assertEquals(CONFLICT.getStatusCode(), response.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "3c127128ec",
    "aCommit": "9b0ecacf90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response response = testObj.moveObject(createPathList(pid), \"http://localhost/fcrepo/bar\", mockRequest);",
          "type": "DELETE",
          "lineNo": 577
        }
      ],
      "targetChanges": [
        {
          "line": "final Response response = testObj.moveObject(createPathList(pid),",
          "type": "ADD",
          "lineNo": 577
        },
        {
          "line": "\"http://localhost/fcrepo/bar\",",
          "type": "ADD",
          "lineNo": 578
        },
        {
          "line": "mockRequest,",
          "type": "ADD",
          "lineNo": 579
        },
        {
          "line": "mockResponse);",
          "type": "ADD",
          "lineNo": 580
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://localhost/fcrepo/bar'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request,HttpServletResponse)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request,HttpServletResponse)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://localhost/fcrepo/bar'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletResponse mockResponse"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockResponse",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        577
      ]
    },
    "aCommitTime": 1407450766,
    "ID": "fcrepo/fcrepo:333",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testDeleteObject()",
    "bSource": {
      "startLine": 333,
      "code": "@Test\n    public void testDeleteObject() throws RepositoryException {\n        final String pid = \"testObject\";\n        final String path = \"/\" + pid;\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        final Response actual = testObj.deleteObject(createPathList(pid), mockRequest);\n\n        assertNotNull(actual);\n        assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n        verify(mockNodes).deleteObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 333,
      "code": "@Test\n    public void testDeleteObject() throws RepositoryException {\n        final String pid = \"testObject\";\n        final String path = \"/\" + pid;\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        final Response actual = testObj.deleteObject(createPathList(pid), mockRequest, mockResponse);\n\n        assertNotNull(actual);\n        assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n        verify(mockNodes).deleteObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "3c127128ec",
    "aCommit": "9b0ecacf90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response actual = testObj.deleteObject(createPathList(pid), mockRequest);",
          "type": "DELETE",
          "lineNo": 341
        }
      ],
      "targetChanges": [
        {
          "line": "final Response actual = testObj.deleteObject(createPathList(pid), mockRequest, mockResponse);",
          "type": "ADD",
          "lineNo": 341
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.deleteObject(List,Request)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.deleteObject(List,Request)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.deleteObject(List,Request,HttpServletResponse)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.deleteObject(List,Request,HttpServletResponse)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletResponse mockResponse"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockResponse",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        341
      ]
    },
    "aCommitTime": 1407450766,
    "ID": "fcrepo/fcrepo:334",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testMoveObject()",
    "bSource": {
      "startLine": 550,
      "code": "@Test\n    public void testMoveObject() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(true);\n\n        final String pid = \"foo\";\n\n        testObj.moveObject(createPathList(pid), \"http://localhost/fcrepo/bar\", mockRequest);\n        verify(mockNodes).moveObject(mockSession, \"/foo\", \"/bar\");\n    }"
    },
    "aSource": {
      "startLine": 550,
      "code": "@Test\n    public void testMoveObject() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(true);\n\n        final String pid = \"foo\";\n\n        testObj.moveObject(createPathList(pid), \"http://localhost/fcrepo/bar\", mockRequest, mockResponse);\n        verify(mockNodes).moveObject(mockSession, \"/foo\", \"/bar\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "3c127128ec",
    "aCommit": "9b0ecacf90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.moveObject(createPathList(pid), \"http://localhost/fcrepo/bar\", mockRequest);",
          "type": "DELETE",
          "lineNo": 562
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.moveObject(createPathList(pid), \"http://localhost/fcrepo/bar\", mockRequest, mockResponse);",
          "type": "ADD",
          "lineNo": 562
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://localhost/fcrepo/bar'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request,HttpServletResponse)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request,HttpServletResponse)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://localhost/fcrepo/bar'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletResponse mockResponse"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockResponse",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        562
      ]
    },
    "aCommitTime": 1407450766,
    "ID": "fcrepo/fcrepo:335",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testMoveObjectWithBadDestination()",
    "bSource": {
      "startLine": 598,
      "code": "@Test\n    public void testMoveObjectWithBadDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(true);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        final String pid = \"foo\";\n\n        final Response response = testObj.moveObject(createPathList(pid), \"http://somewhere/else/baz\", mockRequest);\n\n        // BAD GATEWAY\n        assertEquals(SC_BAD_GATEWAY, response.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 604,
      "code": "@Test\n    public void testMoveObjectWithBadDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(true);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        final String pid = \"foo\";\n\n        final Response response = testObj.moveObject(createPathList(pid),\n                                                     \"http://somewhere/else/baz\",\n                                                     mockRequest,\n                                                     mockResponse);\n\n        // BAD GATEWAY\n        assertEquals(SC_BAD_GATEWAY, response.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "3c127128ec",
    "aCommit": "9b0ecacf90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response response = testObj.moveObject(createPathList(pid), \"http://somewhere/else/baz\", mockRequest);",
          "type": "DELETE",
          "lineNo": 609
        }
      ],
      "targetChanges": [
        {
          "line": "final Response response = testObj.moveObject(createPathList(pid),",
          "type": "ADD",
          "lineNo": 615
        },
        {
          "line": "\"http://somewhere/else/baz\",",
          "type": "ADD",
          "lineNo": 616
        },
        {
          "line": "mockRequest,",
          "type": "ADD",
          "lineNo": 617
        },
        {
          "line": "mockResponse);",
          "type": "ADD",
          "lineNo": 618
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://somewhere/else/baz'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response response"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request,HttpServletResponse)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.moveObject(List,String,Request,HttpServletResponse)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://somewhere/else/baz'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletResponse mockResponse"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockResponse",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        615
      ]
    },
    "aCommitTime": 1407450766,
    "ID": "fcrepo/fcrepo:336",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.JQLConverterIT.testComplexQuery()",
    "bSource": {
      "startLine": 274,
      "code": "@Test\n    public void testComplexQuery() throws RepositoryException {\n\n        final String sparql = \"PREFIX  ns:  <http://libraries.ucsd.edu/ark:/20775/>\"\n                + \" SELECT DISTINCT ?subject ?object WHERE  {\" +\n                \"?subject ns:bb2765355h 'bf2765355h' . ?subject ns:bb3652744n ?object . FILTER regex(\" +\n                \"?object, \\\"r\\\", \\\"i\\\") .FILTER (?object >= 'abc' && ?object < 'efg' || !(?object = 'efg')) } \" +\n                \" ORDER BY DESC(?subject) ?object LIMIT 10 OFFSET 20\";\n\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n\n        final String statement = testObj.getStatement();\n\n        final String namespacePrefix = session.getNamespacePrefix(\"http://libraries.ucsd.edu/ark:/20775/\");\n\n        final String expectedQuery =\n                \"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject, \" +\n                        \"[fedoraResource_subject].[ns001:bb3652744n] AS object FROM [fedora:resource] AS \" +\n                        \"[fedoraResource_subject] WHERE ((([fedoraResource_subject].[ns001:bb2765355h] = \" +\n                        \"'bf2765355h' AND [fedoraResource_subject].[ns001:bb3652744n] IS NOT NULL) AND \" +\n                        \"[fedoraResource_subject].[ns001:bb3652744n] LIKE 'r') AND \" +\n                        \"(([fedoraResource_subject].[ns001:bb3652744n] >= 'abc' AND \" +\n                        \"[fedoraResource_subject].[ns001:bb3652744n] < 'efg') OR NOT \" +\n                        \"([fedoraResource_subject].[ns001:bb3652744n] = 'efg'))) ORDER BY \" +\n                        \"[fedoraResource_subject].[jcr:path] DESC, \" +\n                        \"[fedoraResource_subject].[ns001:bb3652744n] ASC LIMIT 10 OFFSET 20\";\n\n        assertEquals(expectedQuery.replaceAll(\"ns001\", namespacePrefix), statement);\n    }"
    },
    "aSource": {
      "startLine": 274,
      "code": "@Test\n    public void testComplexQuery() throws RepositoryException {\n\n        final String sparql = \"PREFIX  ns:  <http://libraries.ucsd.edu/ark:/20775/>\"\n                + \" SELECT DISTINCT ?subject ?object WHERE  {\" +\n                \"?subject ns:bb2765355h 'bf2765355h' . ?subject ns:bb3652744n ?object . FILTER regex(\" +\n                \"?object, \\\"r\\\", \\\"i\\\") .FILTER (?object >= 'abc' && ?object < 'efg' || !(?object = 'efg')) } \" +\n                \" ORDER BY DESC(?subject) ?object LIMIT 10 OFFSET 20\";\n\n        final JQLConverter testObj = new JQLConverter(session, subjects, sparql);\n\n        final String statement = testObj.getStatement();\n\n        final String namespacePrefix = session.getNamespacePrefix(\"http://libraries.ucsd.edu/ark:/20775/\");\n\n        final String expectedQuery = \"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject, \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] AS object \" +\n                \"FROM [fedora:resource] AS [fedoraResource_subject] \" +\n                \"WHERE ((([fedoraResource_subject].[ns001:bb2765355h] = 'bf2765355h' AND \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] IS NOT NULL) AND \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] LIKE 'r') AND \" +\n                \"(([fedoraResource_subject].[ns001:bb3652744n] >= 'abc' AND \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] < 'efg') OR NOT \" +\n                \"([fedoraResource_subject].[ns001:bb3652744n] = 'efg'))) \" +\n                \"ORDER BY [fedoraResource_subject].[jcr:path] DESC NULLS FIRST, \" +\n                \"[fedoraResource_subject].[ns001:bb3652744n] ASC NULLS LAST LIMIT 10 OFFSET 20\";\n\n        assertEquals(expectedQuery.replaceAll(\"ns001\", namespacePrefix), statement);\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/JQLConverterIT.java",
    "bCommit": "c2e17e7282",
    "aCommit": "3c127128ec",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String expectedQuery =",
          "type": "DELETE",
          "lineNo": 289
        },
        {
          "line": "\"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject, \" +",
          "type": "DELETE",
          "lineNo": 290
        },
        {
          "line": "\"[fedoraResource_subject].[ns001:bb3652744n] AS object FROM [fedora:resource] AS \" +",
          "type": "DELETE",
          "lineNo": 291
        },
        {
          "line": "\"[fedoraResource_subject] WHERE ((([fedoraResource_subject].[ns001:bb2765355h] = \" +",
          "type": "DELETE",
          "lineNo": 292
        },
        {
          "line": "\"'bf2765355h' AND [fedoraResource_subject].[ns001:bb3652744n] IS NOT NULL) AND \" +",
          "type": "DELETE",
          "lineNo": 293
        },
        {
          "line": "\"[fedoraResource_subject].[ns001:bb3652744n] LIKE 'r') AND \" +",
          "type": "DELETE",
          "lineNo": 294
        },
        {
          "line": "\"(([fedoraResource_subject].[ns001:bb3652744n] >= 'abc' AND \" +",
          "type": "DELETE",
          "lineNo": 295
        },
        {
          "line": "\"[fedoraResource_subject].[ns001:bb3652744n] < 'efg') OR NOT \" +",
          "type": "DELETE",
          "lineNo": 296
        },
        {
          "line": "\"([fedoraResource_subject].[ns001:bb3652744n] = 'efg'))) ORDER BY \" +",
          "type": "DELETE",
          "lineNo": 297
        },
        {
          "line": "\"[fedoraResource_subject].[jcr:path] DESC, \" +",
          "type": "DELETE",
          "lineNo": 298
        },
        {
          "line": "\"[fedoraResource_subject].[ns001:bb3652744n] ASC LIMIT 10 OFFSET 20\";",
          "type": "DELETE",
          "lineNo": 299
        }
      ],
      "targetChanges": [
        {
          "line": "final String expectedQuery = \"SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject, \" +",
          "type": "ADD",
          "lineNo": 289
        },
        {
          "line": "\"[fedoraResource_subject].[ns001:bb3652744n] AS object \" +",
          "type": "ADD",
          "lineNo": 290
        },
        {
          "line": "\"FROM [fedora:resource] AS [fedoraResource_subject] \" +",
          "type": "ADD",
          "lineNo": 291
        },
        {
          "line": "\"WHERE ((([fedoraResource_subject].[ns001:bb2765355h] = 'bf2765355h' AND \" +",
          "type": "ADD",
          "lineNo": 292
        },
        {
          "line": "\"[fedoraResource_subject].[ns001:bb3652744n] IS NOT NULL) AND \" +",
          "type": "ADD",
          "lineNo": 293
        },
        {
          "line": "\"[fedoraResource_subject].[ns001:bb3652744n] LIKE 'r') AND \" +",
          "type": "ADD",
          "lineNo": 294
        },
        {
          "line": "\"(([fedoraResource_subject].[ns001:bb3652744n] >= 'abc' AND \" +",
          "type": "ADD",
          "lineNo": 295
        },
        {
          "line": "\"[fedoraResource_subject].[ns001:bb3652744n] < 'efg') OR NOT \" +",
          "type": "ADD",
          "lineNo": 296
        },
        {
          "line": "\"([fedoraResource_subject].[ns001:bb3652744n] = 'efg'))) \" +",
          "type": "ADD",
          "lineNo": 297
        },
        {
          "line": "\"ORDER BY [fedoraResource_subject].[jcr:path] DESC NULLS FIRST, \" +",
          "type": "ADD",
          "lineNo": 298
        },
        {
          "line": "\"[fedoraResource_subject].[ns001:bb3652744n] ASC NULLS LAST LIMIT 10 OFFSET 20\";",
          "type": "ADD",
          "lineNo": 299
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String expectedQuery"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject, '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[ns001:bb3652744n] AS object FROM [fedora:resource] AS '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject] WHERE ((([fedoraResource_subject].[ns001:bb2765355h] = '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''bf2765355h' AND [fedoraResource_subject].[ns001:bb3652744n] IS NOT NULL) AND '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[ns001:bb3652744n] LIKE 'r') AND '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '(([fedoraResource_subject].[ns001:bb3652744n] >= 'abc' AND '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[ns001:bb3652744n] < 'efg') OR NOT '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '([fedoraResource_subject].[ns001:bb3652744n] = 'efg'))) ORDER BY '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[jcr:path] DESC, '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[ns001:bb3652744n] ASC LIMIT 10 OFFSET 20'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String expectedQuery"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'SELECT DISTINCT [fedoraResource_subject].[jcr:path] AS subject, '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[ns001:bb3652744n] AS object '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'FROM [fedora:resource] AS [fedoraResource_subject] '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'WHERE ((([fedoraResource_subject].[ns001:bb2765355h] = 'bf2765355h' AND '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[ns001:bb3652744n] IS NOT NULL) AND '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[ns001:bb3652744n] LIKE 'r') AND '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '(([fedoraResource_subject].[ns001:bb3652744n] >= 'abc' AND '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[ns001:bb3652744n] < 'efg') OR NOT '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '([fedoraResource_subject].[ns001:bb3652744n] = 'efg'))) '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'ORDER BY [fedoraResource_subject].[jcr:path] DESC NULLS FIRST, '"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '[fedoraResource_subject].[ns001:bb3652744n] ASC NULLS LAST LIMIT 10 OFFSET 20'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"[fedoraResource_subject].[ns001:bb3652744n] ASC LIMIT 10 OFFSET 20\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"[fedoraResource_subject].[ns001:bb3652744n] ASC NULLS LAST LIMIT 10 OFFSET 20\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"[fedoraResource_subject].[jcr:path] DESC, \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"ORDER BY [fedoraResource_subject].[jcr:path] DESC NULLS FIRST, \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"([fedoraResource_subject].[ns001:bb3652744n] = 'efg'))) ORDER BY \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"([fedoraResource_subject].[ns001:bb3652744n] = 'efg'))) \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"'bf2765355h' AND [fedoraResource_subject].[ns001:bb3652744n] IS NOT NULL) AND \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"[fedoraResource_subject].[ns001:bb3652744n] IS NOT NULL) AND \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"[fedoraResource_subject] WHERE ((([fedoraResource_subject].[ns001:bb2765355h] = \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"WHERE ((([fedoraResource_subject].[ns001:bb2765355h] = 'bf2765355h' AND \"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"[fedoraResource_subject].[ns001:bb3652744n] AS object FROM [fedora:resource] AS \"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"[fedoraResource_subject].[ns001:bb3652744n] AS object \"",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "BinaryOperator",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "BinaryOperator",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "BinaryOperator",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        },
        "dstNode": {
          "label": "PLUS",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        301
      ]
    },
    "aCommitTime": 1407444468,
    "ID": "fcrepo/fcrepo:146",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.impl.services.DatastreamServiceImplIT.testChecksumBlobsForValuesWithoutChecksums()",
    "bSource": {
      "startLine": 173,
      "code": "@Test\n    public void testChecksumBlobsForValuesWithoutChecksums() throws Exception {\n\n        final Session session = repository.login();\n        final javax.jcr.ValueFactory factory = session.getValueFactory();\n        final FedoraObject object = objectService.createObject(session, \"/testLLObject\");\n\n        final Node testRandomContentNode = object.getNode().addNode(\"testRandomContent\", NT_FILE);\n        final Node testRandomContent = testRandomContentNode.addNode(JCR_CONTENT, NT_RESOURCE);\n        testRandomContent.setProperty(JCR_DATA,\n                                      factory.createBinary(new ByteArrayInputStream(\"0123456789\".getBytes())));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session, \"/testLLObject/testRandomContent\");\n\n        final Collection<FixityResult> fixityResults =\n            datastreamService.getFixity(ds.getNode().getNode(JCR_CONTENT), ds.getContentDigest(), ds.getContentSize());\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            assertFalse(fixityResult.isSuccess());\n            assertTrue(fixityResult.getStatus().contains(\n                    FixityResult.FixityState.MISSING_STORED_FIXITY));\n            assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 174,
      "code": "@Test\n    public void testChecksumBlobsForValuesWithoutChecksums() throws Exception {\n\n        final Session session = repository.login();\n        final javax.jcr.ValueFactory factory = session.getValueFactory();\n        final FedoraObject object = objectService.createObject(session, \"/testLLObject\");\n\n        final Node testRandomContentNode = object.getNode().addNode(\"testRandomContent\", NT_FILE);\n        testRandomContentNode.addMixin(FEDORA_DATASTREAM);\n        final Node testRandomContent = testRandomContentNode.addNode(JCR_CONTENT, NT_RESOURCE);\n        testRandomContent.setProperty(JCR_DATA,\n                                      factory.createBinary(new ByteArrayInputStream(\"0123456789\".getBytes())));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session, \"/testLLObject/testRandomContent\");\n\n        final Collection<FixityResult> fixityResults =\n            datastreamService.getFixity(ds.getNode().getNode(JCR_CONTENT), ds.getContentDigest(), ds.getContentSize());\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            assertFalse(fixityResult.isSuccess());\n            assertTrue(fixityResult.getStatus().contains(\n                    FixityResult.FixityState.MISSING_STORED_FIXITY));\n            assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/DatastreamServiceImplIT.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/integration/kernel/impl/services/DatastreamServiceImplIT.java",
    "bCommit": "3845a8035e",
    "aCommit": "2e16f827e3",
    "hunk": {
      "targetChanges": [
        {
          "line": "testRandomContentNode.addMixin(FEDORA_DATASTREAM);",
          "type": "ADD",
          "lineNo": 182
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Node testRandomContentNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "addMixin(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_DATASTREAM"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "addMixin",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        189
      ]
    },
    "aCommitTime": 1407433404,
    "ID": "fcrepo/fcrepo:84",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.jms.observer.HeadersJMSIT.testIngestion()",
    "bSource": {
      "startLine": 95,
      "code": "@Test\n    public void testIngestion() throws RepositoryException,\n                               InterruptedException, JMSException {\n\n        final String pid = \"/testIngestion\";\n        final String expectedEventType =\n            REPOSITORY_NAMESPACE + EventType.valueOf(NODE_ADDED).toString();\n        LOGGER.debug(\"Expecting a {} event\", expectedEventType);\n        Boolean success = false;\n\n        final Session session = repository.login();\n        try {\n            final Node node = jcrTools.findOrCreateNode(session, pid);\n            node.addMixin(FEDORA_OBJECT);\n            session.save();\n\n            final Long start = currentTimeMillis();\n            synchronized (this) {\n                while ((currentTimeMillis() - start < TIMEOUT) && (!success)) {\n                    for (final Message message : messages) {\n                        if (getIdentifier(message).equals(pid)) {\n                            if (getEventTypes(message).contains(expectedEventType)) {\n                                success = true;\n                            }\n                        }\n\n                        final String baseUrl = messages.iterator().next().getStringProperty(BASE_URL_HEADER_NAME);\n                        assertNotNull(\"BaseUrl should not be null!\", baseUrl);\n                        assertEquals(\"Defined in spring-test/headers-jms.xml\", \"http://localhost:8080/rest\", baseUrl);\n                    }\n                    LOGGER.debug(\"Waiting for next message...\");\n                    wait(1000);\n                }\n            }\n        } finally {\n            session.logout();\n        }\n        assertTrue(\n                \"Found no message with correct identifer and correct event type!\",\n                success);\n    }"
    },
    "aSource": {
      "startLine": 93,
      "code": "@Test\n    public void testIngestion() throws RepositoryException,\n                               InterruptedException, JMSException {\n\n        final String pid = \"/testIngestion\";\n        final String expectedEventType =\n            REPOSITORY_NAMESPACE + EventType.valueOf(NODE_ADDED).toString();\n        LOGGER.debug(\"Expecting a {} event\", expectedEventType);\n        Boolean success = false;\n\n        final Session session = repository.login();\n        try {\n            final Node node = jcrTools.findOrCreateNode(session, pid);\n            node.addMixin(FEDORA_OBJECT);\n            session.save();\n\n            final Long start = currentTimeMillis();\n            synchronized (this) {\n                while ((currentTimeMillis() - start < TIMEOUT) && (!success)) {\n                    for (final Message message : messages) {\n                        if (getIdentifier(message).equals(pid)) {\n                            if (getEventTypes(message).contains(expectedEventType)) {\n                                success = true;\n                            }\n                        }\n                    }\n                    LOGGER.debug(\"Waiting for next message...\");\n                    wait(1000);\n                }\n            }\n        } finally {\n            session.logout();\n        }\n        assertTrue(\n                \"Found no message with correct identifer and correct event type!\",\n                success);\n    }"
    },
    "bPath": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/HeadersJMSIT.java",
    "aPath": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/HeadersJMSIT.java",
    "bCommit": "384c0593a9",
    "aCommit": "ae12d0308a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final String baseUrl = messages.iterator().next().getStringProperty(BASE_URL_HEADER_NAME);",
          "type": "DELETE",
          "lineNo": 121
        },
        {
          "line": "assertNotNull(\"BaseUrl should not be null!\", baseUrl);",
          "type": "DELETE",
          "lineNo": 122
        },
        {
          "line": "assertEquals(\"Defined in spring-test/headers-jms.xml\", \"http://localhost:8080/rest\", baseUrl);",
          "type": "DELETE",
          "lineNo": 123
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String baseUrl"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getStringProperty(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "next()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Set.iterator()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.Set messages"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Set.iterator()"
        },
        {
          "type": "CtExecutableReference",
          "value": "next()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStringProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String BASE_URL_HEADER_NAME"
        },
        {
          "type": "CtInvocation",
          "value": "assertNotNull(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertNotNull(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'BaseUrl should not be null!'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String baseUrl"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Defined in spring-test/headers-jms.xml'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://localhost:8080/rest'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String baseUrl"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "ForEach",
          "While",
          "Synchronized",
          "Try",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "baseUrl",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "ForEach",
          "While",
          "Synchronized",
          "Try",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertNotNull",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "ForEach",
          "While",
          "Synchronized",
          "Try",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        120,
        121
      ]
    },
    "aCommitTime": 1406658232,
    "ID": "fcrepo/fcrepo:411",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.JcrPropertyStatementListenerTest.testAddedStatement()",
    "bSource": {
      "startLine": 154,
      "code": "@Test\n    public void testAddedStatement() throws RepositoryException {\n        mockStatic(JcrRdfTools.class);\n        when(mockSubjects.isFedoraGraphSubject(mockSubject)).thenReturn(true);\n        when(mockSession.getNode(mockSubjects.getPathFromSubject(mockSubject))).thenReturn(mockSubjectNode);\n        final String mockPropertyName = \"mock:property\";\n        when(\n                mockJcrRdfTools.getPropertyNameFromPredicate(mockSubjectNode,\n                        mockPredicate, mockNsMapping)).thenReturn(\n                mockPropertyName);\n        when(mockPropertiesTools.getPropertyType(mockSubjectNode, mockPropertyName))\n                .thenReturn(STRING);\n        testObj.addedStatement(mockStatement);\n        verify(mockProblems, times(0)).add(any(Resource.class), any(Property.class), any(String.class));\n        LOGGER.debug(\"Finished testAddedStatement()\");\n    }"
    },
    "aSource": {
      "startLine": 154,
      "code": "@Test\n    public void testAddedStatement() throws RepositoryException {\n        mockStatic(JcrRdfTools.class);\n        when(mockSubjects.isFedoraGraphSubject(mockSubject)).thenReturn(true);\n        when(mockSubjects.getPathFromSubject(mockSubject)).thenReturn(\"/some/path\");\n        when(mockSession.getNode(\"/some/path\")).thenReturn(mockSubjectNode);\n        final String mockPropertyName = \"mock:property\";\n        when(\n                mockJcrRdfTools.getPropertyNameFromPredicate(mockSubjectNode,\n                        mockPredicate, mockNsMapping)).thenReturn(\n                mockPropertyName);\n        when(mockPropertiesTools.getPropertyType(mockSubjectNode, mockPropertyName))\n                .thenReturn(STRING);\n        testObj.addedStatement(mockStatement);\n        verify(mockProblems, times(0)).add(any(Resource.class), any(Property.class), any(String.class));\n        LOGGER.debug(\"Finished testAddedStatement()\");\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/JcrPropertyStatementListenerTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/JcrPropertyStatementListenerTest.java",
    "bCommit": "494ab59e9c",
    "aCommit": "327947533d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockSession.getNode(mockSubjects.getPathFromSubject(mockSubject))).thenReturn(mockSubjectNode);",
          "type": "DELETE",
          "lineNo": 158
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSubjects.getPathFromSubject(mockSubject)).thenReturn(\"/some/path\");",
          "type": "ADD",
          "lineNo": 158
        },
        {
          "line": "when(mockSession.getNode(\"/some/path\")).thenReturn(mockSubjectNode);",
          "type": "ADD",
          "lineNo": 159
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator mockSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockSubject"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockSubjectNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator mockSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockSubject"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockSubjectNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "when",
          "childCount": 1
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "when",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "when",
          "childCount": 1
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSubjectNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSubjectNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSession",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        166
      ]
    },
    "aCommitTime": 1406573030,
    "ID": "fcrepo/fcrepo:129",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.JcrPropertyStatementListenerTest.testAddedProhibitedStatement()",
    "bSource": {
      "startLine": 141,
      "code": "@Test\n    public void testAddedProhibitedStatement() throws RepositoryException {\n        mockStatic(JcrRdfTools.class);\n        when(mockSubjects.isFedoraGraphSubject(mockSubject)).thenReturn(true);\n        when(mockSession.getNode(mockSubjects.getPathFromSubject(mockSubject)))\n                .thenReturn(mockSubjectNode);\n        when(mockJcrRdfTools.isInternalProperty(mockSubjectNode, mockPredicate)).thenReturn(true);\n\n        when(mockPredicate.getURI()).thenReturn(\"x\");\n        testObj.addedStatement(mockStatement);\n        verify(mockProblems).add(any(Resource.class), eq(COULD_NOT_STORE_PROPERTY), eq(\"x\"));\n    }"
    },
    "aSource": {
      "startLine": 141,
      "code": "@Test\n    public void testAddedProhibitedStatement() throws RepositoryException {\n        mockStatic(JcrRdfTools.class);\n        when(mockSubjects.isFedoraGraphSubject(mockSubject)).thenReturn(true);\n        when(mockSubjects.getPathFromSubject(mockSubject)).thenReturn(\"/some/path\");\n        when(mockSession.getNode(\"/some/path\")).thenReturn(mockSubjectNode);\n        when(mockJcrRdfTools.isInternalProperty(mockSubjectNode, mockPredicate)).thenReturn(true);\n\n        when(mockPredicate.getURI()).thenReturn(\"x\");\n        testObj.addedStatement(mockStatement);\n        verify(mockProblems).add(any(Resource.class), eq(COULD_NOT_STORE_PROPERTY), eq(\"x\"));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/JcrPropertyStatementListenerTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/JcrPropertyStatementListenerTest.java",
    "bCommit": "494ab59e9c",
    "aCommit": "327947533d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockSession.getNode(mockSubjects.getPathFromSubject(mockSubject)))",
          "type": "DELETE",
          "lineNo": 145
        },
        {
          "line": ".thenReturn(mockSubjectNode);",
          "type": "DELETE",
          "lineNo": 146
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSubjects.getPathFromSubject(mockSubject)).thenReturn(\"/some/path\");",
          "type": "ADD",
          "lineNo": 145
        },
        {
          "line": "when(mockSession.getNode(\"/some/path\")).thenReturn(mockSubjectNode);",
          "type": "ADD",
          "lineNo": 146
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator mockSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockSubject"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockSubjectNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator mockSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockSubject"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/some/path'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockSubjectNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "when",
          "childCount": 1
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "when",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "when",
          "childCount": 1
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSubjectNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSubjectNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSession",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        150
      ]
    },
    "aCommitTime": 1406573030,
    "ID": "fcrepo/fcrepo:130",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.JcrPropertyStatementListenerTest.testAddRdfTypeForNonMixin()",
    "bSource": {
      "startLine": 280,
      "code": "@Test\n    public void testAddRdfTypeForNonMixin() throws RepositoryException {\n\n        final Resource resource = createResource(\"xyz\");\n        when(mockSubjects.isFedoraGraphSubject(resource)).thenReturn(true);\n        when(mockSession.getNode(mockSubjects.getPathFromSubject(resource))).thenReturn(mockSubjectNode);\n\n        when(mockSubjectNode.getSession()).thenReturn(mockSession);\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockWorkspace.getNodeTypeManager()).thenReturn(mockNodeTypeManager);\n        when(mockNodeTypeManager.hasNodeType(\"fedora:object\")).thenReturn(false);\n\n\n        when(mockPropertiesTools.getPropertyType(mockSubjectNode, \"rdf:type\"))\n                .thenReturn(URI);\n\n        when(mockSession.getNamespacePrefix(RESTAPI_NAMESPACE))\n                .thenReturn(\"fedora\");\n        final Model model = createDefaultModel();\n        model.add(resource, type, model.createResource(RESTAPI_NAMESPACE + \"object\"));\n        when(mockSubjectNode.canAddMixin(\"fedora:object\")).thenReturn(true);\n        testObj.addedStatements(model);\n        verify(mockSubjectNode, never()).addMixin(\"fedora:object\");\n        verify(mockProblems, times(0)).add(any(Resource.class), any(Property.class), any(String.class));\n    }"
    },
    "aSource": {
      "startLine": 282,
      "code": "@Test\n    public void testAddRdfTypeForNonMixin() throws RepositoryException {\n\n        final Resource resource = createResource(\"xyz\");\n        when(mockSubjects.isFedoraGraphSubject(resource)).thenReturn(true);\n        when(mockSubjects.getPathFromSubject(resource)).thenReturn(\"/xyz\");\n        when(mockSession.getNode(\"/xyz\")).thenReturn(mockSubjectNode);\n\n        when(mockSubjectNode.getSession()).thenReturn(mockSession);\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockWorkspace.getNodeTypeManager()).thenReturn(mockNodeTypeManager);\n        when(mockNodeTypeManager.hasNodeType(\"fedora:object\")).thenReturn(false);\n\n\n        when(mockPropertiesTools.getPropertyType(mockSubjectNode, \"rdf:type\"))\n                .thenReturn(URI);\n\n        when(mockSession.getNamespacePrefix(RESTAPI_NAMESPACE))\n                .thenReturn(\"fedora\");\n        final Model model = createDefaultModel();\n        model.add(resource, type, model.createResource(RESTAPI_NAMESPACE + \"object\"));\n        when(mockSubjectNode.canAddMixin(\"fedora:object\")).thenReturn(true);\n        testObj.addedStatements(model);\n        verify(mockSubjectNode, never()).addMixin(\"fedora:object\");\n        verify(mockProblems, times(0)).add(any(Resource.class), any(Property.class), any(String.class));\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/JcrPropertyStatementListenerTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/JcrPropertyStatementListenerTest.java",
    "bCommit": "494ab59e9c",
    "aCommit": "327947533d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockSession.getNode(mockSubjects.getPathFromSubject(resource))).thenReturn(mockSubjectNode);",
          "type": "DELETE",
          "lineNo": 285
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSubjects.getPathFromSubject(resource)).thenReturn(\"/xyz\");",
          "type": "ADD",
          "lineNo": 287
        },
        {
          "line": "when(mockSession.getNode(\"/xyz\")).thenReturn(mockSubjectNode);",
          "type": "ADD",
          "lineNo": 288
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator mockSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource resource"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockSubjectNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator mockSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource resource"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/xyz'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/xyz'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockSubjectNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "when",
          "childCount": 1
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "when",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "when",
          "childCount": 1
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSubjectNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSubjectNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSession",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        303
      ]
    },
    "aCommitTime": 1406573030,
    "ID": "fcrepo/fcrepo:131",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.utils.JcrPropertyStatementListenerTest.testAddRdfType()",
    "bSource": {
      "startLine": 239,
      "code": "@Test\n    public void testAddRdfType() throws RepositoryException {\n\n        final Resource resource = createResource(\"xyz\");\n        when(mockSubjects.isFedoraGraphSubject(resource)).thenReturn(true);\n        when(mockSession.getNode(mockSubjects.getPathFromSubject(resource))).thenReturn(mockSubjectNode);\n\n        when(mockSubjectNode.getSession()).thenReturn(mockSession);\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockWorkspace.getNodeTypeManager()).thenReturn(mockNodeTypeManager);\n        when(mockNodeTypeManager.hasNodeType(\"fedora:object\")).thenReturn(true);\n\n        when(mockSession.getNamespacePrefix(RESTAPI_NAMESPACE))\n                .thenReturn(\"fedora\");\n        final Model model = ModelFactory.createDefaultModel();\n        model.add(resource, type, model.createResource(RESTAPI_NAMESPACE\n                + \"object\"));\n        when(mockSubjectNode.canAddMixin(\"fedora:object\")).thenReturn(true);\n        testObj.addedStatements(model);\n        verify(mockSubjectNode).addMixin(\"fedora:object\");\n    }"
    },
    "aSource": {
      "startLine": 240,
      "code": "@Test\n    public void testAddRdfType() throws RepositoryException {\n\n        final Resource resource = createResource(\"xyz\");\n        when(mockSubjects.isFedoraGraphSubject(resource)).thenReturn(true);\n        when(mockSubjects.getPathFromSubject(resource)).thenReturn(\"/xyz\");\n        when(mockSession.getNode(\"/xyz\")).thenReturn(mockSubjectNode);\n\n        when(mockSubjectNode.getSession()).thenReturn(mockSession);\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockWorkspace.getNodeTypeManager()).thenReturn(mockNodeTypeManager);\n        when(mockNodeTypeManager.hasNodeType(\"fedora:object\")).thenReturn(true);\n\n        when(mockSession.getNamespacePrefix(RESTAPI_NAMESPACE))\n                .thenReturn(\"fedora\");\n        final Model model = ModelFactory.createDefaultModel();\n        model.add(resource, type, model.createResource(RESTAPI_NAMESPACE\n                + \"object\"));\n        when(mockSubjectNode.canAddMixin(\"fedora:object\")).thenReturn(true);\n        testObj.addedStatements(model);\n        verify(mockSubjectNode).addMixin(\"fedora:object\");\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/JcrPropertyStatementListenerTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/utils/JcrPropertyStatementListenerTest.java",
    "bCommit": "494ab59e9c",
    "aCommit": "327947533d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockSession.getNode(mockSubjects.getPathFromSubject(resource))).thenReturn(mockSubjectNode);",
          "type": "DELETE",
          "lineNo": 244
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockSubjects.getPathFromSubject(resource)).thenReturn(\"/xyz\");",
          "type": "ADD",
          "lineNo": 245
        },
        {
          "line": "when(mockSession.getNode(\"/xyz\")).thenReturn(mockSubjectNode);",
          "type": "ADD",
          "lineNo": 246
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator mockSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource resource"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockSubjectNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator mockSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getPathFromSubject(Resource)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource resource"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/xyz'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/xyz'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockSubjectNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "when",
          "childCount": 1
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNode",
          "childCount": 2
        },
        "dstNode": {
          "label": "when",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "when",
          "childCount": 1
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSubjectNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSubjectNode",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSession",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockSession",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        258
      ]
    },
    "aCommitTime": 1406573030,
    "ID": "fcrepo/fcrepo:132",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.impl.FedoraResourceImplTest.shouldGetEtagForAnObject()",
    "bSource": {
      "startLine": 412,
      "code": "@Test\n    public void shouldGetEtagForAnObject() throws RepositoryException {\n        final Property mockMod = mock(Property.class);\n        final Calendar modDate = Calendar.getInstance();\n        modDate.set(2013, JULY, 30, 0, 0, 0);\n        when(mockNode.getPath()).thenReturn(\"some-path\");\n        when(mockNode.hasProperty(JCR_LASTMODIFIED)).thenReturn(true);\n        when(mockNode.getProperty(JCR_LASTMODIFIED)).thenReturn(mockMod);\n        when(mockMod.getDate()).thenReturn(modDate);\n\n        assertEquals(shaHex(\"some-path\"\n                + testObj.getLastModifiedDate().toString()), testObj\n                .getEtagValue());\n    }"
    },
    "aSource": {
      "startLine": 412,
      "code": "@Test\n    public void shouldGetEtagForAnObject() throws RepositoryException {\n        final Property mockMod = mock(Property.class);\n        final Calendar modDate = Calendar.getInstance();\n        modDate.set(2013, JULY, 30, 0, 0, 0);\n        when(mockNode.getPath()).thenReturn(\"some-path\");\n        when(mockNode.hasProperty(JCR_LASTMODIFIED)).thenReturn(true);\n        when(mockNode.getProperty(JCR_LASTMODIFIED)).thenReturn(mockMod);\n        when(mockMod.getDate()).thenReturn(modDate);\n\n        assertEquals(shaHex(\"some-path\"\n                + testObj.getLastModifiedDate().getTime()), testObj\n                .getEtagValue());\n    }"
    },
    "bPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/FedoraResourceImplTest.java",
    "bCommit": "e12bc00503",
    "aCommit": "2661dbfe4a",
    "hunk": {
      "sourceChanges": [
        {
          "line": "+ testObj.getLastModifiedDate().toString()), testObj",
          "type": "DELETE",
          "lineNo": 423
        }
      ],
      "targetChanges": [
        {
          "line": "+ testObj.getLastModifiedDate().getTime()), testObj",
          "type": "ADD",
          "lineNo": 423
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getLastModifiedDate()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResource testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getLastModifiedDate()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Date.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getEtagValue()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResource testObj"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "java.util.Date.getTime()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getLastModifiedDate()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResource testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getLastModifiedDate()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Date.getTime()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getEtagValue()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResource testObj"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toString",
          "childCount": 1
        },
        "dstNode": {
          "label": "getTime",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        422
      ]
    },
    "aCommitTime": 1406059083,
    "ID": "fcrepo/fcrepo:74",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.services.VersionServiceImplTest.testRevertToVersionByLabel()",
    "bSource": {
      "startLine": 221,
      "code": "@Test\n    public void testRevertToVersionByLabel() throws RepositoryException {\n        String versionLabel = \"v\";\n        VersionManager mockVersionManager = mock(VersionManager.class);\n        VersionHistory mockHistory = mock(VersionHistory.class);\n        Version mockVersion1 = mock(Version.class);\n        when(mockHistory.getVersionByLabel(versionLabel)).thenReturn(mockVersion1);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionManager.getVersionHistory(\"/example-versioned\")).thenReturn(mockHistory);\n\n        testObj.revertToVersion(mockWorkspace, \"/example-versioned\", versionLabel);\n        verify(mockVersionManager).restore(mockVersion1, true);\n\n        verify(mockVersionManager, never()).checkpoint(\"/example-versioned\");\n    }"
    },
    "aSource": {
      "startLine": 221,
      "code": "@Test\n    public void testRevertToVersionByLabel() throws RepositoryException {\n        String versionLabel = \"v\";\n        VersionManager mockVersionManager = mock(VersionManager.class);\n        VersionHistory mockHistory = mock(VersionHistory.class);\n        Version mockVersion1 = mock(Version.class);\n        when(mockHistory.hasVersionLabel(versionLabel)).thenReturn(true);\n        when(mockHistory.getVersionByLabel(versionLabel)).thenReturn(mockVersion1);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionManager.getVersionHistory(\"/example-versioned\")).thenReturn(mockHistory);\n\n        testObj.revertToVersion(mockWorkspace, \"/example-versioned\", versionLabel);\n        verify(mockVersionManager).restore(mockVersion1, true);\n\n        verify(mockVersionManager, never()).checkpoint(\"/example-versioned\");\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/VersionServiceImplTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/VersionServiceImplTest.java",
    "bCommit": "a2b4ba4e90",
    "aCommit": "fb7e86c792",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockHistory.hasVersionLabel(versionLabel)).thenReturn(true);",
          "type": "ADD",
          "lineNo": 227
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasVersionLabel(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionHistory mockHistory"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasVersionLabel(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String versionLabel"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        231
      ]
    },
    "aCommitTime": 1399492857,
    "ID": "fcrepo/fcrepo:587",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.services.VersionServiceImplTest.testRevertToVersionByLabelWithAutoVersioning()",
    "bSource": {
      "startLine": 274,
      "code": "@Test\n    public void testRevertToVersionByLabelWithAutoVersioning() throws RepositoryException {\n        String versionLabel = \"v\";\n        VersionManager mockVersionManager = mock(VersionManager.class);\n        VersionHistory mockHistory = mock(VersionHistory.class);\n        Version mockVersion1 = mock(Version.class);\n        when(mockHistory.getVersionByLabel(versionLabel)).thenReturn(mockVersion1);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionManager.getVersionHistory(\"/example-auto-versioned\")).thenReturn(mockHistory);\n\n        testObj.revertToVersion(mockWorkspace, \"/example-auto-versioned\", versionLabel);\n        verify(mockVersionManager).restore(mockVersion1, true);\n        verify(mockVersionManager).checkpoint(\"/example-auto-versioned\");\n    }"
    },
    "aSource": {
      "startLine": 275,
      "code": "@Test\n    public void testRevertToVersionByLabelWithAutoVersioning() throws RepositoryException {\n        String versionLabel = \"v\";\n        VersionManager mockVersionManager = mock(VersionManager.class);\n        VersionHistory mockHistory = mock(VersionHistory.class);\n        Version mockVersion1 = mock(Version.class);\n        when(mockHistory.hasVersionLabel(versionLabel)).thenReturn(true);\n        when(mockHistory.getVersionByLabel(versionLabel)).thenReturn(mockVersion1);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionManager.getVersionHistory(\"/example-auto-versioned\")).thenReturn(mockHistory);\n\n        testObj.revertToVersion(mockWorkspace, \"/example-auto-versioned\", versionLabel);\n        verify(mockVersionManager).restore(mockVersion1, true);\n        verify(mockVersionManager).checkpoint(\"/example-auto-versioned\");\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/VersionServiceImplTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/VersionServiceImplTest.java",
    "bCommit": "a2b4ba4e90",
    "aCommit": "fb7e86c792",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockHistory.hasVersionLabel(versionLabel)).thenReturn(true);",
          "type": "ADD",
          "lineNo": 281
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "hasVersionLabel(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.version.VersionHistory mockHistory"
        },
        {
          "type": "CtExecutableReference",
          "value": "hasVersionLabel(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String versionLabel"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        285
      ]
    },
    "aCommitTime": 1399492857,
    "ID": "fcrepo/fcrepo:588",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraTransactionsTest.shouldUpdateExpiryOnExistingTransaction()",
    "bSource": {
      "startLine": 85,
      "code": "@Test\n    public void\n            shouldUpdateExpiryOnExistingTransaction()\n                                                     throws RepositoryException {\n        when(mockTxService.getTransaction(\"123\")).thenReturn(mockTx);\n        testObj.createTransaction(createPathList(), mockRequest);\n        verify(mockTx).updateExpiryDate();\n    }"
    },
    "aSource": {
      "startLine": 87,
      "code": "@Test\n    public void\n            shouldUpdateExpiryOnExistingTransaction()\n                                                     throws RepositoryException {\n        when(mockTxService.getTransaction(Mockito.any(TxSession.class))).thenReturn(mockTx);\n        testObj.createTransaction(createPathList(), mockRequest);\n        verify(mockTx).updateExpiryDate();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraTransactionsTest.java",
    "bCommit": "cef5926859",
    "aCommit": "48d02ccdd1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockTxService.getTransaction(\"123\")).thenReturn(mockTx);",
          "type": "DELETE",
          "lineNo": 89
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockTxService.getTransaction(Mockito.any(TxSession.class))).thenReturn(mockTx);",
          "type": "ADD",
          "lineNo": 91
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtInvocation",
          "value": "when(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.TransactionService.getTransaction(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.TransactionService mockTxService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.TransactionService.getTransaction(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '123'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction mockTx"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.TransactionService.getTransaction(Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.TransactionService mockTxService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.TransactionService.getTransaction(Session)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Mockito"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction mockTx"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"123\"",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        91
      ]
    },
    "aCommitTime": 1399408601,
    "ID": "fcrepo/fcrepo:169",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testGetContent()",
    "bSource": {
      "startLine": 272,
      "code": "@Test\n    public void testGetContent() throws RepositoryException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String path = \"/\" + pid + \"/\" + dsId;\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Request mockRequest = mock(Request.class);\n        final Response actual =\n            testObj.getContent(createPathList(pid, dsId), null, mockRequest, mockResponse);\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        final String actualContent =\n            IOUtils.toString((InputStream) actual.getEntity());\n        assertEquals(\"http://localhost/fcrepo\" + path + \";rel=\\\"describedby\\\"\", actual\n                .getMetadata().getFirst(\"Link\"));\n        assertEquals(\"asdf\", actualContent);\n    }"
    },
    "aSource": {
      "startLine": 272,
      "code": "@Test\n    public void testGetContent() throws RepositoryException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String path = \"/\" + pid + \"/\" + dsId;\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Request mockRequest = mock(Request.class);\n        final Response actual =\n            testObj.getContent(createPathList(pid, dsId), null, mockRequest, mockResponse);\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        final String actualContent =\n            IOUtils.toString((InputStream) actual.getEntity());\n        assertEquals(\"<http://localhost/fcrepo\" + path + \">;rel=\\\"describedby\\\"\", actual\n                .getMetadata().getFirst(\"Link\"));\n        assertEquals(\"asdf\", actualContent);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "d0f1c2ffef",
    "aCommit": "2e543f73f3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(\"http://localhost/fcrepo\" + path + \";rel=\\\"describedby\\\"\", actual",
          "type": "DELETE",
          "lineNo": 290
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(\"<http://localhost/fcrepo\" + path + \">;rel=\\\"describedby\\\"\", actual",
          "type": "ADD",
          "lineNo": 290
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://localhost/fcrepo'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ';rel=\"describedby\"'"
        },
        {
          "type": "CtInvocation",
          "value": "getFirst(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getMetadata()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response actual"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '<http://localhost/fcrepo'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '>;rel=\"describedby\"'"
        },
        {
          "type": "CtInvocation",
          "value": "getFirst(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getMetadata()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response actual"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\";rel=\\\"describedby\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\">;rel=\\\"describedby\\\"\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"http://localhost/fcrepo\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"<http://localhost/fcrepo\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        290
      ]
    },
    "aCommitTime": 1398884174,
    "ID": "fcrepo/fcrepo:85",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testDescribeObject()",
    "bSource": {
      "startLine": 262,
      "code": "@Test\n    public void testDescribeObject() throws RepositoryException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n        when(mockObject.getLastModifiedDate()).thenReturn(mockDate);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockObject.getTriples(any(IdentifierTranslator.class))).thenReturn(\n                mockRdfStream);\n        when(mockObject.getHierarchyTriples(any(IdentifierTranslator.class),\n                                               any(HierarchyRdfContextOptions.class))).thenReturn(\n                mockRdfStream2);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n                .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final RdfStream rdfStream =\n            testObj.describe(createPathList(path), 0, -2, null, mockRequest,\n                    mockResponse, mockUriInfo);\n        assertEquals(\"Got wrong triples!\", mockRdfStream.concat(mockRdfStream2),\n                rdfStream);\n        verify(mockResponse).addHeader(\"Accept-Patch\", \"application/sparql-update\");\n        verify(mockResponse).addHeader(\"Link\", LDP_NAMESPACE + \"Resource;rel=\\\"type\\\"\");\n\n    }"
    },
    "aSource": {
      "startLine": 262,
      "code": "@Test\n    public void testDescribeObject() throws RepositoryException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n        when(mockObject.getLastModifiedDate()).thenReturn(mockDate);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockObject.getTriples(any(IdentifierTranslator.class))).thenReturn(\n                mockRdfStream);\n        when(mockObject.getHierarchyTriples(any(IdentifierTranslator.class),\n                                               any(HierarchyRdfContextOptions.class))).thenReturn(\n                mockRdfStream2);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n                .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final RdfStream rdfStream =\n            testObj.describe(createPathList(path), 0, -2, null, mockRequest,\n                    mockResponse, mockUriInfo);\n        assertEquals(\"Got wrong triples!\", mockRdfStream.concat(mockRdfStream2),\n                rdfStream);\n        verify(mockResponse).addHeader(\"Accept-Patch\", \"application/sparql-update\");\n        verify(mockResponse).addHeader(\"Link\", \"<\" + LDP_NAMESPACE + \"Resource>;rel=\\\"type\\\"\");\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "d0f1c2ffef",
    "aCommit": "2e543f73f3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockResponse).addHeader(\"Link\", LDP_NAMESPACE + \"Resource;rel=\\\"type\\\"\");",
          "type": "DELETE",
          "lineNo": 285
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockResponse).addHeader(\"Link\", \"<\" + LDP_NAMESPACE + \"Resource>;rel=\\\"type\\\"\");",
          "type": "ADD",
          "lineNo": 285
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "addHeader(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletResponse mockResponse"
        },
        {
          "type": "CtExecutableReference",
          "value": "addHeader(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Link'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Resource;rel=\"type\"'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "addHeader(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletResponse mockResponse"
        },
        {
          "type": "CtExecutableReference",
          "value": "addHeader(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Link'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '<'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Resource>;rel=\"type\"'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Resource;rel=\\\"type\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Resource>;rel=\\\"type\\\"\"",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "BinaryOperator",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        },
        "dstNode": {
          "label": "LDP_NAMESPACE",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        285
      ]
    },
    "aCommitTime": 1398884174,
    "ID": "fcrepo/fcrepo:86",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.generator.DublinCoreGeneratorIT.testWellKnownPathOaiDc()",
    "bSource": {
      "startLine": 69,
      "code": "@Test\n    public void testWellKnownPathOaiDc() throws Exception {\n\n        final String pid = randomUUID().toString();\n\n        HttpResponse response = client.execute(postObjMethod(pid));\n        assertEquals(201, response.getStatusLine().getStatusCode());\n        response = client.execute(postDSMethod(pid, \"DC\", \"marbles for everyone\"));\n        final int status = response.getStatusLine().getStatusCode();\n        if (status != 201) {\n            log.error(EntityUtils.toString(response.getEntity()));\n        }\n        assertEquals(201, status);\n\n        final HttpGet getWorstCaseOaiMethod = new HttpGet(serverOAIAddress + pid + \"/oai:dc\");\n        getWorstCaseOaiMethod.setHeader(\"Accept\", TEXT_XML);\n        response = client.execute(getWorstCaseOaiMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        final String content = EntityUtils.toString(response.getEntity());\n        assertTrue(\"Didn't find our datastream!\", compile(\"marbles for everyone\", DOTALL).matcher(content).find());\n    }"
    },
    "aSource": {
      "startLine": 68,
      "code": "@Test\n    public void testWellKnownPathOaiDc() throws Exception {\n\n        final String pid = randomUUID().toString();\n\n        createObject(pid);\n\n        HttpResponse response = client.execute(postDSMethod(pid, \"DC\", \"marbles for everyone\"));\n        final int status = response.getStatusLine().getStatusCode();\n        if (status != 201) {\n            log.error(EntityUtils.toString(response.getEntity()));\n        }\n        assertEquals(201, status);\n\n        final HttpGet getWorstCaseOaiMethod = new HttpGet(serverOAIAddress + pid + \"/oai:dc\");\n        getWorstCaseOaiMethod.setHeader(\"Accept\", TEXT_XML);\n        response = client.execute(getWorstCaseOaiMethod);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        final String content = EntityUtils.toString(response.getEntity());\n        assertTrue(\"Didn't find our datastream!\", compile(\"marbles for everyone\", DOTALL).matcher(content).find());\n    }"
    },
    "bPath": "fcrepo-generator-dc/src/test/java/org/fcrepo/integration/generator/DublinCoreGeneratorIT.java",
    "aPath": "fcrepo-generator-dc/src/test/java/org/fcrepo/integration/generator/DublinCoreGeneratorIT.java",
    "bCommit": "dafc946965",
    "aCommit": "7eb2a63f9d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "HttpResponse response = client.execute(postObjMethod(pid));",
          "type": "DELETE",
          "lineNo": 74
        },
        {
          "line": "assertEquals(201, response.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 75
        },
        {
          "line": "response = client.execute(postDSMethod(pid, \"DC\", \"marbles for everyone\"));",
          "type": "DELETE",
          "lineNo": 76
        }
      ],
      "targetChanges": [
        {
          "line": "createObject(pid);",
          "type": "ADD",
          "lineNo": 73
        },
        {
          "line": "HttpResponse response = client.execute(postDSMethod(pid, \"DC\", \"marbles for everyone\"));",
          "type": "ADD",
          "lineNo": 75
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.HttpResponse"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.generator.HttpPost)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.http.client.HttpClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.generator.HttpPost)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.generator.AbstractResourceIT.postObjMethod(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.generator.AbstractResourceIT.postObjMethod(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '201'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        },
        {
          "type": "CtVariableWrite",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.generator.HttpPost)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.http.client.HttpClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.generator.HttpPost)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.generator.AbstractResourceIT.postDSMethod(String,String,String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.generator.AbstractResourceIT.postDSMethod(String,String,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'DC'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'marbles for everyone'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.generator.AbstractResourceIT.createObject(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.generator.AbstractResourceIT.createObject(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.HttpResponse"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.generator.HttpPost)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.http.client.HttpClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.generator.HttpPost)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.generator.AbstractResourceIT.postDSMethod(String,String,String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.generator.AbstractResourceIT.postDSMethod(String,String,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'DC'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'marbles for everyone'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "postObjMethod",
          "childCount": 2
        },
        "dstNode": {
          "label": "createObject",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "response",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Assignment",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "=",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "response",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "postObjMethod",
          "childCount": 2
        },
        "dstNode": {
          "label": "createObject",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Assignment",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "execute",
          "childCount": 2
        },
        "dstNode": {
          "label": "execute",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        74
      ]
    },
    "aCommitTime": 1398732818,
    "ID": "fcrepo/fcrepo:247",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.webhooks.FedoraWebhooksIT.testFireWebhooks()",
    "bSource": {
      "startLine": 100,
      "code": "@Test\n    public void testFireWebhooks() throws IOException {\n\n        final HttpPost method =\n                new HttpPost(serverAddress + \"/fcr:webhooks/callback_id\");\n\n        final List<NameValuePair> formparams = new ArrayList<>();\n\n        formparams.add(new BasicNameValuePair(\"callbackUrl\", serverAddress +\n                \"/dummy\"));\n        final UrlEncodedFormEntity entity =\n                new UrlEncodedFormEntity(formparams, \"UTF-8\");\n        method.setEntity(entity);\n\n        assertEquals(201, getStatus(method));\n\n        final HttpPost create_method =\n                new HttpPost(serverAddress + \"/rest/\");\n        assertEquals(201, getStatus(create_method));\n\n        try {\n            for (int i = 0; i < 200; i++) {\n\n                sleep(200);\n\n                if (lastBody != null) {\n                    break;\n                }\n            }\n        } catch (final InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        logger.debug(lastBody);\n\n        assertNotNull(\"Our webhook wasn't called!\", lastBody);\n        assertTrue(\"Our webhook didn't have the content we expected!\", lastBody.contains(EventType.valueOf(NODE_ADDED)\n                .getName()));\n\n    }"
    },
    "aSource": {
      "startLine": 100,
      "code": "@Test\n    public void testFireWebhooks() throws IOException {\n\n        final HttpPost method =\n                new HttpPost(serverAddress + \"/fcr:webhooks/callback_id\");\n\n        final List<NameValuePair> formparams = new ArrayList<>();\n\n        formparams.add(new BasicNameValuePair(\"callbackUrl\", serverAddress +\n                \"/dummy\"));\n        final UrlEncodedFormEntity entity =\n                new UrlEncodedFormEntity(formparams, \"UTF-8\");\n        method.setEntity(entity);\n\n        assertEquals(201, getStatus(method));\n\n        final HttpPost create_method =\n                new HttpPost(serverAddress);\n        assertEquals(201, getStatus(create_method));\n\n        try {\n            for (int i = 0; i < 200; i++) {\n\n                sleep(200);\n\n                if (lastBody != null) {\n                    break;\n                }\n            }\n        } catch (final InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        logger.debug(lastBody);\n\n        assertNotNull(\"Our webhook wasn't called!\", lastBody);\n        assertTrue(\"Our webhook didn't have the content we expected!\", lastBody.contains(EventType.valueOf(NODE_ADDED)\n                .getName()));\n\n    }"
    },
    "bPath": "fcrepo-webhooks/src/test/java/org/fcrepo/integration/webhooks/FedoraWebhooksIT.java",
    "aPath": "fcrepo-webhooks/src/test/java/org/fcrepo/integration/webhooks/FedoraWebhooksIT.java",
    "bCommit": "dafc946965",
    "aCommit": "7eb2a63f9d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "new HttpPost(serverAddress + \"/rest/\");",
          "type": "DELETE",
          "lineNo": 117
        }
      ],
      "targetChanges": [
        {
          "line": "new HttpPost(serverAddress);",
          "type": "ADD",
          "lineNo": 117
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.apache.http.client.methods.HttpPost(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpPost"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/rest/'"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.apache.http.client.methods.HttpPost(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.client.methods.HttpPost"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "BinaryOperator",
        "parents": [
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "serverAddress",
          "childCount": 0
        },
        "dstNode": {
          "label": "serverAddress",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        118
      ]
    },
    "aCommitTime": 1398732818,
    "ID": "fcrepo/fcrepo:248",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.services.LowLevelStorageServiceIT.testGetBinaryBlobs()",
    "bSource": {
      "startLine": 58,
      "code": "@Test\n    public void testGetBinaryBlobs() throws Exception {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testLLObject/testRepositoryContent\", \"image/tiff\",\n                null, new ByteArrayInputStream(\n                        \"0123456789987654321012345678900987654321\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testLLObject/testRepositoryContent\");\n\n        final Iterator<LowLevelCacheEntry> inputStreamList =\n            lowLevelService.getLowLevelCacheEntries(\n                    ds.getNode().getNode(JCR_CONTENT)).iterator();\n\n        int i = 0;\n        while (inputStreamList.hasNext()) {\n            final InputStream is = inputStreamList.next().getInputStream();\n\n            final String myString = IOUtils.toString(is, \"UTF-8\");\n\n            assertEquals(\"0123456789987654321012345678900987654321\", myString);\n\n            i++;\n        }\n\n        assertNotEquals(0, i);\n\n    }"
    },
    "aSource": {
      "startLine": 58,
      "code": "@Test\n    public void testGetBinaryBlobs() throws Exception {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastream(session,\n                \"/testLLObject/testRepositoryContent\", \"image/tiff\",\n                null, new ByteArrayInputStream(\n                        \"0123456789987654321012345678900987654321\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testLLObject/testRepositoryContent\");\n\n        final Iterator<LowLevelCacheEntry> inputStreamList =\n            lowLevelService.getLowLevelCacheEntries(\n                    ds.getNode().getNode(JCR_CONTENT)).iterator();\n\n        int i = 0;\n        while (inputStreamList.hasNext()) {\n            final InputStream is = inputStreamList.next().getInputStream();\n\n            final String myString = IOUtils.toString(is, \"UTF-8\");\n\n            assertEquals(\"0123456789987654321012345678900987654321\", myString);\n\n            i++;\n        }\n\n        assertNotEquals(0, i);\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/LowLevelStorageServiceIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/LowLevelStorageServiceIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 62
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 62
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        62
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:39",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.services.RepositoryServiceImplIT.testGetAllObjectsDatastreamSize()",
    "bSource": {
      "startLine": 62,
      "code": "@Test\n    public void testGetAllObjectsDatastreamSize() throws Exception {\n        Session session = repository.login();\n\n        final double originalSize = repositoryService.getRepositorySize();\n\n        datastreamService.createDatastreamNode(session,\n                \"testObjectServiceNode\", \"application/octet-stream\",\n                null, new ByteArrayInputStream(\"asdf\".getBytes()));\n        session.save();\n        session.logout();\n\n        session = repository.login();\n\n        final double afterSize = repositoryService.getRepositorySize();\n\n        assertEquals(4.0, afterSize - originalSize);\n\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 62,
      "code": "@Test\n    public void testGetAllObjectsDatastreamSize() throws Exception {\n        Session session = repository.login();\n\n        final double originalSize = repositoryService.getRepositorySize();\n\n        datastreamService.createDatastream(session,\n                \"testObjectServiceNode\", \"application/octet-stream\",\n                null, new ByteArrayInputStream(\"asdf\".getBytes()));\n        session.save();\n        session.logout();\n\n        session = repository.login();\n\n        final double afterSize = repositoryService.getRepositorySize();\n\n        assertEquals(4.0, afterSize - originalSize);\n\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/RepositoryServiceImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/RepositoryServiceImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 68
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 68
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        68
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:40",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.services.RepositoryServiceImplIT.testRestoreRepository()",
    "bSource": {
      "startLine": 134,
      "code": "@Test\n    public void testRestoreRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.createDatastreamNode(session, \"testObjectServiceNode1\", \"application/octet-stream\", null,\n                new ByteArrayInputStream(\"asdfy\".getBytes()));\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        repositoryService.backupRepository(session, backupDirectory);\n\n        final Problems problems = repositoryService.restoreRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 134,
      "code": "@Test\n    public void testRestoreRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.createDatastream(session, \"testObjectServiceNode1\", \"application/octet-stream\", null,\n                new ByteArrayInputStream(\"asdfy\".getBytes()));\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        repositoryService.backupRepository(session, backupDirectory);\n\n        final Problems problems = repositoryService.restoreRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/RepositoryServiceImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/RepositoryServiceImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session, \"testObjectServiceNode1\", \"application/octet-stream\", null,",
          "type": "DELETE",
          "lineNo": 138
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session, \"testObjectServiceNode1\", \"application/octet-stream\", null,",
          "type": "ADD",
          "lineNo": 138
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        138
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:41",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.services.RepositoryServiceImplIT.testBackupRepository()",
    "bSource": {
      "startLine": 118,
      "code": "@Test\n    public void testBackupRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.createDatastreamNode(session, \"testObjectServiceNode0\", \"application/octet-stream\", null,\n                new ByteArrayInputStream(\"asdfx\".getBytes()));\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        final Problems problems = repositoryService.backupRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 118,
      "code": "@Test\n    public void testBackupRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.createDatastream(session, \"testObjectServiceNode0\", \"application/octet-stream\", null,\n                new ByteArrayInputStream(\"asdfx\".getBytes()));\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        final Problems problems = repositoryService.backupRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/RepositoryServiceImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/RepositoryServiceImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session, \"testObjectServiceNode0\", \"application/octet-stream\", null,",
          "type": "DELETE",
          "lineNo": 122
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session, \"testObjectServiceNode0\", \"application/octet-stream\", null,",
          "type": "ADD",
          "lineNo": 122
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode0'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode0'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        122
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:42",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.DatastreamImplIT.testDatastreamContentWithChecksum()",
    "bSource": {
      "startLine": 145,
      "code": "@Test\n    public void testDatastreamContentWithChecksum() throws IOException,\n                                                   RepositoryException,\n                                                   InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testDatastreamObject/testDatastreamNode4\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()), ContentDigest.asURI(\"SHA-1\",\n                        \"3da541559918a808c2402bba5012f6c60b27661c\"));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode4\");\n        assertEquals(\"urn:sha1:3da541559918a808c2402bba5012f6c60b27661c\", ds\n                .getContentDigest().toString());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n    }"
    },
    "aSource": {
      "startLine": 145,
      "code": "@Test\n    public void testDatastreamContentWithChecksum() throws IOException,\n                                                   RepositoryException,\n                                                   InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastream(session,\n                \"/testDatastreamObject/testDatastreamNode4\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()), ContentDigest.asURI(\"SHA-1\",\n                        \"3da541559918a808c2402bba5012f6c60b27661c\"));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode4\");\n        assertEquals(\"urn:sha1:3da541559918a808c2402bba5012f6c60b27661c\", ds\n                .getContentDigest().toString());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 151
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 151
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream,URI)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream,URI)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream,URI)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream,URI)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 7
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 7
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        151
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:43",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.DatastreamImplIT.testModifyDatastreamContentDigestAndLength()",
    "bSource": {
      "startLine": 116,
      "code": "@Test\n    public void\n            testModifyDatastreamContentDigestAndLength() throws IOException,\n                                                        RepositoryException,\n                                                        InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testDatastreamObject/testDatastreamNode3\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode3\");\n\n        ds.setContent(new ByteArrayInputStream(\"0123456789\".getBytes()));\n\n        assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\", ds\n                .getContentDigest().toString());\n        assertEquals(10L, ds.getContentSize());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"0123456789\", contentString);\n    }"
    },
    "aSource": {
      "startLine": 116,
      "code": "@Test\n    public void\n            testModifyDatastreamContentDigestAndLength() throws IOException,\n                                                        RepositoryException,\n                                                        InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastream(session,\n                \"/testDatastreamObject/testDatastreamNode3\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode3\");\n\n        ds.setContent(new ByteArrayInputStream(\"0123456789\".getBytes()));\n\n        assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\", ds\n                .getContentDigest().toString());\n        assertEquals(10L, ds.getContentSize());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"0123456789\", contentString);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 123
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 123
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        123
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:44",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.DatastreamImplIT.testDatastreamContent()",
    "bSource": {
      "startLine": 69,
      "code": "@Test\n    public void testDatastreamContent() throws IOException,\n                                       RepositoryException,\n                                       InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testDatastreamObject/testDatastreamNode1\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode1\");\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n\n    }"
    },
    "aSource": {
      "startLine": 69,
      "code": "@Test\n    public void testDatastreamContent() throws IOException,\n                                       RepositoryException,\n                                       InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastream(session,\n                \"/testDatastreamObject/testDatastreamNode1\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode1\");\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 75
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 75
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        75
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:45",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.DatastreamImplIT.testDatastreamContentDigestAndLength()",
    "bSource": {
      "startLine": 91,
      "code": "@Test\n    public void testDatastreamContentDigestAndLength() throws IOException,\n                                                      RepositoryException,\n                                                      InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testDatastreamObject/testDatastreamNode2\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode2\");\n        assertEquals(\"urn:sha1:3da541559918a808c2402bba5012f6c60b27661c\", ds\n                .getContentDigest().toString());\n        assertEquals(4L, ds.getContentSize());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n    }"
    },
    "aSource": {
      "startLine": 91,
      "code": "@Test\n    public void testDatastreamContentDigestAndLength() throws IOException,\n                                                      RepositoryException,\n                                                      InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastream(session,\n                \"/testDatastreamObject/testDatastreamNode2\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode2\");\n        assertEquals(\"urn:sha1:3da541559918a808c2402bba5012f6c60b27661c\", ds\n                .getContentDigest().toString());\n        assertEquals(4L, ds.getContentSize());\n\n        final String contentString = IOUtils.toString(ds.getContent(), \"ASCII\");\n\n        assertEquals(\"asdf\", contentString);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 97
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 97
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        97
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:46",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.DatastreamImplIT.testDatastreamFileName()",
    "bSource": {
      "startLine": 170,
      "code": "@Test\n    public void testDatastreamFileName() throws RepositoryException, InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastreamNode(session,\n                                                  \"/testDatastreamObject/testDatastreamNode5\",\n                                                  \"application/octet-stream\",\n                                                  \"xyz.jpg\",\n                                                  new ByteArrayInputStream(\"asdf\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                                               \"/testDatastreamObject/testDatastreamNode5\");\n        final String filename = ds.getFilename();\n\n        assertEquals(\"xyz.jpg\", filename);\n\n    }"
    },
    "aSource": {
      "startLine": 170,
      "code": "@Test\n    public void testDatastreamFileName() throws RepositoryException, InvalidChecksumException {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastream(session,\n                                                  \"/testDatastreamObject/testDatastreamNode5\",\n                                                  \"application/octet-stream\",\n                                                  \"xyz.jpg\",\n                                                  new ByteArrayInputStream(\"asdf\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                                               \"/testDatastreamObject/testDatastreamNode5\");\n        final String filename = ds.getFilename();\n\n        assertEquals(\"xyz.jpg\", filename);\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 174
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 174
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        174
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:47",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.DatastreamImplIT.testCreatedDate()",
    "bSource": {
      "startLine": 51,
      "code": "@Test\n    public void testCreatedDate() throws RepositoryException, InvalidChecksumException {\n        Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testDatastreamObject/testDatastreamNode1\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n        session.save();\n        session.logout();\n        session = repo.login();\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode1\");\n        assertNotNull(\"Couldn't find created date on datastream!\", ds\n                .getCreatedDate());\n    }"
    },
    "aSource": {
      "startLine": 51,
      "code": "@Test\n    public void testCreatedDate() throws RepositoryException, InvalidChecksumException {\n        Session session = repo.login();\n        objectService.createObject(session, \"/testDatastreamObject\");\n        datastreamService.createDatastream(session,\n                \"/testDatastreamObject/testDatastreamNode1\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n        session.save();\n        session.logout();\n        session = repo.login();\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamObject/testDatastreamNode1\");\n        assertNotNull(\"Couldn't find created date on datastream!\", ds\n                .getCreatedDate());\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/DatastreamImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 55
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 55
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        55
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:48",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.services.DatastreamServiceImplIT.testCreateDatastreamNodeWithfilename()",
    "bSource": {
      "startLine": 77,
      "code": "@Test\n    public void testCreateDatastreamNodeWithfilename() throws Exception {\n        Session session = repository.login();\n        datastreamService.createDatastreamNode(session, \"/testDatastreamNode\",\n                                                  \"application/octet-stream\", \"xyz.jpg\", new ByteArrayInputStream(\"asdf\"\n                                                                                                           .getBytes()));\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"xyz.jpg\", session.getNode(\"/testDatastreamNode\").getNode(JCR_CONTENT).getProperty(PREMIS_FILE_NAME).getString());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 77,
      "code": "@Test\n    public void testCreateDatastreamNodeWithfilename() throws Exception {\n        Session session = repository.login();\n        datastreamService.createDatastream(session, \"/testDatastreamNode\",\n                                                  \"application/octet-stream\", \"xyz.jpg\", new ByteArrayInputStream(\"asdf\"\n                                                                                                           .getBytes()));\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"xyz.jpg\", session.getNode(\"/testDatastreamNode\").getNode(JCR_CONTENT).getProperty(PREMIS_FILE_NAME).getString());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session, \"/testDatastreamNode\",",
          "type": "DELETE",
          "lineNo": 80
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session, \"/testDatastreamNode\",",
          "type": "ADD",
          "lineNo": 80
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        80
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:49",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.services.DatastreamServiceImplIT.testGetDatastreamContentInputStream()",
    "bSource": {
      "startLine": 92,
      "code": "@Test\n    public void testGetDatastreamContentInputStream() throws Exception {\n        Session session = repository.login();\n        final InputStream is = new ByteArrayInputStream(\"asdf\".getBytes());\n        objectService.createObject(session, \"/testDatastreamServiceObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testDatastreamServiceObject/\" + \"testDatastreamNode\",\n                \"application/octet-stream\", null, is);\n\n        session.save();\n        session.logout();\n        session = repository.login();\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamServiceObject/\" + \"testDatastreamNode\");\n        assertEquals(\"asdf\", IOUtils.toString(ds.getContent(), \"UTF-8\"));\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 92,
      "code": "@Test\n    public void testGetDatastreamContentInputStream() throws Exception {\n        Session session = repository.login();\n        final InputStream is = new ByteArrayInputStream(\"asdf\".getBytes());\n        objectService.createObject(session, \"/testDatastreamServiceObject\");\n        datastreamService.createDatastream(session,\n                \"/testDatastreamServiceObject/\" + \"testDatastreamNode\",\n                \"application/octet-stream\", null, is);\n\n        session.save();\n        session.logout();\n        session = repository.login();\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testDatastreamServiceObject/\" + \"testDatastreamNode\");\n        assertEquals(\"asdf\", IOUtils.toString(ds.getContent(), \"UTF-8\"));\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 97
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 97
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        97
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:50",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.services.DatastreamServiceImplIT.testChecksumBlobs()",
    "bSource": {
      "startLine": 111,
      "code": "@Test\n    public void testChecksumBlobs() throws Exception {\n\n        final Session session = repository.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testLLObject/testRepositoryContent\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\n                        \"01234567890123456789012345678901234567890123456789\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session, \"/testLLObject/\"\n                    + \"testRepositoryContent\");\n\n        final Collection<FixityResult> fixityResults =\n            datastreamService.getFixity(ds.getNode().getNode(JCR_CONTENT), ds\n                    .getContentDigest(), ds.getContentSize());\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:9578f951955d37f20b601c26591e260c1e5389bf\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 111,
      "code": "@Test\n    public void testChecksumBlobs() throws Exception {\n\n        final Session session = repository.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastream(session,\n                \"/testLLObject/testRepositoryContent\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\n                        \"01234567890123456789012345678901234567890123456789\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session, \"/testLLObject/\"\n                    + \"testRepositoryContent\");\n\n        final Collection<FixityResult> fixityResults =\n            datastreamService.getFixity(ds.getNode().getNode(JCR_CONTENT), ds\n                    .getContentDigest(), ds.getContentSize());\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:9578f951955d37f20b601c26591e260c1e5389bf\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 116
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 116
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        116
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:51",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.services.DatastreamServiceImplIT.testCreateDatastreamNode()",
    "bSource": {
      "startLine": 61,
      "code": "@Test\n    public void testCreateDatastreamNode() throws Exception {\n        Session session = repository.login();\n        datastreamService.createDatastreamNode(session, \"/testDatastreamNode\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"asdf\", session.getNode(\"/testDatastreamNode\").getNode(\n                JCR_CONTENT).getProperty(JCR_DATA).getString());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 61,
      "code": "@Test\n    public void testCreateDatastreamNode() throws Exception {\n        Session session = repository.login();\n        datastreamService.createDatastream(session, \"/testDatastreamNode\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\"asdf\"\n                        .getBytes()));\n        session.save();\n        session.logout();\n        session = repository.login();\n\n        assertTrue(session.getRootNode().hasNode(\"testDatastreamNode\"));\n        assertEquals(\"asdf\", session.getNode(\"/testDatastreamNode\").getNode(\n                JCR_CONTENT).getProperty(JCR_DATA).getString());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session, \"/testDatastreamNode\",",
          "type": "DELETE",
          "lineNo": 64
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session, \"/testDatastreamNode\",",
          "type": "ADD",
          "lineNo": 64
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/testDatastreamNode'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        64
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:52",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.services.DatastreamServiceImplIT.testChecksumBlobsForInMemoryValues()",
    "bSource": {
      "startLine": 139,
      "code": "@Test\n    public void testChecksumBlobsForInMemoryValues() throws Exception {\n\n        final Session session = repository.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastreamNode(session,\n                                                  \"/testLLObject/testMemoryContent\",\n                                                  \"application/octet-stream\",\n                                                  null,\n                                                  new ByteArrayInputStream(\"0123456789\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session, \"/testLLObject/\"\n                                                         + \"testMemoryContent\");\n\n        final Collection<FixityResult> fixityResults =\n            datastreamService.getFixity(ds.getNode().getNode(JCR_CONTENT), ds\n                                                                               .getContentDigest(), ds.getContentSize());\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 139,
      "code": "@Test\n    public void testChecksumBlobsForInMemoryValues() throws Exception {\n\n        final Session session = repository.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastream(session,\n                                                  \"/testLLObject/testMemoryContent\",\n                                                  \"application/octet-stream\",\n                                                  null,\n                                                  new ByteArrayInputStream(\"0123456789\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session, \"/testLLObject/\"\n                                                         + \"testMemoryContent\");\n\n        final Collection<FixityResult> fixityResults =\n            datastreamService.getFixity(ds.getNode().getNode(JCR_CONTENT), ds\n                                                                               .getContentDigest(), ds.getContentSize());\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceImplIT.java",
    "bCommit": "ca5ddbfa00",
    "aCommit": "1025757f59",
    "hunk": {
      "sourceChanges": [
        {
          "line": "datastreamService.createDatastreamNode(session,",
          "type": "DELETE",
          "lineNo": 144
        }
      ],
      "targetChanges": [
        {
          "line": "datastreamService.createDatastream(session,",
          "type": "ADD",
          "lineNo": 144
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastreamNode(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService datastreamService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.createDatastream(Session,String,String,String,InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDatastreamNode",
          "childCount": 6
        },
        "dstNode": {
          "label": "createDatastream",
          "childCount": 6
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        144
      ]
    },
    "aCommitTime": 1397871503,
    "ID": "fcrepo/fcrepo:53",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraContentIT.testAddDatastream()",
    "bSource": {
      "startLine": 48,
      "code": "@Test\n    public void testAddDatastream() throws Exception {\n        final HttpPost objMethod = postObjMethod(\"FedoraDatastreamsTest2\");\n        assertEquals(201, getStatus(objMethod));\n        final HttpPost method =\n                postDSMethod(\"FedoraDatastreamsTest2\", \"zxc\", \"foo\");\n        final HttpResponse response = client.execute(method);\n        final String location = response.getFirstHeader(\"Location\").getValue();\n        assertEquals(201, response.getStatusLine().getStatusCode());\n        assertEquals(\n                \"Got wrong URI in Location header for datastream creation!\",\n                serverAddress + \"FedoraDatastreamsTest2/zxc/fcr:content\", location);\n\n        assertTrue(\"Didn't find Last-Modified header!\", response.containsHeader(\"Last-Modified\"));\n        final String lastmod = response.getFirstHeader(\"Last-Modified\").getValue();\n        assertNotNull(\"Should set Last-Modified for new nodes\", lastmod);\n        assertNotEquals(\"Last-Modified should not be blank for new nodes\", lastmod.trim(), \"\");\n    }"
    },
    "aSource": {
      "startLine": 48,
      "code": "@Test\n    public void testAddDatastream() throws Exception {\n        final HttpPost objMethod = postObjMethod(\"FedoraDatastreamsTest2\");\n        assertEquals(201, getStatus(objMethod));\n        final HttpPost method =\n                postDSMethod(\"FedoraDatastreamsTest2\", \"zxc\", \"foo\");\n        final HttpResponse response = client.execute(method);\n        assertTrue(\"Didn't find Last-Modified header!\", response.containsHeader(\"Last-Modified\"));\n        assertTrue(\"Didn't find ETag header!\", response.containsHeader(\"ETag\"));\n        final String location = response.getFirstHeader(\"Location\").getValue();\n        assertEquals(201, response.getStatusLine().getStatusCode());\n        assertEquals(\n                \"Got wrong URI in Location header for datastream creation!\",\n                serverAddress + \"FedoraDatastreamsTest2/zxc/fcr:content\", location);\n\n        assertTrue(\"Didn't find Last-Modified header!\", response.containsHeader(\"Last-Modified\"));\n        final String lastmod = response.getFirstHeader(\"Last-Modified\").getValue();\n        assertNotNull(\"Should set Last-Modified for new nodes\", lastmod);\n        assertNotEquals(\"Last-Modified should not be blank for new nodes\", lastmod.trim(), \"\");\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraContentIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraContentIT.java",
    "bCommit": "9183bc18b1",
    "aCommit": "fdb0ff7f65",
    "hunk": {
      "targetChanges": [
        {
          "line": "assertTrue(\"Didn't find Last-Modified header!\", response.containsHeader(\"Last-Modified\"));",
          "type": "ADD",
          "lineNo": 55
        },
        {
          "line": "assertTrue(\"Didn't find ETag header!\", response.containsHeader(\"ETag\"));",
          "type": "ADD",
          "lineNo": 56
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Didn't find Last-Modified header!'"
        },
        {
          "type": "CtInvocation",
          "value": "containsHeader(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "containsHeader(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Last-Modified'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Didn't find ETag header!'"
        },
        {
          "type": "CtInvocation",
          "value": "containsHeader(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "containsHeader(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'ETag'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1397849606,
    "ID": "fcrepo/fcrepo:637",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraContentIT.testMutateDatastream()",
    "bSource": {
      "startLine": 130,
      "code": "@Test\n    public void testMutateDatastream() throws Exception {\n        final HttpPost createObjectMethod =\n                postObjMethod(\"FedoraDatastreamsTest3\");\n        assertEquals(\"Couldn't create an object!\", 201,\n                getStatus(createObjectMethod));\n\n        final HttpPost createDataStreamMethod =\n                postDSMethod(\"FedoraDatastreamsTest3\", \"ds1\", \"foo\");\n        assertEquals(\"Couldn't create a datastream!\", 201,\n                getStatus(createDataStreamMethod));\n\n        final HttpPut mutateDataStreamMethod =\n                putDSMethod(\"FedoraDatastreamsTest3\", \"ds1\", \"bar\");\n        mutateDataStreamMethod.setEntity(new StringEntity(faulkner1, \"UTF-8\"));\n        final HttpResponse response = client.execute(mutateDataStreamMethod);\n        final int status = response.getStatusLine().getStatusCode();\n        if (status != 204) {\n            logger.error(EntityUtils.toString(response.getEntity()));\n        }\n        assertEquals(\"Couldn't mutate a datastream!\", 204, status);\n\n        final HttpGet retrieveMutatedDataStreamMethod =\n                new HttpGet(serverAddress +\n                        \"FedoraDatastreamsTest3/ds1/fcr:content\");\n        assertTrue(\"Datastream didn't accept mutation!\", faulkner1\n                .equals(EntityUtils.toString(client.execute(\n                        retrieveMutatedDataStreamMethod).getEntity())));\n    }"
    },
    "aSource": {
      "startLine": 134,
      "code": "@Test\n    public void testMutateDatastream() throws Exception {\n        final HttpPost createObjectMethod =\n                postObjMethod(\"FedoraDatastreamsTest3\");\n        assertEquals(\"Couldn't create an object!\", 201,\n                getStatus(createObjectMethod));\n\n        final HttpPost createDataStreamMethod =\n                postDSMethod(\"FedoraDatastreamsTest3\", \"ds1\", \"foo\");\n        assertEquals(\"Couldn't create a datastream!\", 201,\n                getStatus(createDataStreamMethod));\n\n        final HttpPut mutateDataStreamMethod =\n                putDSMethod(\"FedoraDatastreamsTest3\", \"ds1\", \"bar\");\n        mutateDataStreamMethod.setEntity(new StringEntity(faulkner1, \"UTF-8\"));\n        final HttpResponse response = client.execute(mutateDataStreamMethod);\n        assertTrue(\"Didn't find Last-Modified header!\", response.containsHeader(\"Last-Modified\"));\n        assertTrue(\"Didn't find ETag header!\", response.containsHeader(\"ETag\"));\n        final int status = response.getStatusLine().getStatusCode();\n        if (status != 204) {\n            logger.error(EntityUtils.toString(response.getEntity()));\n        }\n        assertEquals(\"Couldn't mutate a datastream!\", 204, status);\n\n        final HttpGet retrieveMutatedDataStreamMethod =\n                new HttpGet(serverAddress +\n                        \"FedoraDatastreamsTest3/ds1/fcr:content\");\n        assertTrue(\"Datastream didn't accept mutation!\", faulkner1\n                .equals(EntityUtils.toString(client.execute(\n                        retrieveMutatedDataStreamMethod).getEntity())));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraContentIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraContentIT.java",
    "bCommit": "9183bc18b1",
    "aCommit": "fdb0ff7f65",
    "hunk": {
      "targetChanges": [
        {
          "line": "assertTrue(\"Didn't find Last-Modified header!\", response.containsHeader(\"Last-Modified\"));",
          "type": "ADD",
          "lineNo": 150
        },
        {
          "line": "assertTrue(\"Didn't find ETag header!\", response.containsHeader(\"ETag\"));",
          "type": "ADD",
          "lineNo": 151
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Didn't find Last-Modified header!'"
        },
        {
          "type": "CtInvocation",
          "value": "containsHeader(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "containsHeader(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Last-Modified'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Didn't find ETag header!'"
        },
        {
          "type": "CtInvocation",
          "value": "containsHeader(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "containsHeader(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'ETag'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1397849606,
    "ID": "fcrepo/fcrepo:638",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetSessionWithWorkspace()",
    "bSource": {
      "startLine": 101,
      "code": "@Test\n    public void testGetSessionWithWorkspace() throws LoginException,\n                                             RepositoryException {\n        when(mockRequest.getPathInfo()).thenReturn(\n                \"/workspace:some-workspace/some/path\");\n        testObj.getSession(mockRequest);\n        verify(mockRepo).login(any(ServletCredentials.class), eq(\"some-workspace\"));\n    }"
    },
    "aSource": {
      "startLine": 104,
      "code": "@Test\n    public void testGetSessionWithWorkspace() throws LoginException,\n                                             RepositoryException {\n        when(mockRequest.getPathInfo()).thenReturn(\n                \"/workspace:some-workspace/some/path\");\n        when(mockRepo.login(any(Credentials.class), any(String.class))).thenReturn(mockSession);\n        testObj.getSession(mockRequest);\n        verify(mockRepo).login(any(ServletCredentials.class), eq(\"some-workspace\"));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "8959c921f6",
    "aCommit": "a766c91460",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockRepo.login(any(Credentials.class), any(String.class))).thenReturn(mockSession);",
          "type": "ADD",
          "lineNo": 109
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "login()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Repository mockRepo"
        },
        {
          "type": "CtExecutableReference",
          "value": "login()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        109
      ]
    },
    "aCommitTime": 1397844217,
    "ID": "fcrepo/fcrepo:376",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetSessionAuthenticated()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testGetSessionAuthenticated() throws LoginException,\n                                             RepositoryException {\n        when(mockRequest.getUserPrincipal()).thenReturn(mockUser);\n        final HttpServletRequest mockRequest = mock(HttpServletRequest.class);\n        when(mockRequest.getPathInfo()).thenReturn(\"/some/path\");\n        testObj.getSession(mockRequest);\n        verify(mockRepo).login(any(Credentials.class));\n    }"
    },
    "aSource": {
      "startLine": 86,
      "code": "@Test\n    public void testGetSessionAuthenticated() throws LoginException,\n                                             RepositoryException {\n        when(mockRequest.getUserPrincipal()).thenReturn(mockUser);\n        final HttpServletRequest mockRequest = mock(HttpServletRequest.class);\n        when(mockRequest.getPathInfo()).thenReturn(\"/some/path\");\n        when(mockRepo.login(any(Credentials.class))).thenReturn(mockSession);\n        testObj.getSession(mockRequest);\n        verify(mockRepo).login(any(Credentials.class));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "8959c921f6",
    "aCommit": "a766c91460",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockRepo.login(any(Credentials.class))).thenReturn(mockSession);",
          "type": "ADD",
          "lineNo": 92
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "login()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Repository mockRepo"
        },
        {
          "type": "CtExecutableReference",
          "value": "login()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        92
      ]
    },
    "aCommitTime": 1397844217,
    "ID": "fcrepo/fcrepo:377",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetAuthenticatedSessionWithTransaction()",
    "bSource": {
      "startLine": 131,
      "code": "@Test\n    public void\n            testGetAuthenticatedSessionWithTransaction() throws RepositoryException {\n\n        when(mockRequest.getUserPrincipal()).thenReturn(mockUser);\n        when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(txSession);\n        when(mockTx.isAssociatedWithUser(Mockito.anyString())).thenReturn(true);\n        when(mockTxService.isAssociatedWithUser(Mockito.anyString(), Mockito.anyString())).thenReturn(true);\n        when(mockTxService.getTransaction(\"123\")).thenReturn(mockTx);\n\n        final Session session = testObj.getSession(mockRequest);\n        assertEquals(txSession, session);\n        verify(mockTx).getSession();\n    }"
    },
    "aSource": {
      "startLine": 137,
      "code": "@Test\n    public void\n            testGetAuthenticatedSessionWithTransaction() throws RepositoryException {\n\n        when(mockRequest.getUserPrincipal()).thenReturn(mockUser);\n        when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(txSession);\n        when(mockTx.isAssociatedWithUser(Mockito.anyString())).thenReturn(true);\n        when(mockTxService.isAssociatedWithUser(Mockito.anyString(), Mockito.anyString())).thenReturn(true);\n        when(mockTxService.getTransaction(\"123\")).thenReturn(mockTx);\n\n        final Session session = testObj.getSession(mockRequest);\n        assertEquals(txSession, ((LockReleasingSession) Proxy.getInvocationHandler(session)).getWrappedSession());\n        verify(mockTx).getSession();\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "8959c921f6",
    "aCommit": "a766c91460",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(txSession, session);",
          "type": "DELETE",
          "lineNo": 143
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(txSession, ((LockReleasingSession) Proxy.getInvocationHandler(session)).getWrappedSession());",
          "type": "ADD",
          "lineNo": 149
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session txSession"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.LockReleasingSession.getWrappedSession()"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.reflect.Proxy.getInvocationHandler(Object)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.LockReleasingSession"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.lang.reflect.Proxy"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.reflect.Proxy.getInvocationHandler(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.LockReleasingSession.getWrappedSession()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getWrappedSession",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "session",
          "childCount": 0
        },
        "dstNode": {
          "label": "session",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        149
      ]
    },
    "aCommitTime": 1397844217,
    "ID": "fcrepo/fcrepo:378",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetAuthenticatedSessionWithWorkspace()",
    "bSource": {
      "startLine": 119,
      "code": "@Test\n    public void\n            testGetAuthenticatedSessionWithWorkspace() throws LoginException,\n                                                      RepositoryException {\n\n        when(mockRequest.getUserPrincipal()).thenReturn(mockUser);\n        when(mockRequest.getPathInfo()).thenReturn(\n                \"/workspace:some-workspace/some/path\");\n        testObj.getSession(mockRequest);\n        verify(mockRepo).login(any(Credentials.class), eq(\"some-workspace\"));\n    }"
    },
    "aSource": {
      "startLine": 124,
      "code": "@Test\n    public void\n            testGetAuthenticatedSessionWithWorkspace() throws LoginException,\n                                                      RepositoryException {\n\n        when(mockRequest.getUserPrincipal()).thenReturn(mockUser);\n        when(mockRequest.getPathInfo()).thenReturn(\n                \"/workspace:some-workspace/some/path\");\n        when(mockRepo.login(any(Credentials.class), any(String.class))).thenReturn(mockSession);\n        testObj.getSession(mockRequest);\n        verify(mockRepo).login(any(Credentials.class), eq(\"some-workspace\"));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "8959c921f6",
    "aCommit": "a766c91460",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockRepo.login(any(Credentials.class), any(String.class))).thenReturn(mockSession);",
          "type": "ADD",
          "lineNo": 132
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "login()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Repository mockRepo"
        },
        {
          "type": "CtExecutableReference",
          "value": "login()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        132
      ]
    },
    "aCommitTime": 1397844217,
    "ID": "fcrepo/fcrepo:379",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetSessionWithNullPath()",
    "bSource": {
      "startLine": 76,
      "code": "@Test\n    public void testGetSessionWithNullPath() throws LoginException,\n                                            RepositoryException {\n        when(mockRequest.getPathInfo()).thenReturn(null);\n        testObj.getSession(mockRequest);\n        verify(mockRepo).login(any(ServletCredentials.class));\n    }"
    },
    "aSource": {
      "startLine": 77,
      "code": "@Test\n    public void testGetSessionWithNullPath() throws LoginException,\n                                            RepositoryException {\n        when(mockRequest.getPathInfo()).thenReturn(null);\n        when(mockRepo.login(any(Credentials.class))).thenReturn(mockSession);\n        testObj.getSession(mockRequest);\n        verify(mockRepo).login(any(ServletCredentials.class));\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "8959c921f6",
    "aCommit": "a766c91460",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockRepo.login(any(Credentials.class))).thenReturn(mockSession);",
          "type": "ADD",
          "lineNo": 81
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "login()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Repository mockRepo"
        },
        {
          "type": "CtExecutableReference",
          "value": "login()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        81
      ]
    },
    "aCommitTime": 1397844217,
    "ID": "fcrepo/fcrepo:380",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.session.SessionFactoryTest.testGetSessionWithTransaction()",
    "bSource": {
      "startLine": 110,
      "code": "@Test\n    public void testGetSessionWithTransaction() throws RepositoryException {\n        when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(mock(Session.class));\n        when(mockTxService.getTransaction(\"123\")).thenReturn(mockTx);\n        final Session session = testObj.getSession(mockRequest);\n        assertEquals(mockTx.getSession(), session);\n    }"
    },
    "aSource": {
      "startLine": 114,
      "code": "@Test\n    public void testGetSessionWithTransaction() throws RepositoryException {\n        when(mockRequest.getPathInfo()).thenReturn(\"/tx:123/some/path\");\n        when(mockTx.getSession()).thenReturn(mock(Session.class));\n        when(mockTxService.getTransaction(\"123\")).thenReturn(mockTx);\n        final Session session = testObj.getSession(mockRequest);\n        assertEquals(mockTx.getSession(),\n                ((LockReleasingSession) Proxy.getInvocationHandler(session)).getWrappedSession());\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/SessionFactoryTest.java",
    "bCommit": "8959c921f6",
    "aCommit": "a766c91460",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(mockTx.getSession(), session);",
          "type": "DELETE",
          "lineNo": 116
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(mockTx.getSession(),",
          "type": "ADD",
          "lineNo": 120
        },
        {
          "line": "((LockReleasingSession) Proxy.getInvocationHandler(session)).getWrappedSession());",
          "type": "ADD",
          "lineNo": 121
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Transaction.getSession()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction mockTx"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Transaction.getSession()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Transaction.getSession()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction mockTx"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Transaction.getSession()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.LockReleasingSession.getWrappedSession()"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.reflect.Proxy.getInvocationHandler(Object)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.LockReleasingSession"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.lang.reflect.Proxy"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.reflect.Proxy.getInvocationHandler(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.LockReleasingSession.getWrappedSession()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getWrappedSession",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "session",
          "childCount": 0
        },
        "dstNode": {
          "label": "session",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        120
      ]
    },
    "aCommitTime": 1397844217,
    "ID": "fcrepo/fcrepo:381",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.rdf.impl.HierarchyRdfContextTest.testParentTriples()",
    "bSource": {
      "startLine": 74,
      "code": "// for mocks and setup gear see after tests\n\n    @Test\n    public void testParentTriples() throws RepositoryException, IOException {\n        nodeIsContainer();\n        when(mockNode.hasNodes()).thenReturn(false);\n        // not really a child of the root node, but this is just for test\n        when(mockNode.getDepth()).thenReturn(1);\n        final Model actual = getResults();\n        logRdf(\"Retrieved RDF for testParentTriples(): \", actual);\n        assertTrue(\"Node doesn't have a parent!\", actual.contains(testSubject,\n                HAS_PARENT, testParentSubject));\n        assertTrue(\"Node doesn't have a parent!\", actual.contains(\n                testParentSubject, HAS_CHILD, testSubject));\n    }"
    },
    "aSource": {
      "startLine": 74,
      "code": "// for mocks and setup gear see after tests\n\n    @Test\n    public void testParentTriples() throws RepositoryException, IOException {\n        nodeIsContainer();\n        when(mockNode.hasNodes()).thenReturn(false);\n        // not really a child of the root node, but this is just for test\n        when(mockNode.getDepth()).thenReturn(1);\n        final Model actual = getResults();\n        logRdf(\"Retrieved RDF for testParentTriples(): \", actual);\n        assertTrue(\"Node doesn't have a parent!\", actual.contains(testSubject,\n                HAS_PARENT, testParentSubject));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/HierarchyRdfContextTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/HierarchyRdfContextTest.java",
    "bCommit": "0e2d3dc83d",
    "aCommit": "2d49b77a76",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(\"Node doesn't have a parent!\", actual.contains(",
          "type": "DELETE",
          "lineNo": 86
        },
        {
          "line": "testParentSubject, HAS_CHILD, testSubject));",
          "type": "DELETE",
          "lineNo": 87
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Node doesn't have a parent!'"
        },
        {
          "type": "CtInvocation",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,javax.jcr.Property,com.hp.hpl.jena.rdf.model.Resource)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource,javax.jcr.Property,com.hp.hpl.jena.rdf.model.Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource testParentSubject"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_CHILD"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource testSubject"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        86
      ]
    },
    "aCommitTime": 1397779053,
    "ID": "fcrepo/fcrepo:82",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.shouldIncludeFullChildNodeInformationInsideWindow()",
    "bSource": {
      "startLine": 308,
      "code": "@Test\n    public void shouldIncludeFullChildNodeInformationInsideWindow()\n        throws RepositoryException {\n        reset(mockChildNode, mockNodes, mockNode);\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockNode.getPath()).thenReturn(\"/test/jcr\");\n        when(mockNode.getNodes()).thenReturn(mockNodes);\n        when(mockNode.hasNodes()).thenReturn(true);\n        when(mockNode.getName()).thenReturn(\"mockNode\");\n        when(mockNode.getProperties()).thenReturn(mockProperties);\n        when(mockNode.getDepth()).thenReturn(0);\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(new NodeType[] { });\n        when(mockNodes.hasNext()).thenReturn(true, true, true, false);\n        when(mockNodes.next()).thenReturn(mockFullChildNode, mockFullChildNode, mockChildNode);\n        when(mockChildNode.getName()).thenReturn(\"some-name\");\n        when(mockChildNode.getPath()).thenReturn(\"/test/jcr/1\", \"/test/jcr/4\",\n                \"/test/jcr/5\");\n        when(mockFullChildNode.getName()).thenReturn(\"some-other-name\");\n        when(mockFullChildNode.getPath()).thenReturn(\"/test/jcr/2\",\n                \"/test/jcr/3\");\n        when(mockFullChildNode.getProperties()).thenReturn(mockProperties);\n        when(mockProperties.hasNext()).thenReturn(false);\n        when(mockNode.hasNodes()).thenReturn(true);\n        final HierarchyRdfContextOptions options = new HierarchyRdfContextOptions(2, 0, true, false);\n\n        final Model actual =\n            testObj.getTreeTriples(mockNode, options).asModel();\n        assertEquals(2, Iterators.size(actual\n                .listSubjectsWithProperty(HAS_PARENT)));\n        verify(mockChildNode, never()).getProperties();\n    }"
    },
    "aSource": {
      "startLine": 303,
      "code": "@Test\n    public void shouldIncludeFullChildNodeInformationInsideWindow()\n        throws RepositoryException {\n        reset(mockChildNode, mockNodes, mockNode);\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockNode.getPath()).thenReturn(\"/test/jcr\");\n        when(mockNode.getNodes()).thenReturn(mockNodes);\n        when(mockNode.hasNodes()).thenReturn(true);\n        when(mockNode.getName()).thenReturn(\"mockNode\");\n        when(mockNode.getProperties()).thenReturn(mockProperties);\n        when(mockNode.getDepth()).thenReturn(0);\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(new NodeType[] { });\n        when(mockNodes.hasNext()).thenReturn(true, true, true, false);\n        when(mockNodes.next()).thenReturn(mockFullChildNode, mockFullChildNode, mockChildNode);\n        when(mockChildNode.getName()).thenReturn(\"some-name\");\n        when(mockChildNode.getPath()).thenReturn(\"/test/jcr/1\", \"/test/jcr/4\",\n                \"/test/jcr/5\");\n        when(mockFullChildNode.getName()).thenReturn(\"some-other-name\");\n        when(mockFullChildNode.getPath()).thenReturn(\"/test/jcr/2\",\n                \"/test/jcr/3\");\n        when(mockFullChildNode.getProperties()).thenReturn(mockProperties);\n        when(mockProperties.hasNext()).thenReturn(false);\n        when(mockNode.hasNodes()).thenReturn(true);\n        final HierarchyRdfContextOptions options = new HierarchyRdfContextOptions(2, 0, true, false);\n\n        final Model actual =\n            testObj.getTreeTriples(mockNode, options).asModel();\n        assertEquals(2, Iterators.size(actual\n                .listObjectsOfProperty(testSubjects.getSubject(mockNode.getPath()), HAS_CHILD)));\n        verify(mockChildNode, never()).getProperties();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "0e2d3dc83d",
    "aCommit": "2d49b77a76",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".listSubjectsWithProperty(HAS_PARENT)));",
          "type": "DELETE",
          "lineNo": 337
        }
      ],
      "targetChanges": [
        {
          "line": ".listObjectsOfProperty(testSubjects.getSubject(mockNode.getPath()), HAS_CHILD)));",
          "type": "ADD",
          "lineNo": 332
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "listSubjectsWithProperty(com.hp.hpl.jena.rdf.model.Property)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_PARENT"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "listObjectsOfProperty(com.hp.hpl.jena.rdf.model.Property)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getSubject(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator testSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getSubject(String)"
        },
        {
          "type": "CtInvocation",
          "value": "getPath()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPath()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_CHILD"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "listSubjectsWithProperty",
          "childCount": 2
        },
        "dstNode": {
          "label": "listObjectsOfProperty",
          "childCount": 3
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.RdfLexicon$HAS_PARENT",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.RdfLexicon$HAS_CHILD",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        332
      ]
    },
    "aCommitTime": 1397779053,
    "ID": "fcrepo/fcrepo:83",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testCreateContentAtMintedPath()",
    "bSource": {
      "startLine": 170,
      "code": "@Test\n    public void testCreateContentAtMintedPath() throws RepositoryException, InvalidChecksumException,\n                                               URISyntaxException, ParseException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid;\n        final InputStream dsContentStream = IOUtils.toInputStream(dsContent);\n        when(mockNodeService.exists(mockSession, dsPath)).thenReturn(true);\n        when(mockMinter.mintPid()).thenReturn(\"xyz\");\n        setField(testObj, \"pidMinter\", mockMinter);\n        when(mockNode.isNew()).thenReturn(true);\n        when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContentNode);\n        when(mockContentNode.getPath()).thenReturn(dsPath + \"xyz/jcr:content\");\n        when(\n                mockDatastreams.createDatastreamNode(any(Session.class), eq(\"/\"\n                        + pid + \"/xyz\"), anyString(), eq((String)null), any(InputStream.class),\n                        eq((URI) null))).thenReturn(mockNode);\n        when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n        final Response actual =\n            testObj.create(createPathList(pid), null, null, null, TEXT_PLAIN_TYPE,\n                    dsContentStream);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockDatastreams).createDatastreamNode(mockSession,\n                \"/\" + pid + \"/xyz\", \"text/plain\", null, dsContentStream, null);\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 171,
      "code": "@Test\n    public void testCreateContentAtMintedPath() throws RepositoryException, InvalidChecksumException,\n                                               URISyntaxException, ParseException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid;\n        final InputStream dsContentStream = IOUtils.toInputStream(dsContent);\n        when(mockNodeService.exists(mockSession, dsPath)).thenReturn(true);\n        when(mockMinter.mintPid()).thenReturn(\"xyz\");\n        setField(testObj, \"pidMinter\", mockMinter);\n        when(mockNode.isNew()).thenReturn(true);\n        when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContentNode);\n        when(mockContentNode.getPath()).thenReturn(dsPath + \"xyz/jcr:content\");\n        when(\n                mockDatastreams.createDatastreamNode(any(Session.class), eq(\"/\"\n                        + pid + \"/xyz\"), anyString(), eq((String)null), any(InputStream.class),\n                        eq((URI) null))).thenReturn(mockNode);\n        when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n        final FedoraResource mockResource = mock(FedoraResource.class);\n        when(mockNodeService.getObject(mockSession,dsPath)).thenReturn(mockResource);\n        when(mockResource.hasContent()).thenReturn(false);\n\n        final Response actual =\n            testObj.create(createPathList(pid), null, null, null, TEXT_PLAIN_TYPE,\n                    dsContentStream);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockDatastreams).createDatastreamNode(mockSession,\n                \"/\" + pid + \"/xyz\", \"text/plain\", null, dsContentStream, null);\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "8696a72bb6",
    "aCommit": "311b19aa0f",
    "hunk": {
      "targetChanges": [
        {
          "line": "final FedoraResource mockResource = mock(FedoraResource.class);",
          "type": "ADD",
          "lineNo": 189
        },
        {
          "line": "when(mockNodeService.getObject(mockSession,dsPath)).thenReturn(mockResource);",
          "type": "ADD",
          "lineNo": 190
        },
        {
          "line": "when(mockResource.hasContent()).thenReturn(false);",
          "type": "ADD",
          "lineNo": 191
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource mockResource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraResource)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraResource)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraResource mockResource"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.hasContent()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraResource mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.hasContent()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockResource",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        190
      ]
    },
    "aCommitTime": 1397746627,
    "ID": "fcrepo/fcrepo:92",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testCreateContentWithSlug()",
    "bSource": {
      "startLine": 198,
      "code": "@Test\n    public void testCreateContentWithSlug() throws RepositoryException, InvalidChecksumException,\n                                           URISyntaxException, ParseException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsid = \"slug\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid;\n        final InputStream dsContentStream = IOUtils.toInputStream(dsContent);\n        when(mockNodeService.exists(mockSession, dsPath)).thenReturn(true);\n        setField(testObj, \"pidMinter\", mockMinter);\n        when(mockNode.isNew()).thenReturn(true);\n        when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContentNode);\n        when(mockContentNode.getPath()).thenReturn(dsPath + \"slug/jcr:content\");\n        when(\n                mockDatastreams.createDatastreamNode(any(Session.class), eq(\"/\"\n                                                                                + pid + \"/slug\"), anyString(), eq((String)null), any(InputStream.class),\n                                                        eq((URI) null))).thenReturn(mockNode);\n        when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n        final Response actual =\n            testObj.create(createPathList(pid), dsid, null, null, TEXT_PLAIN_TYPE,\n                              dsContentStream);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockDatastreams).createDatastreamNode(mockSession,\n                                                        \"/\" + pid + \"/slug\", \"text/plain\", null, dsContentStream, null);\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 203,
      "code": "@Test\n    public void testCreateContentWithSlug() throws RepositoryException, InvalidChecksumException,\n                                           URISyntaxException, ParseException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsid = \"slug\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid;\n        final InputStream dsContentStream = IOUtils.toInputStream(dsContent);\n        when(mockNodeService.exists(mockSession, dsPath)).thenReturn(true);\n        setField(testObj, \"pidMinter\", mockMinter);\n        when(mockNode.isNew()).thenReturn(true);\n        when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContentNode);\n        when(mockContentNode.getPath()).thenReturn(dsPath + \"slug/jcr:content\");\n        when(\n                mockDatastreams.createDatastreamNode(any(Session.class), eq(\"/\"\n                                                                                + pid + \"/slug\"), anyString(), eq((String)null), any(InputStream.class),\n                                                        eq((URI) null))).thenReturn(mockNode);\n        when(mockDatastreams.exists(mockSession, dsPath)).thenReturn(true);\n        final FedoraResource mockResource = mock(FedoraResource.class);\n        when(mockNodeService.getObject(mockSession,dsPath)).thenReturn(mockResource);\n        when(mockResource.hasContent()).thenReturn(false);\n        final Response actual =\n            testObj.create(createPathList(pid), dsid, null, null, TEXT_PLAIN_TYPE,\n                              dsContentStream);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockDatastreams).createDatastreamNode(mockSession,\n                                                        \"/\" + pid + \"/slug\", \"text/plain\", null, dsContentStream, null);\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "8696a72bb6",
    "aCommit": "311b19aa0f",
    "hunk": {
      "targetChanges": [
        {
          "line": "final FedoraResource mockResource = mock(FedoraResource.class);",
          "type": "ADD",
          "lineNo": 221
        },
        {
          "line": "when(mockNodeService.getObject(mockSession,dsPath)).thenReturn(mockResource);",
          "type": "ADD",
          "lineNo": 222
        },
        {
          "line": "when(mockResource.hasContent()).thenReturn(false);",
          "type": "ADD",
          "lineNo": 223
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource mockResource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraResource)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodeService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dsPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraResource)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraResource mockResource"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.hasContent()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraResource mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.hasContent()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockResource",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        222
      ]
    },
    "aCommitTime": 1397746627,
    "ID": "fcrepo/fcrepo:93",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testCreateChildObjectWithSlug()",
    "bSource": {
      "startLine": 235,
      "code": "@Test\n    public void testCreateChildObjectWithSlug() throws Exception {\n        setField(testObj, \"pidMinter\", mockPidMinter);\n\n        final String pid = \"testCreateChildObjectWithSlug\";\n        final String path = \"/\" + pid + \"/some-slug\";\n        when(mockNodes.exists(mockSession, \"/\" + pid)).thenReturn(true);\n        when(mockObjects.createObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockSession.getValueFactory()).thenReturn(mockValueFactory);\n        when(mockValueFactory.createValue(\"a\", PATH)).thenReturn(mockValue);\n\n        final Response actual =\n            testObj.createObject(createPathList(pid), FEDORA_OBJECT, null, null,\n                                    null, \"some-slug\", getUriInfoImpl(), null);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        assertTrue(actual.getEntity().toString().endsWith(\"some-slug\"));\n        verify(mockObjects).createObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 238,
      "code": "@Test\n    public void testCreateChildObjectWithSlug() throws Exception {\n        setField(testObj, \"pidMinter\", mockPidMinter);\n\n        final String pid = \"testCreateChildObjectWithSlug\";\n        final String path = \"/\" + pid + \"/some-slug\";\n        when(mockNodes.exists(mockSession, \"/\" + pid)).thenReturn(true);\n        when(mockObjects.createObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockSession.getValueFactory()).thenReturn(mockValueFactory);\n        when(mockValueFactory.createValue(\"a\", PATH)).thenReturn(mockValue);\n        when(mockNodes.getObject(mockSession,\"/\" + pid)).thenReturn(mockResource);\n        when(mockResource.hasContent()).thenReturn(false);\n\n        final Response actual =\n            testObj.createObject(createPathList(pid), FEDORA_OBJECT, null, null,\n                                    null, \"some-slug\", getUriInfoImpl(), null);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        assertTrue(actual.getEntity().toString().endsWith(\"some-slug\"));\n        verify(mockObjects).createObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "8696a72bb6",
    "aCommit": "311b19aa0f",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockNodes.getObject(mockSession,\"/\" + pid)).thenReturn(mockResource);",
          "type": "ADD",
          "lineNo": 250
        },
        {
          "line": "when(mockResource.hasContent()).thenReturn(false);",
          "type": "ADD",
          "lineNo": 251
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.hasContent()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.hasContent()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        252
      ]
    },
    "aCommitTime": 1397746627,
    "ID": "fcrepo/fcrepo:94",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testCreateChildObject()",
    "bSource": {
      "startLine": 212,
      "code": "@Test\n    public void testCreateChildObject() throws Exception {\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n        final String pid = \"testCreateChildObject\";\n        final String path = \"/\" + pid + \"/a\";\n        when(mockNodes.exists(mockSession, \"/\" + pid)).thenReturn(true);\n        when(mockPidMinter.mintPid()).thenReturn(\"a\");\n        when(mockObjects.createObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockSession.getValueFactory()).thenReturn(mockValueFactory);\n        when(mockValueFactory.createValue(\"a\", PATH)).thenReturn(mockValue);\n        final Response actual =\n            testObj.createObject(createPathList(pid), FEDORA_OBJECT, null, null,\n                                    null, null, getUriInfoImpl(), null);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        assertTrue(actual.getEntity().toString().endsWith(\"a\"));\n        verify(mockObjects).createObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 212,
      "code": "@Test\n    public void testCreateChildObject() throws Exception {\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n        final String pid = \"testCreateChildObject\";\n        final String path = \"/\" + pid + \"/a\";\n        when(mockNodes.exists(mockSession, \"/\" + pid)).thenReturn(true);\n        when(mockPidMinter.mintPid()).thenReturn(\"a\");\n        when(mockObjects.createObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        when(mockSession.getValueFactory()).thenReturn(mockValueFactory);\n        when(mockValueFactory.createValue(\"a\", PATH)).thenReturn(mockValue);\n        when(mockNodes.getObject(mockSession,\"/\" + pid)).thenReturn(mockResource);\n        when(mockResource.hasContent()).thenReturn(false);\n\n        final Response actual =\n            testObj.createObject(createPathList(pid), FEDORA_OBJECT, null, null,\n                                    null, null, getUriInfoImpl(), null);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        assertTrue(actual.getEntity().toString().endsWith(\"a\"));\n        verify(mockObjects).createObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "8696a72bb6",
    "aCommit": "311b19aa0f",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockNodes.getObject(mockSession,\"/\" + pid)).thenReturn(mockResource);",
          "type": "ADD",
          "lineNo": 225
        },
        {
          "line": "when(mockResource.hasContent()).thenReturn(false);",
          "type": "ADD",
          "lineNo": 226
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.hasContent()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.hasContent()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        226
      ]
    },
    "aCommitTime": 1397746627,
    "ID": "fcrepo/fcrepo:95",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testDescribeObject()",
    "bSource": {
      "startLine": 329,
      "code": "@Test\n    public void testDescribeObject() throws RepositoryException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n        when(mockObject.getLastModifiedDate()).thenReturn(mockDate);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockObject.getTriples(any(IdentifierTranslator.class))).thenReturn(\n                mockRdfStream);\n        when(mockObject.getHierarchyTriples(any(IdentifierTranslator.class))).thenReturn(\n                mockRdfStream2);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n                .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final RdfStream rdfStream =\n            testObj.describe(createPathList(path), 0, -2, null, mockRequest,\n                    mockResponse, mockUriInfo);\n        assertEquals(\"Got wrong triples!\", mockRdfStream.concat(mockRdfStream2),\n                rdfStream);\n        verify(mockResponse).addHeader(\"Accept-Patch\", \"application/sparql-update\");\n        verify(mockResponse).addHeader(\"Link\", LDP_NAMESPACE + \"Resource;rel=\\\"type\\\"\");\n\n    }"
    },
    "aSource": {
      "startLine": 333,
      "code": "@Test\n    public void testDescribeObject() throws RepositoryException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n        when(mockObject.getLastModifiedDate()).thenReturn(mockDate);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(mockObject.getTriples(any(IdentifierTranslator.class))).thenReturn(\n                mockRdfStream);\n        when(mockObject.getHierarchyTriples(any(IdentifierTranslator.class),\n                                               any(HierarchyRdfContextOptions.class))).thenReturn(\n                mockRdfStream2);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n                .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final RdfStream rdfStream =\n            testObj.describe(createPathList(path), 0, -2, null, mockRequest,\n                    mockResponse, mockUriInfo);\n        assertEquals(\"Got wrong triples!\", mockRdfStream.concat(mockRdfStream2),\n                rdfStream);\n        verify(mockResponse).addHeader(\"Accept-Patch\", \"application/sparql-update\");\n        verify(mockResponse).addHeader(\"Link\", LDP_NAMESPACE + \"Resource;rel=\\\"type\\\"\");\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "6b6dbc4e6c",
    "aCommit": "96302edada",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockObject.getHierarchyTriples(any(IdentifierTranslator.class))).thenReturn(",
          "type": "DELETE",
          "lineNo": 340
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockObject.getHierarchyTriples(any(IdentifierTranslator.class),",
          "type": "ADD",
          "lineNo": 344
        },
        {
          "line": "any(HierarchyRdfContextOptions.class))).thenReturn(",
          "type": "ADD",
          "lineNo": 345
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getHierarchyTriples(IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getHierarchyTriples(IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getHierarchyTriples(IdentifierTranslator,HierarchyRdfContextOptions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getHierarchyTriples(IdentifierTranslator,HierarchyRdfContextOptions)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        344
      ]
    },
    "aCommitTime": 1397691705,
    "ID": "fcrepo/fcrepo:321",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.FedoraResourceImplTest.testGetPropertiesDataset()",
    "bSource": {
      "startLine": 214,
      "code": "@Test\n    public void testGetPropertiesDataset() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final IdentifierTranslator mockSubjects = mock(IdentifierTranslator.class);\n\n        when(JcrRdfTools.withContext(mockSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n\n        when(mockSubjects.getSubject(mockNode.getPath())).thenReturn(mockResource);\n\n        final RdfStream propertiesStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(\n                propertiesStream);\n        final RdfStream treeStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(\n                treeStream);\n        final Model problemsModel = new RdfStream().asModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset =\n                testObj.getPropertiesDataset(mockSubjects, 0, -1);\n\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertEquals(mockResource, dataset.getContext().get(\n                Symbol.create(\"uri\")));\n    }"
    },
    "aSource": {
      "startLine": 218,
      "code": "@Test\n    public void testGetPropertiesDataset() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final IdentifierTranslator mockSubjects = mock(IdentifierTranslator.class);\n\n        when(JcrRdfTools.withContext(mockSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n\n        when(mockSubjects.getSubject(mockNode.getPath())).thenReturn(mockResource);\n\n        final RdfStream propertiesStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(\n                propertiesStream);\n        final RdfStream treeStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getTreeTriples(eq(mockNode),\n                                               any(HierarchyRdfContextOptions.class))).thenReturn(treeStream);\n        final Model problemsModel = new RdfStream().asModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset =\n                testObj.getPropertiesDataset(mockSubjects, 0, -1);\n\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertEquals(mockResource, dataset.getContext().get(\n                Symbol.create(\"uri\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceImplTest.java",
    "bCommit": "6b6dbc4e6c",
    "aCommit": "96302edada",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(",
          "type": "DELETE",
          "lineNo": 228
        },
        {
          "line": "treeStream);",
          "type": "DELETE",
          "lineNo": 229
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(eq(mockNode),",
          "type": "ADD",
          "lineNo": 232
        },
        {
          "line": "any(HierarchyRdfContextOptions.class))).thenReturn(treeStream);",
          "type": "ADD",
          "lineNo": 233
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream treeStream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools.getTreeTriples(Node,HierarchyRdfContextOptions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools.getTreeTriples(Node,HierarchyRdfContextOptions)"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream treeStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockNode",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        237
      ]
    },
    "aCommitTime": 1397691705,
    "ID": "fcrepo/fcrepo:322",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.FedoraResourceImplTest.testGetPropertiesDatasetDefaultLimits()",
    "bSource": {
      "startLine": 243,
      "code": "@Test\n    public void testGetPropertiesDatasetDefaultLimits()\n        throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final IdentifierTranslator mockSubjects = mock(IdentifierTranslator.class);\n        when(JcrRdfTools.withContext(mockSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n        when(mockSubjects.getSubject(mockNode.getPath())).thenReturn(mockResource);\n\n        final RdfStream propertiesStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(propertiesStream);\n        final RdfStream treeStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset = testObj.getPropertiesDataset(mockSubjects);\n\n        assertTrue(dataset.getDefaultModel().containsAll(treeStream.asModel()));\n\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertEquals(mockResource, dataset.getContext().get(Symbol.create(\"uri\")));\n    }"
    },
    "aSource": {
      "startLine": 247,
      "code": "@Test\n    public void testGetPropertiesDatasetDefaultLimits()\n        throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final IdentifierTranslator mockSubjects = mock(IdentifierTranslator.class);\n        when(JcrRdfTools.withContext(mockSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n        when(mockSubjects.getSubject(mockNode.getPath())).thenReturn(mockResource);\n\n        final RdfStream propertiesStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(propertiesStream);\n        final RdfStream treeStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getTreeTriples(eq(mockNode),\n                                               any(HierarchyRdfContextOptions.class))).thenReturn(treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset = testObj.getPropertiesDataset(mockSubjects);\n\n        assertTrue(dataset.getDefaultModel().containsAll(treeStream.asModel()));\n\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertEquals(mockResource, dataset.getContext().get(Symbol.create(\"uri\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceImplTest.java",
    "bCommit": "6b6dbc4e6c",
    "aCommit": "96302edada",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(treeStream);",
          "type": "DELETE",
          "lineNo": 255
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(eq(mockNode),",
          "type": "ADD",
          "lineNo": 259
        },
        {
          "line": "any(HierarchyRdfContextOptions.class))).thenReturn(treeStream);",
          "type": "ADD",
          "lineNo": 260
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream treeStream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools.getTreeTriples(Node,HierarchyRdfContextOptions)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.JcrRdfTools.getTreeTriples(Node,HierarchyRdfContextOptions)"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream treeStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "eq",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockNode",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        262
      ]
    },
    "aCommitTime": 1397691705,
    "ID": "fcrepo/fcrepo:323",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.shouldIncludeContainerInfoWithMixinTypeContainer()",
    "bSource": {
      "startLine": 276,
      "code": "@Test\n    public final void shouldIncludeContainerInfoWithMixinTypeContainer()\n        throws RepositoryException {\n        when(mockPrimaryNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {});\n        when(mockPrimaryNodeType.getName()).thenReturn(\"jcr:someType\");\n        when(mockMixinNodeType.getName()).thenReturn(\"jcr:mixin\");\n        when(mockMixinNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {mock(NodeDefinition.class)});\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockPrimaryNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockMixinNodeType});\n\n        when(mockPrimaryNodeType.getSupertypes()).thenReturn(new NodeType[] {mockNodeType});\n        when(mockMixinNodeType.getSupertypes()).thenReturn(new NodeType[] {mockNodeType});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n\n        when(mockNode.getDepth()).thenReturn(0);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getTreeTriples(mockNode).asModel();\n\n        assertTrue(actual.contains(testSubjects.getContext(), type, actual\n                .createProperty(LDP_NAMESPACE + \"Page\")));\n        assertTrue(actual.contains(testSubjects.getContext(), actual\n                .createProperty(LDP_NAMESPACE + \"membersInlined\"),\n                actual.createLiteral(TRUE.toString())));\n\n        final Resource graphSubject = testSubjects.getSubject(mockNode.getPath());\n        assertTrue(actual.contains(graphSubject, type, DIRECT_CONTAINER));\n\n        assertTrue(actual.contains(graphSubject, MEMBERSHIP_RESOURCE, graphSubject));\n        assertTrue(actual.contains(graphSubject, HAS_MEMBER_RELATION, HAS_CHILD));\n    }"
    },
    "aSource": {
      "startLine": 279,
      "code": "@Test\n    public final void shouldIncludeContainerInfoWithMixinTypeContainer()\n        throws RepositoryException {\n        when(mockPrimaryNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {});\n        when(mockPrimaryNodeType.getName()).thenReturn(\"jcr:someType\");\n        when(mockMixinNodeType.getName()).thenReturn(\"jcr:mixin\");\n        when(mockMixinNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {mock(NodeDefinition.class)});\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockPrimaryNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockMixinNodeType});\n\n        when(mockPrimaryNodeType.getSupertypes()).thenReturn(new NodeType[] {mockNodeType});\n        when(mockMixinNodeType.getSupertypes()).thenReturn(new NodeType[] {mockNodeType});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n\n        when(mockNode.getDepth()).thenReturn(0);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getTreeTriples(mockNode).asModel();\n\n        final Resource graphSubject = testSubjects.getSubject(mockNode.getPath());\n        assertTrue(actual.contains(graphSubject, type, DIRECT_CONTAINER));\n\n        assertTrue(actual.contains(graphSubject, MEMBERSHIP_RESOURCE, graphSubject));\n        assertTrue(actual.contains(graphSubject, HAS_MEMBER_RELATION, HAS_CHILD));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "6b6dbc4e6c",
    "aCommit": "96302edada",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(actual.contains(testSubjects.getContext(), type, actual",
          "type": "DELETE",
          "lineNo": 298
        },
        {
          "line": ".createProperty(LDP_NAMESPACE + \"Page\")));",
          "type": "DELETE",
          "lineNo": 299
        },
        {
          "line": "assertTrue(actual.contains(testSubjects.getContext(), actual",
          "type": "DELETE",
          "lineNo": 300
        },
        {
          "line": ".createProperty(LDP_NAMESPACE + \"membersInlined\"),",
          "type": "DELETE",
          "lineNo": 301
        },
        {
          "line": "actual.createLiteral(TRUE.toString())));",
          "type": "DELETE",
          "lineNo": 302
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getContext()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator testSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getContext()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfToolsTest type"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Page'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(com.hp.hpl.jena.rdf.model.Resource)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getContext()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator testSubjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getContext()"
        },
        {
          "type": "CtInvocation",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "createProperty(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String LDP_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'membersInlined'"
        },
        {
          "type": "CtInvocation",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "createLiteral(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Boolean.toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Boolean TRUE"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Boolean.toString()"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        301
      ]
    },
    "aCommitTime": 1397691705,
    "ID": "fcrepo/fcrepo:324",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraContentTest.testGetContent()",
    "bSource": {
      "startLine": 255,
      "code": "@Test\n    public void testGetContent() throws RepositoryException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String path = \"/\" + pid + \"/\" + dsId;\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Request mockRequest = mock(Request.class);\n        final Response actual =\n            testObj.getContent(createPathList(pid, dsId), null, mockRequest);\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        final String actualContent =\n            IOUtils.toString((InputStream) actual.getEntity());\n        assertEquals(\"http://localhost/fcrepo\" + path + \";rel=\\\"meta\\\"\", actual\n                .getMetadata().getFirst(\"Link\"));\n        assertEquals(\"asdf\", actualContent);\n    }"
    },
    "aSource": {
      "startLine": 255,
      "code": "@Test\n    public void testGetContent() throws RepositoryException, IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String path = \"/\" + pid + \"/\" + dsId;\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Request mockRequest = mock(Request.class);\n        final Response actual =\n            testObj.getContent(createPathList(pid, dsId), null, mockRequest);\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        final String actualContent =\n            IOUtils.toString((InputStream) actual.getEntity());\n        assertEquals(\"http://localhost/fcrepo\" + path + \";rel=\\\"describedby\\\"\", actual\n                .getMetadata().getFirst(\"Link\"));\n        assertEquals(\"asdf\", actualContent);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraContentTest.java",
    "bCommit": "6c9cdcaba6",
    "aCommit": "8eefe101b3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(\"http://localhost/fcrepo\" + path + \";rel=\\\"meta\\\"\", actual",
          "type": "DELETE",
          "lineNo": 273
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(\"http://localhost/fcrepo\" + path + \";rel=\\\"describedby\\\"\", actual",
          "type": "ADD",
          "lineNo": 273
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://localhost/fcrepo'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ';rel=\"meta\"'"
        },
        {
          "type": "CtInvocation",
          "value": "getFirst(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getMetadata()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response actual"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://localhost/fcrepo'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String path"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ';rel=\"describedby\"'"
        },
        {
          "type": "CtInvocation",
          "value": "getFirst(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getMetadata()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.ws.rs.core.Response actual"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\";rel=\\\"meta\\\"\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\";rel=\\\"describedby\\\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        273
      ]
    },
    "aCommitTime": 1397509334,
    "ID": "fcrepo/fcrepo:305",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraRepositoryNamespacesTest.testUpdateNamespaces()",
    "bSource": {
      "startLine": 75,
      "code": "@Test\n    public void testUpdateNamespaces() throws RepositoryException, IOException {\n\n        final Model model = createDefaultModel();\n        final Dataset mockDataset = DatasetFactory.create(model);\n        when(mockService.getNamespaceRegistryDataset(mockSession))\n                .thenReturn(mockDataset);\n\n        testObj.updateNamespaces(new ByteArrayInputStream(\n                \"INSERT { <http://example.com/this> <http://example.com/is> \\\"abc\\\"} WHERE { }\"\n                        .getBytes()));\n\n        assertEquals(1, model.size());\n    }"
    },
    "aSource": {
      "startLine": 77,
      "code": "@Test\n    public void testUpdateNamespaces() throws RepositoryException, IOException {\n\n        final Model model = createDefaultModel();\n        final Dataset mockDataset = DatasetFactory.create(model);\n        when(mockService.getNamespaceRegistryDataset(any(Session.class), any(IdentifierTranslator.class))).thenReturn(\n                mockDataset);\n\n        testObj.updateNamespaces(new ByteArrayInputStream(\n                \"INSERT { <http://example.com/this> <http://example.com/is> \\\"abc\\\"} WHERE { }\"\n                        .getBytes()));\n\n        assertEquals(1, model.size());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraRepositoryNamespacesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraRepositoryNamespacesTest.java",
    "bCommit": "95a825ef5e",
    "aCommit": "6c9cdcaba6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockService.getNamespaceRegistryDataset(mockSession))",
          "type": "DELETE",
          "lineNo": 80
        },
        {
          "line": ".thenReturn(mockDataset);",
          "type": "DELETE",
          "lineNo": 81
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockService.getNamespaceRegistryDataset(any(Session.class), any(IdentifierTranslator.class))).thenReturn(",
          "type": "ADD",
          "lineNo": 82
        },
        {
          "line": "mockDataset);",
          "type": "ADD",
          "lineNo": 83
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.RepositoryService mockService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session,IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.RepositoryService mockService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session,IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSession",
          "childCount": 1
        },
        "dstNode": {
          "label": "class",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.http.api.FedoraRepositoryNamespacesTest",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.IdentifierTranslator",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSession",
          "childCount": 1
        },
        "dstNode": {
          "label": "class",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        82
      ]
    },
    "aCommitTime": 1397499549,
    "ID": "fcrepo/fcrepo:235",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraRepositoryNamespacesTest.testGetNamespaces()",
    "bSource": {
      "startLine": 68,
      "code": "@Test\n    public void testGetNamespaces() throws RepositoryException {\n        when(mockService.getNamespaceRegistryStream(mockSession))\n                .thenReturn(testRdfStream);\n        assertEquals(testRdfStream, testObj.getNamespaces());\n    }"
    },
    "aSource": {
      "startLine": 70,
      "code": "@Test\n    public void testGetNamespaces() throws RepositoryException {\n        when(mockService.getNamespaceRegistryStream(any(Session.class), any(IdentifierTranslator.class)))\n                .thenReturn(testRdfStream);\n        assertEquals(testRdfStream, testObj.getNamespaces());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraRepositoryNamespacesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraRepositoryNamespacesTest.java",
    "bCommit": "95a825ef5e",
    "aCommit": "6c9cdcaba6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockService.getNamespaceRegistryStream(mockSession))",
          "type": "DELETE",
          "lineNo": 70
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockService.getNamespaceRegistryStream(any(Session.class), any(IdentifierTranslator.class)))",
          "type": "ADD",
          "lineNo": 72
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryStream(Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.RepositoryService mockService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryStream(Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryStream(Session,IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.RepositoryService mockService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryStream(Session,IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSession",
          "childCount": 1
        },
        "dstNode": {
          "label": "class",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.http.api.FedoraRepositoryNamespacesTest",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.IdentifierTranslator",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSession",
          "childCount": 1
        },
        "dstNode": {
          "label": "class",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        72
      ]
    },
    "aCommitTime": 1397499549,
    "ID": "fcrepo/fcrepo:236",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testBatchSparqlUpdate()",
    "bSource": {
      "startLine": 134,
      "code": "@Test\n    public void testBatchSparqlUpdate() throws Exception {\n        final String pid = \"FedoraDatastreamsTest1\";\n\n        when(mockNode.getPath()).thenReturn(\"/FedoraDatastreamsTest1\");\n        when(mockNodes.exists(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(true);\n        when(mockNodes.findOrCreateObject(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(mockObject);\n        when(mockSession.getNode(\"/FedoraDatastreamsTest1\")).thenReturn(\n                                                                           mockNode);\n\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\".\", IOUtils.toInputStream(\"xyz\"), null, MediaType.valueOf(contentTypeSPARQLUpdate));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=\\\".\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        testObj.batchModify(createPathList(pid), multipart);\n        verify(mockObject).updatePropertiesDataset(any(GraphSubjects.class), eq(\"xyz\"));\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 134,
      "code": "@Test\n    public void testBatchSparqlUpdate() throws Exception {\n        final String pid = \"FedoraDatastreamsTest1\";\n\n        when(mockNode.getPath()).thenReturn(\"/FedoraDatastreamsTest1\");\n        when(mockNodes.exists(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(true);\n        when(mockNodes.findOrCreateObject(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(mockObject);\n        when(mockSession.getNode(\"/FedoraDatastreamsTest1\")).thenReturn(\n                                                                           mockNode);\n\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\".\", IOUtils.toInputStream(\"xyz\"), null, MediaType.valueOf(contentTypeSPARQLUpdate));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=\\\".\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        testObj.batchModify(createPathList(pid), multipart);\n        verify(mockObject).updatePropertiesDataset(any(IdentifierTranslator.class), eq(\"xyz\"));\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "95a825ef5e",
    "aCommit": "6c9cdcaba6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockObject).updatePropertiesDataset(any(GraphSubjects.class), eq(\"xyz\"));",
          "type": "DELETE",
          "lineNo": 159
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockObject).updatePropertiesDataset(any(IdentifierTranslator.class), eq(\"xyz\"));",
          "type": "ADD",
          "lineNo": 159
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "updatePropertiesDataset()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "updatePropertiesDataset()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'xyz'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "updatePropertiesDataset()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "updatePropertiesDataset()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'xyz'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.GraphSubjects",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.IdentifierTranslator",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        159
      ]
    },
    "aCommitTime": 1397499549,
    "ID": "fcrepo/fcrepo:237",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testBatchRdfPost()",
    "bSource": {
      "startLine": 163,
      "code": "@Test\n    public void testBatchRdfPost() throws Exception {\n        final String pid = \"FedoraDatastreamsTest1\";\n\n        when(mockNode.getPath()).thenReturn(\"/FedoraDatastreamsTest1\");\n        when(mockNodes.exists(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(true);\n        when(mockNodes.findOrCreateObject(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockSession.getNode(\"/FedoraDatastreamsTest1\")).thenReturn(\n                                                                           mockNode);\n\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\".\", IOUtils.toInputStream(\"<> <info:a> 'xyz'\"), null, MediaType.valueOf(contentTypeTurtle));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=\\\".\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        testObj.batchModify(createPathList(pid), multipart);\n        final ArgumentCaptor<Model> captor = ArgumentCaptor.forClass(Model.class);\n        verify(mockObject).replaceProperties(any(GraphSubjects.class), captor.capture());\n        final Model capturedModel = captor.getValue();\n        assertTrue(capturedModel.contains(capturedModel.createResource(\"http://localhost/fcrepo/\" + pid),\n                                             capturedModel.createProperty(\"info:a\"),\n                                             capturedModel.createLiteral(\"xyz\")));\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 163,
      "code": "@Test\n    public void testBatchRdfPost() throws Exception {\n        final String pid = \"FedoraDatastreamsTest1\";\n\n        when(mockNode.getPath()).thenReturn(\"/FedoraDatastreamsTest1\");\n        when(mockNodes.exists(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(true);\n        when(mockNodes.findOrCreateObject(mockSession, \"/{}FedoraDatastreamsTest1\")).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockSession.getNode(\"/FedoraDatastreamsTest1\")).thenReturn(\n                                                                           mockNode);\n\n        final MultiPart multipart = new MultiPart();\n\n        final StreamDataBodyPart part = new StreamDataBodyPart(\".\", IOUtils.toInputStream(\"<> <info:a> 'xyz'\"), null, MediaType.valueOf(contentTypeTurtle));\n\n        try {\n            final FormDataContentDisposition cd =\n                new FormDataContentDisposition(\"form-data; name=\\\".\\\"\");\n            part.contentDisposition(cd);\n        } catch (final ParseException ex) {\n            ex.printStackTrace();\n        }\n\n        multipart.bodyPart(part);\n\n        testObj.batchModify(createPathList(pid), multipart);\n        final ArgumentCaptor<Model> captor = ArgumentCaptor.forClass(Model.class);\n        verify(mockObject).replaceProperties(any(IdentifierTranslator.class), captor.capture());\n        final Model capturedModel = captor.getValue();\n        assertTrue(capturedModel.contains(capturedModel.createResource(\"http://localhost/fcrepo/\" + pid),\n                                             capturedModel.createProperty(\"info:a\"),\n                                             capturedModel.createLiteral(\"xyz\")));\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "95a825ef5e",
    "aCommit": "6c9cdcaba6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockObject).replaceProperties(any(GraphSubjects.class), captor.capture());",
          "type": "DELETE",
          "lineNo": 190
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockObject).replaceProperties(any(IdentifierTranslator.class), captor.capture());",
          "type": "ADD",
          "lineNo": 190
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "capture()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.mockito.ArgumentCaptor captor"
        },
        {
          "type": "CtExecutableReference",
          "value": "capture()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.FedoraResourceImpl)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "replaceProperties()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "capture()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.mockito.ArgumentCaptor captor"
        },
        {
          "type": "CtExecutableReference",
          "value": "capture()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.GraphSubjects",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.IdentifierTranslator",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        190
      ]
    },
    "aCommitTime": 1397499549,
    "ID": "fcrepo/fcrepo:238",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraVersionsTest.testGetVersionList()",
    "bSource": {
      "startLine": 114,
      "code": "@Test\n    public void testGetVersionList() throws RepositoryException {\n        final String pid = \"FedoraVersioningTest\";\n        when(mockRequest.selectVariant(POSSIBLE_RDF_VARIANTS)).thenReturn(\n                mockVariant);\n        when(mockNodes.getObject(any(Session.class), anyString())).thenReturn(\n                mockResource);\n        when(mockResource.getVersionTriples(any(HttpGraphSubjects.class)))\n                .thenReturn(mockRdfStream);\n        when(mockVariant.getMediaType()).thenReturn(\n                new MediaType(\"text\", \"turtle\"));\n        final RdfStream response =\n            testObj.getVersionList(createPathList(pid), mockRequest,\n                    getUriInfoImpl());\n        assertEquals(\"Got wrong RdfStream!\", mockRdfStream, response);\n    }"
    },
    "aSource": {
      "startLine": 114,
      "code": "@Test\n    public void testGetVersionList() throws RepositoryException {\n        final String pid = \"FedoraVersioningTest\";\n        when(mockRequest.selectVariant(POSSIBLE_RDF_VARIANTS)).thenReturn(\n                mockVariant);\n        when(mockNodes.getObject(any(Session.class), anyString())).thenReturn(\n                mockResource);\n        when(mockResource.getVersionTriples(any(HttpIdentifierTranslator.class)))\n                .thenReturn(mockRdfStream);\n        when(mockVariant.getMediaType()).thenReturn(\n                new MediaType(\"text\", \"turtle\"));\n        final RdfStream response =\n            testObj.getVersionList(createPathList(pid), mockRequest,\n                    getUriInfoImpl());\n        assertEquals(\"Got wrong RdfStream!\", mockRdfStream, response);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "bCommit": "95a825ef5e",
    "aCommit": "6c9cdcaba6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockResource.getVersionTriples(any(HttpGraphSubjects.class)))",
          "type": "DELETE",
          "lineNo": 121
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockResource.getVersionTriples(any(HttpIdentifierTranslator.class)))",
          "type": "ADD",
          "lineNo": 121
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.getVersionTriples(GraphSubjects)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.getVersionTriples(GraphSubjects)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.getVersionTriples(IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.getVersionTriples(IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.http.commons.api.rdf.HttpGraphSubjects",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.http.commons.api.rdf.HttpIdentifierTranslator",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        121
      ]
    },
    "aCommitTime": 1397499549,
    "ID": "fcrepo/fcrepo:239",
    "trivial": [
      "RENAME_CLASS",
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.kernel.FedoraResourceImplTest.testReplacePropertiesDataset()",
    "bSource": {
      "startLine": 355,
      "code": "@Test\n    public void testReplacePropertiesDataset() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final DefaultGraphSubjects defaultGraphSubjects = new DefaultGraphSubjects(mockSession);\n        when(JcrRdfTools.withContext(defaultGraphSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n\n        when(mockNode.getPath()).thenReturn(\"/xyz\");\n\n        final Model propertiesModel = createDefaultModel();\n        propertiesModel.add(propertiesModel.createResource(\"a\"),\n                               propertiesModel.createProperty(\"b\"),\n                               \"c\");\n\n\n        propertiesModel.add(propertiesModel.createResource(\"i\"),\n                               propertiesModel.createProperty(\"j\"),\n                               \"k\");\n\n        propertiesModel.add(propertiesModel.createResource(\"x\"),\n                               propertiesModel.createProperty(\"y\"),\n                               \"z\");\n        final RdfStream propertiesStream = RdfStream.fromModel(propertiesModel);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(propertiesStream);\n\n        final RdfStream treeStream = new RdfStream();\n        when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n\n        final Model replacementModel = createDefaultModel();\n\n        replacementModel.add(replacementModel.createResource(\"a\"),\n                                replacementModel.createProperty(\"b\"),\n                               \"n\");\n\n\n        replacementModel.add(replacementModel.createResource(\"i\"),\n                                replacementModel.createProperty(\"j\"),\n                               \"k\");\n\n        final Model replacements = testObj.replaceProperties(defaultGraphSubjects, replacementModel).asModel();\n\n        assertTrue(replacements.containsAll(replacementModel));\n\n        assertFalse(problemsModel.contains(propertiesModel.createResource(\"x\"),\n                                              propertiesModel.createProperty(\"y\"),\n                                              \"z\"));\n    }"
    },
    "aSource": {
      "startLine": 355,
      "code": "@Test\n    public void testReplacePropertiesDataset() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final DefaultIdentifierTranslator defaultGraphSubjects = new DefaultIdentifierTranslator();\n        when(JcrRdfTools.withContext(defaultGraphSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n\n        when(mockNode.getPath()).thenReturn(\"/xyz\");\n\n        final Model propertiesModel = createDefaultModel();\n        propertiesModel.add(propertiesModel.createResource(\"a\"),\n                               propertiesModel.createProperty(\"b\"),\n                               \"c\");\n\n\n        propertiesModel.add(propertiesModel.createResource(\"i\"),\n                               propertiesModel.createProperty(\"j\"),\n                               \"k\");\n\n        propertiesModel.add(propertiesModel.createResource(\"x\"),\n                               propertiesModel.createProperty(\"y\"),\n                               \"z\");\n        final RdfStream propertiesStream = RdfStream.fromModel(propertiesModel);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(propertiesStream);\n\n        final RdfStream treeStream = new RdfStream();\n        when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n\n        final Model replacementModel = createDefaultModel();\n\n        replacementModel.add(replacementModel.createResource(\"a\"),\n                                replacementModel.createProperty(\"b\"),\n                               \"n\");\n\n\n        replacementModel.add(replacementModel.createResource(\"i\"),\n                                replacementModel.createProperty(\"j\"),\n                               \"k\");\n\n        final Model replacements = testObj.replaceProperties(defaultGraphSubjects, replacementModel).asModel();\n\n        assertTrue(replacements.containsAll(replacementModel));\n\n        assertFalse(problemsModel.contains(propertiesModel.createResource(\"x\"),\n                                              propertiesModel.createProperty(\"y\"),\n                                              \"z\"));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceImplTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceImplTest.java",
    "bCommit": "95a825ef5e",
    "aCommit": "6c9cdcaba6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final DefaultGraphSubjects defaultGraphSubjects = new DefaultGraphSubjects(mockSession);",
          "type": "DELETE",
          "lineNo": 359
        }
      ],
      "targetChanges": [
        {
          "line": "final DefaultIdentifierTranslator defaultGraphSubjects = new DefaultIdentifierTranslator();",
          "type": "ADD",
          "lineNo": 359
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects defaultGraphSubjects"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects.DefaultGraphSubjects(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator defaultGraphSubjects"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects()",
          "childCount": 1
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        359
      ]
    },
    "aCommitTime": 1397499549,
    "ID": "fcrepo/fcrepo:240",
    "trivial": [
      "RENAME_CLASS",
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.FedoraObjectImplIT.testObjectGraphWithUriProperty()",
    "bSource": {
      "startLine": 159,
      "code": "@Test\n    public void testObjectGraphWithUriProperty() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.createObject(session, \"/graphObject\");\n        final GraphSubjects subjects = new DefaultGraphSubjects(session);\n        final String graphSubject = subjects.getGraphSubject(\"/graphObject\").getURI();\n        final Dataset graphStore = object.getPropertiesDataset(subjects);\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        final String prefix = session.getWorkspace().getNamespaceRegistry().getPrefix(\"info:some#\");\n\n        assertNotNull(object.getNode().getProperty(prefix + \":urlProperty\"));\n\n        assertEquals(object.getNode(), session.getNodeByIdentifier(object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"DELETE { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        assertFalse(object.getNode().hasProperty(prefix + \":urlProperty_ref\"));\n\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT DATA { <\" + graphSubject + \"> some:urlProperty <\" + graphSubject + \">;\\n\" +\n                         \"       some:urlProperty <info:somewhere/else> . }\", graphStore);\n\n        assertEquals(1, object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues().length);\n        assertEquals(object.getNode(), session.getNodeByIdentifier(object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n    }"
    },
    "aSource": {
      "startLine": 159,
      "code": "@Test\n    public void testObjectGraphWithUriProperty() throws RepositoryException {\n        final Session session = repo.login();\n        final FedoraObject object =\n            objectService.createObject(session, \"/graphObject\");\n        final IdentifierTranslator subjects = new DefaultIdentifierTranslator();\n        final String graphSubject = subjects.getSubject(\"/graphObject\").getURI();\n        final Dataset graphStore = object.getPropertiesDataset(subjects);\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        final String prefix = session.getWorkspace().getNamespaceRegistry().getPrefix(\"info:some#\");\n\n        assertNotNull(object.getNode().getProperty(prefix + \":urlProperty\"));\n\n        assertEquals(object.getNode(), session.getNodeByIdentifier(object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"DELETE { <\" + graphSubject + \"> some:urlProperty \" +\n                         \"<\" + graphSubject + \"> } WHERE {}\", graphStore);\n\n        assertFalse(object.getNode().hasProperty(prefix + \":urlProperty_ref\"));\n\n\n        parseExecute(\"PREFIX some: <info:some#>\\n\" +\n                         \"INSERT DATA { <\" + graphSubject + \"> some:urlProperty <\" + graphSubject + \">;\\n\" +\n                         \"       some:urlProperty <info:somewhere/else> . }\", graphStore);\n\n        assertEquals(1, object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues().length);\n        assertEquals(object.getNode(), session.getNodeByIdentifier(object.getNode().getProperty(prefix + \":urlProperty_ref\").getValues()[0].getString()));\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/FedoraObjectImplIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/FedoraObjectImplIT.java",
    "bCommit": "95a825ef5e",
    "aCommit": "6c9cdcaba6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final GraphSubjects subjects = new DefaultGraphSubjects(session);",
          "type": "DELETE",
          "lineNo": 164
        },
        {
          "line": "final String graphSubject = subjects.getGraphSubject(\"/graphObject\").getURI();",
          "type": "DELETE",
          "lineNo": 165
        }
      ],
      "targetChanges": [
        {
          "line": "final IdentifierTranslator subjects = new DefaultIdentifierTranslator();",
          "type": "ADD",
          "lineNo": 164
        },
        {
          "line": "final String graphSubject = subjects.getSubject(\"/graphObject\").getURI();",
          "type": "ADD",
          "lineNo": 165
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.rdf.GraphSubjects subjects"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.GraphSubjects"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects.DefaultGraphSubjects(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String graphSubject"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getURI()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.GraphSubjects.getGraphSubject(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.rdf.GraphSubjects subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.GraphSubjects.getGraphSubject(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        },
        {
          "type": "CtExecutableReference",
          "value": "getURI()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator subjects"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String graphSubject"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getURI()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getSubject(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator subjects"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.rdf.IdentifierTranslator.getSubject(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/graphObject'"
        },
        {
          "type": "CtExecutableReference",
          "value": "getURI()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.GraphSubjects",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.IdentifierTranslator",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects()",
          "childCount": 1
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator()",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getGraphSubject",
          "childCount": 2
        },
        "dstNode": {
          "label": "getSubject",
          "childCount": 2
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        164
      ]
    },
    "aCommitTime": 1397499549,
    "ID": "fcrepo/fcrepo:241",
    "trivial": [
      "RENAME_CLASS",
      "RENAME_CLASS",
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.SparqlQueryTransformIT.shouldDoStuff()",
    "bSource": {
      "startLine": 59,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.createObject(session, \"/testObject\");\n\n        final String s = \"SELECT ?x ?uuid\\n\" +\n                \"WHERE { ?x  <\" + REPOSITORY_NAMESPACE + \"uuid> ?uuid }\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new SparqlQueryTransform(stringReader);\n\n        final QueryExecution qexec = testObj.apply(object.getPropertiesDataset(new DefaultGraphSubjects(session)));\n\n        assert(qexec != null);\n\n        try {\n            final ResultSet results = qexec.execSelect();\n\n            assert(results != null);\n            assertTrue(results.hasNext());\n        } finally {\n            qexec.close();\n        }\n    }"
    },
    "aSource": {
      "startLine": 59,
      "code": "@Test\n    public void shouldDoStuff() throws RepositoryException {\n        final Session session = repo.login();\n\n        final FedoraObject object = objectService.createObject(session, \"/testObject\");\n\n        final String s = \"SELECT ?x ?uuid\\n\" +\n                \"WHERE { ?x  <\" + REPOSITORY_NAMESPACE + \"uuid> ?uuid }\";\n        final InputStream stringReader = new ByteArrayInputStream(s.getBytes());\n\n        testObj = new SparqlQueryTransform(stringReader);\n\n        final QueryExecution qexec = testObj.apply(object.getPropertiesDataset(new DefaultIdentifierTranslator()));\n\n        assert(qexec != null);\n\n        try {\n            final ResultSet results = qexec.execSelect();\n\n            assert(results != null);\n            assertTrue(results.hasNext());\n        } finally {\n            qexec.close();\n        }\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/SparqlQueryTransformIT.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/integration/SparqlQueryTransformIT.java",
    "bCommit": "95a825ef5e",
    "aCommit": "6c9cdcaba6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final QueryExecution qexec = testObj.apply(object.getPropertiesDataset(new DefaultGraphSubjects(session)));",
          "type": "DELETE",
          "lineNo": 71
        }
      ],
      "targetChanges": [
        {
          "line": "final QueryExecution qexec = testObj.apply(object.getPropertiesDataset(new DefaultIdentifierTranslator()));",
          "type": "ADD",
          "lineNo": 71
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.QueryExecution qexec"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.QueryExecution"
        },
        {
          "type": "CtInvocation",
          "value": "apply(org.fcrepo.transform.transformations.Dataset)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.transformations.SparqlQueryTransform testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "apply(org.fcrepo.transform.transformations.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesDataset(GraphSubjects)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesDataset(GraphSubjects)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects.DefaultGraphSubjects(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.QueryExecution qexec"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.QueryExecution"
        },
        {
          "type": "CtInvocation",
          "value": "apply(org.fcrepo.transform.transformations.Dataset)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.transformations.SparqlQueryTransform testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "apply(org.fcrepo.transform.transformations.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesDataset(IdentifierTranslator)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.FedoraObject object"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getPropertiesDataset(IdentifierTranslator)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator.DefaultIdentifierTranslator()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.impl.DefaultGraphSubjects()",
          "childCount": 1
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.impl.DefaultIdentifierTranslator()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        71
      ]
    },
    "aCommitTime": 1397499549,
    "ID": "fcrepo/fcrepo:242",
    "trivial": [
      "RENAME_CLASS",
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.transform.http.FedoraTransformTest.testEvaluateTransform()",
    "bSource": {
      "startLine": 89,
      "code": "@Test\n    public void testEvaluateTransform() throws Exception {\n        when(mockNodeService.getObject(mockSession, \"/testObject\")).thenReturn(mockResource);\n        final Model model = ModelFactory.createDefaultModel();\n        model.add(model.createResource(\"http://example.org/book/book1\"),\n                     model.createProperty(\"http://purl.org/dc/elements/1.1/title\"),\n                     model.createLiteral(\"some-title\"));\n        final Dataset dataset = DatasetFactory.create(model);\n        when(mockResource.getPropertiesDataset(any(GraphSubjects.class))).thenReturn(dataset);\n\n        final InputStream query = new ByteArrayInputStream((\"SELECT ?title WHERE\\n\" +\n                                                          \"{\\n\" +\n                                                          \"  <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\\n\" +\n                                                          \"} \").getBytes());\n\n        when(mockTransformationFactory.getTransform(MediaType.valueOf(contentTypeSPARQLQuery), query)).thenReturn(mockTransform);\n\n        testObj.evaluateTransform(createPathList(\"testObject\"), MediaType.valueOf(contentTypeSPARQLQuery), query);\n\n        verify(mockTransform).apply(dataset);\n    }"
    },
    "aSource": {
      "startLine": 89,
      "code": "@Test\n    public void testEvaluateTransform() throws Exception {\n        when(mockNodeService.getObject(mockSession, \"/testObject\")).thenReturn(mockResource);\n        final Model model = ModelFactory.createDefaultModel();\n        model.add(model.createResource(\"http://example.org/book/book1\"),\n                     model.createProperty(\"http://purl.org/dc/elements/1.1/title\"),\n                     model.createLiteral(\"some-title\"));\n        final Dataset dataset = DatasetFactory.create(model);\n        when(mockResource.getPropertiesDataset(any(IdentifierTranslator.class))).thenReturn(dataset);\n\n        final InputStream query = new ByteArrayInputStream((\"SELECT ?title WHERE\\n\" +\n                                                          \"{\\n\" +\n                                                          \"  <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\\n\" +\n                                                          \"} \").getBytes());\n\n        when(mockTransformationFactory.getTransform(MediaType.valueOf(contentTypeSPARQLQuery), query)).thenReturn(mockTransform);\n\n        testObj.evaluateTransform(createPathList(\"testObject\"), MediaType.valueOf(contentTypeSPARQLQuery), query);\n\n        verify(mockTransform).apply(dataset);\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/FedoraTransformTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/http/FedoraTransformTest.java",
    "bCommit": "95a825ef5e",
    "aCommit": "6c9cdcaba6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockResource.getPropertiesDataset(any(GraphSubjects.class))).thenReturn(dataset);",
          "type": "DELETE",
          "lineNo": 97
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockResource.getPropertiesDataset(any(IdentifierTranslator.class))).thenReturn(dataset);",
          "type": "ADD",
          "lineNo": 97
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.getPropertiesDataset(GraphSubjects)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.getPropertiesDataset(GraphSubjects)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.getPropertiesDataset(IdentifierTranslator)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResourceImpl.getPropertiesDataset(IdentifierTranslator)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset dataset"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.GraphSubjects",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.IdentifierTranslator",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        97
      ]
    },
    "aCommitTime": 1397499549,
    "ID": "fcrepo/fcrepo:243",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.transform.TransformationFactoryTest.testSparqlCreation()",
    "bSource": {
      "startLine": 54,
      "code": "@Test\n    public void testSparqlCreation() {\n\n        final Transformation transform = transformationFactory.getTransform(MediaType.valueOf(WebContent.contentTypeSPARQLQuery), mockInputStream);\n\n        assertEquals(new SparqlQueryTransform(mockInputStream), transform);\n\n    }"
    },
    "aSource": {
      "startLine": 58,
      "code": "@Test\n    public void testSparqlCreation() {\n\n        final Transformation<Map<String, Collection<Object>>> transform =\n            transformationFactory.getTransform(MediaType.valueOf(contentTypeSPARQLQuery), mockInputStream);\n        assertEquals(new SparqlQueryTransform(mockInputStream), transform);\n\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/TransformationFactoryTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/TransformationFactoryTest.java",
    "bCommit": "cd363f97ee",
    "aCommit": "45a169fc2f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Transformation transform = transformationFactory.getTransform(MediaType.valueOf(WebContent.contentTypeSPARQLQuery), mockInputStream);",
          "type": "DELETE",
          "lineNo": 57
        }
      ],
      "targetChanges": [
        {
          "line": "final Transformation<Map<String, Collection<Object>>> transform =",
          "type": "ADD",
          "lineNo": 61
        },
        {
          "line": "transformationFactory.getTransform(MediaType.valueOf(contentTypeSPARQLQuery), mockInputStream);",
          "type": "ADD",
          "lineNo": 62
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.transform.Transformation transform"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.transform.Transformation"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.TransformationFactory.getTransform(MediaType,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.TransformationFactory transformationFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.TransformationFactory.getTransform(MediaType,InputStream)"
        },
        {
          "type": "CtInvocation",
          "value": "valueOf()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.MediaType"
        },
        {
          "type": "CtExecutableReference",
          "value": "valueOf()"
        },
        {
          "type": "CtTypeAccess",
          "value": "WebContent.contentTypeSPARQLQuery"
        },
        {
          "type": "CtFieldRead",
          "value": "java.io.InputStream mockInputStream"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.transform.Transformation transform"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.transform.Transformation"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Object"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.transform.TransformationFactory.getTransform(MediaType,InputStream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.TransformationFactory transformationFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.transform.TransformationFactory.getTransform(MediaType,InputStream)"
        },
        {
          "type": "CtInvocation",
          "value": "valueOf()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.MediaType"
        },
        {
          "type": "CtExecutableReference",
          "value": "valueOf()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.transform.TransformationFactoryTest contentTypeSPARQLQuery"
        },
        {
          "type": "CtFieldRead",
          "value": "java.io.InputStream mockInputStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "WebContent.contentTypeSPARQLQuery",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "java.util.Map",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "contentTypeSPARQLQuery",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        61
      ]
    },
    "aCommitTime": 1395182312,
    "ID": "fcrepo/fcrepo:168",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.observer.NOOPFilterTest.testApply()",
    "bSource": {
      "startLine": 37,
      "code": "@Test\n    public void testApply() throws Exception {\n        assertEquals(mockEvent, new NOOPFilter().getFilter(null).apply(mockEvent));\n    }"
    },
    "aSource": {
      "startLine": 38,
      "code": "@Test\n    public void testApply() throws Exception {\n        assertTrue(\"Failed to pass an event through a NO-OP filter!\", new NOOPFilter().getFilter(null).apply(mockEvent));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/observer/NOOPFilterTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/observer/NOOPFilterTest.java",
    "bCommit": "3bf9967877",
    "aCommit": "649a3dd597",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(mockEvent, new NOOPFilter().getFilter(null).apply(mockEvent));",
          "type": "DELETE",
          "lineNo": 39
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue(\"Failed to pass an event through a NO-OP filter!\", new NOOPFilter().getFilter(null).apply(mockEvent));",
          "type": "ADD",
          "lineNo": 40
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(<unknown>,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.observation.Event mockEvent"
        },
        {
          "type": "CtInvocation",
          "value": "apply(javax.jcr.observation.Event)"
        },
        {
          "type": "CtInvocation",
          "value": "getFilter(org.fcrepo.kernel.observer.Session)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.observer.NOOPFilter.NOOPFilter()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.observer.NOOPFilter"
        },
        {
          "type": "CtExecutableReference",
          "value": "getFilter(org.fcrepo.kernel.observer.Session)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtExecutableReference",
          "value": "apply(javax.jcr.observation.Event)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.observation.Event mockEvent"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Failed to pass an event through a NO-OP filter!'"
        },
        {
          "type": "CtInvocation",
          "value": "apply(javax.jcr.observation.Event)"
        },
        {
          "type": "CtInvocation",
          "value": "getFilter(org.fcrepo.kernel.observer.Session)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.observer.NOOPFilter.NOOPFilter()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.observer.NOOPFilter"
        },
        {
          "type": "CtExecutableReference",
          "value": "getFilter(org.fcrepo.kernel.observer.Session)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtExecutableReference",
          "value": "apply(javax.jcr.observation.Event)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.observation.Event mockEvent"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        },
        "dstNode": {
          "label": "assertTrue",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        40
      ]
    },
    "aCommitTime": 1394249152,
    "ID": "fcrepo/fcrepo:224",
    "trivial": null
  },
  {
    "name": "org.fcrepo.syndication.RSSPublisherTest.testInitialize()",
    "bSource": {
      "startLine": 55,
      "code": "@Test\n    public void testInitialize() throws Exception {\n        EventBus mockBus = mock(EventBus.class);\n        TestHelpers.setField(testObj, \"eventBus\", mockBus);\n        testObj.initialize();\n        verify(mockBus).register(testObj);\n    }"
    },
    "aSource": {
      "startLine": 55,
      "code": "@Test\n    public void testInitialize() throws Exception {\n        final EventBus mockBus = mock(EventBus.class);\n        setField(testObj, \"eventBus\", mockBus);\n        testObj.initialize();\n        verify(mockBus).register(testObj);\n    }"
    },
    "bPath": "fcrepo-rss/src/test/java/org/fcrepo/syndication/RSSPublisherTest.java",
    "aPath": "fcrepo-rss/src/test/java/org/fcrepo/syndication/RSSPublisherTest.java",
    "bCommit": "3bf9967877",
    "aCommit": "649a3dd597",
    "hunk": {
      "sourceChanges": [
        {
          "line": "EventBus mockBus = mock(EventBus.class);",
          "type": "DELETE",
          "lineNo": 57
        },
        {
          "line": "TestHelpers.setField(testObj, \"eventBus\", mockBus);",
          "type": "DELETE",
          "lineNo": 58
        }
      ],
      "targetChanges": [
        {
          "line": "final EventBus mockBus = mock(EventBus.class);",
          "type": "ADD",
          "lineNo": 57
        },
        {
          "line": "setField(testObj, \"eventBus\", mockBus);",
          "type": "ADD",
          "lineNo": 58
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.google.common.eventbus.EventBus mockBus"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.eventbus.EventBus"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.TestHelpers.setField(Object,String,Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.http.commons.test.util.TestHelpers"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.TestHelpers.setField(Object,String,Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.syndication.RSSPublisher testObj"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'eventBus'"
        },
        {
          "type": "CtVariableRead",
          "value": "com.google.common.eventbus.EventBus mockBus"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.google.common.eventbus.EventBus mockBus"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.eventbus.EventBus"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.TestHelpers.setField(Object,String,Object)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.TestHelpers.setField(Object,String,Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.syndication.RSSPublisher testObj"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'eventBus'"
        },
        {
          "type": "CtVariableRead",
          "value": "com.google.common.eventbus.EventBus mockBus"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.http.commons.test.util.TestHelpers",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.syndication.RSSPublisherTest",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "ADD_VARIABLE_MODIFIER"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        58
      ]
    },
    "aCommitTime": 1394249152,
    "ID": "fcrepo/fcrepo:225",
    "trivial": null
  },
  {
    "name": "org.fcrepo.syndication.RSSPublisherTest.testNewEvent()",
    "bSource": {
      "startLine": 63,
      "code": "@Test\n    public void testNewEvent() {\n        Event mockEvent = mock(Event.class);\n        testObj.newEvent(mockEvent);\n    }"
    },
    "aSource": {
      "startLine": 63,
      "code": "@Test\n    public void testNewEvent() {\n        final FedoraEvent mockEvent = mock(FedoraEvent.class);\n        testObj.newEvent(mockEvent);\n    }"
    },
    "bPath": "fcrepo-rss/src/test/java/org/fcrepo/syndication/RSSPublisherTest.java",
    "aPath": "fcrepo-rss/src/test/java/org/fcrepo/syndication/RSSPublisherTest.java",
    "bCommit": "3bf9967877",
    "aCommit": "649a3dd597",
    "hunk": {
      "sourceChanges": [
        {
          "line": "Event mockEvent = mock(Event.class);",
          "type": "DELETE",
          "lineNo": 65
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraEvent mockEvent = mock(FedoraEvent.class);",
          "type": "ADD",
          "lineNo": 65
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.observation.Event mockEvent"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.observation.Event"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.observer.FedoraEvent mockEvent"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.observer.FedoraEvent"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.observation.Event",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.observer.FedoraEvent",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.observation.Event",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.observer.FedoraEvent",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE",
      "ADD_VARIABLE_MODIFIER"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        65
      ]
    },
    "aCommitTime": 1394249152,
    "ID": "fcrepo/fcrepo:226",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilterTest.testInvalidRequestAuthRequired()",
    "bSource": {
      "startLine": 92,
      "code": "@Test\n    public void testInvalidRequestAuthRequired()\n        throws IOException, ServletException, OAuthProblemException {\n        RestrictToAuthNFilter testObj = new RestrictToAuthNFilter();\n        when(mockRequest.getRequestURI()).thenReturn(AUTHN_REQUIRED_URI);\n        testObj.doFilter(mockRequest, mockResponse, mockFilterChain);\n        // an unauthenticated request should send an error back to client\n        verify(mockResponse, times(1)).sendError(401);\n        // an unauthenticated request should not call the rest of the filter chain\n        verify(mockFilterChain, times(0))\n            .doFilter(any(HttpServletRequestWrapper.class), eq(mockResponse));\n    }"
    },
    "aSource": {
      "startLine": 91,
      "code": "@Test\n    public void testInvalidRequestAuthRequired()\n        throws IOException, ServletException {\n        final RestrictToAuthNFilter testObj = new RestrictToAuthNFilter();\n        when(mockRequest.getRequestURI()).thenReturn(AUTHN_REQUIRED_URI);\n        testObj.doFilter(mockRequest, mockResponse, mockFilterChain);\n        // an unauthenticated request should send an error back to client\n        verify(mockResponse, times(1)).sendError(401);\n        // an unauthenticated request should not call the rest of the filter chain\n        verify(mockFilterChain, times(0))\n            .doFilter(any(HttpServletRequestWrapper.class), eq(mockResponse));\n    }"
    },
    "bPath": "fcrepo-auth-oauth/src/test/java/org/fcrepo/auth/oauth/filter/RestrictToAuthNFilterTest.java",
    "aPath": "fcrepo-auth-oauth/src/test/java/org/fcrepo/auth/oauth/filter/RestrictToAuthNFilterTest.java",
    "bCommit": "440a2bc07b",
    "aCommit": "306b021148",
    "hunk": {
      "sourceChanges": [
        {
          "line": "throws IOException, ServletException, OAuthProblemException {",
          "type": "DELETE",
          "lineNo": 94
        },
        {
          "line": "RestrictToAuthNFilter testObj = new RestrictToAuthNFilter();",
          "type": "DELETE",
          "lineNo": 95
        }
      ],
      "targetChanges": [
        {
          "line": "throws IOException, ServletException {",
          "type": "ADD",
          "lineNo": 93
        },
        {
          "line": "final RestrictToAuthNFilter testObj = new RestrictToAuthNFilter();",
          "type": "ADD",
          "lineNo": 94
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.servlet.ServletException"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.oltu.oauth2.common.exception.OAuthProblemException"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter testObj"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter.RestrictToAuthNFilter()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter"
        }
      ],
      "targetElements": [
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.servlet.ServletException"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter testObj"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter.RestrictToAuthNFilter()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.oltu.oauth2.common.exception.OAuthProblemException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "ADD_VARIABLE_MODIFIER",
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        93
      ]
    },
    "aCommitTime": 1393363171,
    "ID": "fcrepo/fcrepo:89",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilterTest.testNoAuthRequired()",
    "bSource": {
      "startLine": 77,
      "code": "@Test\n    public void testNoAuthRequired()\n        throws IOException, ServletException, OAuthProblemException {\n        RestrictToAuthNFilter testObj = new RestrictToAuthNFilter();\n        when(mockRequest.getRequestURI()).thenReturn(NO_AUTH_REQUIRED_URI);\n        testObj.doFilter(mockRequest, mockResponse, mockFilterChain);\n        // \"public\" URIs shouldn't result in a principal query\n        verify(mockRequest, times(0)).getUserPrincipal();\n        // a successful request should not send an error back to client\n        verify(mockResponse, times(0)).sendError(any(Integer.class));\n        // a successful request should call the rest of the filter chain\n        verify(mockFilterChain)\n            .doFilter(any(HttpServletRequestWrapper.class), eq(mockResponse));\n    }"
    },
    "aSource": {
      "startLine": 76,
      "code": "@Test\n    public void testNoAuthRequired()\n        throws IOException, ServletException {\n        final RestrictToAuthNFilter testObj = new RestrictToAuthNFilter();\n        when(mockRequest.getRequestURI()).thenReturn(NO_AUTH_REQUIRED_URI);\n        testObj.doFilter(mockRequest, mockResponse, mockFilterChain);\n        // \"public\" URIs shouldn't result in a principal query\n        verify(mockRequest, times(0)).getUserPrincipal();\n        // a successful request should not send an error back to client\n        verify(mockResponse, times(0)).sendError(any(Integer.class));\n        // a successful request should call the rest of the filter chain\n        verify(mockFilterChain)\n            .doFilter(any(HttpServletRequestWrapper.class), eq(mockResponse));\n    }"
    },
    "bPath": "fcrepo-auth-oauth/src/test/java/org/fcrepo/auth/oauth/filter/RestrictToAuthNFilterTest.java",
    "aPath": "fcrepo-auth-oauth/src/test/java/org/fcrepo/auth/oauth/filter/RestrictToAuthNFilterTest.java",
    "bCommit": "440a2bc07b",
    "aCommit": "306b021148",
    "hunk": {
      "sourceChanges": [
        {
          "line": "throws IOException, ServletException, OAuthProblemException {",
          "type": "DELETE",
          "lineNo": 79
        },
        {
          "line": "RestrictToAuthNFilter testObj = new RestrictToAuthNFilter();",
          "type": "DELETE",
          "lineNo": 80
        }
      ],
      "targetChanges": [
        {
          "line": "throws IOException, ServletException {",
          "type": "ADD",
          "lineNo": 78
        },
        {
          "line": "final RestrictToAuthNFilter testObj = new RestrictToAuthNFilter();",
          "type": "ADD",
          "lineNo": 79
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.servlet.ServletException"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.oltu.oauth2.common.exception.OAuthProblemException"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter testObj"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter.RestrictToAuthNFilter()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter"
        }
      ],
      "targetElements": [
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.servlet.ServletException"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter testObj"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter.RestrictToAuthNFilter()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.auth.oauth.filter.RestrictToAuthNFilter"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.oltu.oauth2.common.exception.OAuthProblemException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "ADD_VARIABLE_MODIFIER",
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        78
      ]
    },
    "aCommitTime": 1393363171,
    "ID": "fcrepo/fcrepo:90",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.transformations.LDPathTransformTest.testProgramQuery()",
    "bSource": {
      "startLine": 128,
      "code": "@Test\n    public void testProgramQuery() throws LDPathParseException, RepositoryException {\n\n        final Model model = ModelFactory.createDefaultModel();\n        model.add(model.createResource(\"abc\"), model.createProperty(\"http://purl.org/dc/elements/1.1/title\"), model.createLiteral(\"some-title\"));\n        final Dataset testDataset = DatasetFactory.create(model);\n        testDataset.getContext().set(Symbol.create(\"uri\"), \"abc\");\n        final InputStream testReader = new ByteArrayInputStream(\"title = dc:title :: xsd:string ;\".getBytes());\n\n        testObj = new LDPathTransform(testReader);\n        final List<Map<String,Collection<Object>>> stringCollectionMap = testObj.apply(testDataset);\n\n        assert(stringCollectionMap != null);\n        assertEquals(1, stringCollectionMap.size());\n        assertEquals(1, stringCollectionMap.get(0).get(\"title\").size());\n        assertTrue(stringCollectionMap.get(0).get(\"title\").contains(\"some-title\"));\n    }"
    },
    "aSource": {
      "startLine": 127,
      "code": "@Test\n    public void testProgramQuery() {\n\n        final Model model = ModelFactory.createDefaultModel();\n        model.add(model.createResource(\"abc\"), model.createProperty(\"http://purl.org/dc/elements/1.1/title\"), model.createLiteral(\"some-title\"));\n        final Dataset testDataset = DatasetFactory.create(model);\n        testDataset.getContext().set(Symbol.create(\"uri\"), \"abc\");\n        final InputStream testReader = new ByteArrayInputStream(\"title = dc:title :: xsd:string ;\".getBytes());\n\n        testObj = new LDPathTransform(testReader);\n        final List<Map<String,Collection<Object>>> stringCollectionMap = testObj.apply(testDataset);\n\n        assert(stringCollectionMap != null);\n        assertEquals(1, stringCollectionMap.size());\n        assertEquals(1, stringCollectionMap.get(0).get(\"title\").size());\n        assertTrue(stringCollectionMap.get(0).get(\"title\").contains(\"some-title\"));\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/transformations/LDPathTransformTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/transformations/LDPathTransformTest.java",
    "bCommit": "440a2bc07b",
    "aCommit": "306b021148",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testProgramQuery() throws LDPathParseException, RepositoryException {",
          "type": "DELETE",
          "lineNo": 129
        }
      ],
      "targetChanges": [
        {
          "line": "public void testProgramQuery() {",
          "type": "ADD",
          "lineNo": 128
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.transform.transformations.LDPathTransformTest.testProgramQuery()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.marmotta.ldpath.exception.LDPathParseException"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.transform.transformations.LDPathTransformTest.testProgramQuery()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE",
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        128
      ]
    },
    "aCommitTime": 1393363171,
    "ID": "fcrepo/fcrepo:91",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsPEPResponseIT.testPermissivePEP()",
    "bSource": {
      "startLine": 88,
      "code": "@Test\n    public void testPermissivePEP() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(pep);\n        when(\n                pep.hasModeShapePermission(any(Path.class),\n                        any(String[].class), Matchers\n                                .<Set<Principal>> any(),\n                        any(Principal.class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectService();\n        os.createObject(session, \"/myobject\");\n        verify(pep, times(5)).hasModeShapePermission(any(Path.class),\n                any(String[].class), Matchers.<Set<Principal>> any(),\n                any(Principal.class));\n    }"
    },
    "aSource": {
      "startLine": 89,
      "code": "@Test\n    public void testPermissivePEP() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(pep);\n        when(\n                pep.hasModeShapePermission(any(Path.class),\n                        any(String[].class), Matchers\n                                .<Set<Principal>> any(),\n                        any(Principal.class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectServiceImpl();\n        os.createObject(session, \"/myobject\");\n        verify(pep, times(5)).hasModeShapePermission(any(Path.class),\n                any(String[].class), Matchers.<Set<Principal>> any(),\n                any(Principal.class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsPEPResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsPEPResponseIT.java",
    "bCommit": "248b8e0071",
    "aCommit": "d2dbb68b14",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ObjectService os = new ObjectService();",
          "type": "DELETE",
          "lineNo": 112
        }
      ],
      "targetChanges": [
        {
          "line": "final ObjectService os = new ObjectServiceImpl();",
          "type": "ADD",
          "lineNo": 113
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.services.ObjectService.ObjectService()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.services.ObjectServiceImpl.ObjectServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectServiceImpl"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.services.ObjectService()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.services.ObjectServiceImpl()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        113
      ]
    },
    "aCommitTime": 1393040775,
    "ID": "fcrepo/fcrepo:476",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsPEPResponseIT.testRestrictivePEP()",
    "bSource": {
      "startLine": 119,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictivePEP() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(pep);\n        when(\n                pep.hasModeShapePermission(any(Path.class),\n                        any(String[].class), Matchers\n                                .<Set<Principal>> any(),\n                        any(Principal.class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ObjectService os = new ObjectService();\n        os.createObject(session, \"/myobject\");\n        verify(pep, times(5)).hasModeShapePermission(any(Path.class),\n                any(String[].class), Matchers.<Set<Principal>> any(),\n                any(Principal.class));\n    }"
    },
    "aSource": {
      "startLine": 120,
      "code": "@Test(expected = AccessDeniedException.class)\n    public void testRestrictivePEP() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(pep);\n        when(\n                pep.hasModeShapePermission(any(Path.class),\n                        any(String[].class), Matchers\n                                .<Set<Principal>> any(),\n                        any(Principal.class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ObjectService os = new ObjectServiceImpl();\n        os.createObject(session, \"/myobject\");\n        verify(pep, times(5)).hasModeShapePermission(any(Path.class),\n                any(String[].class), Matchers.<Set<Principal>> any(),\n                any(Principal.class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsPEPResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsPEPResponseIT.java",
    "bCommit": "248b8e0071",
    "aCommit": "d2dbb68b14",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ObjectService os = new ObjectService();",
          "type": "DELETE",
          "lineNo": 139
        }
      ],
      "targetChanges": [
        {
          "line": "final ObjectService os = new ObjectServiceImpl();",
          "type": "ADD",
          "lineNo": 140
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.services.ObjectService.ObjectService()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.services.ObjectServiceImpl.ObjectServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectServiceImpl"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.services.ObjectService()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.services.ObjectServiceImpl()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        140
      ]
    },
    "aCommitTime": 1393040775,
    "ID": "fcrepo/fcrepo:477",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.kernel.services.ObjectServiceTest.testGetObjectNode()",
    "bSource": {
      "startLine": 95,
      "code": "@Test\n    public void testGetObjectNode() throws RepositoryException {\n        final String testPath = \"/foo\";\n        final ObjectService testObj = new ObjectService();\n        testObj.getObjectNode(mockSession, \"/foo\");\n        verify(mockSession).getNode(testPath);\n    }"
    },
    "aSource": {
      "startLine": 95,
      "code": "@Test\n    public void testGetObjectNode() throws RepositoryException {\n        final String testPath = \"/foo\";\n        final ObjectService testObj = new ObjectServiceImpl();\n        testObj.getObjectNode(mockSession, \"/foo\");\n        verify(mockSession).getNode(testPath);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/ObjectServiceTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/ObjectServiceTest.java",
    "bCommit": "248b8e0071",
    "aCommit": "d2dbb68b14",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ObjectService testObj = new ObjectService();",
          "type": "DELETE",
          "lineNo": 98
        }
      ],
      "targetChanges": [
        {
          "line": "final ObjectService testObj = new ObjectServiceImpl();",
          "type": "ADD",
          "lineNo": 98
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.services.ObjectService.ObjectService()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.services.ObjectServiceImpl.ObjectServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectServiceImpl"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.services.ObjectService()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.services.ObjectServiceImpl()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        98
      ]
    },
    "aCommitTime": 1393040775,
    "ID": "fcrepo/fcrepo:478",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.kernel.services.ObjectServiceTest.testGetObject()",
    "bSource": {
      "startLine": 79,
      "code": "@Test\n    public void testGetObject() throws RepositoryException {\n        when(mockNodeType.getName()).thenReturn(FEDORA_OBJECT);\n        NodeType mockNodeType = mock(NodeType.class);\n        when(mockNodeType.getName()).thenReturn(\"nt:folder\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockNodeType});\n\n        final String testPath = \"/foo\";\n        when(mockSession.getNode(testPath)).thenReturn(mockNode);\n        final ObjectService testObj = new ObjectService();\n        testObj.getObject(mockSession, \"/foo\");\n        verify(mockSession).getNode(testPath);\n    }"
    },
    "aSource": {
      "startLine": 79,
      "code": "@Test\n    public void testGetObject() throws RepositoryException {\n        when(mockNodeType.getName()).thenReturn(FEDORA_OBJECT);\n        NodeType mockNodeType = mock(NodeType.class);\n        when(mockNodeType.getName()).thenReturn(\"nt:folder\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockNodeType});\n\n        final String testPath = \"/foo\";\n        when(mockSession.getNode(testPath)).thenReturn(mockNode);\n        final ObjectService testObj = new ObjectServiceImpl();\n        testObj.getObject(mockSession, \"/foo\");\n        verify(mockSession).getNode(testPath);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/ObjectServiceTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/ObjectServiceTest.java",
    "bCommit": "248b8e0071",
    "aCommit": "d2dbb68b14",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ObjectService testObj = new ObjectService();",
          "type": "DELETE",
          "lineNo": 90
        }
      ],
      "targetChanges": [
        {
          "line": "final ObjectService testObj = new ObjectServiceImpl();",
          "type": "ADD",
          "lineNo": 90
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.services.ObjectService.ObjectService()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.services.ObjectServiceImpl.ObjectServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectServiceImpl"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.services.ObjectService()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.services.ObjectServiceImpl()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        90
      ]
    },
    "aCommitTime": 1393040775,
    "ID": "fcrepo/fcrepo:479",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.kernel.services.ObjectServiceTest.testCreateObject()",
    "bSource": {
      "startLine": 62,
      "code": "@Test\n    public void testCreateObject() throws Exception {\n        final String testPath = \"/foo\";\n        when(mockRoot.getNode(testPath.substring(1))).thenReturn(mockNode);\n        when(mockNodeType.getName()).thenReturn(FEDORA_OBJECT);\n        NodeType mockNodeType = mock(NodeType.class);\n        when(mockNodeType.getName()).thenReturn(\"nt:folder\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockNodeType});\n\n        final ObjectService testObj = new ObjectService();\n        final Node actual =\n                testObj.createObject(mockSession, testPath).getNode();\n        assertEquals(mockNode, actual);\n    }"
    },
    "aSource": {
      "startLine": 62,
      "code": "@Test\n    public void testCreateObject() throws Exception {\n        final String testPath = \"/foo\";\n        when(mockRoot.getNode(testPath.substring(1))).thenReturn(mockNode);\n        when(mockNodeType.getName()).thenReturn(FEDORA_OBJECT);\n        NodeType mockNodeType = mock(NodeType.class);\n        when(mockNodeType.getName()).thenReturn(\"nt:folder\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockNodeType});\n\n        final ObjectService testObj = new ObjectServiceImpl();\n        final Node actual =\n                testObj.createObject(mockSession, testPath).getNode();\n        assertEquals(mockNode, actual);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/ObjectServiceTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/ObjectServiceTest.java",
    "bCommit": "248b8e0071",
    "aCommit": "d2dbb68b14",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ObjectService testObj = new ObjectService();",
          "type": "DELETE",
          "lineNo": 73
        }
      ],
      "targetChanges": [
        {
          "line": "final ObjectService testObj = new ObjectServiceImpl();",
          "type": "ADD",
          "lineNo": 73
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.services.ObjectService.ObjectService()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.services.ObjectService testObj"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.services.ObjectServiceImpl.ObjectServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.services.ObjectServiceImpl"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.services.ObjectService()",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.services.ObjectServiceImpl()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        73
      ]
    },
    "aCommitTime": 1393040775,
    "ID": "fcrepo/fcrepo:480",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.FixityResultTest.testMatchesArguments()",
    "bSource": {
      "startLine": 73,
      "code": "@Test\n    public void testMatchesArguments() throws Exception {\n        final FixityResult result = new FixityResult(100L, new URI(\"urn:123\"));\n        assertTrue(\"expected fixity to match\", result.matches(100L, new URI(\n                \"urn:123\")));\n        assertFalse(\"unexpected match when size differs\", result.matches(99L,\n                new URI(\"urn:123\")));\n        assertFalse(\"unexpected match when checksum differs\", result.matches(\n                100L, new URI(\"urn:312\")));\n        assertFalse(\"unexpected match when size and checksum differs\", result\n                .matches(99L, new URI(\"urn:312\")));\n    }"
    },
    "aSource": {
      "startLine": 73,
      "code": "@Test\n    public void testMatchesArguments() throws Exception {\n        final FixityResult result = new FixityResultImpl(100L, new URI(\"urn:123\"));\n        assertTrue(\"expected fixity to match\", result.matches(100L, new URI(\n                \"urn:123\")));\n        assertFalse(\"unexpected match when size differs\", result.matches(99L,\n                new URI(\"urn:123\")));\n        assertFalse(\"unexpected match when checksum differs\", result.matches(\n                100L, new URI(\"urn:312\")));\n        assertFalse(\"unexpected match when size and checksum differs\", result\n                .matches(99L, new URI(\"urn:312\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/FixityResultTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/FixityResultTest.java",
    "bCommit": "248b8e0071",
    "aCommit": "d2dbb68b14",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FixityResult result = new FixityResult(100L, new URI(\"urn:123\"));",
          "type": "DELETE",
          "lineNo": 75
        }
      ],
      "targetChanges": [
        {
          "line": "final FixityResult result = new FixityResultImpl(100L, new URI(\"urn:123\"));",
          "type": "ADD",
          "lineNo": 75
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.utils.FixityResult result"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResult"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.FixityResult.FixityResult(long,URI)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResult"
        },
        {
          "type": "CtLiteral",
          "value": "long '100'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.net.URI.URI(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URI"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'urn:123'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.utils.FixityResult result"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResult"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.FixityResultImpl.FixityResultImpl(long,URI)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResultImpl"
        },
        {
          "type": "CtLiteral",
          "value": "long '100'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.net.URI.URI(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URI"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'urn:123'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.utils.FixityResult(long,java.net.URI)",
          "childCount": 2
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.utils.FixityResultImpl(long,java.net.URI)",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        75
      ]
    },
    "aCommitTime": 1393040775,
    "ID": "fcrepo/fcrepo:481",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.services.DatastreamServiceIT.testChecksumBlobsForInMemoryValues()",
    "bSource": {
      "startLine": 139,
      "code": "@Test\n    public void testChecksumBlobsForInMemoryValues() throws Exception {\n\n        final Session session = repository.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastreamNode(session,\n                                                  \"/testLLObject/testMemoryContent\",\n                                                  \"application/octet-stream\",\n                                                  null,\n                                                  new ByteArrayInputStream(\"0123456789\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session, \"/testLLObject/\"\n                                                         + \"testMemoryContent\");\n\n        final Collection<FixityResult> fixityResults =\n            datastreamService.getFixity(ds.getNode().getNode(JCR_CONTENT), ds\n                                                                               .getContentDigest(), ds.getContentSize());\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                                   fixityResult.computedChecksum.toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 139,
      "code": "@Test\n    public void testChecksumBlobsForInMemoryValues() throws Exception {\n\n        final Session session = repository.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastreamNode(session,\n                                                  \"/testLLObject/testMemoryContent\",\n                                                  \"application/octet-stream\",\n                                                  null,\n                                                  new ByteArrayInputStream(\"0123456789\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session, \"/testLLObject/\"\n                                                         + \"testMemoryContent\");\n\n        final Collection<FixityResult> fixityResults =\n            datastreamService.getFixity(ds.getNode().getNode(JCR_CONTENT), ds\n                                                                               .getContentDigest(), ds.getContentSize());\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:87acec17cd9dcd20a716cc2cf67417b71c8a7016\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceIT.java",
    "bCommit": "248b8e0071",
    "aCommit": "d2dbb68b14",
    "hunk": {
      "sourceChanges": [
        {
          "line": "fixityResult.computedChecksum.toString());",
          "type": "DELETE",
          "lineNo": 164
        }
      ],
      "targetChanges": [
        {
          "line": "fixityResult.getComputedChecksum().toString());",
          "type": "ADD",
          "lineNo": 164
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.net.URI computedChecksum"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.FixityResult fixityResult"
        },
        {
          "type": "CtLocalVariableReference",
          "value": "org.fcrepo.kernel.utils.FixityResult fixityResult"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.toString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.FixityResult.getComputedChecksum()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.FixityResult fixityResult"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.FixityResult.getComputedChecksum()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "ForEach",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "computedChecksum",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "ForEach",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getComputedChecksum",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "ForEach",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "fixityResult",
          "childCount": 0
        },
        "dstNode": {
          "label": "fixityResult",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        164
      ]
    },
    "aCommitTime": 1393040775,
    "ID": "fcrepo/fcrepo:482",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.services.DatastreamServiceIT.testChecksumBlobs()",
    "bSource": {
      "startLine": 111,
      "code": "@Test\n    public void testChecksumBlobs() throws Exception {\n\n        final Session session = repository.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testLLObject/testRepositoryContent\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\n                        \"01234567890123456789012345678901234567890123456789\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session, \"/testLLObject/\"\n                    + \"testRepositoryContent\");\n\n        final Collection<FixityResult> fixityResults =\n            datastreamService.getFixity(ds.getNode().getNode(JCR_CONTENT), ds\n                    .getContentDigest(), ds.getContentSize());\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:9578f951955d37f20b601c26591e260c1e5389bf\",\n                    fixityResult.computedChecksum.toString());\n        }\n    }"
    },
    "aSource": {
      "startLine": 111,
      "code": "@Test\n    public void testChecksumBlobs() throws Exception {\n\n        final Session session = repository.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testLLObject/testRepositoryContent\",\n                \"application/octet-stream\", null, new ByteArrayInputStream(\n                        \"01234567890123456789012345678901234567890123456789\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session, \"/testLLObject/\"\n                    + \"testRepositoryContent\");\n\n        final Collection<FixityResult> fixityResults =\n            datastreamService.getFixity(ds.getNode().getNode(JCR_CONTENT), ds\n                    .getContentDigest(), ds.getContentSize());\n\n        assertNotEquals(0, fixityResults.size());\n\n        for (final FixityResult fixityResult : fixityResults) {\n            Assert.assertEquals(\"urn:sha1:9578f951955d37f20b601c26591e260c1e5389bf\",\n                    fixityResult.getComputedChecksum().toString());\n        }\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/DatastreamServiceIT.java",
    "bCommit": "248b8e0071",
    "aCommit": "d2dbb68b14",
    "hunk": {
      "sourceChanges": [
        {
          "line": "fixityResult.computedChecksum.toString());",
          "type": "DELETE",
          "lineNo": 135
        }
      ],
      "targetChanges": [
        {
          "line": "fixityResult.getComputedChecksum().toString());",
          "type": "ADD",
          "lineNo": 135
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.toString()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.net.URI computedChecksum"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.FixityResult fixityResult"
        },
        {
          "type": "CtLocalVariableReference",
          "value": "org.fcrepo.kernel.utils.FixityResult fixityResult"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.toString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "java.net.URI.toString()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.FixityResult.getComputedChecksum()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.FixityResult fixityResult"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.FixityResult.getComputedChecksum()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.net.URI.toString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "ForEach",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "computedChecksum",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "ForEach",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getComputedChecksum",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "ForEach",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "fixityResult",
          "childCount": 0
        },
        "dstNode": {
          "label": "fixityResult",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        135
      ]
    },
    "aCommitTime": 1393040775,
    "ID": "fcrepo/fcrepo:483",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetFixityResultsModel()",
    "bSource": {
      "startLine": 460,
      "code": "@Test\n    public final void testGetFixityResultsModel() throws RepositoryException,\n                                                 URISyntaxException,\n                                                 IOException {\n        when(mockCacheEntry.getExternalIdentifier()).thenReturn(\"http://xyz\");\n        final String testFixityUri = \"http://abc\";\n        final FixityResult mockResult =\n            new FixityResult(mockCacheEntry, 123, new URI(testFixityUri));\n        mockResult.status.add(BAD_CHECKSUM);\n        mockResult.status.add(BAD_SIZE);\n\n        final List<FixityResult> mockBlobs = asList(mockResult);\n\n        final Model fixityResultsModel =\n            testObj.getJcrTriples(mockNode, mockBlobs).asModel();\n\n        logRDF(fixityResultsModel);\n        assertTrue(fixityResultsModel.contains(createResource(RESOURCE_NAMESPACE + \"test/jcr\"),\n                                                  HAS_FIXITY_RESULT,\n                                                  (RDFNode)null));\n        assertTrue(fixityResultsModel.contains(null, HAS_MESSAGE_DIGEST,\n                createResource(testFixityUri)));\n        assertTrue(fixityResultsModel.contains(null, HAS_SIZE,\n                createTypedLiteral(123)));\n\n    }"
    },
    "aSource": {
      "startLine": 460,
      "code": "@Test\n    public final void testGetFixityResultsModel() throws RepositoryException,\n                                                 URISyntaxException,\n                                                 IOException {\n        when(mockCacheEntry.getExternalIdentifier()).thenReturn(\"http://xyz\");\n        final String testFixityUri = \"http://abc\";\n        final FixityResult mockResult =\n            new FixityResultImpl(mockCacheEntry, 123, new URI(testFixityUri));\n        mockResult.getStatus().add(BAD_CHECKSUM);\n        mockResult.getStatus().add(BAD_SIZE);\n\n        final List<FixityResult> mockBlobs = asList(mockResult);\n\n        final Model fixityResultsModel =\n            testObj.getJcrTriples(mockNode, mockBlobs).asModel();\n\n        logRDF(fixityResultsModel);\n        assertTrue(fixityResultsModel.contains(createResource(RESOURCE_NAMESPACE + \"test/jcr\"),\n                                                  HAS_FIXITY_RESULT,\n                                                  (RDFNode)null));\n        assertTrue(fixityResultsModel.contains(null, HAS_MESSAGE_DIGEST,\n                createResource(testFixityUri)));\n        assertTrue(fixityResultsModel.contains(null, HAS_SIZE,\n                createTypedLiteral(123)));\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "248b8e0071",
    "aCommit": "d2dbb68b14",
    "hunk": {
      "sourceChanges": [
        {
          "line": "new FixityResult(mockCacheEntry, 123, new URI(testFixityUri));",
          "type": "DELETE",
          "lineNo": 467
        },
        {
          "line": "mockResult.status.add(BAD_CHECKSUM);",
          "type": "DELETE",
          "lineNo": 468
        },
        {
          "line": "mockResult.status.add(BAD_SIZE);",
          "type": "DELETE",
          "lineNo": 469
        }
      ],
      "targetChanges": [
        {
          "line": "new FixityResultImpl(mockCacheEntry, 123, new URI(testFixityUri));",
          "type": "ADD",
          "lineNo": 467
        },
        {
          "line": "mockResult.getStatus().add(BAD_CHECKSUM);",
          "type": "ADD",
          "lineNo": 468
        },
        {
          "line": "mockResult.getStatus().add(BAD_SIZE);",
          "type": "ADD",
          "lineNo": 469
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.FixityResult.FixityResult(CacheEntry,long,URI)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResult"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.LowLevelCacheEntry mockCacheEntry"
        },
        {
          "type": "CtLiteral",
          "value": "int '123'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.net.URI.URI(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URI"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String testFixityUri"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Set.add(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.Set status"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.FixityResult mockResult"
        },
        {
          "type": "CtLocalVariableReference",
          "value": "org.fcrepo.kernel.utils.FixityResult mockResult"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Set.add(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.FixityResult$FixityState BAD_CHECKSUM"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Set.add(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.Set status"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.FixityResult mockResult"
        },
        {
          "type": "CtLocalVariableReference",
          "value": "org.fcrepo.kernel.utils.FixityResult mockResult"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Set.add(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.FixityResult$FixityState BAD_SIZE"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.FixityResultImpl.FixityResultImpl(CacheEntry,long,URI)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.FixityResultImpl"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.LowLevelCacheEntry mockCacheEntry"
        },
        {
          "type": "CtLiteral",
          "value": "int '123'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.net.URI.URI(String)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URI"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String testFixityUri"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Set.add(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.FixityResult.getStatus()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.FixityResult mockResult"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.FixityResult.getStatus()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Set.add(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.FixityResult$FixityState BAD_CHECKSUM"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Set.add(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.FixityResult.getStatus()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.FixityResult mockResult"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.FixityResult.getStatus()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Set.add(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.FixityResult$FixityState BAD_SIZE"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.utils.FixityResult()",
          "childCount": 3
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.utils.FixityResultImpl()",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "status",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "status",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getStatus",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "getStatus",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "FieldRead",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockResult",
          "childCount": 0
        },
        "dstNode": {
          "label": "mockResult",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "FieldRead",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockResult",
          "childCount": 0
        },
        "dstNode": {
          "label": "mockResult",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        467,
        468,
        469
      ]
    },
    "aCommitTime": 1393040775,
    "ID": "fcrepo/fcrepo:484",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraFixityTest.testGetDatastreamFixity()",
    "bSource": {
      "startLine": 74,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException,\n                                         IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String path = \"/objects/\" + pid + \"/testDS\";\n        final String dsId = \"testDS\";\n        final Datastream mockDs = mockDatastream(pid, dsId, null);\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDatastreams.getFixityResultsModel(any(GraphSubjects.class),\n                eq(mockDs))).thenReturn(new RdfStream());\n        testObj.getDatastreamFixity(createPathList(\"objects\", pid, \"testDS\"),\n                mockRequest, uriInfo);\n        verify(mockDatastreams).getFixityResultsModel(any(GraphSubjects.class),\n                eq(mockDs));\n    }"
    },
    "aSource": {
      "startLine": 72,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String path = \"/objects/\" + pid + \"/testDS\";\n        final String dsId = \"testDS\";\n        final Datastream mockDs = mockDatastream(pid, dsId, null);\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDatastreams.getFixityResultsModel(any(GraphSubjects.class),\n                eq(mockDs))).thenReturn(new RdfStream());\n        testObj.getDatastreamFixity(createPathList(\"objects\", pid, \"testDS\"),\n                mockRequest, uriInfo);\n        verify(mockDatastreams).getFixityResultsModel(any(GraphSubjects.class),\n                eq(mockDs));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testGetDatastreamFixity() throws RepositoryException,",
          "type": "DELETE",
          "lineNo": 75
        },
        {
          "line": "IOException {",
          "type": "DELETE",
          "lineNo": 76
        }
      ],
      "targetChanges": [
        {
          "line": "public void testGetDatastreamFixity() throws RepositoryException {",
          "type": "ADD",
          "lineNo": 73
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraFixityTest.testGetDatastreamFixity()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraFixityTest.testGetDatastreamFixity()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        74
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:562",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraWorkspacesIT.shouldDemonstratePathsAndWorkspaces()",
    "bSource": {
      "startLine": 49,
      "code": "@Test\n    public void shouldDemonstratePathsAndWorkspaces() throws IOException,\n        RepositoryException {\n\n        final String workspace = randomUUID().toString();\n        final String pid = randomUUID().toString();\n\n        final HttpPost httpCreateWorkspace =\n            new HttpPost(serverAddress + \"fcr:workspaces/\" + workspace);\n        final HttpResponse createWorkspaceResponse =\n            execute(httpCreateWorkspace);\n        assertEquals(201, createWorkspaceResponse.getStatusLine()\n                .getStatusCode());\n        assertEquals(serverAddress + \"workspace:\" + workspace + \"/\", createWorkspaceResponse.getFirstHeader(\"Location\").getValue());\n\n        createObject(\"workspace:\" + workspace + \"/\" + pid);\n\n        final HttpGet httpGet =\n            new HttpGet(serverAddress + \"workspace:\" + workspace + \"/\" + pid);\n        final GraphStore graphStore = getGraphStore(httpGet);\n        logger.info(graphStore.toString());\n    }"
    },
    "aSource": {
      "startLine": 47,
      "code": "@Test\n    public void shouldDemonstratePathsAndWorkspaces() throws IOException {\n\n        final String workspace = randomUUID().toString();\n        final String pid = randomUUID().toString();\n\n        final HttpPost httpCreateWorkspace =\n            new HttpPost(serverAddress + \"fcr:workspaces/\" + workspace);\n        final HttpResponse createWorkspaceResponse =\n            execute(httpCreateWorkspace);\n        assertEquals(201, createWorkspaceResponse.getStatusLine()\n                .getStatusCode());\n        assertEquals(serverAddress + \"workspace:\" + workspace + \"/\", createWorkspaceResponse.getFirstHeader(\"Location\").getValue());\n\n        createObject(\"workspace:\" + workspace + \"/\" + pid);\n\n        final HttpGet httpGet =\n            new HttpGet(serverAddress + \"workspace:\" + workspace + \"/\" + pid);\n        final GraphStore graphStore = getGraphStore(httpGet);\n        logger.info(graphStore.toString());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraWorkspacesIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraWorkspacesIT.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void shouldDemonstratePathsAndWorkspaces() throws IOException,",
          "type": "DELETE",
          "lineNo": 50
        },
        {
          "line": "RepositoryException {",
          "type": "DELETE",
          "lineNo": 51
        }
      ],
      "targetChanges": [
        {
          "line": "public void shouldDemonstratePathsAndWorkspaces() throws IOException {",
          "type": "ADD",
          "lineNo": 48
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.integration.http.api.FedoraWorkspacesIT.shouldDemonstratePathsAndWorkspaces()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.integration.http.api.FedoraWorkspacesIT.shouldDemonstratePathsAndWorkspaces()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        49
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:563",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.commons.responses.GraphStreamingOutputTest.testStuff()",
    "bSource": {
      "startLine": 46,
      "code": "@Test\n    public void testStuff() throws WebApplicationException, IOException,\n        RepositoryException {\n        final GraphStore graphStore =\n                new GraphStoreBasic(DatasetFactory.create(createDefaultModel()));\n        final Graph g = new GraphMem();\n        g.add(new Triple(createURI(\"test:subject\"),\n                createURI(\"test:predicate\"), createURI(\"test:object\")));\n        graphStore.setDefaultGraph(g);\n        final GraphStoreStreamingOutput test =\n                new GraphStoreStreamingOutput(graphStore, NTRIPLES_TYPE);\n        try (final ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            test.write(out);\n            final String serialized = out.toString();\n            LOGGER.debug(\"Created serialized RDF: \\n {}\", serialized);\n            assertTrue(\"Couldn't find test subject!\", serialized\n                    .contains(\"test:subject\"));\n            assertTrue(\"Couldn't find test predicate!\", serialized\n                    .contains(\"test:predicate\"));\n            assertTrue(\"Couldn't find test object!\", serialized\n                    .contains(\"test:object\"));\n        }\n    }"
    },
    "aSource": {
      "startLine": 45,
      "code": "@Test\n    public void testStuff() throws WebApplicationException, IOException {\n        final GraphStore graphStore =\n                new GraphStoreBasic(DatasetFactory.create(createDefaultModel()));\n        final Graph g = new GraphMem();\n        g.add(new Triple(createURI(\"test:subject\"),\n                createURI(\"test:predicate\"), createURI(\"test:object\")));\n        graphStore.setDefaultGraph(g);\n        final GraphStoreStreamingOutput test =\n                new GraphStoreStreamingOutput(graphStore, NTRIPLES_TYPE);\n        try (final ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            test.write(out);\n            final String serialized = out.toString();\n            LOGGER.debug(\"Created serialized RDF: \\n {}\", serialized);\n            assertTrue(\"Couldn't find test subject!\", serialized\n                    .contains(\"test:subject\"));\n            assertTrue(\"Couldn't find test predicate!\", serialized\n                    .contains(\"test:predicate\"));\n            assertTrue(\"Couldn't find test object!\", serialized\n                    .contains(\"test:object\"));\n        }\n    }"
    },
    "bPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/GraphStreamingOutputTest.java",
    "aPath": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/responses/GraphStreamingOutputTest.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testStuff() throws WebApplicationException, IOException,",
          "type": "DELETE",
          "lineNo": 47
        },
        {
          "line": "RepositoryException {",
          "type": "DELETE",
          "lineNo": 48
        }
      ],
      "targetChanges": [
        {
          "line": "public void testStuff() throws WebApplicationException, IOException {",
          "type": "ADD",
          "lineNo": 46
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.commons.responses.GraphStreamingOutputTest.testStuff()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.WebApplicationException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.commons.responses.GraphStreamingOutputTest.testStuff()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.WebApplicationException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        47
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:564",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraVersionsTest.testGetVersion()",
    "bSource": {
      "startLine": 132,
      "code": "@Test\n    public void testGetVersion() throws RepositoryException, IOException {\n        final String pid = \"FedoraVersioningTest\";\n        final String versionLabel = \"v0.0.1\";\n        when(\n                mockNodes.getObject(any(Session.class), any(String.class),\n                        any(String.class))).thenReturn(mockResource);\n        when(mockRequest.selectVariant(POSSIBLE_RDF_VARIANTS)).thenReturn(\n                mockVariant);\n        when(mockVariant.getMediaType()).thenReturn(\n                new MediaType(\"text\", \"turtle\"));\n        when(mockResource.getTriples(any(GraphSubjects.class))).thenReturn(mockRdfStream);\n        final RdfStream response = testObj.getVersion(createPathList(pid), versionLabel, mockRequest, TestHelpers\n                .getUriInfoImpl());\n        assertEquals(\"Got wrong triples!\", mockRdfStream, response);\n    }"
    },
    "aSource": {
      "startLine": 131,
      "code": "@Test\n    public void testGetVersion() throws RepositoryException {\n        final String pid = \"FedoraVersioningTest\";\n        final String versionLabel = \"v0.0.1\";\n        when(\n                mockNodes.getObject(any(Session.class), any(String.class),\n                        any(String.class))).thenReturn(mockResource);\n        when(mockRequest.selectVariant(POSSIBLE_RDF_VARIANTS)).thenReturn(\n                mockVariant);\n        when(mockVariant.getMediaType()).thenReturn(\n                new MediaType(\"text\", \"turtle\"));\n        when(mockResource.getTriples(any(GraphSubjects.class))).thenReturn(mockRdfStream);\n        final RdfStream response = testObj.getVersion(createPathList(pid), versionLabel, mockRequest, TestHelpers\n                .getUriInfoImpl());\n        assertEquals(\"Got wrong triples!\", mockRdfStream, response);\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testGetVersion() throws RepositoryException, IOException {",
          "type": "DELETE",
          "lineNo": 133
        }
      ],
      "targetChanges": [
        {
          "line": "public void testGetVersion() throws RepositoryException {",
          "type": "ADD",
          "lineNo": 132
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraVersionsTest.testGetVersion()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraVersionsTest.testGetVersion()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        132
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:565",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.rdf.impl.mappings.ItemDefinitionToTriplesTest.testGoodDefinition()",
    "bSource": {
      "startLine": 74,
      "code": "@Test\n    public void testGoodDefinition() throws IOException, RepositoryException {\n        final Set<Triple> results =\n            copyOf(testMapper.apply(mockItemDefinition));\n        LOGGER.debug(\"Created RDF: \");\n        for (final Triple t : results) {\n            LOGGER.debug(\"{}\", t);\n        }\n\n        final Node subject =\n            getResource((ItemDefinition) mockItemDefinition).asNode();\n        assertTrue(results.contains(create(subject, type.asNode(), Property\n                .asNode())));\n        assertTrue(results.contains(create(subject, label.asNode(),\n                createLiteral(mockItemDefinition.getName()))));\n        assertTrue(results.contains(create(subject, domain.asNode(),\n                mockRDFNode)));\n    }"
    },
    "aSource": {
      "startLine": 73,
      "code": "@Test\n    public void testGoodDefinition() throws RepositoryException {\n        final Set<Triple> results =\n            copyOf(testMapper.apply(mockItemDefinition));\n        LOGGER.debug(\"Created RDF: \");\n        for (final Triple t : results) {\n            LOGGER.debug(\"{}\", t);\n        }\n\n        final Node subject =\n            getResource((ItemDefinition) mockItemDefinition).asNode();\n        assertTrue(results.contains(create(subject, type.asNode(), Property\n                .asNode())));\n        assertTrue(results.contains(create(subject, label.asNode(),\n                createLiteral(mockItemDefinition.getName()))));\n        assertTrue(results.contains(create(subject, domain.asNode(),\n                mockRDFNode)));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/mappings/ItemDefinitionToTriplesTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/mappings/ItemDefinitionToTriplesTest.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testGoodDefinition() throws IOException, RepositoryException {",
          "type": "DELETE",
          "lineNo": 75
        }
      ],
      "targetChanges": [
        {
          "line": "public void testGoodDefinition() throws RepositoryException {",
          "type": "ADD",
          "lineNo": 74
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.rdf.impl.mappings.ItemDefinitionToTriplesTest.testGoodDefinition()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.rdf.impl.mappings.ItemDefinitionToTriplesTest.testGoodDefinition()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        74
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:566",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.FedoraObjectIT.testCreatedObject()",
    "bSource": {
      "startLine": 53,
      "code": "@Test\n    public void testCreatedObject() throws RepositoryException, IOException {\n        Session session = repo.login();\n        objectService.createObject(session, \"/testObject\");\n        session.save();\n        session.logout();\n        session = repo.login();\n        final FedoraObject obj =\n            objectService.getObject(session, \"/testObject\");\n        assertNotNull(\"Couldn't find object!\", obj);\n    }"
    },
    "aSource": {
      "startLine": 50,
      "code": "@Test\n    public void testCreatedObject() throws RepositoryException {\n        Session session = repo.login();\n        objectService.createObject(session, \"/testObject\");\n        session.save();\n        session.logout();\n        session = repo.login();\n        final FedoraObject obj =\n            objectService.getObject(session, \"/testObject\");\n        assertNotNull(\"Couldn't find object!\", obj);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/FedoraObjectIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/FedoraObjectIT.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testCreatedObject() throws RepositoryException, IOException {",
          "type": "DELETE",
          "lineNo": 54
        }
      ],
      "targetChanges": [
        {
          "line": "public void testCreatedObject() throws RepositoryException {",
          "type": "ADD",
          "lineNo": 51
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.integration.kernel.FedoraObjectIT.testCreatedObject()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.integration.kernel.FedoraObjectIT.testCreatedObject()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        51
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:567",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.services.functions.CheckCacheEntryFixityTest.testApply()",
    "bSource": {
      "startLine": 43,
      "code": "@Test\n    public void testApply() throws RepositoryException,\n        NoSuchAlgorithmException {\n        final URI testUri = URI.create(\"sha1:foo:bar\");\n        final long testSize = new SecureRandom().nextLong();\n        final CheckCacheEntryFixity testObj =\n                new CheckCacheEntryFixity(testUri, testSize);\n        testObj.apply(mockEntry);\n        verify(mockEntry).checkFixity(testUri, testSize);\n    }"
    },
    "aSource": {
      "startLine": 42,
      "code": "@Test\n    public void testApply() throws RepositoryException {\n        final URI testUri = URI.create(\"sha1:foo:bar\");\n        final long testSize = new SecureRandom().nextLong();\n        final CheckCacheEntryFixity testObj =\n                new CheckCacheEntryFixity(testUri, testSize);\n        testObj.apply(mockEntry);\n        verify(mockEntry).checkFixity(testUri, testSize);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/functions/CheckCacheEntryFixityTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/functions/CheckCacheEntryFixityTest.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testApply() throws RepositoryException,",
          "type": "DELETE",
          "lineNo": 44
        },
        {
          "line": "NoSuchAlgorithmException {",
          "type": "DELETE",
          "lineNo": 45
        }
      ],
      "targetChanges": [
        {
          "line": "public void testApply() throws RepositoryException {",
          "type": "ADD",
          "lineNo": 43
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.services.functions.CheckCacheEntryFixityTest.testApply()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.security.NoSuchAlgorithmException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.services.functions.CheckCacheEntryFixityTest.testApply()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.security.NoSuchAlgorithmException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        44
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:568",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.services.functions.GetCacheStoreTest.testApply()",
    "bSource": {
      "startLine": 68,
      "code": "@Test\n    public void testApply() throws LoginException {\n        final GetCacheStore testObj = new GetCacheStore();\n        testObj.apply(mockCache);\n        verify(mockCR).getComponent((Class<?>) any(Class.class));\n    }"
    },
    "aSource": {
      "startLine": 66,
      "code": "@Test\n    public void testApply() {\n        final GetCacheStore testObj = new GetCacheStore();\n        testObj.apply(mockCache);\n        verify(mockCR).getComponent((Class<?>) any(Class.class));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/functions/GetCacheStoreTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/functions/GetCacheStoreTest.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testApply() throws LoginException {",
          "type": "DELETE",
          "lineNo": 69
        }
      ],
      "targetChanges": [
        {
          "line": "public void testApply() {",
          "type": "ADD",
          "lineNo": 67
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.services.functions.GetCacheStoreTest.testApply()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.LoginException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.services.functions.GetCacheStoreTest.testApply()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        67
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:569",
    "trivial": null
  },
  {
    "name": "org.modeshape.jcr.GetBinaryStoreIT.testApply()",
    "bSource": {
      "startLine": 38,
      "code": "@Test\n    public void testApply() throws RepositoryException {\n        final GetBinaryStore testObj = new GetBinaryStore();\n\n        final BinaryStore binaryStore = testObj.apply(repo);\n\n        assertThat(binaryStore, instanceOf(TransientBinaryStore.class));\n\n    }"
    },
    "aSource": {
      "startLine": 36,
      "code": "@Test\n    public void testApply() {\n        final GetBinaryStore testObj = new GetBinaryStore();\n\n        final BinaryStore binaryStore = testObj.apply(repo);\n\n        assertThat(binaryStore, instanceOf(TransientBinaryStore.class));\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/modeshape/jcr/GetBinaryStoreIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/modeshape/jcr/GetBinaryStoreIT.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testApply() throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 39
        }
      ],
      "targetChanges": [
        {
          "line": "public void testApply() {",
          "type": "ADD",
          "lineNo": 37
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.modeshape.jcr.GetBinaryStoreIT.testApply()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.modeshape.jcr.GetBinaryStoreIT.testApply()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        37
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:570",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.LowLevelCacheEntryTest.testGetFixity()",
    "bSource": {
      "startLine": 189,
      "code": "@Test\n    public void testGetFixity() throws RepositoryException, IOException,\n            NoSuchAlgorithmException {\n        final LowLevelCacheEntry ispnEntry =\n                new LocalBinaryStoreEntry(mockStore, testKey);\n        final byte[] bytes = new byte[] {0, 1, 2, 3, 4};\n        when(mockStore.getInputStream(testKey)).thenAnswer(\n                new Answer<InputStream>() {\n\n                    @Override\n                    public InputStream\n                            answer(final InvocationOnMock invocation)\n                                    throws Throwable {\n                        return new ByteArrayInputStream(bytes);\n                    }\n\n                });\n        final MessageDigest d = MessageDigest.getInstance(\"SHA-1\");\n        final byte[] digested = d.digest(bytes);\n        URI testCS = ContentDigest.asURI(\"SHA-1\", digested);\n        LOGGER.debug(testCS.toString());\n        FixityResult actual = ispnEntry.checkFixity(testCS, bytes.length);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(SUCCESS));\n\n        // report the wrong size\n        actual = ispnEntry.checkFixity(testCS, bytes.length + 1);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(BAD_SIZE));\n        // break the digest\n        digested[0] += 9;\n        testCS = ContentDigest.asURI(\"SHA-1\", digested);\n        actual = ispnEntry.checkFixity(testCS, bytes.length);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(BAD_CHECKSUM));\n        // report the wrong size and the wrong digest\n        actual = ispnEntry.checkFixity(testCS, bytes.length + 1);\n        assertEquals(2, actual.status.size());\n        assertEquals(true, actual.status.contains(BAD_CHECKSUM));\n        assertEquals(true, actual.status.contains(BAD_SIZE));\n    }"
    },
    "aSource": {
      "startLine": 188,
      "code": "@Test\n    public void testGetFixity() throws RepositoryException, NoSuchAlgorithmException {\n        final LowLevelCacheEntry ispnEntry =\n                new LocalBinaryStoreEntry(mockStore, testKey);\n        final byte[] bytes = new byte[] {0, 1, 2, 3, 4};\n        when(mockStore.getInputStream(testKey)).thenAnswer(\n                new Answer<InputStream>() {\n\n                    @Override\n                    public InputStream\n                            answer(final InvocationOnMock invocation)\n                                    throws Throwable {\n                        return new ByteArrayInputStream(bytes);\n                    }\n\n                });\n        final MessageDigest d = MessageDigest.getInstance(\"SHA-1\");\n        final byte[] digested = d.digest(bytes);\n        URI testCS = ContentDigest.asURI(\"SHA-1\", digested);\n        LOGGER.debug(testCS.toString());\n        FixityResult actual = ispnEntry.checkFixity(testCS, bytes.length);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(SUCCESS));\n\n        // report the wrong size\n        actual = ispnEntry.checkFixity(testCS, bytes.length + 1);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(BAD_SIZE));\n        // break the digest\n        digested[0] += 9;\n        testCS = ContentDigest.asURI(\"SHA-1\", digested);\n        actual = ispnEntry.checkFixity(testCS, bytes.length);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(BAD_CHECKSUM));\n        // report the wrong size and the wrong digest\n        actual = ispnEntry.checkFixity(testCS, bytes.length + 1);\n        assertEquals(2, actual.status.size());\n        assertEquals(true, actual.status.contains(BAD_CHECKSUM));\n        assertEquals(true, actual.status.contains(BAD_SIZE));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/LowLevelCacheEntryTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/LowLevelCacheEntryTest.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testGetFixity() throws RepositoryException, IOException,",
          "type": "DELETE",
          "lineNo": 190
        },
        {
          "line": "NoSuchAlgorithmException {",
          "type": "DELETE",
          "lineNo": 191
        }
      ],
      "targetChanges": [
        {
          "line": "public void testGetFixity() throws RepositoryException, NoSuchAlgorithmException {",
          "type": "ADD",
          "lineNo": 189
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.utils.LowLevelCacheEntryTest.testGetFixity()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.security.NoSuchAlgorithmException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.utils.LowLevelCacheEntryTest.testGetFixity()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.security.NoSuchAlgorithmException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        189
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:571",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testAsModel()",
    "bSource": {
      "startLine": 200,
      "code": "@Test\n    public void testAsModel() throws RepositoryException {\n        testStream = new RdfStream(singletonList(triple));\n        testStream.namespaces(testNamespaces);\n\n        final Model testModel = testStream.asModel();\n        assertEquals(testModel.getNsPrefixMap(), testNamespaces);\n        assertTrue(testModel.contains(testModel.asStatement(triple)));\n    }"
    },
    "aSource": {
      "startLine": 199,
      "code": "@Test\n    public void testAsModel() {\n        testStream = new RdfStream(singletonList(triple));\n        testStream.namespaces(testNamespaces);\n\n        final Model testModel = testStream.asModel();\n        assertEquals(testModel.getNsPrefixMap(), testNamespaces);\n        assertTrue(testModel.contains(testModel.asStatement(triple)));\n    }"
    },
    "bPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "c1bb4d1778",
    "aCommit": "f4daad5f65",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testAsModel() throws RepositoryException {",
          "type": "DELETE",
          "lineNo": 201
        }
      ],
      "targetChanges": [
        {
          "line": "public void testAsModel() {",
          "type": "ADD",
          "lineNo": 200
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testAsModel()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testAsModel()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "THROWN_TYPES",
        "parents": [
          "Method",
          "root"
        ]
      }
    ],
    "refactorings": [
      "REMOVE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        200
      ]
    },
    "aCommitTime": 1392138510,
    "ID": "fcrepo/fcrepo:572",
    "trivial": null
  },
  {
    "name": "org.fcrepo.generator.DublinCoreGeneratorTest.testGetObjectAsDublinCore()",
    "bSource": {
      "startLine": 62,
      "code": "@Test\n    public void testGetObjectAsDublinCore() throws RepositoryException {\n        testObj.dcgenerators = asList(mockGenerator);\n        final InputStream mockIS = mock(InputStream.class);\n        final FedoraResource mockResource = mock(FedoraResource.class);\n        when(mockResource.getNode()).thenReturn(mock(Node.class));\n        when(mockNodeService.getObject(mockSession, \"/objects/foo\"))\n                .thenReturn(mockResource);\n        when(mockGenerator.getStream(any(Node.class))).thenReturn(mockIS);\n        testObj.getObjectAsDublinCore(createPathList(\"objects\", \"foo\"));\n\n    }"
    },
    "aSource": {
      "startLine": 62,
      "code": "@Test\n    public void testGetObjectAsDublinCore() throws RepositoryException {\n        testObj.dcgenerators = asList(mockGenerator);\n        final InputStream mockIS = mock(InputStream.class);\n        final FedoraResourceImpl mockResource = mock(FedoraResourceImpl.class);\n        when(mockResource.getNode()).thenReturn(mock(Node.class));\n        when(mockNodeService.getObject(mockSession, \"/objects/foo\"))\n                .thenReturn(mockResource);\n        when(mockGenerator.getStream(any(Node.class))).thenReturn(mockIS);\n        testObj.getObjectAsDublinCore(createPathList(\"objects\", \"foo\"));\n\n    }"
    },
    "bPath": "fcrepo-generator-dc/src/test/java/org/fcrepo/generator/DublinCoreGeneratorTest.java",
    "aPath": "fcrepo-generator-dc/src/test/java/org/fcrepo/generator/DublinCoreGeneratorTest.java",
    "bCommit": "4007dd3481",
    "aCommit": "c09a9b7b9e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraResource mockResource = mock(FedoraResource.class);",
          "type": "DELETE",
          "lineNo": 66
        }
      ],
      "targetChanges": [
        {
          "line": "final FedoraResourceImpl mockResource = mock(FedoraResourceImpl.class);",
          "type": "ADD",
          "lineNo": 66
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResource mockResource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResource"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraResourceImpl mockResource"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraResourceImpl"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.FedoraResource",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.FedoraResourceImpl",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.FedoraResource",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.FedoraResourceImpl",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        66
      ]
    },
    "aCommitTime": 1390956877,
    "ID": "fcrepo/fcrepo:449",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.auth.roles.basic.integration.BasicRolesPepUnauthenticatedUserIT.testUnauthenticatedReaderCannotReadOpenObjRestrictedDatastream()",
    "bSource": {
      "startLine": 110,
      "code": "/* restricted datastream */\r\n    @Test\r\n    public void\r\n    testUnauthenticatedReaderCannotReadOpenObjRestrictedDatastream()\r\n            throws ClientProtocolException, IOException {\r\n        assertEquals(\r\n                \"Unauthenticated user cannot read restricted datastream testparent2/tsp2_data\",\r\n                FORBIDDEN.getStatusCode(), canRead(null,\r\n                        \"testparent2/tsp2_data\", false));\r\n    }"
    },
    "aSource": {
      "startLine": 111,
      "code": "/* restricted datastream */\r\n    @Test\r\n    public void\r\n    testUnauthenticatedReaderCannotReadOpenObjRestrictedDatastream()\r\n            throws ClientProtocolException, IOException {\r\n        assertEquals(\r\n                \"Unauthenticated user should not be allowed to read restricted datastream testparent2/tsp2_data!\",\r\n                FORBIDDEN.getStatusCode(), canRead(null,\r\n                        \"testparent2/tsp2_data\", false));\r\n    }"
    },
    "bPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesPepUnauthenticatedUserIT.java",
    "aPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesPepUnauthenticatedUserIT.java",
    "bCommit": "79f2b356ec",
    "aCommit": "ad904b4fe7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"Unauthenticated user cannot read restricted datastream testparent2/tsp2_data\",",
          "type": "DELETE",
          "lineNo": 116
        }
      ],
      "targetChanges": [
        {
          "line": "\"Unauthenticated user should not be allowed to read restricted datastream testparent2/tsp2_data!\",",
          "type": "ADD",
          "lineNo": 117
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Unauthenticated user cannot read restricted datastream testparent2/tsp2_data'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Unauthenticated user should not be allowed to read restricted datastream testparent2/tsp2_data!'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Unauthenticated user cannot read restricted datastream testparent2/tsp2_data\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Unauthenticated user should not be allowed to read restricted datastream testparent2/tsp2_data!\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1389565074,
    "ID": "fcrepo/fcrepo:641",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.roles.basic.integration.BasicRolesReaderIT.testReaderCannotUpdateRestrictedChildObjRestrictedDatastream()",
    "bSource": {
      "startLine": 237,
      "code": "@Test\r\n    public void testReaderCannotUpdateRestrictedChildObjRestrictedDatastream()\r\n            throws ClientProtocolException, IOException {\r\n        assertEquals(\r\n                \"Reader cannot update datastream testparent1/testchild2WithACL/tsc1_data\",\r\n                FORBIDDEN.getStatusCode(), canUpdateDS(\"examplereader\",\r\n                        \"testparent1/testchild2WithACL\", \"tsc1_data\", true));\r\n    }"
    },
    "aSource": {
      "startLine": 240,
      "code": "@Test\r\n    public void testReaderCannotUpdateRestrictedChildObjRestrictedDatastream()\r\n            throws ClientProtocolException, IOException {\r\n        assertEquals(\r\n                \"Reader should not be allowed to update datastream testparent1/testchild2WithACL/tsc1_data!\",\r\n                FORBIDDEN.getStatusCode(), canUpdateDS(\"examplereader\",\r\n                        \"testparent1/testchild2WithACL\", \"tsc1_data\", true));\r\n    }"
    },
    "bPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesReaderIT.java",
    "aPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesReaderIT.java",
    "bCommit": "79f2b356ec",
    "aCommit": "ad904b4fe7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"Reader cannot update datastream testparent1/testchild2WithACL/tsc1_data\",",
          "type": "DELETE",
          "lineNo": 241
        }
      ],
      "targetChanges": [
        {
          "line": "\"Reader should not be allowed to update datastream testparent1/testchild2WithACL/tsc1_data!\",",
          "type": "ADD",
          "lineNo": 244
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Reader cannot update datastream testparent1/testchild2WithACL/tsc1_data'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Reader should not be allowed to update datastream testparent1/testchild2WithACL/tsc1_data!'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Reader cannot update datastream testparent1/testchild2WithACL/tsc1_data\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Reader should not be allowed to update datastream testparent1/testchild2WithACL/tsc1_data!\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1389565074,
    "ID": "fcrepo/fcrepo:642",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.roles.basic.integration.BasicRolesWriterIT.testWriterCannotDeleteOpenObj()",
    "bSource": {
      "startLine": 477,
      "code": "/* Deletions */\r\n    @Test\r\n    public void testWriterCannotDeleteOpenObj() throws ClientProtocolException,\r\n    IOException {\r\n        assertEquals(\"Writer cannot delete object testparent3\", FORBIDDEN\r\n                .getStatusCode(), canDelete(\"examplewriter\", \"testparent3\",\r\n                        true));\r\n    }"
    },
    "aSource": {
      "startLine": 480,
      "code": "/* Deletions */\r\n    @Test\r\n    public void testWriterCannotDeleteOpenObj() throws ClientProtocolException,\r\n    IOException {\r\n        assertEquals(\r\n                \"Writer should not be allowed to delete object testparent3!\",\r\n                FORBIDDEN\r\n                .getStatusCode(), canDelete(\"examplewriter\", \"testparent3\",\r\n                        true));\r\n    }"
    },
    "bPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesWriterIT.java",
    "aPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesWriterIT.java",
    "bCommit": "79f2b356ec",
    "aCommit": "ad904b4fe7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(\"Writer cannot delete object testparent3\", FORBIDDEN",
          "type": "DELETE",
          "lineNo": 481
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(",
          "type": "ADD",
          "lineNo": 484
        },
        {
          "line": "\"Writer should not be allowed to delete object testparent3!\",",
          "type": "ADD",
          "lineNo": 485
        },
        {
          "line": "FORBIDDEN",
          "type": "ADD",
          "lineNo": 486
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>,int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>,int)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Writer cannot delete object testparent3'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.Response.Status$FORBIDDEN"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>,int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>,int)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Writer should not be allowed to delete object testparent3!'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.Response.Status$FORBIDDEN"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Writer cannot delete object testparent3\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Writer should not be allowed to delete object testparent3!\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1389565074,
    "ID": "fcrepo/fcrepo:643",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.roles.basic.integration.BasicRolesWriterIT.testWriterCanWriteDatastreamOnRestrictedChildObj()",
    "bSource": {
      "startLine": 214,
      "code": "@Test\r\n    public void testWriterCanWriteDatastreamOnRestrictedChildObj()\r\n            throws ClientProtocolException, IOException {\r\n        assertEquals(\r\n                \"Writer can write datastream to testparent1/testchild2WithACL\",\r\n                CREATED.getStatusCode(), canAddDS(\"examplewriter\",\r\n                        \"testparent1/testchild2WithACL\", TESTDS, true));\r\n    }"
    },
    "aSource": {
      "startLine": 216,
      "code": "@Test\r\n    public void testWriterCanWriteDatastreamOnRestrictedChildObj()\r\n            throws ClientProtocolException, IOException {\r\n        assertEquals(\r\n                \"Writer cannot write datastream to testparent1/testchild2WithACL!\",\r\n                CREATED.getStatusCode(), canAddDS(\"examplewriter\",\r\n                        \"testparent1/testchild2WithACL\", TESTDS, true));\r\n    }"
    },
    "bPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesWriterIT.java",
    "aPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesWriterIT.java",
    "bCommit": "79f2b356ec",
    "aCommit": "ad904b4fe7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"Writer can write datastream to testparent1/testchild2WithACL\",",
          "type": "DELETE",
          "lineNo": 218
        }
      ],
      "targetChanges": [
        {
          "line": "\"Writer cannot write datastream to testparent1/testchild2WithACL!\",",
          "type": "ADD",
          "lineNo": 220
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Writer can write datastream to testparent1/testchild2WithACL'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Writer cannot write datastream to testparent1/testchild2WithACL!'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Writer can write datastream to testparent1/testchild2WithACL\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Writer cannot write datastream to testparent1/testchild2WithACL!\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1389565074,
    "ID": "fcrepo/fcrepo:644",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.roles.basic.integration.BasicRolesWriterIT.testWriterCannotAddACLToAdminObj()",
    "bSource": {
      "startLine": 411,
      "code": "@Test\r\n    public void testWriterCannotAddACLToAdminObj()\r\n            throws ClientProtocolException, IOException {\r\n        assertEquals(\r\n                \"Writer cannot add an ACL to testparent2/testchild5WithACL\",\r\n                FORBIDDEN.getStatusCode(), canAddACL(\"examplewriter\",\r\n                        \"testparent2/testchild5WithACL\", \"everyone\", \"admin\",\r\n                        true));\r\n    }"
    },
    "aSource": {
      "startLine": 414,
      "code": "@Test\r\n    public void testWriterCannotAddACLToAdminObj()\r\n            throws ClientProtocolException, IOException {\r\n        assertEquals(\r\n                \"Writer should not be allowed to to add an ACL to testparent2/testchild5WithACL!\",\r\n                FORBIDDEN.getStatusCode(), canAddACL(\"examplewriter\",\r\n                        \"testparent2/testchild5WithACL\", \"everyone\", \"admin\",\r\n                        true));\r\n    }"
    },
    "bPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesWriterIT.java",
    "aPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesWriterIT.java",
    "bCommit": "79f2b356ec",
    "aCommit": "ad904b4fe7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"Writer cannot add an ACL to testparent2/testchild5WithACL\",",
          "type": "DELETE",
          "lineNo": 415
        }
      ],
      "targetChanges": [
        {
          "line": "\"Writer should not be allowed to to add an ACL to testparent2/testchild5WithACL!\",",
          "type": "ADD",
          "lineNo": 418
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Writer cannot add an ACL to testparent2/testchild5WithACL'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Writer should not be allowed to to add an ACL to testparent2/testchild5WithACL!'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Writer cannot add an ACL to testparent2/testchild5WithACL\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Writer should not be allowed to to add an ACL to testparent2/testchild5WithACL!\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1389565074,
    "ID": "fcrepo/fcrepo:645",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.roles.basic.integration.BasicRolesAdminIT.testAdminCanReadWriterRestrictedChildObjWriterRestrictedDatastream()",
    "bSource": {
      "startLine": 327,
      "code": "@Test\n    public\n    void\n    testAdminCanReadWriterRestrictedChildObjWriterRestrictedDatastream()\n            throws ClientProtocolException, IOException {\n        assertEquals(\n                \"Admin can read datastream testparent1/testchild4WithACL/tsc1_data\",\n                OK.getStatusCode(), canRead(\"exampleadmin\",\n                        \"testparent1/testchild4WithACL/tsc1_data\", true));\n    }"
    },
    "aSource": {
      "startLine": 329,
      "code": "@Test\n    public\n    void\n    testAdminCanReadWriterRestrictedChildObjWriterRestrictedDatastream()\n            throws ClientProtocolException, IOException {\n        assertEquals(\n                \"Admin cannot read datastream testparent1/testchild4WithACL/tsc1_data!\",\n                OK.getStatusCode(), canRead(\"exampleadmin\",\n                        \"testparent1/testchild4WithACL/tsc1_data\", true));\n    }"
    },
    "bPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesAdminIT.java",
    "aPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesAdminIT.java",
    "bCommit": "79f2b356ec",
    "aCommit": "ad904b4fe7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"Admin can read datastream testparent1/testchild4WithACL/tsc1_data\",",
          "type": "DELETE",
          "lineNo": 333
        }
      ],
      "targetChanges": [
        {
          "line": "\"Admin cannot read datastream testparent1/testchild4WithACL/tsc1_data!\",",
          "type": "ADD",
          "lineNo": 335
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Admin can read datastream testparent1/testchild4WithACL/tsc1_data'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Admin cannot read datastream testparent1/testchild4WithACL/tsc1_data!'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Admin can read datastream testparent1/testchild4WithACL/tsc1_data\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Admin cannot read datastream testparent1/testchild4WithACL/tsc1_data!\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1389565074,
    "ID": "fcrepo/fcrepo:646",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.roles.basic.integration.BasicRolesAdminIT.testAdminCanReadWriterRestrictedChildObjReallyWriterRestrictedDatastream()",
    "bSource": {
      "startLine": 361,
      "code": "/* Even more restricted datastream */\n    @Test\n    public\n    void\n    testAdminCanReadWriterRestrictedChildObjReallyWriterRestrictedDatastream()\n            throws ClientProtocolException, IOException {\n        assertEquals(\n                \"Admin can read datastream testparent1/testchild4WithACL/tsc2_data\",\n                OK.getStatusCode(), canRead(\"exampleadmin\",\n                        \"testparent1/testchild4WithACL/tsc2_data\", true));\n    }"
    },
    "aSource": {
      "startLine": 363,
      "code": "/* Even more restricted datastream */\n    @Test\n    public\n    void\n    testAdminCanReadWriterRestrictedChildObjReallyWriterRestrictedDatastream()\n            throws ClientProtocolException, IOException {\n        assertEquals(\n                \"Admin cannot read datastream testparent1/testchild4WithACL/tsc2_data!\",\n                OK.getStatusCode(), canRead(\"exampleadmin\",\n                        \"testparent1/testchild4WithACL/tsc2_data\", true));\n    }"
    },
    "bPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesAdminIT.java",
    "aPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesAdminIT.java",
    "bCommit": "79f2b356ec",
    "aCommit": "ad904b4fe7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"Admin can read datastream testparent1/testchild4WithACL/tsc2_data\",",
          "type": "DELETE",
          "lineNo": 368
        }
      ],
      "targetChanges": [
        {
          "line": "\"Admin cannot read datastream testparent1/testchild4WithACL/tsc2_data!\",",
          "type": "ADD",
          "lineNo": 370
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Admin can read datastream testparent1/testchild4WithACL/tsc2_data'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Admin cannot read datastream testparent1/testchild4WithACL/tsc2_data!'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Admin can read datastream testparent1/testchild4WithACL/tsc2_data\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Admin cannot read datastream testparent1/testchild4WithACL/tsc2_data!\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1389565074,
    "ID": "fcrepo/fcrepo:647",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.roles.basic.integration.BasicRolesAdminIT.testAdminCanAddACLToInheritedACLChildObj()",
    "bSource": {
      "startLine": 167,
      "code": "@Test\n    public void testAdminCanAddACLToInheritedACLChildObj()\n            throws ClientProtocolException, IOException {\n        assertEquals(\n                \"Admin can add an ACL to testparent1/testchild1NoACL\",\n                CREATED\n                .getStatusCode(), canAddACL(\"exampleadmin\",\n                        \"testparent1/testchild1NoACL\", \"EVERYONE\", \"admin\",\n                        true));\n    }"
    },
    "aSource": {
      "startLine": 169,
      "code": "@Test\n    public void testAdminCanAddACLToInheritedACLChildObj()\n            throws ClientProtocolException, IOException {\n        assertEquals(\n                \"Admin cannot add an ACL to testparent1/testchild1NoACL!\",\n                CREATED\n                .getStatusCode(), canAddACL(\"exampleadmin\",\n                        \"testparent1/testchild1NoACL\", \"EVERYONE\", \"admin\",\n                        true));\n    }"
    },
    "bPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesAdminIT.java",
    "aPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesAdminIT.java",
    "bCommit": "79f2b356ec",
    "aCommit": "ad904b4fe7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"Admin can add an ACL to testparent1/testchild1NoACL\",",
          "type": "DELETE",
          "lineNo": 171
        }
      ],
      "targetChanges": [
        {
          "line": "\"Admin cannot add an ACL to testparent1/testchild1NoACL!\",",
          "type": "ADD",
          "lineNo": 173
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Admin can add an ACL to testparent1/testchild1NoACL'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Admin cannot add an ACL to testparent1/testchild1NoACL!'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Admin can add an ACL to testparent1/testchild1NoACL\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Admin cannot add an ACL to testparent1/testchild1NoACL!\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1389565074,
    "ID": "fcrepo/fcrepo:648",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.roles.basic.integration.BasicRolesAdminIT.testAdminCanReadRestrictedChildObj()",
    "bSource": {
      "startLine": 207,
      "code": "/* Restricted child object with own ACL, two restricted datastreams */\n    @Test\n    public void testAdminCanReadRestrictedChildObj()\n            throws ClientProtocolException, IOException {\n        assertEquals(\n                \"Admin can read testparent1/testchild2WithACL\", OK\n                .getStatusCode(), canRead(\"exampleadmin\",\n                        \"testparent1/testchild2WithACL\", true));\n    }"
    },
    "aSource": {
      "startLine": 209,
      "code": "/* Restricted child object with own ACL, two restricted datastreams */\n    @Test\n    public void testAdminCanReadRestrictedChildObj()\n            throws ClientProtocolException, IOException {\n        assertEquals(\n                \"Admin cannot read testparent1/testchild2WithACL!\", OK\n                .getStatusCode(), canRead(\"exampleadmin\",\n                        \"testparent1/testchild2WithACL\", true));\n    }"
    },
    "bPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesAdminIT.java",
    "aPath": "fcrepo-auth-roles-basic/src/test/java/org/fcrepo/auth/roles/basic/integration/BasicRolesAdminIT.java",
    "bCommit": "79f2b356ec",
    "aCommit": "ad904b4fe7",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"Admin can read testparent1/testchild2WithACL\", OK",
          "type": "DELETE",
          "lineNo": 212
        }
      ],
      "targetChanges": [
        {
          "line": "\"Admin cannot read testparent1/testchild2WithACL!\", OK",
          "type": "ADD",
          "lineNo": 214
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Admin can read testparent1/testchild2WithACL'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.Response.Status$OK"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Admin cannot read testparent1/testchild2WithACL!'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "javax.ws.rs.core.Response.Status$OK"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Admin can read testparent1/testchild2WithACL\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Admin cannot read testparent1/testchild2WithACL!\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": []
    },
    "aCommitTime": 1389565074,
    "ID": "fcrepo/fcrepo:649",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.utils.infinispan.StoreChunkInputStreamIT.tryRetrievingContentFromInfinispanIT()",
    "bSource": {
      "startLine": 35,
      "code": "@Test\n    public void tryRetrievingContentFromInfinispanIT() throws IOException {\n        final EmbeddedCacheManager cm =\n                new DefaultCacheManager(\"config/infinispan/basic/infinispan.xml\");\n\n        final Cache<String, byte[]> ispn = cm.getCache(\"FedoraRepository\");\n\n        final CacheStore cs =\n                ispn.getAdvancedCache().getComponentRegistry().getComponent(\n                        CacheLoaderManager.class).getCacheStore();\n\n        ispn.put(\"key-data-0\", \"0\".getBytes());\n        ispn.put(\"key-data-1\", \"1\".getBytes());\n        ispn.put(\"key-data-2\", \"2\".getBytes());\n        ispn.put(\"key-data-3\", \"3\".getBytes());\n        ispn.put(\"key-data-4\", \"4\".getBytes());\n        ispn.put(\"key-data-5\", \"5\".getBytes());\n\n        final InputStream is = new StoreChunkInputStream(cs, \"key-data\");\n\n        final String data = IOUtils.toString(is);\n\n        assertEquals(\"012345\", data);\n    }"
    },
    "aSource": {
      "startLine": 35,
      "code": "@Test\n    public void tryRetrievingContentFromInfinispanIT() throws IOException {\n        final EmbeddedCacheManager cm =\n                new DefaultCacheManager(\"config/infinispan/leveldb-default/infinispan.xml\");\n\n        final Cache<String, byte[]> ispn = cm.getCache(\"FedoraRepository\");\n\n        final CacheStore cs =\n                ispn.getAdvancedCache().getComponentRegistry().getComponent(\n                        CacheLoaderManager.class).getCacheStore();\n\n        ispn.put(\"key-data-0\", \"0\".getBytes());\n        ispn.put(\"key-data-1\", \"1\".getBytes());\n        ispn.put(\"key-data-2\", \"2\".getBytes());\n        ispn.put(\"key-data-3\", \"3\".getBytes());\n        ispn.put(\"key-data-4\", \"4\".getBytes());\n        ispn.put(\"key-data-5\", \"5\".getBytes());\n\n        final InputStream is = new StoreChunkInputStream(cs, \"key-data\");\n\n        final String data = IOUtils.toString(is);\n\n        assertEquals(\"012345\", data);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/utils/infinispan/StoreChunkInputStreamIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/utils/infinispan/StoreChunkInputStreamIT.java",
    "bCommit": "4c03131df4",
    "aCommit": "038d2f1e9e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "new DefaultCacheManager(\"config/infinispan/basic/infinispan.xml\");",
          "type": "DELETE",
          "lineNo": 38
        }
      ],
      "targetChanges": [
        {
          "line": "new DefaultCacheManager(\"config/infinispan/leveldb-default/infinispan.xml\");",
          "type": "ADD",
          "lineNo": 38
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.infinispan.manager.DefaultCacheManager(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.infinispan.manager.DefaultCacheManager"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'config/infinispan/basic/infinispan.xml'"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.infinispan.manager.DefaultCacheManager(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.infinispan.manager.DefaultCacheManager"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'config/infinispan/leveldb-default/infinispan.xml'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"config/infinispan/basic/infinispan.xml\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"config/infinispan/leveldb-default/infinispan.xml\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        37
      ]
    },
    "aCommitTime": 1387222681,
    "ID": "fcrepo/fcrepo:11",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.utils.LowLevelCacheEntryIT.testHashCodeIspn()",
    "bSource": {
      "startLine": 114,
      "code": "@Test\n    public void testHashCodeIspn() throws Exception {\n\n        final EmbeddedCacheManager cm =\n                new DefaultCacheManager(\"config/infinispan/basic/infinispan.xml\");\n\n        final CacheStore ispn =\n                cm.getCache(\"FedoraRepository\").getAdvancedCache()\n                        .getComponentRegistry().getComponent(\n                                CacheLoaderManager.class).getCacheStore();\n\n        final LowLevelCacheEntry cs1 =\n                new CacheStoreEntry(ispn, \"FedoraRepository\", new BinaryKey(\"asd\"));\n        final LowLevelCacheEntry cs2 =\n                new CacheStoreEntry(ispn, \"FedoraRepository\", new BinaryKey(\"asd\"));\n\n        assertEquals(cs1.hashCode(), cs2.hashCode());\n\n    }"
    },
    "aSource": {
      "startLine": 114,
      "code": "@Test\n    public void testHashCodeIspn() throws Exception {\n\n        final EmbeddedCacheManager cm =\n                new DefaultCacheManager(\"config/testing/infinispan-basic.xml\");\n\n        final CacheStore ispn =\n                cm.getCache(\"FedoraRepository\").getAdvancedCache()\n                        .getComponentRegistry().getComponent(\n                                CacheLoaderManager.class).getCacheStore();\n\n        final LowLevelCacheEntry cs1 =\n                new CacheStoreEntry(ispn, \"FedoraRepository\", new BinaryKey(\"asd\"));\n        final LowLevelCacheEntry cs2 =\n                new CacheStoreEntry(ispn, \"FedoraRepository\", new BinaryKey(\"asd\"));\n\n        assertEquals(cs1.hashCode(), cs2.hashCode());\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/utils/LowLevelCacheEntryIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/utils/LowLevelCacheEntryIT.java",
    "bCommit": "4c03131df4",
    "aCommit": "038d2f1e9e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "new DefaultCacheManager(\"config/infinispan/basic/infinispan.xml\");",
          "type": "DELETE",
          "lineNo": 118
        }
      ],
      "targetChanges": [
        {
          "line": "new DefaultCacheManager(\"config/testing/infinispan-basic.xml\");",
          "type": "ADD",
          "lineNo": 118
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.infinispan.manager.DefaultCacheManager(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.infinispan.manager.DefaultCacheManager"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'config/infinispan/basic/infinispan.xml'"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.infinispan.manager.DefaultCacheManager(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.infinispan.manager.DefaultCacheManager"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'config/testing/infinispan-basic.xml'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"config/infinispan/basic/infinispan.xml\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"config/testing/infinispan-basic.xml\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        117
      ]
    },
    "aCommitTime": 1387222681,
    "ID": "fcrepo/fcrepo:12",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.utils.LowLevelCacheEntryIT.testEqualsIspn()",
    "bSource": {
      "startLine": 94,
      "code": "@Test\n    public void testEqualsIspn() throws Exception {\n\n        final EmbeddedCacheManager cm =\n                new DefaultCacheManager(\"config/infinispan/basic/infinispan.xml\");\n\n        final CacheStore ispn =\n                cm.getCache(\"FedoraRepository\").getAdvancedCache()\n                        .getComponentRegistry().getComponent(\n                                CacheLoaderManager.class).getCacheStore();\n\n        final LowLevelCacheEntry cs1 =\n                new CacheStoreEntry(ispn, \"FedoraRepository\", new BinaryKey(\"asd\"));\n        final LowLevelCacheEntry cs2 =\n                new CacheStoreEntry(ispn, \"FedoraRepository\", new BinaryKey(\"asd\"));\n\n        assertEquals(cs1, cs2);\n\n    }"
    },
    "aSource": {
      "startLine": 94,
      "code": "@Test\n    public void testEqualsIspn() throws Exception {\n\n        final EmbeddedCacheManager cm =\n                new DefaultCacheManager(\"config/testing/infinispan-basic.xml\");\n\n        final CacheStore ispn =\n                cm.getCache(\"FedoraRepository\").getAdvancedCache()\n                        .getComponentRegistry().getComponent(\n                                CacheLoaderManager.class).getCacheStore();\n\n        final LowLevelCacheEntry cs1 =\n                new CacheStoreEntry(ispn, \"FedoraRepository\", new BinaryKey(\"asd\"));\n        final LowLevelCacheEntry cs2 =\n                new CacheStoreEntry(ispn, \"FedoraRepository\", new BinaryKey(\"asd\"));\n\n        assertEquals(cs1, cs2);\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/utils/LowLevelCacheEntryIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/utils/LowLevelCacheEntryIT.java",
    "bCommit": "4c03131df4",
    "aCommit": "038d2f1e9e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "new DefaultCacheManager(\"config/infinispan/basic/infinispan.xml\");",
          "type": "DELETE",
          "lineNo": 98
        }
      ],
      "targetChanges": [
        {
          "line": "new DefaultCacheManager(\"config/testing/infinispan-basic.xml\");",
          "type": "ADD",
          "lineNo": 98
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.infinispan.manager.DefaultCacheManager(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.infinispan.manager.DefaultCacheManager"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'config/infinispan/basic/infinispan.xml'"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.infinispan.manager.DefaultCacheManager(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.infinispan.manager.DefaultCacheManager"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'config/testing/infinispan-basic.xml'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"config/infinispan/basic/infinispan.xml\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"config/testing/infinispan-basic.xml\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        97
      ]
    },
    "aCommitTime": 1387222681,
    "ID": "fcrepo/fcrepo:13",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.utils.LowLevelCacheEntryIT.testModifyingCacheStores()",
    "bSource": {
      "startLine": 153,
      "code": "@Test\n    public void testModifyingCacheStores() throws Exception {\n\n        final EmbeddedCacheManager cm =\n                new DefaultCacheManager(\n                        \"config/infinispan/chained/infinispan.xml\");\n\n        final CacheStore ispn =\n                cm.getCache(\"FedoraRepository\").getAdvancedCache()\n                        .getComponentRegistry().getComponent(\n                                CacheLoaderManager.class).getCacheStore();\n\n        assert ispn instanceof ChainingCacheStore;\n\n        final BinaryKey key = new BinaryKey(\"123\");\n\n        final ChainingCacheStore chained_store = (ChainingCacheStore) ispn;\n\n        final LinkedHashMap<CacheStore, CacheStoreConfiguration> stores =\n                chained_store.getStores();\n\n        final LowLevelCacheEntry cs =\n                new CacheStoreEntry((CacheStore) stores.keySet()\n                        .toArray()[0], \"FedoraRepository\", key);\n        final LowLevelCacheEntry cs2 =\n                new CacheStoreEntry((CacheStore) stores.keySet()\n                        .toArray()[1], \"FedoraRepository\", key);\n\n        cs.storeValue(new ByteArrayInputStream(\"123456\".getBytes()));\n\n        cs2.storeValue(new ByteArrayInputStream(\"asdfg\".getBytes()));\n\n        Thread.sleep(1000);\n\n        final String v1 = IOUtils.toString(cs.getInputStream());\n        final String v2 = IOUtils.toString(cs2.getInputStream());\n\n        assertEquals(\"Found the wrong value in our cache store\", \"123456\", v1);\n        assertEquals(\"Found the wrong value in our cache store\", \"asdfg\", v2);\n\n    }"
    },
    "aSource": {
      "startLine": 153,
      "code": "@Test\n    public void testModifyingCacheStores() throws Exception {\n\n        final EmbeddedCacheManager cm =\n                new DefaultCacheManager(\n                        \"config/testing/infinispan-chained.xml\");\n\n        final CacheStore ispn =\n                cm.getCache(\"FedoraRepository\").getAdvancedCache()\n                        .getComponentRegistry().getComponent(\n                                CacheLoaderManager.class).getCacheStore();\n\n        assert ispn instanceof ChainingCacheStore;\n\n        final BinaryKey key = new BinaryKey(\"123\");\n\n        final ChainingCacheStore chained_store = (ChainingCacheStore) ispn;\n\n        final LinkedHashMap<CacheStore, CacheStoreConfiguration> stores =\n                chained_store.getStores();\n\n        final LowLevelCacheEntry cs =\n                new CacheStoreEntry((CacheStore) stores.keySet()\n                        .toArray()[0], \"FedoraRepository\", key);\n        final LowLevelCacheEntry cs2 =\n                new CacheStoreEntry((CacheStore) stores.keySet()\n                        .toArray()[1], \"FedoraRepository\", key);\n\n        cs.storeValue(new ByteArrayInputStream(\"123456\".getBytes()));\n\n        cs2.storeValue(new ByteArrayInputStream(\"asdfg\".getBytes()));\n\n        Thread.sleep(1000);\n\n        final String v1 = IOUtils.toString(cs.getInputStream());\n        final String v2 = IOUtils.toString(cs2.getInputStream());\n\n        assertEquals(\"Found the wrong value in our cache store\", \"123456\", v1);\n        assertEquals(\"Found the wrong value in our cache store\", \"asdfg\", v2);\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/utils/LowLevelCacheEntryIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/utils/LowLevelCacheEntryIT.java",
    "bCommit": "4c03131df4",
    "aCommit": "038d2f1e9e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"config/infinispan/chained/infinispan.xml\");",
          "type": "DELETE",
          "lineNo": 158
        }
      ],
      "targetChanges": [
        {
          "line": "\"config/testing/infinispan-chained.xml\");",
          "type": "ADD",
          "lineNo": 158
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'config/infinispan/chained/infinispan.xml'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'config/testing/infinispan-chained.xml'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "ConstructorCall",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"config/infinispan/chained/infinispan.xml\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"config/testing/infinispan-chained.xml\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        156
      ]
    },
    "aCommitTime": 1387222681,
    "ID": "fcrepo/fcrepo:14",
    "trivial": null
  },
  {
    "name": "org.fcrepo.generator.dublincore.WellKnownDatastreamGeneratorTest.testGetStreamAbsent()",
    "bSource": {
      "startLine": 46,
      "code": "@Test\n    public void testGetStreamAbsent() {\n        final Node mockNode = mock(Node.class);\n        final InputStream actual = testObj.getStream(mockNode);\n        assertTrue(actual == null);\n    }"
    },
    "aSource": {
      "startLine": 46,
      "code": "@Test\n    public void testGetStreamAbsent() {\n        final Node mockNode = mock(Node.class);\n        final InputStream actual = testObj.getStream(mockNode);\n        assertNull(actual);\n    }"
    },
    "bPath": "fcrepo-generator-dc/src/test/java/org/fcrepo/generator/dublincore/WellKnownDatastreamGeneratorTest.java",
    "aPath": "fcrepo-generator-dc/src/test/java/org/fcrepo/generator/dublincore/WellKnownDatastreamGeneratorTest.java",
    "bCommit": "f5e6a2ac08",
    "aCommit": "4007c3c692",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(actual == null);",
          "type": "DELETE",
          "lineNo": 50
        }
      ],
      "targetChanges": [
        {
          "line": "assertNull(actual);",
          "type": "ADD",
          "lineNo": 50
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.InputStream actual"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertNull(java.io.InputStream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertNull(java.io.InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.InputStream actual"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertNull",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "actual",
          "childCount": 0
        },
        "dstNode": {
          "label": "actual",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        50
      ]
    },
    "aCommitTime": 1387162941,
    "ID": "fcrepo/fcrepo:147",
    "trivial": null
  },
  {
    "name": "org.fcrepo.generator.dublincore.WorstCaseGeneratorTest.testGetStream()",
    "bSource": {
      "startLine": 45,
      "code": "@Test\n    public void testGetStream() throws Exception {\n        final Node mockNode = mock(Node.class);\n        final InputStream out = testObj.getStream(mockNode);\n        final OaiDublinCore actual =\n                (OaiDublinCore) context.createUnmarshaller().unmarshal(out);\n        assertTrue(actual != null);\n    }"
    },
    "aSource": {
      "startLine": 45,
      "code": "@Test\n    public void testGetStream() throws Exception {\n        final Node mockNode = mock(Node.class);\n        final InputStream out = testObj.getStream(mockNode);\n        final OaiDublinCore actual =\n                (OaiDublinCore) context.createUnmarshaller().unmarshal(out);\n        assertNotNull(actual);\n    }"
    },
    "bPath": "fcrepo-generator-dc/src/test/java/org/fcrepo/generator/dublincore/WorstCaseGeneratorTest.java",
    "aPath": "fcrepo-generator-dc/src/test/java/org/fcrepo/generator/dublincore/WorstCaseGeneratorTest.java",
    "bCommit": "f5e6a2ac08",
    "aCommit": "4007c3c692",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(actual != null);",
          "type": "DELETE",
          "lineNo": 51
        }
      ],
      "targetChanges": [
        {
          "line": "assertNotNull(actual);",
          "type": "ADD",
          "lineNo": 51
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.generator.util.OaiDublinCore actual"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertNotNull(org.fcrepo.generator.util.OaiDublinCore)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertNotNull(org.fcrepo.generator.util.OaiDublinCore)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.generator.util.OaiDublinCore actual"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertNotNull",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "actual",
          "childCount": 0
        },
        "dstNode": {
          "label": "actual",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        51
      ]
    },
    "aCommitTime": 1387162941,
    "ID": "fcrepo/fcrepo:148",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testMoveObjectToExistingDestination()",
    "bSource": {
      "startLine": 483,
      "code": "@Test\n    public void testMoveObjectToExistingDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(true);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        doThrow(new ItemExistsException()).when(mockNodes).moveObject(mockSession, \"/foo\", \"/baz\");\n\n        final String pid = \"foo\";\n\n        final Response response = testObj.moveObject(createPathList(pid), \"http://localhost/fcrepo/baz\", mockRequest);\n\n        assertEquals(PRECONDITION_FAILED.getStatusCode(), response.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 484,
      "code": "@Test(expected = WebApplicationException.class)\n    public void testMoveObjectToExistingDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(true);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        doThrow(new ItemExistsException()).when(mockNodes).moveObject(mockSession, \"/foo\", \"/baz\");\n\n        final String pid = \"foo\";\n\n        final Response response = testObj.moveObject(createPathList(pid), \"http://localhost/fcrepo/baz\", mockRequest);\n\n        assertEquals(PRECONDITION_FAILED.getStatusCode(), response.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "acb41a0367",
    "aCommit": "9ed15b2c90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test",
          "type": "DELETE",
          "lineNo": 483
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = WebApplicationException.class)",
          "type": "ADD",
          "lineNo": 484
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Annotation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "class",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        496
      ]
    },
    "aCommitTime": 1387134314,
    "ID": "fcrepo/fcrepo:349",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testCopyObjectToExistingDestination()",
    "bSource": {
      "startLine": 438,
      "code": "@Test\n    public void testCopyObjectToExistingDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(true);\n        doThrow(new ItemExistsException()).when(mockNodes).copyObject(mockSession, \"/foo\", \"/baz\");\n\n        final String pid = \"foo\";\n\n        final Response response = testObj.copyObject(createPathList(pid), \"http://localhost/fcrepo/baz\");\n\n        assertEquals(PRECONDITION_FAILED.getStatusCode(), response.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 439,
      "code": "@Test(expected = WebApplicationException.class)\n    public void testCopyObjectToExistingDestination() throws RepositoryException, URISyntaxException {\n        final ValueFactory mockVF = mock(ValueFactory.class);\n        when(mockSession.getValueFactory()).thenReturn(mockVF);\n        when(mockNodes.exists(mockSession, \"/foo\")).thenReturn(true);\n        doThrow(new ItemExistsException()).when(mockNodes).copyObject(mockSession, \"/foo\", \"/baz\");\n\n        final String pid = \"foo\";\n\n        final Response response = testObj.copyObject(createPathList(pid), \"http://localhost/fcrepo/baz\");\n\n        assertEquals(PRECONDITION_FAILED.getStatusCode(), response.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "acb41a0367",
    "aCommit": "9ed15b2c90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@Test",
          "type": "DELETE",
          "lineNo": 438
        }
      ],
      "targetChanges": [
        {
          "line": "@Test(expected = WebApplicationException.class)",
          "type": "ADD",
          "lineNo": 439
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        }
      ],
      "targetElements": [
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Annotation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "class",
          "childCount": 1
        }
      }
    ],
    "refactorings": [
      "MODIFY_METHOD_ANNOTATION"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        448
      ]
    },
    "aCommitTime": 1387134314,
    "ID": "fcrepo/fcrepo:350",
    "trivial": null
  },
  {
    "name": "org.fcrepo.transform.transformations.LDPathTransformTest.testGetNodeTypeSpecificLdpathProgramForSupertypeProgram()",
    "bSource": {
      "startLine": 99,
      "code": "@Test\n    public void testGetNodeTypeSpecificLdpathProgramForSupertypeProgram() throws RepositoryException {\n        final Node mockConfigNode = mock(Node.class);\n        final Node mockTypeConfigNode = mock(Node.class, Mockito.RETURNS_DEEP_STUBS);\n        when(mockSession.getNode(LDPathTransform.CONFIGURATION_FOLDER + \"some-program\")).thenReturn(mockConfigNode);\n\n        final NodeType mockNodeType = mock(NodeType.class);\n        final NodeType mockNtBase = mock(NodeType.class);\n        when(mockNodeType.getSupertypes()).thenReturn(new NodeType[] { mockNtBase });\n        when(mockNodeType.toString()).thenReturn(\"custom:type\");\n        when(mockNtBase.toString()).thenReturn(\"nt:base\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n\n        when(mockConfigNode.hasNode(\"custom:type\")).thenReturn(false);\n\n        when(mockConfigNode.hasNode(\"nt:base\")).thenReturn(true);\n        when(mockConfigNode.getNode(\"nt:base\")).thenReturn(mockTypeConfigNode);\n\n        final InputStream mockInputStream = mock(InputStream.class);\n        when(mockTypeConfigNode.getNode(\"jcr:content\").getProperty(\"jcr:data\").getBinary().getStream()).thenReturn(mockInputStream);\n\n        final LDPathTransform nodeTypeSpecificLdpathProgramStream = LDPathTransform.getNodeTypeTransform(mockNode, \"some-program\");\n\n        assertEquals(new LDPathTransform(mockInputStream), nodeTypeSpecificLdpathProgramStream);\n    }"
    },
    "aSource": {
      "startLine": 102,
      "code": "@Test\n    public void testGetNodeTypeSpecificLdpathProgramForSupertypeProgram() throws RepositoryException {\n        final Node mockConfigNode = mock(Node.class);\n        final Node mockTypeConfigNode = mock(Node.class, Mockito.RETURNS_DEEP_STUBS);\n        when(mockSession.getNode(LDPathTransform.CONFIGURATION_FOLDER + \"some-program\")).thenReturn(mockConfigNode);\n\n        final NodeType mockNodeType = mock(NodeType.class);\n        final NodeType mockNtBase = mock(NodeType.class);\n        when(mockNodeType.getSupertypes()).thenReturn(new NodeType[] { mockNtBase });\n        when(mockNodeType.toString()).thenReturn(\"custom:type\");\n        when(mockNtBase.toString()).thenReturn(\"nt:base\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(new NodeType[]{});\n        when(mockConfigNode.hasNode(\"custom:type\")).thenReturn(false);\n\n        when(mockConfigNode.hasNode(\"nt:base\")).thenReturn(true);\n        when(mockConfigNode.getNode(\"nt:base\")).thenReturn(mockTypeConfigNode);\n\n        final InputStream mockInputStream = mock(InputStream.class);\n        when(mockTypeConfigNode.getNode(\"jcr:content\").getProperty(\"jcr:data\").getBinary().getStream()).thenReturn(mockInputStream);\n\n        final LDPathTransform nodeTypeSpecificLdpathProgramStream = LDPathTransform.getNodeTypeTransform(mockNode, \"some-program\");\n\n        assertEquals(new LDPathTransform(mockInputStream), nodeTypeSpecificLdpathProgramStream);\n    }"
    },
    "bPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/transformations/LDPathTransformTest.java",
    "aPath": "fcrepo-transform/src/test/java/org/fcrepo/transform/transformations/LDPathTransformTest.java",
    "bCommit": "fa28e751b3",
    "aCommit": "e8d0953a8f",
    "hunk": {
      "sourceChanges": [],
      "targetChanges": [
        {
          "line": "when(mockNode.getMixinNodeTypes()).thenReturn(new NodeType[]{});",
          "type": "ADD",
          "lineNo": 114
        }
      ],
      "type": "MODIFY",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.nodetype.NodeType[])"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getMixinNodeTypes()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getMixinNodeTypes()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.nodetype.NodeType[])"
        },
        {
          "type": "CtNewArray",
          "value": "javax.jcr.nodetype.NodeType[]"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.nodetype.NodeType"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        123
      ]
    },
    "aCommitTime": 1387127667,
    "ID": "fcrepo/fcrepo:524",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testSparqlUpdate()",
    "bSource": {
      "startLine": 357,
      "code": "@Test\n    public void testSparqlUpdate() throws RepositoryException, IOException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n        final InputStream mockStream =\n                new ByteArrayInputStream(\"my-sparql-statement\".getBytes());\n        when(mockNodes.getObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.updatePropertiesDataset(any(GraphSubjects.class), any(String.class)))\n            .thenReturn(mockDataset);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        when(mockObject.getLastModifiedDate()).thenReturn(Calendar.getInstance().getTime());\n        when(mockDataset.getNamedModel(PROBLEMS_MODEL_NAME))\n        .thenReturn(mockModel);\n        testObj.updateSparql(createPathList(pid), getUriInfoImpl(), mockStream, mockRequest);\n\n        verify(mockObject).updatePropertiesDataset(any(GraphSubjects.class),\n                eq(\"my-sparql-statement\"));\n        verify(mockSession).save();\n        verify(mockSession).logout();\n    }"
    },
    "aSource": {
      "startLine": 357,
      "code": "@Test\n    public void testSparqlUpdate() throws RepositoryException, IOException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n        final InputStream mockStream =\n                new ByteArrayInputStream(\"my-sparql-statement\".getBytes());\n        when(mockNodes.getObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.updatePropertiesDataset(any(GraphSubjects.class), any(String.class)))\n            .thenReturn(mockDataset);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        when(mockObject.getLastModifiedDate()).thenReturn(Calendar.getInstance().getTime());\n        when(mockDataset.getNamedModel(PROBLEMS_MODEL_NAME))\n        .thenReturn(mockModel);\n        when(mockModel.isEmpty()).thenReturn(true);\n        testObj.updateSparql(createPathList(pid), getUriInfoImpl(), mockStream, mockRequest);\n\n        verify(mockObject).updatePropertiesDataset(any(GraphSubjects.class),\n                eq(\"my-sparql-statement\"));\n        verify(mockSession).save();\n        verify(mockSession).logout();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "14ea7d06cc",
    "aCommit": "fa28e751b3",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockModel.isEmpty()).thenReturn(true);",
          "type": "ADD",
          "lineNo": 371
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Model mockModel"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        375
      ]
    },
    "aCommitTime": 1387059878,
    "ID": "fcrepo/fcrepo:573",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.rdf.impl.mappings.PropertyToTripleTest.testSingleValuedResourceTriple()",
    "bSource": {
      "startLine": 100,
      "code": "@Test\n    public void testSingleValuedResourceTriple() throws RepositoryException {\n\n        when(mockProperty.isMultiple()).thenReturn(false);\n        when(mockProperty.getType()).thenReturn(PATH);\n        when(mockProperty.getString()).thenReturn(TEST_VALUE);\n        when(mockProperty.getNode()).thenReturn(mockNode);\n        when(mockValue.getType()).thenReturn(PATH);\n        final Function<Iterator<Value>, Iterator<Triple>> mapping =\n            testPropertyToTriple.apply(mockProperty);\n        final Triple t = mapping.apply(singletonIterator(mockValue)).next();\n        LOGGER.debug(\"Constructed triple: {}\", t);\n        assertEquals(\"Got wrong RDF object!\", TEST_NODE_SUBJECT.asNode(), t\n                .getObject());\n        assertEquals(\"Got wrong RDF predicate!\", createProperty(\n                TEST_PROPERTY_NAME).asNode(), t.getPredicate());\n        assertEquals(\"Got wrong RDF subject!\", TEST_NODE_SUBJECT.asNode(), t\n                .getSubject());\n    }"
    },
    "aSource": {
      "startLine": 100,
      "code": "@Test\n    public void testSingleValuedResourceTriple() throws RepositoryException {\n\n        when(mockProperty.isMultiple()).thenReturn(false);\n        when(mockProperty.getType()).thenReturn(PATH);\n        when(mockProperty.getString()).thenReturn(TEST_NODE_PATH);\n        when(mockProperty.getValue()).thenReturn(mockValue);\n        when(mockValue.getString()).thenReturn(TEST_NODE_PATH);\n        when(mockValue.getType()).thenReturn(PATH);\n        final Function<Iterator<Value>, Iterator<Triple>> mapping =\n            testPropertyToTriple.apply(mockProperty);\n        final Triple t = mapping.apply(singletonIterator(mockValue)).next();\n        LOGGER.debug(\"Constructed triple: {}\", t);\n        assertEquals(\"Got wrong RDF object!\", TEST_NODE_SUBJECT.asNode(), t\n                .getObject());\n        assertEquals(\"Got wrong RDF predicate!\", createProperty(\n                TEST_PROPERTY_NAME).asNode(), t.getPredicate());\n        assertEquals(\"Got wrong RDF subject!\", TEST_NODE_SUBJECT.asNode(), t\n                .getSubject());\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/mappings/PropertyToTripleTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/mappings/PropertyToTripleTest.java",
    "bCommit": "3103e00dc9",
    "aCommit": "0a5fbaa824",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockProperty.getString()).thenReturn(TEST_VALUE);",
          "type": "DELETE",
          "lineNo": 105
        },
        {
          "line": "when(mockProperty.getNode()).thenReturn(mockNode);",
          "type": "DELETE",
          "lineNo": 106
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockProperty.getString()).thenReturn(TEST_NODE_PATH);",
          "type": "ADD",
          "lineNo": 105
        },
        {
          "line": "when(mockProperty.getValue()).thenReturn(mockValue);",
          "type": "ADD",
          "lineNo": 106
        },
        {
          "line": "when(mockValue.getString()).thenReturn(TEST_NODE_PATH);",
          "type": "ADD",
          "lineNo": 107
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getString()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Property mockProperty"
        },
        {
          "type": "CtExecutableReference",
          "value": "getString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String TEST_VALUE"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Property mockProperty"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getString()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Property mockProperty"
        },
        {
          "type": "CtExecutableReference",
          "value": "getString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String TEST_NODE_PATH"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Value)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getValue()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Property mockProperty"
        },
        {
          "type": "CtExecutableReference",
          "value": "getValue()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Value)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Value mockValue"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getString()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Value mockValue"
        },
        {
          "type": "CtExecutableReference",
          "value": "getString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String TEST_NODE_PATH"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "TEST_VALUE",
          "childCount": 0
        },
        "dstNode": {
          "label": "TEST_NODE_PATH",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "mockValue",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNode",
          "childCount": 1
        },
        "dstNode": {
          "label": "getValue",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        110
      ]
    },
    "aCommitTime": 1386967532,
    "ID": "fcrepo/fcrepo:25",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.services.functions.CheckCacheEntryFixityTest.testApply()",
    "bSource": {
      "startLine": 42,
      "code": "@Test\n    public void testApply() throws BinaryStoreException,\n        NoSuchAlgorithmException {\n        final URI testUri = URI.create(\"sha1:foo:bar\");\n        final long testSize = new SecureRandom().nextLong();\n        final CheckCacheEntryFixity testObj =\n                new CheckCacheEntryFixity(testUri, testSize);\n        testObj.apply(mockEntry);\n        verify(mockEntry).checkFixity(testUri, testSize);\n    }"
    },
    "aSource": {
      "startLine": 43,
      "code": "@Test\n    public void testApply() throws RepositoryException,\n        NoSuchAlgorithmException {\n        final URI testUri = URI.create(\"sha1:foo:bar\");\n        final long testSize = new SecureRandom().nextLong();\n        final CheckCacheEntryFixity testObj =\n                new CheckCacheEntryFixity(testUri, testSize);\n        testObj.apply(mockEntry);\n        verify(mockEntry).checkFixity(testUri, testSize);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/functions/CheckCacheEntryFixityTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/functions/CheckCacheEntryFixityTest.java",
    "bCommit": "65301c7d1a",
    "aCommit": "9136033069",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testApply() throws BinaryStoreException,",
          "type": "DELETE",
          "lineNo": 43
        }
      ],
      "targetChanges": [
        {
          "line": "public void testApply() throws RepositoryException,",
          "type": "ADD",
          "lineNo": 44
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.services.functions.CheckCacheEntryFixityTest.testApply()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "org.modeshape.jcr.value.binary.BinaryStoreException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.services.functions.CheckCacheEntryFixityTest.testApply()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.modeshape.jcr.value.binary.BinaryStoreException",
          "childCount": 0
        },
        "dstNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        44
      ]
    },
    "aCommitTime": 1386960810,
    "ID": "fcrepo/fcrepo:306",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.LowLevelCacheEntryTest.testGetFixity()",
    "bSource": {
      "startLine": 188,
      "code": "@Test\n    public void testGetFixity() throws BinaryStoreException, IOException,\n            NoSuchAlgorithmException {\n        final LowLevelCacheEntry ispnEntry =\n                new LocalBinaryStoreEntry(mockStore, testKey);\n        final byte[] bytes = new byte[] {0, 1, 2, 3, 4};\n        when(mockStore.getInputStream(testKey)).thenAnswer(\n                new Answer<InputStream>() {\n\n                    @Override\n                    public InputStream\n                            answer(final InvocationOnMock invocation)\n                                    throws Throwable {\n                        return new ByteArrayInputStream(bytes);\n                    }\n\n                });\n        final MessageDigest d = MessageDigest.getInstance(\"SHA-1\");\n        final byte[] digested = d.digest(bytes);\n        URI testCS = ContentDigest.asURI(\"SHA-1\", digested);\n        LOGGER.debug(testCS.toString());\n        FixityResult actual = ispnEntry.checkFixity(testCS, bytes.length);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(SUCCESS));\n\n        // report the wrong size\n        actual = ispnEntry.checkFixity(testCS, bytes.length + 1);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(BAD_SIZE));\n        // break the digest\n        digested[0] += 9;\n        testCS = ContentDigest.asURI(\"SHA-1\", digested);\n        actual = ispnEntry.checkFixity(testCS, bytes.length);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(BAD_CHECKSUM));\n        // report the wrong size and the wrong digest\n        actual = ispnEntry.checkFixity(testCS, bytes.length + 1);\n        assertEquals(2, actual.status.size());\n        assertEquals(true, actual.status.contains(BAD_CHECKSUM));\n        assertEquals(true, actual.status.contains(BAD_SIZE));\n    }"
    },
    "aSource": {
      "startLine": 189,
      "code": "@Test\n    public void testGetFixity() throws RepositoryException, IOException,\n            NoSuchAlgorithmException {\n        final LowLevelCacheEntry ispnEntry =\n                new LocalBinaryStoreEntry(mockStore, testKey);\n        final byte[] bytes = new byte[] {0, 1, 2, 3, 4};\n        when(mockStore.getInputStream(testKey)).thenAnswer(\n                new Answer<InputStream>() {\n\n                    @Override\n                    public InputStream\n                            answer(final InvocationOnMock invocation)\n                                    throws Throwable {\n                        return new ByteArrayInputStream(bytes);\n                    }\n\n                });\n        final MessageDigest d = MessageDigest.getInstance(\"SHA-1\");\n        final byte[] digested = d.digest(bytes);\n        URI testCS = ContentDigest.asURI(\"SHA-1\", digested);\n        LOGGER.debug(testCS.toString());\n        FixityResult actual = ispnEntry.checkFixity(testCS, bytes.length);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(SUCCESS));\n\n        // report the wrong size\n        actual = ispnEntry.checkFixity(testCS, bytes.length + 1);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(BAD_SIZE));\n        // break the digest\n        digested[0] += 9;\n        testCS = ContentDigest.asURI(\"SHA-1\", digested);\n        actual = ispnEntry.checkFixity(testCS, bytes.length);\n        assertEquals(1, actual.status.size());\n        assertEquals(actual.status.iterator().next().toString(), true,\n                actual.status.contains(BAD_CHECKSUM));\n        // report the wrong size and the wrong digest\n        actual = ispnEntry.checkFixity(testCS, bytes.length + 1);\n        assertEquals(2, actual.status.size());\n        assertEquals(true, actual.status.contains(BAD_CHECKSUM));\n        assertEquals(true, actual.status.contains(BAD_SIZE));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/LowLevelCacheEntryTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/LowLevelCacheEntryTest.java",
    "bCommit": "65301c7d1a",
    "aCommit": "9136033069",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testGetFixity() throws BinaryStoreException, IOException,",
          "type": "DELETE",
          "lineNo": 189
        }
      ],
      "targetChanges": [
        {
          "line": "public void testGetFixity() throws RepositoryException, IOException,",
          "type": "ADD",
          "lineNo": 190
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.utils.LowLevelCacheEntryTest.testGetFixity()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "org.modeshape.jcr.value.binary.BinaryStoreException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.kernel.utils.LowLevelCacheEntryTest.testGetFixity()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.modeshape.jcr.value.binary.BinaryStoreException",
          "childCount": 0
        },
        "dstNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        190
      ]
    },
    "aCommitTime": 1386960810,
    "ID": "fcrepo/fcrepo:307",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsPEPResponseIT.testPermissivePEP()",
    "bSource": {
      "startLine": 89,
      "code": "@Test\n    public void testPermissivePEP() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(pep);\n        when(\n                pep.hasModeShapePermission(any(Path.class),\n                        any(String[].class), Matchers\n                                .<Set<Principal>> any(),\n                        any(Principal.class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectService();\n        final FedoraObject fo = os.createObject(session, \"/myobject\");\n        verify(pep, times(5)).hasModeShapePermission(any(Path.class),\n                any(String[].class), Matchers.<Set<Principal>> any(),\n                any(Principal.class));\n    }"
    },
    "aSource": {
      "startLine": 88,
      "code": "@Test\n    public void testPermissivePEP() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n        Mockito.reset(pep);\n        when(\n                pep.hasModeShapePermission(any(Path.class),\n                        any(String[].class), Matchers\n                                .<Set<Principal>> any(),\n                        any(Principal.class))).thenReturn(true);\n\n        final ServletCredentials credentials =\n                new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final Privilege[] rootPrivs =\n                session.getAccessControlManager().getPrivileges(\"/\");\n        for (final Privilege p : rootPrivs) {\n            logger.debug(\"got priv: \" + p.getName());\n        }\n        final ObjectService os = new ObjectService();\n        os.createObject(session, \"/myobject\");\n        verify(pep, times(5)).hasModeShapePermission(any(Path.class),\n                any(String[].class), Matchers.<Set<Principal>> any(),\n                any(Principal.class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsPEPResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsPEPResponseIT.java",
    "bCommit": "10a89f2658",
    "aCommit": "85d356034f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraObject fo = os.createObject(session, \"/myobject\");",
          "type": "DELETE",
          "lineNo": 114
        }
      ],
      "targetChanges": [
        {
          "line": "os.createObject(session, \"/myobject\");",
          "type": "ADD",
          "lineNo": 113
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject fo"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "fo",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "createObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        113
      ]
    },
    "aCommitTime": 1386865096,
    "ID": "fcrepo/fcrepo:287",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.integration.ModeShapeHonorsPEPResponseIT.testRestrictivePEP()",
    "bSource": {
      "startLine": 120,
      "code": "@Test(expected = AccessControlException.class)\n    public void testRestrictivePEP() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(pep);\n        when(\n                pep.hasModeShapePermission(any(Path.class),\n                        any(String[].class), Matchers\n                                .<Set<Principal>> any(),\n                        any(Principal.class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ObjectService os = new ObjectService();\n        final FedoraObject fo = os.createObject(session, \"/myobject\");\n        verify(pep, times(5)).hasModeShapePermission(any(Path.class),\n                any(String[].class), Matchers.<Set<Principal>> any(),\n                any(Principal.class));\n    }"
    },
    "aSource": {
      "startLine": 119,
      "code": "@Test(expected = AccessControlException.class)\n    public void testRestrictivePEP() throws RepositoryException {\n        when(request.getRemoteUser()).thenReturn(\"fred\");\n        when(request.getUserPrincipal()).thenReturn(\n                new BasicUserPrincipal(\"fred\"));\n        when(\n                request.isUserInRole(Mockito\n                        .eq(ServletContainerAuthenticationProvider.FEDORA_USER_ROLE)))\n                .thenReturn(true);\n\n        // first permission check is for login\n        Mockito.reset(pep);\n        when(\n                pep.hasModeShapePermission(any(Path.class),\n                        any(String[].class), Matchers\n                                .<Set<Principal>> any(),\n                        any(Principal.class))).thenReturn(true, false);\n\n        final ServletCredentials credentials = new ServletCredentials(request);\n        final Session session = repo.login(credentials);\n        final ObjectService os = new ObjectService();\n        os.createObject(session, \"/myobject\");\n        verify(pep, times(5)).hasModeShapePermission(any(Path.class),\n                any(String[].class), Matchers.<Set<Principal>> any(),\n                any(Principal.class));\n    }"
    },
    "bPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsPEPResponseIT.java",
    "aPath": "fcrepo-auth-common/src/test/java/org/fcrepo/auth/integration/ModeShapeHonorsPEPResponseIT.java",
    "bCommit": "10a89f2658",
    "aCommit": "85d356034f",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final FedoraObject fo = os.createObject(session, \"/myobject\");",
          "type": "DELETE",
          "lineNo": 141
        }
      ],
      "targetChanges": [
        {
          "line": "os.createObject(session, \"/myobject\");",
          "type": "ADD",
          "lineNo": 140
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.fcrepo.kernel.FedoraObject fo"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.FedoraObject"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.services.ObjectService os"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.ObjectService.createObject(Session,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/myobject'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "fo",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createObject",
          "childCount": 3
        },
        "dstNode": {
          "label": "createObject",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        140
      ]
    },
    "aCommitTime": 1386865096,
    "ID": "fcrepo/fcrepo:288",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testGetDatastreamsContents()",
    "bSource": {
      "startLine": 286,
      "code": "@Test\n    public void testGetDatastreamsContents() throws RepositoryException,\n                                            IOException,\n                                            NoSuchAlgorithmException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDs.hasContent()).thenReturn(true);\n        when(mockIterator.hasNext()).thenReturn(true, false);\n        when(mockIterator.nextNode()).thenReturn(mockDsNode);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getNodes(new String[] {dsId})).thenReturn(mockIterator);\n        when(mockNodes.getObject(mockSession, \"/FedoraDatastreamsTest1\"))\n                .thenReturn(mockObject);\n        when(mockDatastreams.asDatastream(mockDsNode)).thenReturn(mockDs);\n\n        final Response resp =\n            testObj.getBinaryContents(createPathList(pid), asList(dsId),\n                                         mockRequest);\n        final MultiPart multipart = (MultiPart) resp.getEntity();\n\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        assertEquals(1, multipart.getBodyParts().size());\n        final InputStream actualContent =\n            (InputStream) multipart.getBodyParts().get(0).getEntity();\n        assertEquals(\"/FedoraDatastreamsTest1/testDS\", multipart.getBodyParts()\n                .get(0).getContentDisposition().getFileName());\n        assertEquals(\"asdf\", IOUtils.toString(actualContent, \"UTF-8\"));\n    }"
    },
    "aSource": {
      "startLine": 286,
      "code": "@Test\n    public void testGetDatastreamsContents() throws RepositoryException,\n                                            IOException,\n                                            NoSuchAlgorithmException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockDs.hasContent()).thenReturn(true);\n        when(mockIterator.hasNext()).thenReturn(true, false);\n        when(mockIterator.nextNode()).thenReturn(mockDsNode);\n        when(mockIterator.getSize()).thenReturn(1L);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getNodes(new String[] {dsId})).thenReturn(mockIterator);\n        when(mockNodes.getObject(mockSession, \"/FedoraDatastreamsTest1\"))\n                .thenReturn(mockObject);\n        when(mockDatastreams.asDatastream(mockDsNode)).thenReturn(mockDs);\n\n        final Response resp =\n            testObj.getBinaryContents(createPathList(pid), asList(dsId),\n                                         mockRequest);\n        final MultiPart multipart = (MultiPart) resp.getEntity();\n\n        verify(mockDs).getContent();\n        verify(mockSession, never()).save();\n        assertEquals(1, multipart.getBodyParts().size());\n        final InputStream actualContent =\n            (InputStream) multipart.getBodyParts().get(0).getEntity();\n        assertEquals(\"/FedoraDatastreamsTest1/testDS\", multipart.getBodyParts()\n                .get(0).getContentDisposition().getFileName());\n        assertEquals(\"asdf\", IOUtils.toString(actualContent, \"UTF-8\"));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "10a89f2658",
    "aCommit": "fd4d725f53",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockIterator.getSize()).thenReturn(1L);",
          "type": "ADD",
          "lineNo": 297
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(long)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getSize()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.NodeIterator mockIterator"
        },
        {
          "type": "CtExecutableReference",
          "value": "getSize()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(long)"
        },
        {
          "type": "CtLiteral",
          "value": "long '1'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        308
      ]
    },
    "aCommitTime": 1386862224,
    "ID": "fcrepo/fcrepo:589",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraBatchTest.testGetDatastreamsContentsCached()",
    "bSource": {
      "startLine": 318,
      "code": "@Test\n    public void testGetDatastreamsContentsCached() throws RepositoryException,\n                                                  IOException,\n                                                  NoSuchAlgorithmException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockIterator.hasNext()).thenReturn(true, false);\n        when(mockIterator.nextNode()).thenReturn(mockDsNode);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getNodes(new String[] {dsId})).thenReturn(mockIterator);\n        when(mockNodes.getObject(mockSession, \"/FedoraDatastreamsTest1\"))\n                .thenReturn(mockObject);\n        when(mockDatastreams.asDatastream(mockDsNode)).thenReturn(mockDs);\n        when(\n                mockRequest.evaluatePreconditions(any(Date.class),\n                        any(EntityTag.class))).thenReturn(notModified());\n\n        final Response resp =\n            testObj.getBinaryContents(createPathList(pid), asList(dsId),\n                                         mockRequest);\n        verify(mockDs, never()).getContent();\n        verify(mockSession, never()).save();\n        assertEquals(NOT_MODIFIED.getStatusCode(), resp.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 319,
      "code": "@Test\n    public void testGetDatastreamsContentsCached() throws RepositoryException,\n                                                  IOException,\n                                                  NoSuchAlgorithmException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final Datastream mockDs = mockDatastream(pid, dsId, dsContent);\n        when(mockIterator.hasNext()).thenReturn(true, false);\n        when(mockIterator.nextNode()).thenReturn(mockDsNode);\n        when(mockIterator.getSize()).thenReturn(1L);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getNodes(new String[] {dsId})).thenReturn(mockIterator);\n        when(mockNodes.getObject(mockSession, \"/FedoraDatastreamsTest1\"))\n                .thenReturn(mockObject);\n        when(mockDatastreams.asDatastream(mockDsNode)).thenReturn(mockDs);\n        when(\n                mockRequest.evaluatePreconditions(any(Date.class),\n                        any(EntityTag.class))).thenReturn(notModified());\n\n        final Response resp =\n            testObj.getBinaryContents(createPathList(pid), asList(dsId),\n                                         mockRequest);\n        verify(mockDs, never()).getContent();\n        verify(mockSession, never()).save();\n        assertEquals(NOT_MODIFIED.getStatusCode(), resp.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraBatchTest.java",
    "bCommit": "10a89f2658",
    "aCommit": "fd4d725f53",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockIterator.getSize()).thenReturn(1L);",
          "type": "ADD",
          "lineNo": 329
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(long)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getSize()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.NodeIterator mockIterator"
        },
        {
          "type": "CtExecutableReference",
          "value": "getSize()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(long)"
        },
        {
          "type": "CtLiteral",
          "value": "long '1'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        343
      ]
    },
    "aCommitTime": 1386862224,
    "ID": "fcrepo/fcrepo:590",
    "trivial": null
  },
  {
    "name": "org.fcrepo.jms.headers.DefaultMessageFactoryTest.testBuildMessage()",
    "bSource": {
      "startLine": 60,
      "code": "@Test\n    public void testBuildMessage() throws RepositoryException, IOException,\n                                  JMSException {\n        final Long testDate = 46647758568747L;\n        when(mockEvent.getDate()).thenReturn(testDate);\n        final String testPath = \"super/calli/fragi/listic\";\n        when(mockEvent.getPath()).thenReturn(testPath);\n        final Integer testType = NODE_ADDED;\n        final String testReturnType =\n            REPOSITORY_NAMESPACE + EventType.valueOf(NODE_ADDED).toString();\n        when(mockEvent.getType()).thenReturn(testType);\n        final Message testMessage =\n            testDefaultMessageFactory.getMessage(mockEvent, null, mockSession);\n        assertEquals(\"Got wrong date in message!\", testDate, (Long) testMessage\n                .getLongProperty(TIMESTAMP_HEADER_NAME));\n        assertEquals(\"Got wrong identifier in message!\", testPath, testMessage\n                .getStringProperty(IDENTIFIER_HEADER_NAME));\n        assertEquals(\"Got wrong type in message!\", testReturnType, testMessage\n                .getStringProperty(EVENT_TYPE_HEADER_NAME));\n    }"
    },
    "aSource": {
      "startLine": 60,
      "code": "@Test\n    public void testBuildMessage() throws RepositoryException, IOException,\n                                  JMSException {\n        final Long testDate = 46647758568747L;\n        when(mockEvent.getDate()).thenReturn(testDate);\n        final String testPath = \"super/calli/fragi/listic\";\n        when(mockEvent.getPath()).thenReturn(testPath);\n        final Integer testType = NODE_ADDED;\n        final String testReturnType =\n            REPOSITORY_NAMESPACE + EventType.valueOf(NODE_ADDED).toString();\n        when(mockEvent.getType()).thenReturn(testType);\n        final Message testMessage =\n            testDefaultMessageFactory.getMessage(mockEvent, mockSession);\n        assertEquals(\"Got wrong date in message!\", testDate, (Long) testMessage\n                .getLongProperty(TIMESTAMP_HEADER_NAME));\n        assertEquals(\"Got wrong identifier in message!\", testPath, testMessage\n                .getStringProperty(IDENTIFIER_HEADER_NAME));\n        assertEquals(\"Got wrong type in message!\", testReturnType, testMessage\n                .getStringProperty(EVENT_TYPE_HEADER_NAME));\n    }"
    },
    "bPath": "fcrepo-jms/src/test/java/org/fcrepo/jms/headers/DefaultMessageFactoryTest.java",
    "aPath": "fcrepo-jms/src/test/java/org/fcrepo/jms/headers/DefaultMessageFactoryTest.java",
    "bCommit": "6e777dc3d0",
    "aCommit": "03fd28f03c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testDefaultMessageFactory.getMessage(mockEvent, null, mockSession);",
          "type": "DELETE",
          "lineNo": 72
        }
      ],
      "targetChanges": [
        {
          "line": "testDefaultMessageFactory.getMessage(mockEvent, mockSession);",
          "type": "ADD",
          "lineNo": 72
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "getMessage(javax.jcr.observation.Event,javax.jms.Session,javax.jms.Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.jms.headers.DefaultMessageFactory testDefaultMessageFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "getMessage(javax.jcr.observation.Event,javax.jms.Session,javax.jms.Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.observation.Event mockEvent"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jms.Session mockSession"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.jms.headers.DefaultMessageFactory.getMessage(Event,Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.jms.headers.DefaultMessageFactory testDefaultMessageFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.jms.headers.DefaultMessageFactory.getMessage(Event,Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.observation.Event mockEvent"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jms.Session mockSession"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        72
      ]
    },
    "aCommitTime": 1386606166,
    "ID": "fcrepo/fcrepo:23",
    "trivial": null
  },
  {
    "name": "org.fcrepo.jms.legacy.LegacyMethodEventFactoryTest.testGetMessage()",
    "bSource": {
      "startLine": 45,
      "code": "@Test\n    public void testGetMessage() throws Exception {\n\n        String testPath = \"/foo/bar\";\n        javax.jms.Session mockJMS = mock(javax.jms.Session.class);\n        TextMessage mockText = mock(TextMessage.class);\n        when(mockJMS.createTextMessage(anyString())).thenReturn(mockText);\n        Event mockEvent = mock(Event.class);\n        when(mockEvent.getPath()).thenReturn(testPath);\n        when(mockEvent.getType()).thenReturn(NODE_ADDED);\n        Session mockJCR = mock(Session.class);\n        Node mockSource = mock(Node.class);\n        NodeType mockType = mock(NodeType.class);\n        when(mockType.getName()).thenReturn(FedoraJcrTypes.FEDORA_OBJECT);\n        NodeType[] mockTypes = new NodeType[] {mockType};\n        when(mockSource.getMixinNodeTypes()).thenReturn(mockTypes);\n        when(mockSource.isNode()).thenReturn(true);\n        when(mockJCR.getItem(testPath)).thenReturn(mockSource);\n        testObj.getMessage(mockEvent, mockJCR, mockJMS);\n        verify(mockText).setStringProperty(\"methodName\", \"ingest\");\n    }"
    },
    "aSource": {
      "startLine": 45,
      "code": "@Test\n    public void testGetMessage() throws Exception {\n\n        String testPath = \"/foo/bar\";\n        javax.jms.Session mockJMS = mock(javax.jms.Session.class);\n        TextMessage mockText = mock(TextMessage.class);\n        when(mockJMS.createTextMessage(anyString())).thenReturn(mockText);\n        Event mockEvent = mock(Event.class);\n        when(mockEvent.getPath()).thenReturn(testPath);\n        when(mockEvent.getType()).thenReturn(NODE_ADDED);\n        when(mockEvent.getInfo()).thenReturn(\n                Collections.singletonMap(\n                        FedoraEvent.NODE_TYPE_KEY,\n                        FedoraJcrTypes.FEDORA_OBJECT));\n        testObj.getMessage(mockEvent, mockJMS);\n        verify(mockText).setStringProperty(\"methodName\", \"ingest\");\n    }"
    },
    "bPath": "fcrepo-jms/src/test/java/org/fcrepo/jms/legacy/LegacyMethodEventFactoryTest.java",
    "aPath": "fcrepo-jms/src/test/java/org/fcrepo/jms/legacy/LegacyMethodEventFactoryTest.java",
    "bCommit": "6e777dc3d0",
    "aCommit": "03fd28f03c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "Session mockJCR = mock(Session.class);",
          "type": "DELETE",
          "lineNo": 55
        },
        {
          "line": "Node mockSource = mock(Node.class);",
          "type": "DELETE",
          "lineNo": 56
        },
        {
          "line": "NodeType mockType = mock(NodeType.class);",
          "type": "DELETE",
          "lineNo": 57
        },
        {
          "line": "when(mockType.getName()).thenReturn(FedoraJcrTypes.FEDORA_OBJECT);",
          "type": "DELETE",
          "lineNo": 58
        },
        {
          "line": "NodeType[] mockTypes = new NodeType[] {mockType};",
          "type": "DELETE",
          "lineNo": 59
        },
        {
          "line": "when(mockSource.getMixinNodeTypes()).thenReturn(mockTypes);",
          "type": "DELETE",
          "lineNo": 60
        },
        {
          "line": "when(mockSource.isNode()).thenReturn(true);",
          "type": "DELETE",
          "lineNo": 61
        },
        {
          "line": "when(mockJCR.getItem(testPath)).thenReturn(mockSource);",
          "type": "DELETE",
          "lineNo": 62
        },
        {
          "line": "testObj.getMessage(mockEvent, mockJCR, mockJMS);",
          "type": "DELETE",
          "lineNo": 63
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockEvent.getInfo()).thenReturn(",
          "type": "ADD",
          "lineNo": 55
        },
        {
          "line": "Collections.singletonMap(",
          "type": "ADD",
          "lineNo": 56
        },
        {
          "line": "FedoraEvent.NODE_TYPE_KEY,",
          "type": "ADD",
          "lineNo": 57
        },
        {
          "line": "FedoraJcrTypes.FEDORA_OBJECT));",
          "type": "ADD",
          "lineNo": 58
        },
        {
          "line": "testObj.getMessage(mockEvent, mockJMS);",
          "type": "ADD",
          "lineNo": 59
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.Session mockJCR"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.Session"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.Node mockSource"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.Node"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.nodetype.NodeType mockType"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.nodetype.NodeType"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getName()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.nodetype.NodeType mockType"
        },
        {
          "type": "CtExecutableReference",
          "value": "getName()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_OBJECT"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.jcr.FedoraJcrTypes"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String FEDORA_OBJECT"
        },
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.nodetype.NodeType[] mockTypes"
        },
        {
          "type": "CtArrayTypeReference",
          "value": "javax.jcr.nodetype.NodeType[]"
        },
        {
          "type": "CtNewArray",
          "value": "javax.jcr.nodetype.NodeType[]"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.nodetype.NodeType"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.nodetype.NodeType mockType"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.nodetype.NodeType[])"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getMixinNodeTypes()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Node mockSource"
        },
        {
          "type": "CtExecutableReference",
          "value": "getMixinNodeTypes()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.nodetype.NodeType[])"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.nodetype.NodeType[] mockTypes"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "isNode()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Node mockSource"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getItem(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session mockJCR"
        },
        {
          "type": "CtExecutableReference",
          "value": "getItem(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String testPath"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Node mockSource"
        },
        {
          "type": "CtInvocation",
          "value": "getMessage(javax.jcr.observation.Event,javax.jcr.Session,javax.jcr.Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.jms.legacy.LegacyMethodEventFactory testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "getMessage(javax.jcr.observation.Event,javax.jcr.Session,javax.jcr.Session)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.observation.Event mockEvent"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session mockJCR"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jms.Session mockJMS"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.Map)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getInfo()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.observation.Event mockEvent"
        },
        {
          "type": "CtExecutableReference",
          "value": "getInfo()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.Map)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Collections.singletonMap(Object,Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Collections"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Collections.singletonMap(Object,Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String NODE_TYPE_KEY"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.observer.FedoraEvent"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String NODE_TYPE_KEY"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String FEDORA_OBJECT"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.jcr.FedoraJcrTypes"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String FEDORA_OBJECT"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.jms.legacy.LegacyMethodEventFactory.getMessage(Event,Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.jms.legacy.LegacyMethodEventFactory testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.jms.legacy.LegacyMethodEventFactory.getMessage(Event,Session)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.observation.Event mockEvent"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jms.Session mockJMS"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "Event$NODE_ADDED",
          "childCount": 0
        },
        "dstNode": {
          "label": "javax.jcr.observation.Event$NODE_ADDED",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getName",
          "childCount": 1
        },
        "dstNode": {
          "label": "getInfo",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.Session",
          "childCount": 0
        },
        "dstNode": {
          "label": "javax.jms.Session",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockType",
          "childCount": 0
        },
        "dstNode": {
          "label": "mockEvent",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockJCR",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockSource",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockType",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockTypes",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockJCR",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "singletonMap",
          "childCount": 5
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "FedoraJcrTypes.FEDORA_OBJECT",
          "childCount": 0
        },
        "dstNode": {
          "label": "FedoraJcrTypes.FEDORA_OBJECT",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        55,
        56,
        57,
        59
      ]
    },
    "aCommitTime": 1386606166,
    "ID": "fcrepo/fcrepo:24",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.TransactionTest.testCommit()",
    "bSource": {
      "startLine": 61,
      "code": "@Test\n    public void testCommit() throws RepositoryException {\n        testObj.commit();\n        verify(mockSession).save();\n        verify(mockSession).logout();\n        assertEquals(COMMITED, testObj.getState());\n        final long update = testObj.getExpires().getTime();\n        assertTrue(update <= currentTimeMillis());\n    }"
    },
    "aSource": {
      "startLine": 61,
      "code": "@Test\n    public void testCommit() throws RepositoryException {\n        testObj.commit(null);\n        verify(mockSession).save();\n        verify(mockSession).logout();\n        assertEquals(COMMITED, testObj.getState());\n        final long update = testObj.getExpires().getTime();\n        assertTrue(update <= currentTimeMillis());\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/TransactionTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/TransactionTest.java",
    "bCommit": "9447488014",
    "aCommit": "d34748acfa",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.commit();",
          "type": "DELETE",
          "lineNo": 63
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.commit(null);",
          "type": "ADD",
          "lineNo": 63
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Transaction.commit()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Transaction.commit()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Transaction.commit(VersionService)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Transaction.commit(VersionService)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        63
      ]
    },
    "aCommitTime": 1386199380,
    "ID": "fcrepo/fcrepo:472",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.TransactionTest.testState()",
    "bSource": {
      "startLine": 92,
      "code": "@Test\n    public void testState() throws RepositoryException {\n        assertEquals(NEW, testObj.getState());\n        when(mockSession.hasPendingChanges()).thenReturn(true, false);\n        assertEquals(DIRTY, testObj.getState());\n        testObj.commit();\n    }"
    },
    "aSource": {
      "startLine": 92,
      "code": "@Test\n    public void testState() throws RepositoryException {\n        assertEquals(NEW, testObj.getState());\n        when(mockSession.hasPendingChanges()).thenReturn(true, false);\n        assertEquals(DIRTY, testObj.getState());\n        testObj.commit(null);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/TransactionTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/TransactionTest.java",
    "bCommit": "9447488014",
    "aCommit": "d34748acfa",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.commit();",
          "type": "DELETE",
          "lineNo": 97
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.commit(null);",
          "type": "ADD",
          "lineNo": 97
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Transaction.commit()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Transaction.commit()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.Transaction.commit(VersionService)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.Transaction.commit(VersionService)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        97
      ]
    },
    "aCommitTime": 1386199380,
    "ID": "fcrepo/fcrepo:473",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.services.TransactionServiceTest.testCommitTx()",
    "bSource": {
      "startLine": 133,
      "code": "@Test\n    public void testCommitTx() throws Exception {\n        final Transaction tx = service.commit(IS_A_TX);\n        assertNotNull(tx);\n        verify(mockTx).commit();\n    }"
    },
    "aSource": {
      "startLine": 133,
      "code": "@Test\n    public void testCommitTx() throws Exception {\n        final Transaction tx = service.commit(IS_A_TX);\n        assertNotNull(tx);\n        verify(mockTx).commit(null);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/TransactionServiceTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/TransactionServiceTest.java",
    "bCommit": "9447488014",
    "aCommit": "d34748acfa",
    "hunk": {
      "sourceChanges": [
        {
          "line": "verify(mockTx).commit();",
          "type": "DELETE",
          "lineNo": 137
        }
      ],
      "targetChanges": [
        {
          "line": "verify(mockTx).commit(null);",
          "type": "ADD",
          "lineNo": 137
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "commit()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction mockTx"
        },
        {
          "type": "CtExecutableReference",
          "value": "commit()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "commit(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "verify(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(org.fcrepo.kernel.Transaction)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.Transaction mockTx"
        },
        {
          "type": "CtExecutableReference",
          "value": "commit(<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        137
      ]
    },
    "aCommitTime": 1386199380,
    "ID": "fcrepo/fcrepo:474",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.services.LowLevelStorageServiceIT.testGetBinaryBlobs()",
    "bSource": {
      "startLine": 58,
      "code": "@Test\n    public void testGetBinaryBlobs() throws Exception {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testLLObject/testRepositoryContent\", \"image/tiff\",\n                new ByteArrayInputStream(\n                        \"0123456789987654321012345678900987654321\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testLLObject/testRepositoryContent\");\n\n        final Iterator<LowLevelCacheEntry> inputStreamList =\n            lowLevelService.getLowLevelCacheEntries(\n                    ds.getNode().getNode(JCR_CONTENT)).iterator();\n\n        int i = 0;\n        while (inputStreamList.hasNext()) {\n            final InputStream is = inputStreamList.next().getInputStream();\n\n            final String myString = IOUtils.toString(is, \"UTF-8\");\n\n            assertEquals(\"0123456789987654321012345678900987654321\", myString);\n\n            i++;\n        }\n\n        assertNotEquals(0, i);\n\n    }"
    },
    "aSource": {
      "startLine": 58,
      "code": "@Test\n    public void testGetBinaryBlobs() throws Exception {\n        final Session session = repo.login();\n        objectService.createObject(session, \"/testLLObject\");\n        datastreamService.createDatastreamNode(session,\n                \"/testLLObject/testRepositoryContent\", \"image/tiff\",\n                null, new ByteArrayInputStream(\n                        \"0123456789987654321012345678900987654321\".getBytes()));\n\n        session.save();\n\n        final Datastream ds =\n            datastreamService.getDatastream(session,\n                    \"/testLLObject/testRepositoryContent\");\n\n        final Iterator<LowLevelCacheEntry> inputStreamList =\n            lowLevelService.getLowLevelCacheEntries(\n                    ds.getNode().getNode(JCR_CONTENT)).iterator();\n\n        int i = 0;\n        while (inputStreamList.hasNext()) {\n            final InputStream is = inputStreamList.next().getInputStream();\n\n            final String myString = IOUtils.toString(is, \"UTF-8\");\n\n            assertEquals(\"0123456789987654321012345678900987654321\", myString);\n\n            i++;\n        }\n\n        assertNotEquals(0, i);\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/LowLevelStorageServiceIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/LowLevelStorageServiceIT.java",
    "bCommit": "ceae23e7a1",
    "aCommit": "506961e1c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "new ByteArrayInputStream(",
          "type": "DELETE",
          "lineNo": 64
        }
      ],
      "targetChanges": [
        {
          "line": "null, new ByteArrayInputStream(",
          "type": "ADD",
          "lineNo": 64
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        62
      ]
    },
    "aCommitTime": 1386024706,
    "ID": "fcrepo/fcrepo:191",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.services.ObjectServiceIT.testBackupRepository()",
    "bSource": {
      "startLine": 122,
      "code": "@Test\n    public void testBackupRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.createDatastreamNode(session,\n                \"testObjectServiceNode0\", \"application/octet-stream\",\n                new ByteArrayInputStream(\"asdfx\".getBytes()));\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        final Problems problems =\n            objectService.backupRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 122,
      "code": "@Test\n    public void testBackupRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.createDatastreamNode(session,\n                \"testObjectServiceNode0\", \"application/octet-stream\", null,\n                new ByteArrayInputStream(\"asdfx\".getBytes()));\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        final Problems problems =\n            objectService.backupRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/ObjectServiceIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/ObjectServiceIT.java",
    "bCommit": "ceae23e7a1",
    "aCommit": "506961e1c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"testObjectServiceNode0\", \"application/octet-stream\",",
          "type": "DELETE",
          "lineNo": 127
        }
      ],
      "targetChanges": [
        {
          "line": "\"testObjectServiceNode0\", \"application/octet-stream\", null,",
          "type": "ADD",
          "lineNo": 127
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode0'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode0'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        126
      ]
    },
    "aCommitTime": 1386024706,
    "ID": "fcrepo/fcrepo:192",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.services.ObjectServiceIT.testRestoreRepository()",
    "bSource": {
      "startLine": 140,
      "code": "@Test\n    public void testRestoreRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.createDatastreamNode(session,\n                \"testObjectServiceNode1\", \"application/octet-stream\",\n                new ByteArrayInputStream(\"asdfy\".getBytes()));\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        objectService.backupRepository(session, backupDirectory);\n\n        final Problems problems =\n            objectService.restoreRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 140,
      "code": "@Test\n    public void testRestoreRepository() throws Exception {\n        final Session session = repository.login();\n\n        datastreamService.createDatastreamNode(session,\n                \"testObjectServiceNode1\", \"application/octet-stream\", null,\n                new ByteArrayInputStream(\"asdfy\".getBytes()));\n        session.save();\n\n        final File backupDirectory = createTempDir();\n\n        objectService.backupRepository(session, backupDirectory);\n\n        final Problems problems =\n            objectService.restoreRepository(session, backupDirectory);\n\n        assertFalse(problems.hasProblems());\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/ObjectServiceIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/ObjectServiceIT.java",
    "bCommit": "ceae23e7a1",
    "aCommit": "506961e1c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "\"testObjectServiceNode1\", \"application/octet-stream\",",
          "type": "DELETE",
          "lineNo": 145
        }
      ],
      "targetChanges": [
        {
          "line": "\"testObjectServiceNode1\", \"application/octet-stream\", null,",
          "type": "ADD",
          "lineNo": 145
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testObjectServiceNode1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/octet-stream'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        144
      ]
    },
    "aCommitTime": 1386024706,
    "ID": "fcrepo/fcrepo:193",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.services.ObjectServiceIT.testGetAllObjectsDatastreamSize()",
    "bSource": {
      "startLine": 58,
      "code": "@Test\n    public void testGetAllObjectsDatastreamSize() throws Exception {\n        Session session = repository.login();\n\n        final double originalSize = objectService.getRepositorySize();\n\n        datastreamService.createDatastreamNode(session,\n                \"testObjectServiceNode\", \"application/octet-stream\",\n                new ByteArrayInputStream(\"asdf\".getBytes()));\n        session.save();\n        session.logout();\n\n        session = repository.login();\n\n        final double afterSize = objectService.getRepositorySize();\n\n        assertEquals(4.0, afterSize - originalSize);\n\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 58,
      "code": "@Test\n    public void testGetAllObjectsDatastreamSize() throws Exception {\n        Session session = repository.login();\n\n        final double originalSize = objectService.getRepositorySize();\n\n        datastreamService.createDatastreamNode(session,\n                \"testObjectServiceNode\", \"application/octet-stream\",\n                null, new ByteArrayInputStream(\"asdf\".getBytes()));\n        session.save();\n        session.logout();\n\n        session = repository.login();\n\n        final double afterSize = objectService.getRepositorySize();\n\n        assertEquals(4.0, afterSize - originalSize);\n\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/ObjectServiceIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/ObjectServiceIT.java",
    "bCommit": "ceae23e7a1",
    "aCommit": "506961e1c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "new ByteArrayInputStream(\"asdf\".getBytes()));",
          "type": "DELETE",
          "lineNo": 66
        }
      ],
      "targetChanges": [
        {
          "line": "null, new ByteArrayInputStream(\"asdf\".getBytes()));",
          "type": "ADD",
          "lineNo": 66
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdf'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.ByteArrayInputStream"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.getBytes()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'asdf'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.getBytes()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        64
      ]
    },
    "aCommitTime": 1386024706,
    "ID": "fcrepo/fcrepo:194",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.oauth.DefaultOAuthResourceProviderTest.testAcceptsExistingTokenRequest()",
    "bSource": {
      "startLine": 83,
      "code": "@Test\n    public void testAcceptsExistingTokenRequest()\n        throws PathNotFoundException, RepositoryException, OAuthProblemException {\n        when(mockSession.getNode(\"/tokens/\" + VALID_TOKEN))\n        .thenReturn(mockNode);\n        OAuthDecision actual =\n            testObj.validateRequest(DUMMY_RSID, VALID_TOKEN, mockRequest);\n        verify(mockSession).logout();\n    }"
    },
    "aSource": {
      "startLine": 82,
      "code": "@Test\n    public void testAcceptsExistingTokenRequest()\n        throws PathNotFoundException, RepositoryException, OAuthProblemException {\n        when(mockSession.getNode(\"/tokens/\" + VALID_TOKEN))\n        .thenReturn(mockNode);\n        testObj.validateRequest(DUMMY_RSID, VALID_TOKEN, mockRequest);\n        verify(mockSession).logout();\n    }"
    },
    "bPath": "fcrepo-auth-oauth/src/test/java/org/fcrepo/auth/oauth/DefaultOAuthResourceProviderTest.java",
    "aPath": "fcrepo-auth-oauth/src/test/java/org/fcrepo/auth/oauth/DefaultOAuthResourceProviderTest.java",
    "bCommit": "6401269c03",
    "aCommit": "ceae23e7a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "OAuthDecision actual =",
          "type": "DELETE",
          "lineNo": 88
        },
        {
          "line": "testObj.validateRequest(DUMMY_RSID, VALID_TOKEN, mockRequest);",
          "type": "DELETE",
          "lineNo": 89
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.validateRequest(DUMMY_RSID, VALID_TOKEN, mockRequest);",
          "type": "ADD",
          "lineNo": 87
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.oltu.oauth2.rsfilter.OAuthDecision actual"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.oltu.oauth2.rsfilter.OAuthDecision"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider.validateRequest(String,String,HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider.validateRequest(String,String,HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String DUMMY_RSID"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String VALID_TOKEN"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider.validateRequest(String,String,HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider.validateRequest(String,String,HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String DUMMY_RSID"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String VALID_TOKEN"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "actual",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "validateRequest",
          "childCount": 4
        },
        "dstNode": {
          "label": "validateRequest",
          "childCount": 4
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        87
      ]
    },
    "aCommitTime": 1385914859,
    "ID": "fcrepo/fcrepo:457",
    "trivial": null
  },
  {
    "name": "org.fcrepo.auth.oauth.DefaultOAuthResourceProviderTest.testRejectsNonexistentTokenRequest()",
    "bSource": {
      "startLine": 93,
      "code": "@Test(expected=OAuthRuntimeException.class)\n    public void testRejectsNonexistentTokenRequest()\n        throws PathNotFoundException, RepositoryException, OAuthProblemException {\n        OAuthDecision actual =\n                testObj.validateRequest(DUMMY_RSID, INVALID_TOKEN, mockRequest);\n        verify(mockSession).logout();\n    }"
    },
    "aSource": {
      "startLine": 91,
      "code": "@Test(expected=OAuthRuntimeException.class)\n    public void testRejectsNonexistentTokenRequest()\n        throws PathNotFoundException, RepositoryException, OAuthProblemException {\n        testObj.validateRequest(DUMMY_RSID, INVALID_TOKEN, mockRequest);\n        verify(mockSession).logout();\n    }"
    },
    "bPath": "fcrepo-auth-oauth/src/test/java/org/fcrepo/auth/oauth/DefaultOAuthResourceProviderTest.java",
    "aPath": "fcrepo-auth-oauth/src/test/java/org/fcrepo/auth/oauth/DefaultOAuthResourceProviderTest.java",
    "bCommit": "6401269c03",
    "aCommit": "ceae23e7a1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "OAuthDecision actual =",
          "type": "DELETE",
          "lineNo": 96
        },
        {
          "line": "testObj.validateRequest(DUMMY_RSID, INVALID_TOKEN, mockRequest);",
          "type": "DELETE",
          "lineNo": 97
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.validateRequest(DUMMY_RSID, INVALID_TOKEN, mockRequest);",
          "type": "ADD",
          "lineNo": 94
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.oltu.oauth2.rsfilter.OAuthDecision actual"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.oltu.oauth2.rsfilter.OAuthDecision"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider.validateRequest(String,String,HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider.validateRequest(String,String,HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String DUMMY_RSID"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String INVALID_TOKEN"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider.validateRequest(String,String,HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.auth.oauth.DefaultOAuthResourceProvider.validateRequest(String,String,HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String DUMMY_RSID"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String INVALID_TOKEN"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.servlet.http.HttpServletRequest mockRequest"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "actual",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "validateRequest",
          "childCount": 4
        },
        "dstNode": {
          "label": "validateRequest",
          "childCount": 4
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        94
      ]
    },
    "aCommitTime": 1385914859,
    "ID": "fcrepo/fcrepo:458",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraFixityTest.testGetDatastreamFixity()",
    "bSource": {
      "startLine": 73,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException,\n                                         IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String path = \"/objects/\" + pid + \"/testDS\";\n        final String dsId = \"testDS\";\n        final Datastream mockDs = mockDatastream(pid, dsId, null);\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        testObj.getDatastreamFixity(createPathList(\"objects\", pid, \"testDS\"),\n                mockRequest, uriInfo);\n        verify(mockDatastreams).getFixityResultsModel(any(GraphSubjects.class),\n                eq(mockDs));\n    }"
    },
    "aSource": {
      "startLine": 74,
      "code": "@Test\n    public void testGetDatastreamFixity() throws RepositoryException,\n                                         IOException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String path = \"/objects/\" + pid + \"/testDS\";\n        final String dsId = \"testDS\";\n        final Datastream mockDs = mockDatastream(pid, dsId, null);\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockDs.getNode()).thenReturn(mockNode);\n        when(mockDatastreams.getDatastream(mockSession, path)).thenReturn(\n                mockDs);\n        when(mockDatastreams.getFixityResultsModel(any(GraphSubjects.class),\n                eq(mockDs))).thenReturn(new RdfStream());\n        testObj.getDatastreamFixity(createPathList(\"objects\", pid, \"testDS\"),\n                mockRequest, uriInfo);\n        verify(mockDatastreams).getFixityResultsModel(any(GraphSubjects.class),\n                eq(mockDs));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraFixityTest.java",
    "bCommit": "436ff13c43",
    "aCommit": "1e018b851c",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockDatastreams.getFixityResultsModel(any(GraphSubjects.class),",
          "type": "ADD",
          "lineNo": 85
        },
        {
          "line": "eq(mockDs))).thenReturn(new RdfStream());",
          "type": "ADD",
          "lineNo": 86
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.DatastreamService.getFixityResultsModel(GraphSubjects,Datastream)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.DatastreamService mockDatastreams"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.DatastreamService.getFixityResultsModel(GraphSubjects,Datastream)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "eq(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(org.fcrepo.kernel.Datastream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.Datastream mockDs"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        85
      ]
    },
    "aCommitTime": 1385497245,
    "ID": "fcrepo/fcrepo:56",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraNodeTypesIT.itShouldContainFcrepoClasses()",
    "bSource": {
      "startLine": 38,
      "code": "@Test\n    public void itShouldContainFcrepoClasses() throws IOException {\n\n        final HttpGet httpGet = new HttpGet(serverAddress + \"/fcr:nodetypes\");\n        httpGet.addHeader(\"Accept\", \"application/n-triples\");\n        final GraphStore graphStore = getGraphStore(httpGet);\n\n        assertTrue(graphStore.contains(Node.ANY, NodeFactory.createURI(RdfLexicon.RESTAPI_NAMESPACE + \"resource\"), RDF.type.asNode(), RDFS.Class.asNode()));\n        assertTrue(graphStore.contains(Node.ANY, NodeFactory.createURI(RdfLexicon.RESTAPI_NAMESPACE + \"object\"), RDF.type.asNode(), RDFS.Class.asNode()));\n        assertTrue(graphStore.contains(Node.ANY, NodeFactory.createURI(RdfLexicon.RESTAPI_NAMESPACE + \"datastream\"), RDF.type.asNode(), RDFS.Class.asNode()));\n    }"
    },
    "aSource": {
      "startLine": 39,
      "code": "@Test\n    public void itShouldContainFcrepoClasses() throws IOException {\n\n        final HttpGet httpGet = new HttpGet(serverAddress + \"/fcr:nodetypes\");\n        httpGet.addHeader(\"Accept\", \"application/n-triples\");\n        final GraphStore graphStore = getGraphStore(httpGet);\n\n        assertTrue(graphStore.contains(ANY, createURI(RESTAPI_NAMESPACE\n                + \"resource\"), type.asNode(), Class.asNode()));\n        assertTrue(graphStore.contains(ANY, createURI(RESTAPI_NAMESPACE\n                + \"object\"), type.asNode(), Class.asNode()));\n        assertTrue(graphStore.contains(ANY, createURI(RESTAPI_NAMESPACE\n                + \"datastream\"), type.asNode(), Class.asNode()));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraNodeTypesIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraNodeTypesIT.java",
    "bCommit": "49613d5a18",
    "aCommit": "3ac7aab827",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(graphStore.contains(Node.ANY, NodeFactory.createURI(RdfLexicon.RESTAPI_NAMESPACE + \"resource\"), RDF.type.asNode(), RDFS.Class.asNode()));",
          "type": "DELETE",
          "lineNo": 45
        },
        {
          "line": "assertTrue(graphStore.contains(Node.ANY, NodeFactory.createURI(RdfLexicon.RESTAPI_NAMESPACE + \"object\"), RDF.type.asNode(), RDFS.Class.asNode()));",
          "type": "DELETE",
          "lineNo": 46
        },
        {
          "line": "assertTrue(graphStore.contains(Node.ANY, NodeFactory.createURI(RdfLexicon.RESTAPI_NAMESPACE + \"datastream\"), RDF.type.asNode(), RDFS.Class.asNode()));",
          "type": "DELETE",
          "lineNo": 47
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue(graphStore.contains(ANY, createURI(RESTAPI_NAMESPACE",
          "type": "ADD",
          "lineNo": 46
        },
        {
          "line": "+ \"resource\"), type.asNode(), Class.asNode()));",
          "type": "ADD",
          "lineNo": 47
        },
        {
          "line": "assertTrue(graphStore.contains(ANY, createURI(RESTAPI_NAMESPACE",
          "type": "ADD",
          "lineNo": 48
        },
        {
          "line": "+ \"object\"), type.asNode(), Class.asNode()));",
          "type": "ADD",
          "lineNo": 49
        },
        {
          "line": "assertTrue(graphStore.contains(ANY, createURI(RESTAPI_NAMESPACE",
          "type": "ADD",
          "lineNo": 50
        },
        {
          "line": "+ \"datastream\"), type.asNode(), Class.asNode()));",
          "type": "ADD",
          "lineNo": 51
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.update.GraphStore graphStore"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtTypeAccess",
          "value": "Node.ANY"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.NodeFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String RESTAPI_NAMESPACE"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.RdfLexicon"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String RESTAPI_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'resource'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "RDF.type"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "RDFS.Class"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.update.GraphStore graphStore"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtTypeAccess",
          "value": "Node.ANY"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.NodeFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String RESTAPI_NAMESPACE"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.RdfLexicon"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String RESTAPI_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'object'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "RDF.type"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "RDFS.Class"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.update.GraphStore graphStore"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtTypeAccess",
          "value": "Node.ANY"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.NodeFactory"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String RESTAPI_NAMESPACE"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.fcrepo.kernel.RdfLexicon"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String RESTAPI_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'datastream'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "RDF.type"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "RDFS.Class"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.update.GraphStore graphStore"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.Node$ANY"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String RESTAPI_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'resource'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.integration.http.api.FedoraNodeTypesIT type"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.lang.Class"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.update.GraphStore graphStore"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.Node$ANY"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String RESTAPI_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'object'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.integration.http.api.FedoraNodeTypesIT type"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.lang.Class"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.update.GraphStore graphStore"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.Node$ANY"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String RESTAPI_NAMESPACE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'datastream'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.integration.http.api.FedoraNodeTypesIT type"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.lang.Class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "Node.ANY",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Node$ANY",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "Node.ANY",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Node$ANY",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "Node.ANY",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Node$ANY",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "RDFS.Class",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Class",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "RDFS.Class",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Class",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "RDFS.Class",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Class",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.NodeFactory",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.RdfLexicon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "RDF.type",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.NodeFactory",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.RdfLexicon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "RDF.type",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.graph.NodeFactory",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "BinaryOperator",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.RdfLexicon",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "RDF.type",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "type",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "java.lang.Class",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "type",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "java.lang.Class",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "type",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "java.lang.Class",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        46,
        47,
        48
      ]
    },
    "aCommitTime": 1385476830,
    "ID": "fcrepo/fcrepo:140",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraIdentifiersIT.testGetNextHasTwoPids()",
    "bSource": {
      "startLine": 55,
      "code": "@Test\n    public void testGetNextHasTwoPids() throws IOException {\n        final HttpPost method =\n                new HttpPost(serverAddress + \"fcr:identifier?count=2\");\n        method.setHeader(\"Accept\", \"application/n3\");\n        logger.debug(\"Executed testGetNextHasTwoPids()\");\n        final GraphStore graphStore = getGraphStore(method);\n        assertEquals(\"Didn't find two dang PIDs!\", 2, size(graphStore.find(ANY,\n                createResource(serverAddress + \"fcr:identifier\").asNode(),\n                HAS_MEMBER_OF_RESULT.asNode(), ANY)));\n\n    }"
    },
    "aSource": {
      "startLine": 55,
      "code": "@Test\n    public void testGetNextHasTwoPids() throws IOException {\n        final HttpPost method =\n                new HttpPost(serverAddress + \"fcr:identifier?count=2\");\n        logger.debug(\"Executed testGetNextHasTwoPids()\");\n        final GraphStore graphStore = getGraphStore(method);\n        assertEquals(\"Didn't find two dang PIDs!\", 2, size(graphStore.find(ANY,\n                createResource(serverAddress + \"fcr:identifier\").asNode(),\n                HAS_MEMBER_OF_RESULT.asNode(), ANY)));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraIdentifiersIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraIdentifiersIT.java",
    "bCommit": "49613d5a18",
    "aCommit": "3ac7aab827",
    "hunk": {
      "sourceChanges": [
        {
          "line": "method.setHeader(\"Accept\", \"application/n3\");",
          "type": "DELETE",
          "lineNo": 59
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setHeader(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpPost method"
        },
        {
          "type": "CtExecutableReference",
          "value": "setHeader(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Accept'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'application/n3'"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "setHeader",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        61
      ]
    },
    "aCommitTime": 1385476830,
    "ID": "fcrepo/fcrepo:141",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraIdentifiersTest.testGetNextPidAtRoot()",
    "bSource": {
      "startLine": 76,
      "code": "@Test\n    public void testGetNextPidAtRoot() throws NoSuchFieldException,\n                                      RepositoryException, URISyntaxException {\n        when(mockPidMinter.makePid()).thenReturn(\n                new Function<Object, String>() {\n\n                    @Override\n                    public String apply(final Object input) {\n                        return \"asdf:123\";\n                    }\n                });\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n\n        when(uriInfo.getAbsolutePath()).thenReturn(\n                new URI(\"http://localhost/fcrepo/fcr:identifier\"));\n\n        final Node mockNode = mock(Node.class);\n        when(mockNode.getPath()).thenReturn(\"/asdf:123\");\n        when(mockSession.getNode(\"/asdf:123\")).thenReturn(mockNode);\n\n        final Dataset np = testObj.getNextPid(createPathList(\"\"), 2, uriInfo);\n\n        LOGGER.debug(\"Got dataset {}\", np.getDefaultModel().toString());\n        assertTrue(np.getDefaultModel().contains(\n                createResource(\"http://localhost/fcrepo/fcr:identifier\"),\n                HAS_MEMBER_OF_RESULT,\n                createResource(\"http://localhost/fcrepo/asdf:123\")));\n\n    }"
    },
    "aSource": {
      "startLine": 76,
      "code": "@Test\n    public void testGetNextPidAtRoot() throws NoSuchFieldException,\n                                      RepositoryException, URISyntaxException {\n        when(mockPidMinter.makePid()).thenReturn(\n                new Function<Object, String>() {\n\n                    @Override\n                    public String apply(final Object input) {\n                        return \"asdf:123\";\n                    }\n                });\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n\n        when(uriInfo.getAbsolutePath()).thenReturn(\n                new URI(\"http://localhost/fcrepo/fcr:identifier\"));\n\n        final Node mockNode = mock(Node.class);\n        when(mockNode.getPath()).thenReturn(\"/asdf:123\");\n        when(mockSession.getNode(\"/asdf:123\")).thenReturn(mockNode);\n\n        final Model np = testObj.getNextPid(createPathList(\"\"), 2, uriInfo).asModel();\n        LOGGER.debug(\"Got identifier results:\\n{}\", np.getGraph());\n        assertTrue(np.contains(\n                createResource(\"http://localhost/fcrepo/fcr:identifier\"),\n                HAS_MEMBER_OF_RESULT,\n                createResource(\"http://localhost/fcrepo/asdf:123\")));\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraIdentifiersTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraIdentifiersTest.java",
    "bCommit": "49613d5a18",
    "aCommit": "3ac7aab827",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Dataset np = testObj.getNextPid(createPathList(\"\"), 2, uriInfo);",
          "type": "DELETE",
          "lineNo": 97
        },
        {
          "line": "LOGGER.debug(\"Got dataset {}\", np.getDefaultModel().toString());",
          "type": "DELETE",
          "lineNo": 99
        },
        {
          "line": "assertTrue(np.getDefaultModel().contains(",
          "type": "DELETE",
          "lineNo": 100
        }
      ],
      "targetChanges": [
        {
          "line": "final Model np = testObj.getNextPid(createPathList(\"\"), 2, uriInfo).asModel();",
          "type": "ADD",
          "lineNo": 97
        },
        {
          "line": "LOGGER.debug(\"Got identifier results:\\n{}\", np.getGraph());",
          "type": "ADD",
          "lineNo": 98
        },
        {
          "line": "assertTrue(np.contains(",
          "type": "ADD",
          "lineNo": 99
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.query.Dataset np"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.query.Dataset"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(List,Integer,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraIdentifiers testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(List,Integer,UriInfo)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtInvocation",
          "value": "org.slf4j.Logger.debug(String,Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.slf4j.Logger LOGGER"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.slf4j.Logger.debug(String,Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Got dataset {}'"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtInvocation",
          "value": "getDefaultModel()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset np"
        },
        {
          "type": "CtExecutableReference",
          "value": "getDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains(org.fcrepo.kernel.Property)"
        },
        {
          "type": "CtInvocation",
          "value": "getDefaultModel()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.query.Dataset np"
        },
        {
          "type": "CtExecutableReference",
          "value": "getDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(org.fcrepo.kernel.Property)"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model np"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(List,Integer,UriInfo)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraIdentifiers testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraIdentifiers.getNextPid(List,Integer,UriInfo)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.UriInfo uriInfo"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.slf4j.Logger.debug(String,Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.slf4j.Logger LOGGER"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.slf4j.Logger.debug(String,Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Got identifier results:\n{}'"
        },
        {
          "type": "CtInvocation",
          "value": "getGraph()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model np"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraph()"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "contains(org.fcrepo.kernel.Property)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model np"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(org.fcrepo.kernel.Property)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.hp.hpl.jena.query.Dataset",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.rdf.model.Model",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Got dataset {}\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Got identifier results:\\n{}\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDefaultModel",
          "childCount": 1
        },
        "dstNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "toString",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDefaultModel",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getDefaultModel",
          "childCount": 1
        },
        "dstNode": {
          "label": "getGraph",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNextPid",
          "childCount": 4
        },
        "dstNode": {
          "label": "getNextPid",
          "childCount": 4
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "np",
          "childCount": 0
        },
        "dstNode": {
          "label": "np",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        97
      ]
    },
    "aCommitTime": 1385476830,
    "ID": "fcrepo/fcrepo:142",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraWorkspacesIT.testGetWorkspaces()",
    "bSource": {
      "startLine": 41,
      "code": "@Test\n    public void testGetWorkspaces() throws Exception {\n        final HttpGet httpGet = new HttpGet(serverAddress + \"fcr:workspaces\");\n        httpGet.setHeader(\"Accept\", \"text/html\");\n        final HttpResponse response = execute(httpGet);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n\n        final InputStream in = response.getEntity().getContent();\n        final List<String> lines = IOUtils.readLines(in);\n        boolean found = false;\n        for (final String line : lines) {\n            if (line.contains(serverAddress + \"workspace:default\")) {\n                found = true;\n                break;\n            }\n        }\n        assertTrue(serverAddress + \"workspace:default, not found\", found);\n    }"
    },
    "aSource": {
      "startLine": 40,
      "code": "@Test\n    public void testGetWorkspaces() throws Exception {\n        final HttpGet httpGet = new HttpGet(serverAddress + \"fcr:workspaces\");\n        final GraphStore result = getGraphStore(httpGet);\n        assertTrue(serverAddress + \"workspace:default, not found!\", result\n                .contains(ANY, createURI(serverAddress + \"workspace:default\"),\n                        type.asNode(), NOT_IMPLEMENTED.asNode()));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraWorkspacesIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraWorkspacesIT.java",
    "bCommit": "49613d5a18",
    "aCommit": "3ac7aab827",
    "hunk": {
      "sourceChanges": [
        {
          "line": "httpGet.setHeader(\"Accept\", \"text/html\");",
          "type": "DELETE",
          "lineNo": 44
        },
        {
          "line": "final HttpResponse response = execute(httpGet);",
          "type": "DELETE",
          "lineNo": 45
        },
        {
          "line": "assertEquals(200, response.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 46
        },
        {
          "line": "final InputStream in = response.getEntity().getContent();",
          "type": "DELETE",
          "lineNo": 48
        },
        {
          "line": "final List<String> lines = IOUtils.readLines(in);",
          "type": "DELETE",
          "lineNo": 49
        },
        {
          "line": "boolean found = false;",
          "type": "DELETE",
          "lineNo": 50
        },
        {
          "line": "for (final String line : lines) {",
          "type": "DELETE",
          "lineNo": 51
        },
        {
          "line": "if (line.contains(serverAddress + \"workspace:default\")) {",
          "type": "DELETE",
          "lineNo": 52
        },
        {
          "line": "found = true;",
          "type": "DELETE",
          "lineNo": 53
        },
        {
          "line": "break;",
          "type": "DELETE",
          "lineNo": 54
        },
        {
          "line": "}",
          "type": "DELETE",
          "lineNo": 55
        },
        {
          "line": "}",
          "type": "DELETE",
          "lineNo": 56
        },
        {
          "line": "assertTrue(serverAddress + \"workspace:default, not found\", found);",
          "type": "DELETE",
          "lineNo": 57
        }
      ],
      "targetChanges": [
        {
          "line": "final GraphStore result = getGraphStore(httpGet);",
          "type": "ADD",
          "lineNo": 43
        },
        {
          "line": "assertTrue(serverAddress + \"workspace:default, not found!\", result",
          "type": "ADD",
          "lineNo": 44
        },
        {
          "line": ".contains(ANY, createURI(serverAddress + \"workspace:default\"),",
          "type": "ADD",
          "lineNo": 45
        },
        {
          "line": "type.asNode(), NOT_IMPLEMENTED.asNode()));",
          "type": "ADD",
          "lineNo": 46
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setHeader(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpGet httpGet"
        },
        {
          "type": "CtExecutableReference",
          "value": "setHeader(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Accept'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'text/html'"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.http.HttpResponse"
        },
        {
          "type": "CtInvocation",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "execute(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpGet httpGet"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '200'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.io.InputStream in"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.InputStream"
        },
        {
          "type": "CtInvocation",
          "value": "getContent()"
        },
        {
          "type": "CtInvocation",
          "value": "getEntity()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getEntity()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getContent()"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.util.List lines"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.commons.io.IOUtils.readLines(InputStream)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.commons.io.IOUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.commons.io.IOUtils.readLines(InputStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.io.InputStream in"
        },
        {
          "type": "CtLocalVariable",
          "value": "boolean found"
        },
        {
          "type": "CtTypeReference",
          "value": "boolean"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String line"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List lines"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.String.contains(CharSequence)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String line"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.String.contains(CharSequence)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'workspace:default'"
        },
        {
          "type": "CtVariableWrite",
          "value": "boolean found"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'workspace:default, not found'"
        },
        {
          "type": "CtVariableRead",
          "value": "boolean found"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.update.GraphStore result"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.update.GraphStore"
        },
        {
          "type": "CtInvocation",
          "value": "getGraphStore(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtExecutableReference",
          "value": "getGraphStore(org.fcrepo.integration.http.api.HttpUriRequest)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.client.methods.HttpGet httpGet"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'workspace:default, not found!'"
        },
        {
          "type": "CtInvocation",
          "value": "contains()"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.update.GraphStore result"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains()"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.hp.hpl.jena.graph.Node$ANY"
        },
        {
          "type": "CtInvocation",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "createURI(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String serverAddress"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'workspace:default'"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.integration.http.api.FedoraWorkspacesIT type"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        },
        {
          "type": "CtInvocation",
          "value": "asNode()"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property NOT_IMPLEMENTED"
        },
        {
          "type": "CtExecutableReference",
          "value": "asNode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "response",
          "childCount": 3
        },
        "dstNode": {
          "label": "result",
          "childCount": 3
        }
      },
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.http.HttpResponse",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.update.GraphStore",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "execute",
          "childCount": 2
        },
        "dstNode": {
          "label": "getGraphStore",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "200",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"workspace:default, not found!\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "response",
          "childCount": 0
        },
        "dstNode": {
          "label": "result",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.commons.io.IOUtils",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Node$ANY",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "If",
          "ForEach",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "contains",
          "childCount": 2
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 2
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "BinaryOperator",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "serverAddress",
          "childCount": 0
        },
        "dstNode": {
          "label": "type",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "setHeader",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "in",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "lines",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "found",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "ForEach",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "200",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"workspace:default, not found!\"",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "response",
          "childCount": 0
        },
        "dstNode": {
          "label": "result",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.commons.io.IOUtils",
          "childCount": 0
        },
        "dstNode": {
          "label": "com.hp.hpl.jena.graph.Node$ANY",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "If",
          "ForEach",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "contains",
          "childCount": 2
        },
        "dstNode": {
          "label": "createURI",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 2
        },
        "dstNode": {
          "label": "asNode",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        47,
        48
      ]
    },
    "aCommitTime": 1385476830,
    "ID": "fcrepo/fcrepo:143",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.kernel.services.ObjectServiceIT.testUpdateNamespaceRegistryGraph()",
    "bSource": {
      "startLine": 105,
      "code": "@Test\n    public void testUpdateNamespaceRegistryGraph() throws Exception {\n        final Session session = repository.login();\n\n        final Dataset registryGraph =\n            objectService.getNamespaceRegistryGraph(session);\n        final NamespaceRegistry namespaceRegistry =\n            session.getWorkspace().getNamespaceRegistry();\n\n        UpdateAction.parseExecute(\"INSERT { <info:abc> <\"\n                + HAS_NAMESPACE_PREFIX.toString() + \"> \\\"abc\\\" } WHERE { }\",\n                registryGraph);\n\n        assertEquals(\"abc\", namespaceRegistry.getPrefix(\"info:abc\"));\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 105,
      "code": "@Test\n    public void testUpdateNamespaceRegistryGraph() throws Exception {\n        final Session session = repository.login();\n\n        final Dataset registryGraph =\n            objectService.getNamespaceRegistryDataset(session);\n        final NamespaceRegistry namespaceRegistry =\n            session.getWorkspace().getNamespaceRegistry();\n\n        UpdateAction.parseExecute(\"INSERT { <info:abc> <\"\n                + HAS_NAMESPACE_PREFIX.toString() + \"> \\\"abc\\\" } WHERE { }\",\n                registryGraph);\n\n        assertEquals(\"abc\", namespaceRegistry.getPrefix(\"info:abc\"));\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/ObjectServiceIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/ObjectServiceIT.java",
    "bCommit": "49613d5a18",
    "aCommit": "3ac7aab827",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.getNamespaceRegistryGraph(session);",
          "type": "DELETE",
          "lineNo": 110
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.getNamespaceRegistryDataset(session);",
          "type": "ADD",
          "lineNo": 110
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryGraph(Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryGraph(Session)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNamespaceRegistryGraph",
          "childCount": 2
        },
        "dstNode": {
          "label": "getNamespaceRegistryDataset",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        110
      ]
    },
    "aCommitTime": 1385476830,
    "ID": "fcrepo/fcrepo:144",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.integration.kernel.services.ObjectServiceIT.testGetNamespaceRegistryGraph()",
    "bSource": {
      "startLine": 79,
      "code": "@Test\n    public void testGetNamespaceRegistryGraph() throws Exception {\n        final Session session = repository.login();\n\n        final Dataset registryGraph =\n            objectService.getNamespaceRegistryGraph(session);\n\n        final NamespaceRegistry namespaceRegistry =\n            session.getWorkspace().getNamespaceRegistry();\n\n        logger.info(namespaceRegistry.toString());\n        logger.info(registryGraph.toString());\n        for (final String s : namespaceRegistry.getPrefixes()) {\n            if (s.isEmpty() || s.equals(\"xmlns\") || s.equals(\"jcr\")) {\n                continue;\n            }\n            final String uri = namespaceRegistry.getURI(s);\n            assertTrue(\"expected to find JCR namespaces \" + s + \" in graph\",\n                    registryGraph.asDatasetGraph().contains(Node.ANY,\n                            ResourceFactory.createResource(uri).asNode(),\n                            RdfLexicon.HAS_NAMESPACE_PREFIX.asNode(),\n                            ResourceFactory.createPlainLiteral(s).asNode()));\n        }\n        session.logout();\n    }"
    },
    "aSource": {
      "startLine": 79,
      "code": "@Test\n    public void testGetNamespaceRegistryGraph() throws Exception {\n        final Session session = repository.login();\n\n        final Dataset registryGraph =\n            objectService.getNamespaceRegistryDataset(session);\n\n        final NamespaceRegistry namespaceRegistry =\n            session.getWorkspace().getNamespaceRegistry();\n\n        logger.info(namespaceRegistry.toString());\n        logger.info(registryGraph.toString());\n        for (final String s : namespaceRegistry.getPrefixes()) {\n            if (s.isEmpty() || s.equals(\"xmlns\") || s.equals(\"jcr\")) {\n                continue;\n            }\n            final String uri = namespaceRegistry.getURI(s);\n            assertTrue(\"expected to find JCR namespaces \" + s + \" in graph\",\n                    registryGraph.asDatasetGraph().contains(Node.ANY,\n                            ResourceFactory.createResource(uri).asNode(),\n                            RdfLexicon.HAS_NAMESPACE_PREFIX.asNode(),\n                            ResourceFactory.createPlainLiteral(s).asNode()));\n        }\n        session.logout();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/ObjectServiceIT.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/integration/kernel/services/ObjectServiceIT.java",
    "bCommit": "49613d5a18",
    "aCommit": "3ac7aab827",
    "hunk": {
      "sourceChanges": [
        {
          "line": "objectService.getNamespaceRegistryGraph(session);",
          "type": "DELETE",
          "lineNo": 84
        }
      ],
      "targetChanges": [
        {
          "line": "objectService.getNamespaceRegistryDataset(session);",
          "type": "ADD",
          "lineNo": 84
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryGraph(Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryGraph(Session)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.ObjectService objectService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.RepositoryService.getNamespaceRegistryDataset(Session)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.Session session"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNamespaceRegistryGraph",
          "childCount": 2
        },
        "dstNode": {
          "label": "getNamespaceRegistryDataset",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        84
      ]
    },
    "aCommitTime": 1385476830,
    "ID": "fcrepo/fcrepo:145",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.services.ObjectServiceTest.testCreateObject()",
    "bSource": {
      "startLine": 61,
      "code": "@Test\n    public void testCreateObject() throws Exception {\n        final String testPath = \"/foo\";\n        when(mockRoot.getNode(testPath.substring(1))).thenReturn(mockNode);\n        when(mockNodeType.getName()).thenReturn(FEDORA_OBJECT);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockNodeType});\n\n        final ObjectService testObj = new ObjectService();\n        final Node actual =\n                testObj.createObject(mockSession, testPath).getNode();\n        assertEquals(mockNode, actual);\n    }"
    },
    "aSource": {
      "startLine": 62,
      "code": "@Test\n    public void testCreateObject() throws Exception {\n        final String testPath = \"/foo\";\n        when(mockRoot.getNode(testPath.substring(1))).thenReturn(mockNode);\n        when(mockNodeType.getName()).thenReturn(FEDORA_OBJECT);\n        NodeType mockNodeType = mock(NodeType.class);\n        when(mockNodeType.getName()).thenReturn(\"nt:folder\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockNodeType});\n\n        final ObjectService testObj = new ObjectService();\n        final Node actual =\n                testObj.createObject(mockSession, testPath).getNode();\n        assertEquals(mockNode, actual);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/ObjectServiceTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/ObjectServiceTest.java",
    "bCommit": "ee3c9ff6ea",
    "aCommit": "b65d0e0e17",
    "hunk": {
      "targetChanges": [
        {
          "line": "NodeType mockNodeType = mock(NodeType.class);",
          "type": "ADD",
          "lineNo": 67
        },
        {
          "line": "when(mockNodeType.getName()).thenReturn(\"nt:folder\");",
          "type": "ADD",
          "lineNo": 68
        },
        {
          "line": "when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);",
          "type": "ADD",
          "lineNo": 69
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.jcr.nodetype.NodeType mockNodeType"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.nodetype.NodeType"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getName()"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.nodetype.NodeType mockNodeType"
        },
        {
          "type": "CtExecutableReference",
          "value": "getName()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'nt:folder'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.nodetype.NodeType)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPrimaryNodeType()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPrimaryNodeType()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.nodetype.NodeType)"
        },
        {
          "type": "CtVariableRead",
          "value": "javax.jcr.nodetype.NodeType mockNodeType"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "NewArray",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockNodeType",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockNodeType",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "VariableRead",
        "parents": [
          "NewArray",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockNodeType",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        72
      ]
    },
    "aCommitTime": 1385409962,
    "ID": "fcrepo/fcrepo:443",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetJcrVersionsModel()",
    "bSource": {
      "startLine": 503,
      "code": "@Test\n    public final void testGetJcrVersionsModel() throws Exception {\n\n        when(mockNode.getPath()).thenReturn(\"/test/jcr\");\n        when(mockVersionManager.getVersionHistory(mockNode.getPath()))\n                .thenReturn(mockVersionHistory);\n\n        when(mockVersionIterator.hasNext()).thenReturn(true, false);\n        when(mockFrozenNode.getPath()).thenReturn(\n                \"/jcr:system/versions/test/jcr\");\n        when(mockFrozenNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockFrozenNode.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n        when(mockVersion.getFrozenNode()).thenReturn(mockFrozenNode);\n        when(mockVersionIterator.next()).thenReturn(mockVersion);\n        when(mockVersionHistory.getAllVersions()).thenReturn(\n                mockVersionIterator);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionHistory.getVersionLabels(mockVersion)).thenReturn(\n                new String[] {\"abc\"});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n        when(mockFrozenNode.getProperties()).thenReturn(mockProperties);\n        final Model actual =\n            testObj.getVersionTriples(mockNode).asModel();\n\n        assertTrue(actual.contains(testSubjects.getGraphSubject(mockNode),\n                HAS_VERSION, testSubjects.getGraphSubject(mockFrozenNode)));\n        assertTrue(actual.contains(\n                testSubjects.getGraphSubject(mockFrozenNode),\n                HAS_VERSION_LABEL, actual.createLiteral(\"abc\")));\n    }"
    },
    "aSource": {
      "startLine": 503,
      "code": "@Test\n    public final void testGetJcrVersionsModel() throws Exception {\n\n        when(mockNode.getPath()).thenReturn(\"/test/jcr\");\n        when(mockVersionManager.getVersionHistory(mockNode.getPath()))\n                .thenReturn(mockVersionHistory);\n\n        when(mockVersionIterator.hasNext()).thenReturn(true, false);\n        when(mockFrozenNode.getSession()).thenReturn(mockSession);\n        when(mockFrozenNode.getPath()).thenReturn(\n                \"/jcr:system/versions/test/jcr\");\n        when(mockFrozenNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockFrozenNode.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n        when(mockVersion.getFrozenNode()).thenReturn(mockFrozenNode);\n        when(mockVersionIterator.next()).thenReturn(mockVersion);\n        when(mockVersionHistory.getAllVersions()).thenReturn(\n                mockVersionIterator);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionHistory.getVersionLabels(mockVersion)).thenReturn(\n                new String[] {\"abc\"});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n        when(mockFrozenNode.getProperties()).thenReturn(mockProperties);\n        final Model actual =\n            testObj.getVersionTriples(mockNode).asModel();\n\n        assertTrue(actual.contains(testSubjects.getGraphSubject(mockNode),\n                HAS_VERSION, testSubjects.getGraphSubject(mockFrozenNode)));\n        assertTrue(actual.contains(\n                testSubjects.getGraphSubject(mockFrozenNode),\n                HAS_VERSION_LABEL, actual.createLiteral(\"abc\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "ee3c9ff6ea",
    "aCommit": "b65d0e0e17",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockFrozenNode.getSession()).thenReturn(mockSession);",
          "type": "ADD",
          "lineNo": 511
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getSession()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockFrozenNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getSession()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.Session)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        526
      ]
    },
    "aCommitTime": 1385409962,
    "ID": "fcrepo/fcrepo:444",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testHashCode()",
    "bSource": {
      "startLine": 297,
      "code": "@Test\n    public void testHashCode() {\n        final RdfStream testStreamToCompare = new RdfStream(mockIterator);\n        testStreamToCompare.addNamespace(prefix1, uri1);\n        assertNotEquals(testStream.hashCode(), testStreamToCompare.hashCode());\n    }"
    },
    "aSource": {
      "startLine": 297,
      "code": "@Test\n    public void testHashCode() {\n        final RdfStream testStreamToCompare = new RdfStream(mockIterator);\n        testStreamToCompare.namespace(prefix1, uri1);\n        assertNotEquals(testStream.hashCode(), testStreamToCompare.hashCode());\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "5c8fa6347b",
    "aCommit": "037d8798c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testStreamToCompare.addNamespace(prefix1, uri1);",
          "type": "DELETE",
          "lineNo": 300
        }
      ],
      "targetChanges": [
        {
          "line": "testStreamToCompare.namespace(prefix1, uri1);",
          "type": "ADD",
          "lineNo": 300
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespace(String,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStreamToCompare"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String prefix1"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String uri1"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespace(String,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStreamToCompare"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String prefix1"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String uri1"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "addNamespace",
          "childCount": 3
        },
        "dstNode": {
          "label": "namespace",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        300
      ]
    },
    "aCommitTime": 1384885372,
    "ID": "fcrepo/fcrepo:4",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testWithThisContextIterable()",
    "bSource": {
      "startLine": 140,
      "code": "@Test\n    public void testWithThisContextIterable() {\n        testStream.addNamespace(prefix1, uri1);\n        final RdfStream testStream2 =\n            testStream.withThisContext((Iterable<Triple>) testStream);\n        assertEquals(testStream.namespaces(), testStream2.namespaces());\n    }"
    },
    "aSource": {
      "startLine": 140,
      "code": "@Test\n    public void testWithThisContextIterable() {\n        testStream.namespace(prefix1, uri1);\n        final RdfStream testStream2 =\n            testStream.withThisContext((Iterable<Triple>) testStream);\n        assertEquals(testStream.namespaces(), testStream2.namespaces());\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "5c8fa6347b",
    "aCommit": "037d8798c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testStream.addNamespace(prefix1, uri1);",
          "type": "DELETE",
          "lineNo": 142
        }
      ],
      "targetChanges": [
        {
          "line": "testStream.namespace(prefix1, uri1);",
          "type": "ADD",
          "lineNo": 142
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String prefix1"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String uri1"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String prefix1"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String uri1"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "addNamespace",
          "childCount": 3
        },
        "dstNode": {
          "label": "namespace",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        142
      ]
    },
    "aCommitTime": 1384885372,
    "ID": "fcrepo/fcrepo:5",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testEquals()",
    "bSource": {
      "startLine": 284,
      "code": "@Test\n    public void testEquals() {\n        assertNotEquals(testStream,new Object());\n        RdfStream testStreamToCompare = new RdfStream(mockIterator);\n        assertEquals(testStream, testStreamToCompare);\n        testStreamToCompare.addNamespace(prefix1, uri1);\n        assertNotEquals(testStream, testStreamToCompare);\n        when(differentMockIterator.hasNext()).thenReturn(true, false);\n        when(differentMockIterator.next()).thenReturn(triple);\n        testStreamToCompare = new RdfStream(differentMockIterator);\n        assertNotEquals(testStream, testStreamToCompare);\n    }"
    },
    "aSource": {
      "startLine": 284,
      "code": "@Test\n    public void testEquals() {\n        assertNotEquals(testStream,new Object());\n        RdfStream testStreamToCompare = new RdfStream(mockIterator);\n        assertEquals(testStream, testStreamToCompare);\n        testStreamToCompare.namespace(prefix1, uri1);\n        assertNotEquals(testStream, testStreamToCompare);\n        when(differentMockIterator.hasNext()).thenReturn(true, false);\n        when(differentMockIterator.next()).thenReturn(triple);\n        testStreamToCompare = new RdfStream(differentMockIterator);\n        assertNotEquals(testStream, testStreamToCompare);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "5c8fa6347b",
    "aCommit": "037d8798c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testStreamToCompare.addNamespace(prefix1, uri1);",
          "type": "DELETE",
          "lineNo": 289
        }
      ],
      "targetChanges": [
        {
          "line": "testStreamToCompare.namespace(prefix1, uri1);",
          "type": "ADD",
          "lineNo": 289
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespace(String,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStreamToCompare"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String prefix1"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String uri1"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespace(String,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStreamToCompare"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String prefix1"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String uri1"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "addNamespace",
          "childCount": 3
        },
        "dstNode": {
          "label": "namespace",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        289
      ]
    },
    "aCommitTime": 1384885372,
    "ID": "fcrepo/fcrepo:6",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testAddNamespace()",
    "bSource": {
      "startLine": 177,
      "code": "@Test\n    public void testAddNamespace() {\n        testStream.addNamespace(prefix1, uri1);\n        assertTrue(testStream.namespaces().containsKey(prefix1));\n        assertTrue(testStream.namespaces().containsValue(uri1));\n    }"
    },
    "aSource": {
      "startLine": 177,
      "code": "@Test\n    public void testAddNamespace() {\n        testStream.namespace(prefix1, uri1);\n        assertTrue(testStream.namespaces().containsKey(prefix1));\n        assertTrue(testStream.namespaces().containsValue(uri1));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "5c8fa6347b",
    "aCommit": "037d8798c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testStream.addNamespace(prefix1, uri1);",
          "type": "DELETE",
          "lineNo": 179
        }
      ],
      "targetChanges": [
        {
          "line": "testStream.namespace(prefix1, uri1);",
          "type": "ADD",
          "lineNo": 179
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String prefix1"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String uri1"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String prefix1"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String uri1"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "addNamespace",
          "childCount": 3
        },
        "dstNode": {
          "label": "namespace",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        179
      ]
    },
    "aCommitTime": 1384885372,
    "ID": "fcrepo/fcrepo:7",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testAsModel()",
    "bSource": {
      "startLine": 193,
      "code": "@Test\n    public void testAsModel() throws RepositoryException {\n        testStream = new RdfStream(singletonList(triple));\n        testStream.addNamespaces(testNamespaces);\n\n        final Model testModel = testStream.asModel();\n        assertEquals(testModel.getNsPrefixMap(), testNamespaces);\n        assertTrue(testModel.contains(testModel.asStatement(triple)));\n    }"
    },
    "aSource": {
      "startLine": 193,
      "code": "@Test\n    public void testAsModel() throws RepositoryException {\n        testStream = new RdfStream(singletonList(triple));\n        testStream.namespaces(testNamespaces);\n\n        final Model testModel = testStream.asModel();\n        assertEquals(testModel.getNsPrefixMap(), testNamespaces);\n        assertTrue(testModel.contains(testModel.asStatement(triple)));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "5c8fa6347b",
    "aCommit": "037d8798c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testStream.addNamespaces(testNamespaces);",
          "type": "DELETE",
          "lineNo": 196
        }
      ],
      "targetChanges": [
        {
          "line": "testStream.namespaces(testNamespaces);",
          "type": "ADD",
          "lineNo": 196
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespaces(Map)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespaces(Map)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.Map testNamespaces"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespaces(Map)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespaces(Map)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.Map testNamespaces"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "addNamespaces",
          "childCount": 2
        },
        "dstNode": {
          "label": "namespaces",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        196
      ]
    },
    "aCommitTime": 1384885372,
    "ID": "fcrepo/fcrepo:8",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testAddNamespaces()",
    "bSource": {
      "startLine": 184,
      "code": "@Test\n    public void testAddNamespaces() {\n        testStream.addNamespaces(testNamespaces);\n        assertTrue(testStream.namespaces().containsKey(prefix1));\n        assertTrue(testStream.namespaces().containsValue(uri1));\n        assertTrue(testStream.namespaces().containsKey(prefix2));\n        assertTrue(testStream.namespaces().containsValue(uri2));\n    }"
    },
    "aSource": {
      "startLine": 184,
      "code": "@Test\n    public void testAddNamespaces() {\n        testStream.namespaces(testNamespaces);\n        assertTrue(testStream.namespaces().containsKey(prefix1));\n        assertTrue(testStream.namespaces().containsValue(uri1));\n        assertTrue(testStream.namespaces().containsKey(prefix2));\n        assertTrue(testStream.namespaces().containsValue(uri2));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "5c8fa6347b",
    "aCommit": "037d8798c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testStream.addNamespaces(testNamespaces);",
          "type": "DELETE",
          "lineNo": 186
        }
      ],
      "targetChanges": [
        {
          "line": "testStream.namespaces(testNamespaces);",
          "type": "ADD",
          "lineNo": 186
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespaces(Map)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespaces(Map)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.Map testNamespaces"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespaces(Map)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespaces(Map)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.util.Map testNamespaces"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "addNamespaces",
          "childCount": 2
        },
        "dstNode": {
          "label": "namespaces",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        186
      ]
    },
    "aCommitTime": 1384885372,
    "ID": "fcrepo/fcrepo:9",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.iterators.RdfStreamTest.testWithThisContextIterator()",
    "bSource": {
      "startLine": 132,
      "code": "@Test\n    public void testWithThisContextIterator() {\n        testStream.addNamespace(prefix1, uri1);\n        final RdfStream testStream2 =\n            testStream.withThisContext((Iterator<Triple>) testStream);\n        assertEquals(testStream.namespaces(), testStream2.namespaces());\n    }"
    },
    "aSource": {
      "startLine": 132,
      "code": "@Test\n    public void testWithThisContextIterator() {\n        testStream.namespace(prefix1, uri1);\n        final RdfStream testStream2 =\n            testStream.withThisContext((Iterator<Triple>) testStream);\n        assertEquals(testStream.namespaces(), testStream2.namespaces());\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/iterators/RdfStreamTest.java",
    "bCommit": "5c8fa6347b",
    "aCommit": "037d8798c0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testStream.addNamespace(prefix1, uri1);",
          "type": "DELETE",
          "lineNo": 134
        }
      ],
      "targetChanges": [
        {
          "line": "testStream.namespace(prefix1, uri1);",
          "type": "ADD",
          "lineNo": 134
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.addNamespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String prefix1"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String uri1"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream testStream"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.namespace(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String prefix1"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String uri1"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "addNamespace",
          "childCount": 3
        },
        "dstNode": {
          "label": "namespace",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        134
      ]
    },
    "aCommitTime": 1384885372,
    "ID": "fcrepo/fcrepo:10",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.FedoraResourceTest.testGetPropertiesDataset()",
    "bSource": {
      "startLine": 211,
      "code": "@Test\n    public void testGetPropertiesDataset() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final GraphSubjects mockSubjects = mock(GraphSubjects.class);\n\n        when(JcrRdfTools.withContext(mockSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n\n        when(mockSubjects.getGraphSubject(mockNode)).thenReturn(mockResource);\n\n        final RdfStream propertiesStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(\n                propertiesStream);\n        final RdfStream treeStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getTreeTriples(mockNode, 0, -1)).thenReturn(\n                treeStream);\n        final Model problemsModel = new RdfStream().asModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset =\n                testObj.getPropertiesDataset(mockSubjects, 0, -1);\n\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertEquals(mockResource, dataset.getContext().get(\n                Symbol.create(\"uri\")));\n    }"
    },
    "aSource": {
      "startLine": 211,
      "code": "@Test\n    public void testGetPropertiesDataset() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final GraphSubjects mockSubjects = mock(GraphSubjects.class);\n\n        when(JcrRdfTools.withContext(mockSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n\n        when(mockSubjects.getGraphSubject(mockNode)).thenReturn(mockResource);\n\n        final RdfStream propertiesStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(\n                propertiesStream);\n        final RdfStream treeStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(\n                treeStream);\n        final Model problemsModel = new RdfStream().asModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset =\n                testObj.getPropertiesDataset(mockSubjects, 0, -1);\n\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertEquals(mockResource, dataset.getContext().get(\n                Symbol.create(\"uri\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceTest.java",
    "bCommit": "9eaac0f929",
    "aCommit": "5c8fa6347b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode, 0, -1)).thenReturn(",
          "type": "DELETE",
          "lineNo": 225
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(",
          "type": "ADD",
          "lineNo": 225
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "0",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "UnaryOperator",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "NEG",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        225
      ]
    },
    "aCommitTime": 1384877603,
    "ID": "fcrepo/fcrepo:212",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.FedoraResourceTest.testReplacePropertiesDataset()",
    "bSource": {
      "startLine": 311,
      "code": "@Test\n    public void testReplacePropertiesDataset() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final DefaultGraphSubjects defaultGraphSubjects = new DefaultGraphSubjects(mockSession);\n        when(JcrRdfTools.withContext(defaultGraphSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n\n        when(mockNode.getPath()).thenReturn(\"/xyz\");\n\n        final Model propertiesModel = createDefaultModel();\n        propertiesModel.add(propertiesModel.createResource(\"a\"),\n                               propertiesModel.createProperty(\"b\"),\n                               \"c\");\n\n\n        propertiesModel.add(propertiesModel.createResource(\"i\"),\n                               propertiesModel.createProperty(\"j\"),\n                               \"k\");\n\n        propertiesModel.add(propertiesModel.createResource(\"x\"),\n                               propertiesModel.createProperty(\"y\"),\n                               \"z\");\n        final RdfStream propertiesStream = RdfStream.fromModel(propertiesModel);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(propertiesStream);\n\n        final RdfStream treeStream = new RdfStream();\n        when(mockJcrRdfTools.getTreeTriples(mockNode, 0, -2)).thenReturn(treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n\n        final Model replacementModel = createDefaultModel();\n\n        replacementModel.add(replacementModel.createResource(\"a\"),\n                                replacementModel.createProperty(\"b\"),\n                               \"n\");\n\n\n        replacementModel.add(replacementModel.createResource(\"i\"),\n                                replacementModel.createProperty(\"j\"),\n                               \"k\");\n\n        final Model replacements = testObj.replaceProperties(defaultGraphSubjects, replacementModel).asModel();\n\n        assertTrue(replacements.containsAll(replacementModel));\n\n        assertFalse(problemsModel.contains(propertiesModel.createResource(\"x\"),\n                                              propertiesModel.createProperty(\"y\"),\n                                              \"z\"));\n    }"
    },
    "aSource": {
      "startLine": 311,
      "code": "@Test\n    public void testReplacePropertiesDataset() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final DefaultGraphSubjects defaultGraphSubjects = new DefaultGraphSubjects(mockSession);\n        when(JcrRdfTools.withContext(defaultGraphSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n\n        when(mockNode.getPath()).thenReturn(\"/xyz\");\n\n        final Model propertiesModel = createDefaultModel();\n        propertiesModel.add(propertiesModel.createResource(\"a\"),\n                               propertiesModel.createProperty(\"b\"),\n                               \"c\");\n\n\n        propertiesModel.add(propertiesModel.createResource(\"i\"),\n                               propertiesModel.createProperty(\"j\"),\n                               \"k\");\n\n        propertiesModel.add(propertiesModel.createResource(\"x\"),\n                               propertiesModel.createProperty(\"y\"),\n                               \"z\");\n        final RdfStream propertiesStream = RdfStream.fromModel(propertiesModel);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(propertiesStream);\n\n        final RdfStream treeStream = new RdfStream();\n        when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n\n        final Model replacementModel = createDefaultModel();\n\n        replacementModel.add(replacementModel.createResource(\"a\"),\n                                replacementModel.createProperty(\"b\"),\n                               \"n\");\n\n\n        replacementModel.add(replacementModel.createResource(\"i\"),\n                                replacementModel.createProperty(\"j\"),\n                               \"k\");\n\n        final Model replacements = testObj.replaceProperties(defaultGraphSubjects, replacementModel).asModel();\n\n        assertTrue(replacements.containsAll(replacementModel));\n\n        assertFalse(problemsModel.contains(propertiesModel.createResource(\"x\"),\n                                              propertiesModel.createProperty(\"y\"),\n                                              \"z\"));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceTest.java",
    "bCommit": "9eaac0f929",
    "aCommit": "5c8fa6347b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode, 0, -2)).thenReturn(treeStream);",
          "type": "DELETE",
          "lineNo": 337
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(treeStream);",
          "type": "ADD",
          "lineNo": 337
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream treeStream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream treeStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "0",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "UnaryOperator",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "NEG",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        337
      ]
    },
    "aCommitTime": 1384877603,
    "ID": "fcrepo/fcrepo:213",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.FedoraResourceTest.testGetPropertiesDatasetDefaultLimits()",
    "bSource": {
      "startLine": 240,
      "code": "@Test\n    public void testGetPropertiesDatasetDefaultLimits()\n        throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final GraphSubjects mockSubjects = mock(GraphSubjects.class);\n        when(JcrRdfTools.withContext(mockSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n        when(mockSubjects.getGraphSubject(mockNode)).thenReturn(mockResource);\n\n        final RdfStream propertiesStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(propertiesStream);\n        final RdfStream treeStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getTreeTriples(mockNode, 0, -1)).thenReturn(treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset = testObj.getPropertiesDataset(mockSubjects);\n\n        assertTrue(dataset.getDefaultModel().containsAll(treeStream.asModel()));\n\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertEquals(mockResource, dataset.getContext().get(Symbol.create(\"uri\")));\n    }"
    },
    "aSource": {
      "startLine": 240,
      "code": "@Test\n    public void testGetPropertiesDatasetDefaultLimits()\n        throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final GraphSubjects mockSubjects = mock(GraphSubjects.class);\n        when(JcrRdfTools.withContext(mockSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n        when(mockSubjects.getGraphSubject(mockNode)).thenReturn(mockResource);\n\n        final RdfStream propertiesStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(propertiesStream);\n        final RdfStream treeStream = new RdfStream(mockTriple);\n        when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset = testObj.getPropertiesDataset(mockSubjects);\n\n        assertTrue(dataset.getDefaultModel().containsAll(treeStream.asModel()));\n\n        assertTrue(dataset.getDefaultModel().containsAll(\n                propertiesStream.asModel()));\n        assertEquals(mockResource, dataset.getContext().get(Symbol.create(\"uri\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/FedoraResourceTest.java",
    "bCommit": "9eaac0f929",
    "aCommit": "5c8fa6347b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode, 0, -1)).thenReturn(treeStream);",
          "type": "DELETE",
          "lineNo": 252
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(treeStream);",
          "type": "ADD",
          "lineNo": 252
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream treeStream"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream treeStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "0",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "UnaryOperator",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "NEG",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        252
      ]
    },
    "aCommitTime": 1384877603,
    "ID": "fcrepo/fcrepo:214",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.shouldIncludeContainerInfoWithMixinTypeContainer()",
    "bSource": {
      "startLine": 278,
      "code": "@Test\n    public final void shouldIncludeContainerInfoWithMixinTypeContainer()\n        throws RepositoryException, IOException {\n        when(mockPrimaryNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {});\n        when(mockPrimaryNodeType.getName()).thenReturn(\"jcr:someType\");\n        when(mockMixinNodeType.getName()).thenReturn(\"jcr:mixin\");\n        when(mockMixinNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {mock(NodeDefinition.class)});\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockPrimaryNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockMixinNodeType});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n\n        when(mockNode.getDepth()).thenReturn(0);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getTreeTriples(mockNode, 0, -1).asModel();\n\n        assertTrue(actual.contains(testSubjects.getContext(), type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Page\")));\n        assertTrue(actual.contains(testSubjects.getContext(), actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membersInlined\"),\n                actual.createLiteral(TRUE.toString())));\n\n        final Resource graphSubject = testSubjects.getGraphSubject(mockNode);\n        assertTrue(actual.contains(graphSubject, type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Container\")));\n\n        assertTrue(actual.contains(graphSubject, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipSubject\"),\n                graphSubject));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipPredicate\"),\n                HAS_CHILD));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipObject\"),\n                actual.createResource(\"http://www.w3.org/ns/ldp#MemberSubject\")));\n    }"
    },
    "aSource": {
      "startLine": 278,
      "code": "@Test\n    public final void shouldIncludeContainerInfoWithMixinTypeContainer()\n        throws RepositoryException, IOException {\n        when(mockPrimaryNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {});\n        when(mockPrimaryNodeType.getName()).thenReturn(\"jcr:someType\");\n        when(mockMixinNodeType.getName()).thenReturn(\"jcr:mixin\");\n        when(mockMixinNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {mock(NodeDefinition.class)});\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockPrimaryNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockMixinNodeType});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n\n        when(mockNode.getDepth()).thenReturn(0);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getTreeTriples(mockNode).asModel();\n\n        assertTrue(actual.contains(testSubjects.getContext(), type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Page\")));\n        assertTrue(actual.contains(testSubjects.getContext(), actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membersInlined\"),\n                actual.createLiteral(TRUE.toString())));\n\n        final Resource graphSubject = testSubjects.getGraphSubject(mockNode);\n        assertTrue(actual.contains(graphSubject, type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Container\")));\n\n        assertTrue(actual.contains(graphSubject, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipSubject\"),\n                graphSubject));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipPredicate\"),\n                HAS_CHILD));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipObject\"),\n                actual.createResource(\"http://www.w3.org/ns/ldp#MemberSubject\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "9eaac0f929",
    "aCommit": "5c8fa6347b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getTreeTriples(mockNode, 0, -1).asModel();",
          "type": "DELETE",
          "lineNo": 295
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getTreeTriples(mockNode).asModel();",
          "type": "ADD",
          "lineNo": 295
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "0",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "UnaryOperator",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "NEG",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        295
      ]
    },
    "aCommitTime": 1384877603,
    "ID": "fcrepo/fcrepo:215",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.shouldBeAbleToDisableResourceInlining()",
    "bSource": {
      "startLine": 267,
      "code": "@Test\n    public final void\n            shouldBeAbleToDisableResourceInlining() throws RepositoryException {\n\n        final Model actual = testObj.getTreeTriples(mockNode, 0, -2).asModel();\n        assertEquals(0, Iterators.size(actual.listObjectsOfProperty(actual\n                .createProperty(\"http://www.w3.org/ns/ldp#inlinedResource\"))));\n        verify(mockParent, never()).getProperties();\n        verify(mockNode, never()).getNodes();\n    }"
    },
    "aSource": {
      "startLine": 267,
      "code": "@Test\n    public final void\n            shouldBeAbleToDisableResourceInlining() throws RepositoryException {\n\n        final Model actual = testObj.getTreeTriples(mockNode).asModel();\n        assertEquals(0, Iterators.size(actual.listObjectsOfProperty(actual\n                .createProperty(\"http://www.w3.org/ns/ldp#inlinedResource\"))));\n        verify(mockParent, never()).getProperties();\n        verify(mockNode, never()).getNodes();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "9eaac0f929",
    "aCommit": "5c8fa6347b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getTreeTriples(mockNode, 0, -2).asModel();",
          "type": "DELETE",
          "lineNo": 271
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getTreeTriples(mockNode).asModel();",
          "type": "ADD",
          "lineNo": 271
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "0",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "UnaryOperator",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "NEG",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        271
      ]
    },
    "aCommitTime": 1384877603,
    "ID": "fcrepo/fcrepo:216",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.rdf.impl.JcrGraphPropertiesTest.testGetPropertiesDataset()",
    "bSource": {
      "startLine": 74,
      "code": "@Test\n    public void testGetPropertiesDataset() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final JcrRdfTools mockJcrRdfTools = mock(JcrRdfTools.class);\n        when(JcrRdfTools.withContext(mockSubjects, mockNode.getSession())).thenReturn(mockJcrRdfTools);\n\n        final Resource mockResource =\n                new DummyURIResource(RESTAPI_NAMESPACE + \"xyz\");\n        when(mockSubjects.getGraphSubject(mockNode)).thenReturn(mockResource);\n\n        final RdfStream propertiesStream = new RdfStream();\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(\n                propertiesStream);\n        final RdfStream treeStream = new RdfStream();\n        when(mockJcrRdfTools.getTreeTriples(mockNode, 0, -1)).thenReturn(\n                treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset =\n                testObj.getProperties(mockNode, mockSubjects, 0, -1);\n\n        assertTrue(dataset.containsNamedModel(\"tree\"));\n        assertEquals(treeStream, RdfStream.fromModel(dataset.getNamedModel(\"tree\")));\n\n        assertEquals(propertiesStream, RdfStream.fromModel(dataset.getDefaultModel()));\n        assertEquals(RESTAPI_NAMESPACE + \"xyz\",\n                dataset.getContext().get(Symbol.create(\"uri\")));\n    }"
    },
    "aSource": {
      "startLine": 74,
      "code": "@Test\n    public void testGetPropertiesDataset() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final JcrRdfTools mockJcrRdfTools = mock(JcrRdfTools.class);\n        when(JcrRdfTools.withContext(mockSubjects, mockNode.getSession())).thenReturn(mockJcrRdfTools);\n\n        final Resource mockResource =\n                new DummyURIResource(RESTAPI_NAMESPACE + \"xyz\");\n        when(mockSubjects.getGraphSubject(mockNode)).thenReturn(mockResource);\n\n        final RdfStream propertiesStream = new RdfStream();\n        when(mockJcrRdfTools.getJcrTriples(mockNode)).thenReturn(\n                propertiesStream);\n        final RdfStream treeStream = new RdfStream();\n        when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(\n                treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset =\n                testObj.getProperties(mockNode, mockSubjects, 0, -1);\n\n        assertTrue(dataset.containsNamedModel(\"tree\"));\n        assertEquals(treeStream, RdfStream.fromModel(dataset.getNamedModel(\"tree\")));\n\n        assertEquals(propertiesStream, RdfStream.fromModel(dataset.getDefaultModel()));\n        assertEquals(RESTAPI_NAMESPACE + \"xyz\",\n                dataset.getContext().get(Symbol.create(\"uri\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/JcrGraphPropertiesTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/JcrGraphPropertiesTest.java",
    "bCommit": "9eaac0f929",
    "aCommit": "5c8fa6347b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode, 0, -1)).thenReturn(",
          "type": "DELETE",
          "lineNo": 89
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode)).thenReturn(",
          "type": "ADD",
          "lineNo": 89
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "0",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "UnaryOperator",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "NEG",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        89
      ]
    },
    "aCommitTime": 1384877603,
    "ID": "fcrepo/fcrepo:217",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.rdf.impl.JcrGraphPropertiesTest.testGetPropertiesDatasetDefaults()",
    "bSource": {
      "startLine": 137,
      "code": "@Test\n    public void testGetPropertiesDatasetDefaults() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final JcrRdfTools mockJcrRdfTools = mock(JcrRdfTools.class);\n        when(JcrRdfTools.withContext(mockSubjects, mockNode.getSession()))\n                .thenReturn(mockJcrRdfTools);\n\n        final Resource mockResource =\n                new DummyURIResource(RESTAPI_NAMESPACE + \"xyz\");\n        when(mockSubjects.getGraphSubject(mockNode)).thenReturn(\n                mockResource);\n\n        final RdfStream propertiesStream = new RdfStream();\n        when(mockJcrRdfTools.getJcrTriples(mockNode))\n                .thenReturn(propertiesStream);\n        final RdfStream treeStream = new RdfStream();\n        when(mockJcrRdfTools.getTreeTriples(mockNode, 0, -1))\n                .thenReturn(treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset = testObj.getProperties(mockNode, mockSubjects);\n\n        assertTrue(dataset.containsNamedModel(\"tree\"));\n        assertEquals(treeStream, RdfStream.fromModel(dataset.getNamedModel(\"tree\")));\n\n        assertEquals(propertiesStream, RdfStream.fromModel(dataset.getDefaultModel()));\n        assertEquals(RESTAPI_NAMESPACE + \"xyz\",\n                dataset.getContext().get(URI_SYMBOL));\n    }"
    },
    "aSource": {
      "startLine": 137,
      "code": "@Test\n    public void testGetPropertiesDatasetDefaults() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final JcrRdfTools mockJcrRdfTools = mock(JcrRdfTools.class);\n        when(JcrRdfTools.withContext(mockSubjects, mockNode.getSession()))\n                .thenReturn(mockJcrRdfTools);\n\n        final Resource mockResource =\n                new DummyURIResource(RESTAPI_NAMESPACE + \"xyz\");\n        when(mockSubjects.getGraphSubject(mockNode)).thenReturn(\n                mockResource);\n\n        final RdfStream propertiesStream = new RdfStream();\n        when(mockJcrRdfTools.getJcrTriples(mockNode))\n                .thenReturn(propertiesStream);\n        final RdfStream treeStream = new RdfStream();\n        when(mockJcrRdfTools.getTreeTriples(mockNode))\n                .thenReturn(treeStream);\n        final Model problemsModel = createDefaultModel();\n        when(getProblemsModel()).thenReturn(problemsModel);\n        final Dataset dataset = testObj.getProperties(mockNode, mockSubjects);\n\n        assertTrue(dataset.containsNamedModel(\"tree\"));\n        assertEquals(treeStream, RdfStream.fromModel(dataset.getNamedModel(\"tree\")));\n\n        assertEquals(propertiesStream, RdfStream.fromModel(dataset.getDefaultModel()));\n        assertEquals(RESTAPI_NAMESPACE + \"xyz\",\n                dataset.getContext().get(URI_SYMBOL));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/JcrGraphPropertiesTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/JcrGraphPropertiesTest.java",
    "bCommit": "9eaac0f929",
    "aCommit": "5c8fa6347b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode, 0, -1))",
          "type": "DELETE",
          "lineNo": 154
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockJcrRdfTools.getTreeTriples(mockNode))",
          "type": "ADD",
          "lineNo": 154
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "0",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "UnaryOperator",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "NEG",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        154
      ]
    },
    "aCommitTime": 1384877603,
    "ID": "fcrepo/fcrepo:218",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testDeleteObject()",
    "bSource": {
      "startLine": 250,
      "code": "@Test\n    public void testDeleteObject() throws RepositoryException {\n        final String pid = \"testObject\";\n        final String path = \"/\" + pid;\n        final Response actual = testObj.deleteObject(createPathList(pid));\n        assertNotNull(actual);\n        assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n        verify(mockNodes).deleteObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 250,
      "code": "@Test\n    public void testDeleteObject() throws RepositoryException {\n        final String pid = \"testObject\";\n        final String path = \"/\" + pid;\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n\n        final Response actual = testObj.deleteObject(createPathList(pid), mockRequest);\n\n        assertNotNull(actual);\n        assertEquals(NO_CONTENT.getStatusCode(), actual.getStatus());\n        verify(mockNodes).deleteObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "30ef4d5dc7",
    "aCommit": "d097e173ac",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Response actual = testObj.deleteObject(createPathList(pid));",
          "type": "DELETE",
          "lineNo": 254
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockNodes.getObject(isA(Session.class), isA(String.class)))",
          "type": "ADD",
          "lineNo": 254
        },
        {
          "line": ".thenReturn(mockObject);",
          "type": "ADD",
          "lineNo": 255
        },
        {
          "line": "when(mockObject.getEtagValue()).thenReturn(\"\");",
          "type": "ADD",
          "lineNo": 256
        },
        {
          "line": "final Response actual = testObj.deleteObject(createPathList(pid), mockRequest);",
          "type": "ADD",
          "lineNo": 258
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.deleteObject(List)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.deleteObject(List)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.services.NodeService mockNodes"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.services.NodeService.getObject(Session,String)"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "isA(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.FedoraObject)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getEtagValue()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraObject mockObject"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getEtagValue()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLocalVariable",
          "value": "javax.ws.rs.core.Response actual"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.ws.rs.core.Response"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.api.FedoraNodes.deleteObject(List,Request)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.http.api.FedoraNodes testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.api.FedoraNodes.deleteObject(List,Request)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.http.commons.test.util.PathSegmentImpl.createPathList(String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String pid"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.ws.rs.core.Request mockRequest"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "mockRequest",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        254
      ]
    },
    "aCommitTime": 1384818835,
    "ID": "fcrepo/fcrepo:470",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.FedoraTypesUtilsTest.testIsMultipleValuedProperty()",
    "bSource": {
      "startLine": 158,
      "code": "@Test\n    public void testIsMultipleValuedProperty() throws RepositoryException {\n        final Property mockYes = mock(Property.class);\n        when(mockYes.isMultiple()).thenReturn(true);\n        final Property mockNo = mock(Property.class);\n        final Predicate<Property> test = isMultipleValuedProperty;\n        try {\n            test.apply(null);\n            fail(\"Null values should throw an IllegalArgumentException\");\n        } catch (final IllegalArgumentException e) {\n        }\n        boolean actual = test.apply(mockYes);\n        assertEquals(true, actual);\n        actual = test.apply(mockNo);\n        assertEquals(false, actual);\n        when(mockYes.isMultiple()).thenThrow(new RepositoryException());\n        try {\n            test.apply(mockYes);\n            fail(\"Unexpected completion after RepositoryException!\");\n        } catch (final RuntimeException e) {} // expected\n    }"
    },
    "aSource": {
      "startLine": 158,
      "code": "@Test\n    public void testIsMultipleValuedProperty() throws RepositoryException {\n        final Property mockYes = mock(Property.class);\n        when(mockYes.isMultiple()).thenReturn(true);\n        final Property mockNo = mock(Property.class);\n        final Predicate<Property> test = isMultipleValuedProperty;\n        try {\n            test.apply(null);\n            fail(\"Null values should throw a NullPointerException\");\n        } catch (final NullPointerException e) {\n        }\n        boolean actual = test.apply(mockYes);\n        assertEquals(true, actual);\n        actual = test.apply(mockNo);\n        assertEquals(false, actual);\n        when(mockYes.isMultiple()).thenThrow(new RepositoryException());\n        try {\n            test.apply(mockYes);\n            fail(\"Unexpected completion after RepositoryException!\");\n        } catch (final RuntimeException e) {} // expected\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/FedoraTypesUtilsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/FedoraTypesUtilsTest.java",
    "bCommit": "1c94c0c474",
    "aCommit": "26c4fbe6fc",
    "hunk": {
      "sourceChanges": [
        {
          "line": "fail(\"Null values should throw an IllegalArgumentException\");",
          "type": "DELETE",
          "lineNo": 166
        },
        {
          "line": "} catch (final IllegalArgumentException e) {",
          "type": "DELETE",
          "lineNo": 167
        }
      ],
      "targetChanges": [
        {
          "line": "fail(\"Null values should throw a NullPointerException\");",
          "type": "ADD",
          "lineNo": 166
        },
        {
          "line": "} catch (final NullPointerException e) {",
          "type": "ADD",
          "lineNo": 167
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "fail(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "fail(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Null values should throw an IllegalArgumentException'"
        },
        {
          "type": "CtCatchVariable",
          "value": "java.lang.IllegalArgumentException e"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.IllegalArgumentException"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "fail(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "fail(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Null values should throw a NullPointerException'"
        },
        {
          "type": "CtCatchVariable",
          "value": "java.lang.NullPointerException e"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.NullPointerException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Try",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Null values should throw an IllegalArgumentException\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Null values should throw a NullPointerException\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "CatchVariable",
          "Catch",
          "Try",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.IllegalArgumentException",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.NullPointerException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "failure",
      "error_lines": [
        165
      ]
    },
    "aCommitTime": 1384551580,
    "ID": "fcrepo/fcrepo:75",
    "trivial": null
  },
  {
    "name": "org.fcrepo.integration.http.api.FedoraVersionsIT.testAddVersion()",
    "bSource": {
      "startLine": 38,
      "code": "@Test\n    public void testAddVersion() throws Exception {\n        execute(postObjMethod(\"FedoraVersioningTest2\"));\n\n        final HttpPost postVersion =\n            postObjMethod(\"FedoraVersioningTest2/fcr:versions/v0.0.1\");\n        execute(postVersion);\n        assertEquals(204, getStatus(postVersion));\n\n        final HttpGet getVersion =\n            new HttpGet(serverAddress\n                    + \"FedoraVersioningTest2/fcr:versions/v0.0.1\");\n        final HttpResponse resp = execute(getVersion);\n        assertEquals(200, resp.getStatusLine().getStatusCode());\n        logger.info(\"Got version profile: {}\", IOUtils.toString(resp\n                .getEntity().getContent()));\n    }"
    },
    "aSource": {
      "startLine": 58,
      "code": "@Test\n    public void testAddVersion() throws Exception {\n        execute(postObjMethod(\"FedoraVersioningTest2\"));\n\n        final HttpPost postVersion =\n            postObjMethod(\"FedoraVersioningTest2/fcr:versions/v0.0.1\");\n        execute(postVersion);\n        assertEquals(204, getStatus(postVersion));\n\n        final HttpGet getVersion =\n            new HttpGet(serverAddress\n                    + \"FedoraVersioningTest2/fcr:versions/v0.0.1\");\n        final HttpResponse resp = execute(getVersion);\n        final String version = EntityUtils.toString(resp.getEntity());\n        assertEquals(\"Failed to retrieve new version!\\n\" + version, 200, resp\n                .getStatusLine().getStatusCode());\n        logger.info(\"Got version profile:\");\n        final Model results = extract(version);\n        assertTrue(\"Found no version!\", results.contains(null,\n                HAS_PRIMARY_TYPE, \"nt:frozenNode\"));\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersionsIT.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersionsIT.java",
    "bCommit": "5b6ef11059",
    "aCommit": "03646784bf",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(200, resp.getStatusLine().getStatusCode());",
          "type": "DELETE",
          "lineNo": 51
        },
        {
          "line": "logger.info(\"Got version profile: {}\", IOUtils.toString(resp",
          "type": "DELETE",
          "lineNo": 52
        },
        {
          "line": ".getEntity().getContent()));",
          "type": "DELETE",
          "lineNo": 53
        }
      ],
      "targetChanges": [
        {
          "line": "final String version = EntityUtils.toString(resp.getEntity());",
          "type": "ADD",
          "lineNo": 71
        },
        {
          "line": "assertEquals(\"Failed to retrieve new version!\\n\" + version, 200, resp",
          "type": "ADD",
          "lineNo": 72
        },
        {
          "line": ".getStatusLine().getStatusCode());",
          "type": "ADD",
          "lineNo": 73
        },
        {
          "line": "logger.info(\"Got version profile:\");",
          "type": "ADD",
          "lineNo": 74
        },
        {
          "line": "final Model results = extract(version);",
          "type": "ADD",
          "lineNo": 75
        },
        {
          "line": "assertTrue(\"Found no version!\", results.contains(null,",
          "type": "ADD",
          "lineNo": 76
        },
        {
          "line": "HAS_PRIMARY_TYPE, \"nt:frozenNode\"));",
          "type": "ADD",
          "lineNo": 77
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '200'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse resp"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.slf4j.Logger.info(String,Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.slf4j.Logger logger"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.slf4j.Logger.info(String,Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Got version profile: {}'"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.commons.io.IOUtils.toString(byte[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.commons.io.IOUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.commons.io.IOUtils.toString(byte[])"
        },
        {
          "type": "CtInvocation",
          "value": "getContent()"
        },
        {
          "type": "CtInvocation",
          "value": "getEntity()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse resp"
        },
        {
          "type": "CtExecutableReference",
          "value": "getEntity()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getContent()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String version"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "toString()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.http.util.EntityUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "toString()"
        },
        {
          "type": "CtInvocation",
          "value": "getEntity()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse resp"
        },
        {
          "type": "CtExecutableReference",
          "value": "getEntity()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Failed to retrieve new version!\n'"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String version"
        },
        {
          "type": "CtLiteral",
          "value": "int '200'"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "getStatusLine()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.http.HttpResponse resp"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusLine()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getStatusCode()"
        },
        {
          "type": "CtInvocation",
          "value": "org.slf4j.Logger.info(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.slf4j.Logger logger"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.slf4j.Logger.info(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Got version profile:'"
        },
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model results"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.extract(String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.integration.http.api.AbstractResourceIT.extract(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String version"
        },
        {
          "type": "CtInvocation",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(java.lang.String,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Found no version!'"
        },
        {
          "type": "CtInvocation",
          "value": "contains(<unknown>,org.fcrepo.kernel.Property,java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model results"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(<unknown>,org.fcrepo.kernel.Property,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Property HAS_PRIMARY_TYPE"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'nt:frozenNode'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getContent",
          "childCount": 1
        },
        "dstNode": {
          "label": "toString",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Got version profile: {}\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Got version profile:\"",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.commons.io.IOUtils",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.integration.http.api.FedoraVersionsIT",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "info",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "version",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "info",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "results",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertTrue",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "BinaryOperator",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "PLUS",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getContent",
          "childCount": 1
        },
        "dstNode": {
          "label": "toString",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "logger",
          "childCount": 0
        },
        "dstNode": {
          "label": "logger",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"Got version profile: {}\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"Got version profile:\"",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.commons.io.IOUtils",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.fcrepo.integration.http.api.FedoraVersionsIT",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        72
      ]
    },
    "aCommitTime": 1383334989,
    "ID": "fcrepo/fcrepo:3",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraVersionsTest.testGetVersion()",
    "bSource": {
      "startLine": 117,
      "code": "@Test\n    public void testGetVersion() throws RepositoryException, IOException {\n        final String pid = \"FedoraVersioningTest\";\n        final String versionLabel = \"v0.0.1\";\n        when(\n                mockNodes.getObject(any(Session.class), any(String.class),\n                        any(String.class))).thenReturn(mockResource);\n        testObj.getVersion(createPathList(pid), versionLabel, TestHelpers\n                .getUriInfoImpl());\n        verify(mockResource).getPropertiesDataset(any(HttpGraphSubjects.class),\n                anyLong(), anyInt());\n    }"
    },
    "aSource": {
      "startLine": 116,
      "code": "@Test\n    public void testGetVersion() throws RepositoryException, IOException {\n        final String pid = \"FedoraVersioningTest\";\n        final String versionLabel = \"v0.0.1\";\n        when(\n                mockNodes.getObject(any(Session.class), any(String.class),\n                        any(String.class))).thenReturn(mockResource);\n        testObj.getVersion(createPathList(pid), versionLabel, TestHelpers\n                .getUriInfoImpl());\n        verify(mockResource).getPropertiesDataset(any(HttpGraphSubjects.class),\n                anyInt(), anyInt());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "anyLong(), anyInt());",
          "type": "DELETE",
          "lineNo": 127
        }
      ],
      "targetChanges": [
        {
          "line": "anyInt(), anyInt());",
          "type": "ADD",
          "lineNo": 126
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "anyLong()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyLong()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anyLong",
          "childCount": 0
        },
        "dstNode": {
          "label": "anyInt",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        126
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:488",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraVersionsTest.testGetVersionList()",
    "bSource": {
      "startLine": 85,
      "code": "@Test\n    public void testGetVersionList() throws RepositoryException {\n        final String pid = \"FedoraVersioningTest\";\n        when(mockRequest.selectVariant(POSSIBLE_RDF_VARIANTS)).thenReturn(\n                mockVariant);\n        when(mockNodes.getObject(any(Session.class), anyString())).thenReturn(\n                mockResource);\n        when(mockResource.getVersionDataset(any(HttpGraphSubjects.class)))\n                .thenReturn(new RdfStream());\n        when(mockVariant.getMediaType()).thenReturn(\n                new MediaType(\"text\", \"turtle\"));\n\n        final Response response =\n            testObj.getVersionList(createPathList(pid), mockRequest,\n                    getUriInfoImpl());\n        assertNotNull(response);\n        assertEquals(200, response.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n    public void testGetVersionList() throws RepositoryException {\n        final String pid = \"FedoraVersioningTest\";\n        when(mockRequest.selectVariant(POSSIBLE_RDF_VARIANTS)).thenReturn(\n                mockVariant);\n        when(mockNodes.getObject(any(Session.class), anyString())).thenReturn(\n                mockResource);\n        when(mockResource.getVersionTriples(any(HttpGraphSubjects.class)))\n                .thenReturn(new RdfStream());\n        when(mockVariant.getMediaType()).thenReturn(\n                new MediaType(\"text\", \"turtle\"));\n\n        final Response response =\n            testObj.getVersionList(createPathList(pid), mockRequest,\n                    getUriInfoImpl());\n        assertNotNull(response);\n        assertEquals(200, response.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(mockResource.getVersionDataset(any(HttpGraphSubjects.class)))",
          "type": "DELETE",
          "lineNo": 92
        }
      ],
      "targetChanges": [
        {
          "line": "when(mockResource.getVersionTriples(any(HttpGraphSubjects.class)))",
          "type": "ADD",
          "lineNo": 91
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getVersionDataset(GraphSubjects)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResource mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getVersionDataset(GraphSubjects)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.FedoraResource.getVersionTriples(GraphSubjects)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.FedoraResource mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.FedoraResource.getVersionTriples(GraphSubjects)"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getVersionDataset",
          "childCount": 2
        },
        "dstNode": {
          "label": "getVersionTriples",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        91
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:489",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.rdf.impl.NamespaceContextTest.testBadNamespaceRegistry()",
    "bSource": {
      "startLine": 38,
      "code": "// for mocks and setup gear see after tests\n\n    @Test(expected = NullPointerException.class)\n    public void testBadNamespaceRegistry() throws RepositoryException {\n        mockNamespaceRegistry = null;\n        new NamespaceContext(mockSession);\n    }"
    },
    "aSource": {
      "startLine": 38,
      "code": "// for mocks and setup gear see after tests\n\n    @Test(expected = NullPointerException.class)\n    public void testBadNamespaceRegistry() throws RepositoryException {\n        mockNamespaceRegistry = null;\n        new NamespaceRdfContext(mockSession);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/NamespaceContextTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/NamespaceContextTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "new NamespaceContext(mockSession);",
          "type": "DELETE",
          "lineNo": 43
        }
      ],
      "targetChanges": [
        {
          "line": "new NamespaceRdfContext(mockSession);",
          "type": "ADD",
          "lineNo": 43
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.rdf.impl.NamespaceContext.NamespaceContext(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.NamespaceContext"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        }
      ],
      "targetElements": [
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.rdf.impl.NamespaceRdfContext.NamespaceRdfContext(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.NamespaceRdfContext"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.impl.NamespaceContext()",
          "childCount": 1
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.impl.NamespaceRdfContext()",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        43
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:490",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.kernel.rdf.impl.NamespaceContextTest.testConstructor()",
    "bSource": {
      "startLine": 46,
      "code": "@Test\n    public void testConstructor() throws RepositoryException {\n        when(mockNamespaceRegistry.getPrefixes()).thenReturn(\n                new String[] {prefix, \"\"});\n        when(mockNamespaceRegistry.getURI(\"\")).thenReturn(\n                \"GARBAGE URI FOR FAKE NAMESPACE, SHOULD NEVER BE PARSED\");\n        when(mockNamespaceRegistry.getURI(prefix)).thenReturn(testUri);\n        assertTrue(any(new NamespaceContext(mockSession), hasTestUriAsObject));\n    }"
    },
    "aSource": {
      "startLine": 46,
      "code": "@Test\n    public void testConstructor() throws RepositoryException {\n        when(mockNamespaceRegistry.getPrefixes()).thenReturn(\n                new String[] {prefix, \"\"});\n        when(mockNamespaceRegistry.getURI(\"\")).thenReturn(\n                \"GARBAGE URI FOR FAKE NAMESPACE, SHOULD NEVER BE PARSED\");\n        when(mockNamespaceRegistry.getURI(prefix)).thenReturn(testUri);\n        assertTrue(any(new NamespaceRdfContext(mockSession), hasTestUriAsObject));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/NamespaceContextTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/rdf/impl/NamespaceContextTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertTrue(any(new NamespaceContext(mockSession), hasTestUriAsObject));",
          "type": "DELETE",
          "lineNo": 53
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue(any(new NamespaceRdfContext(mockSession), hasTestUriAsObject));",
          "type": "ADD",
          "lineNo": 53
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterators.any(Iterator,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterators.any(Iterator,Predicate)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.rdf.impl.NamespaceContext.NamespaceContext(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.NamespaceContext"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtFieldRead",
          "value": "com.google.common.base.Predicate hasTestUriAsObject"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Iterators.any(Iterator,Predicate)"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Iterators.any(Iterator,Predicate)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.rdf.impl.NamespaceRdfContext.NamespaceRdfContext(Session)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.rdf.impl.NamespaceRdfContext"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Session mockSession"
        },
        {
          "type": "CtFieldRead",
          "value": "com.google.common.base.Predicate hasTestUriAsObject"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.rdf.impl.NamespaceContext()",
          "childCount": 1
        },
        "dstNode": {
          "label": "org.fcrepo.kernel.rdf.impl.NamespaceRdfContext()",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        53
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:491",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testCreateChildObjectWithSlug()",
    "bSource": {
      "startLine": 192,
      "code": "@Test\n    public void testCreateChildObjectWithSlug() throws RepositoryException, IOException,\n                                                               InvalidChecksumException, URISyntaxException, NoSuchFieldException {\n        setField(testObj, \"pidMinter\", mockPidMinter);\n\n        final String pid = \"testObject\";\n        final String path = \"/\" + pid + \"/some-slug\";\n        when(mockNodes.exists(mockSession, \"/\" + pid)).thenReturn(true);\n        when(mockObjects.createObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Response actual =\n            testObj.createObject(createPathList(pid), FEDORA_OBJECT, null,\n                                    null, \"some-slug\", getUriInfoImpl(), null);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        assertTrue(actual.getEntity().toString().endsWith(\"some-slug\"));\n        verify(mockObjects).createObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 188,
      "code": "@Test\n    public void testCreateChildObjectWithSlug() throws Exception {\n        setField(testObj, \"pidMinter\", mockPidMinter);\n\n        final String pid = \"testObject\";\n        final String path = \"/\" + pid + \"/some-slug\";\n        when(mockNodes.exists(mockSession, \"/\" + pid)).thenReturn(true);\n        when(mockObjects.createObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Response actual =\n            testObj.createObject(createPathList(pid), FEDORA_OBJECT, null,\n                                    null, \"some-slug\", getUriInfoImpl(), null);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        assertTrue(actual.getEntity().toString().endsWith(\"some-slug\"));\n        verify(mockObjects).createObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testCreateChildObjectWithSlug() throws RepositoryException, IOException,",
          "type": "DELETE",
          "lineNo": 193
        },
        {
          "line": "InvalidChecksumException, URISyntaxException, NoSuchFieldException {",
          "type": "DELETE",
          "lineNo": 194
        }
      ],
      "targetChanges": [
        {
          "line": "public void testCreateChildObjectWithSlug() throws Exception {",
          "type": "ADD",
          "lineNo": 189
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraNodesTest.testCreateChildObjectWithSlug()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.exception.InvalidChecksumException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.NoSuchFieldException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraNodesTest.testCreateChildObjectWithSlug()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Exception"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.NoSuchFieldException",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Exception",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.exception.InvalidChecksumException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.net.URISyntaxException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        190
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:492",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testCreateChildObject()",
    "bSource": {
      "startLine": 170,
      "code": "@Test\n    public void testCreateChildObject() throws RepositoryException, IOException,\n                                                       InvalidChecksumException, URISyntaxException, NoSuchFieldException {\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n        final String pid = \"testObject\";\n        final String path = \"/\" + pid + \"/a\";\n        when(mockNodes.exists(mockSession, \"/\" + pid)).thenReturn(true);\n        when(mockPidMinter.mintPid()).thenReturn(\"a\");\n        when(mockObjects.createObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Response actual =\n            testObj.createObject(createPathList(pid), FEDORA_OBJECT, null,\n                                    null, null, getUriInfoImpl(), null);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        assertTrue(actual.getEntity().toString().endsWith(\"a\"));\n        verify(mockObjects).createObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 167,
      "code": "@Test\n    public void testCreateChildObject() throws Exception {\n\n        setField(testObj, \"pidMinter\", mockPidMinter);\n        final String pid = \"testObject\";\n        final String path = \"/\" + pid + \"/a\";\n        when(mockNodes.exists(mockSession, \"/\" + pid)).thenReturn(true);\n        when(mockPidMinter.mintPid()).thenReturn(\"a\");\n        when(mockObjects.createObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Response actual =\n            testObj.createObject(createPathList(pid), FEDORA_OBJECT, null,\n                                    null, null, getUriInfoImpl(), null);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        assertTrue(actual.getEntity().toString().endsWith(\"a\"));\n        verify(mockObjects).createObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testCreateChildObject() throws RepositoryException, IOException,",
          "type": "DELETE",
          "lineNo": 171
        },
        {
          "line": "InvalidChecksumException, URISyntaxException, NoSuchFieldException {",
          "type": "DELETE",
          "lineNo": 172
        }
      ],
      "targetChanges": [
        {
          "line": "public void testCreateChildObject() throws Exception {",
          "type": "ADD",
          "lineNo": 168
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraNodesTest.testCreateChildObject()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.exception.InvalidChecksumException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.NoSuchFieldException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraNodesTest.testCreateChildObject()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Exception"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.NoSuchFieldException",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Exception",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.exception.InvalidChecksumException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.net.URISyntaxException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        169
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:493",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testCreateDatastream()",
    "bSource": {
      "startLine": 213,
      "code": "@Test\n    public void testCreateDatastream() throws RepositoryException, IOException,\n            InvalidChecksumException, URISyntaxException {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid + \"/\" + dsId;\n        final InputStream dsContentStream = IOUtils.toInputStream(dsContent);\n        when(mockNode.getSession()).thenReturn(mockSession);\n\n\n        when(\n                mockDatastreams.createDatastreamNode(any(Session.class),\n                        eq(dsPath), anyString(), eq(dsContentStream),\n                        any(URI.class))).thenReturn(mockNode);\n        final Datastream mockDatastream = mock(Datastream.class);\n        when(mockDatastream.getNode()).thenReturn(mockNode);\n        when(mockDatastreams.createDatastream(mockSession, dsPath)).thenReturn(mockDatastream);\n        when(mockNode.getPath()).thenReturn(dsPath);\n        final Response actual =\n                testObj.createObject(createPathList(pid, dsId),\n                        FEDORA_DATASTREAM, null, APPLICATION_OCTET_STREAM_TYPE, null, getUriInfoImpl(),\n                        dsContentStream);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockDatastreams)\n                .createDatastreamNode(any(Session.class), eq(dsPath),\n                        anyString(), any(InputStream.class), any(URI.class));\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 208,
      "code": "@Test\n    public void testCreateDatastream() throws Exception {\n        final String pid = \"FedoraDatastreamsTest1\";\n        final String dsId = \"testDS\";\n        final String dsContent = \"asdf\";\n        final String dsPath = \"/\" + pid + \"/\" + dsId;\n        final InputStream dsContentStream = IOUtils.toInputStream(dsContent);\n        when(mockNode.getSession()).thenReturn(mockSession);\n\n\n        when(\n                mockDatastreams.createDatastreamNode(any(Session.class),\n                        eq(dsPath), anyString(), eq(dsContentStream),\n                        any(URI.class))).thenReturn(mockNode);\n        final Datastream mockDatastream = mock(Datastream.class);\n        when(mockDatastream.getNode()).thenReturn(mockNode);\n        when(mockDatastreams.createDatastream(mockSession, dsPath)).thenReturn(mockDatastream);\n        when(mockNode.getPath()).thenReturn(dsPath);\n        final Response actual =\n                testObj.createObject(createPathList(pid, dsId),\n                        FEDORA_DATASTREAM, null, APPLICATION_OCTET_STREAM_TYPE, null, getUriInfoImpl(),\n                        dsContentStream);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        verify(mockDatastreams)\n                .createDatastreamNode(any(Session.class), eq(dsPath),\n                        anyString(), any(InputStream.class), any(URI.class));\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testCreateDatastream() throws RepositoryException, IOException,",
          "type": "DELETE",
          "lineNo": 214
        },
        {
          "line": "InvalidChecksumException, URISyntaxException {",
          "type": "DELETE",
          "lineNo": 215
        }
      ],
      "targetChanges": [
        {
          "line": "public void testCreateDatastream() throws Exception {",
          "type": "ADD",
          "lineNo": 209
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraNodesTest.testCreateDatastream()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.exception.InvalidChecksumException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraNodesTest.testCreateDatastream()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Exception"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Exception",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.exception.InvalidChecksumException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.net.URISyntaxException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        210
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:494",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testDescribeObjectNoInlining()",
    "bSource": {
      "startLine": 277,
      "code": "@Test\n    public void testDescribeObjectNoInlining() throws RepositoryException, IOException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(\n                mockObject.getPropertiesDataset(any(GraphSubjects.class),\n                                                   anyLong(), eq(-2))).thenReturn(mockDataset);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final Dataset dataset =\n            testObj.describe(createPathList(path), 0, -1, \"\", mockRequest, mockResponse,\n                                uriInfo);\n        assertNotNull(dataset.getDefaultModel());\n\n    }"
    },
    "aSource": {
      "startLine": 271,
      "code": "@Test\n    public void testDescribeObjectNoInlining() throws RepositoryException, IOException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(\n                mockObject.getPropertiesDataset(any(GraphSubjects.class),\n                                                   anyInt(), eq(-2))).thenReturn(mockDataset);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n            .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final Dataset dataset =\n            testObj.describe(createPathList(path), 0, -1, \"\", mockRequest, mockResponse,\n                                uriInfo);\n        assertNotNull(dataset.getDefaultModel());\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "anyLong(), eq(-2))).thenReturn(mockDataset);",
          "type": "DELETE",
          "lineNo": 288
        }
      ],
      "targetChanges": [
        {
          "line": "anyInt(), eq(-2))).thenReturn(mockDataset);",
          "type": "ADD",
          "lineNo": 282
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "anyLong()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyLong()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anyLong",
          "childCount": 0
        },
        "dstNode": {
          "label": "anyInt",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        282
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:495",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testDescribeObject()",
    "bSource": {
      "startLine": 254,
      "code": "@Test\n    public void testDescribeObject() throws RepositoryException, IOException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(\n                mockObject.getPropertiesDataset(any(GraphSubjects.class),\n                        anyLong(), anyInt())).thenReturn(mockDataset);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n                .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final Dataset dataset =\n                testObj.describe(createPathList(path), 0, -1, null, mockRequest, mockResponse,\n                        uriInfo);\n        assertNotNull(dataset.getDefaultModel());\n        verify(mockResponse).addHeader(\"Accept-Patch\", \"application/sparql-update\");\n\n    }"
    },
    "aSource": {
      "startLine": 248,
      "code": "@Test\n    public void testDescribeObject() throws RepositoryException, IOException {\n        final String pid = \"FedoraObjectsRdfTest1\";\n        final String path = \"/\" + pid;\n\n        when(mockDataset.getDefaultModel()).thenReturn(mockModel);\n        when(mockDataset.getContext()).thenReturn(mockContext);\n\n        when(mockObject.getEtagValue()).thenReturn(\"\");\n        when(\n                mockObject.getPropertiesDataset(any(GraphSubjects.class),\n                        anyInt(), anyInt())).thenReturn(mockDataset);\n        when(mockNodes.getObject(isA(Session.class), isA(String.class)))\n                .thenReturn(mockObject);\n        final Request mockRequest = mock(Request.class);\n        final Dataset dataset =\n                testObj.describe(createPathList(path), 0, -1, null, mockRequest, mockResponse,\n                        uriInfo);\n        assertNotNull(dataset.getDefaultModel());\n        verify(mockResponse).addHeader(\"Accept-Patch\", \"application/sparql-update\");\n\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "anyLong(), anyInt())).thenReturn(mockDataset);",
          "type": "DELETE",
          "lineNo": 265
        }
      ],
      "targetChanges": [
        {
          "line": "anyInt(), anyInt())).thenReturn(mockDataset);",
          "type": "ADD",
          "lineNo": 259
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "anyLong()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyLong()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anyLong",
          "childCount": 0
        },
        "dstNode": {
          "label": "anyInt",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        259
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:496",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraNodesTest.testCreateObject()",
    "bSource": {
      "startLine": 152,
      "code": "@Test\n    public void testCreateObject() throws RepositoryException, IOException,\n            InvalidChecksumException, URISyntaxException {\n        final String pid = \"testObject\";\n        final String path = \"/\" + pid;\n        when(mockObjects.createObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Response actual =\n                testObj.createObject(createPathList(pid), FEDORA_OBJECT, null,\n                        null, null, getUriInfoImpl(), null);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        assertTrue(actual.getEntity().toString().endsWith(pid));\n        verify(mockObjects).createObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "aSource": {
      "startLine": 150,
      "code": "@Test\n    public void testCreateObject() throws Exception {\n        final String pid = \"testObject\";\n        final String path = \"/\" + pid;\n        when(mockObjects.createObject(mockSession, path)).thenReturn(mockObject);\n        when(mockObject.getNode()).thenReturn(mockNode);\n        when(mockNode.getPath()).thenReturn(path);\n        final Response actual =\n                testObj.createObject(createPathList(pid), FEDORA_OBJECT, null,\n                        null, null, getUriInfoImpl(), null);\n        assertNotNull(actual);\n        assertEquals(CREATED.getStatusCode(), actual.getStatus());\n        assertTrue(actual.getEntity().toString().endsWith(pid));\n        verify(mockObjects).createObject(mockSession, path);\n        verify(mockSession).save();\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraNodesTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void testCreateObject() throws RepositoryException, IOException,",
          "type": "DELETE",
          "lineNo": 153
        },
        {
          "line": "InvalidChecksumException, URISyntaxException {",
          "type": "DELETE",
          "lineNo": 154
        }
      ],
      "targetChanges": [
        {
          "line": "public void testCreateObject() throws Exception {",
          "type": "ADD",
          "lineNo": 151
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraNodesTest.testCreateObject()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.RepositoryException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.exception.InvalidChecksumException"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URISyntaxException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.fcrepo.http.api.FedoraNodesTest.testCreateObject()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Exception"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.io.IOException",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Exception",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "javax.jcr.RepositoryException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.exception.InvalidChecksumException",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.net.URISyntaxException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        152
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:497",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.shouldIncludeContainerInfoWithMixinTypeContainer()",
    "bSource": {
      "startLine": 280,
      "code": "@Test\n    public final void shouldIncludeContainerInfoWithMixinTypeContainer()\n        throws RepositoryException, IOException {\n        when(mockPrimaryNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {});\n        when(mockPrimaryNodeType.getName()).thenReturn(\"jcr:someType\");\n        when(mockMixinNodeType.getName()).thenReturn(\"jcr:mixin\");\n        when(mockMixinNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {mock(NodeDefinition.class)});\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockPrimaryNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockMixinNodeType});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n\n        when(mockNode.getDepth()).thenReturn(0);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getJcrTreeModel(mockNode, 0, -1).asModel();\n\n        assertTrue(actual.contains(testSubjects.getContext(), type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Page\")));\n        assertTrue(actual.contains(testSubjects.getContext(), actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membersInlined\"),\n                actual.createLiteral(TRUE.toString())));\n\n        final Resource graphSubject = testSubjects.getGraphSubject(mockNode);\n        assertTrue(actual.contains(graphSubject, type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Container\")));\n\n        assertTrue(actual.contains(graphSubject, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipSubject\"),\n                graphSubject));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipPredicate\"),\n                HAS_CHILD));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipObject\"),\n                actual.createResource(\"http://www.w3.org/ns/ldp#MemberSubject\")));\n    }"
    },
    "aSource": {
      "startLine": 280,
      "code": "@Test\n    public final void shouldIncludeContainerInfoWithMixinTypeContainer()\n        throws RepositoryException, IOException {\n        when(mockPrimaryNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {});\n        when(mockPrimaryNodeType.getName()).thenReturn(\"jcr:someType\");\n        when(mockMixinNodeType.getName()).thenReturn(\"jcr:mixin\");\n        when(mockMixinNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {mock(NodeDefinition.class)});\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockPrimaryNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockMixinNodeType});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n\n        when(mockNode.getDepth()).thenReturn(0);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getTreeTriples(mockNode, 0, -1).asModel();\n\n        assertTrue(actual.contains(testSubjects.getContext(), type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Page\")));\n        assertTrue(actual.contains(testSubjects.getContext(), actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membersInlined\"),\n                actual.createLiteral(TRUE.toString())));\n\n        final Resource graphSubject = testSubjects.getGraphSubject(mockNode);\n        assertTrue(actual.contains(graphSubject, type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Container\")));\n\n        assertTrue(actual.contains(graphSubject, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipSubject\"),\n                graphSubject));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipPredicate\"),\n                HAS_CHILD));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipObject\"),\n                actual.createResource(\"http://www.w3.org/ns/ldp#MemberSubject\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getJcrTreeModel(mockNode, 0, -1).asModel();",
          "type": "DELETE",
          "lineNo": 297
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getTreeTriples(mockNode, 0, -1).asModel();",
          "type": "ADD",
          "lineNo": 297
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrTreeModel",
          "childCount": 4
        },
        "dstNode": {
          "label": "getTreeTriples",
          "childCount": 4
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        297
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:498",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetJcrVersionsModel()",
    "bSource": {
      "startLine": 508,
      "code": "@Test\n    public final void testGetJcrVersionsModel() throws Exception {\n\n        when(mockNode.getPath()).thenReturn(\"/test/jcr\");\n        when(mockVersionManager.getVersionHistory(mockNode.getPath()))\n                .thenReturn(mockVersionHistory);\n\n        when(mockVersionIterator.hasNext()).thenReturn(true, false);\n        when(mockFrozenNode.getPath()).thenReturn(\n                \"/jcr:system/versions/test/jcr\");\n        when(mockFrozenNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockFrozenNode.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n        when(mockVersion.getFrozenNode()).thenReturn(mockFrozenNode);\n        when(mockVersionIterator.next()).thenReturn(mockVersion);\n        when(mockVersionHistory.getAllVersions()).thenReturn(\n                mockVersionIterator);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionHistory.getVersionLabels(mockVersion)).thenReturn(\n                new String[] {\"abc\"});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n        when(mockFrozenNode.getProperties()).thenReturn(mockProperties);\n        final Model actual =\n            testObj.getJcrVersionPropertiesModel(mockNode).asModel();\n\n        assertTrue(actual.contains(testSubjects.getGraphSubject(mockNode),\n                HAS_VERSION, testSubjects.getGraphSubject(mockFrozenNode)));\n        assertTrue(actual.contains(\n                testSubjects.getGraphSubject(mockFrozenNode),\n                HAS_VERSION_LABEL, actual.createLiteral(\"abc\")));\n    }"
    },
    "aSource": {
      "startLine": 508,
      "code": "@Test\n    public final void testGetJcrVersionsModel() throws Exception {\n\n        when(mockNode.getPath()).thenReturn(\"/test/jcr\");\n        when(mockVersionManager.getVersionHistory(mockNode.getPath()))\n                .thenReturn(mockVersionHistory);\n\n        when(mockVersionIterator.hasNext()).thenReturn(true, false);\n        when(mockFrozenNode.getPath()).thenReturn(\n                \"/jcr:system/versions/test/jcr\");\n        when(mockFrozenNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockFrozenNode.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n        when(mockVersion.getFrozenNode()).thenReturn(mockFrozenNode);\n        when(mockVersionIterator.next()).thenReturn(mockVersion);\n        when(mockVersionHistory.getAllVersions()).thenReturn(\n                mockVersionIterator);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionHistory.getVersionLabels(mockVersion)).thenReturn(\n                new String[] {\"abc\"});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n        when(mockFrozenNode.getProperties()).thenReturn(mockProperties);\n        final Model actual =\n            testObj.getVersionTriples(mockNode).asModel();\n\n        assertTrue(actual.contains(testSubjects.getGraphSubject(mockNode),\n                HAS_VERSION, testSubjects.getGraphSubject(mockFrozenNode)));\n        assertTrue(actual.contains(\n                testSubjects.getGraphSubject(mockFrozenNode),\n                HAS_VERSION_LABEL, actual.createLiteral(\"abc\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.getJcrVersionPropertiesModel(mockNode).asModel();",
          "type": "DELETE",
          "lineNo": 531
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.getVersionTriples(mockNode).asModel();",
          "type": "ADD",
          "lineNo": 531
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrVersionPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrVersionPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getVersionTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getVersionTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrVersionPropertiesModel",
          "childCount": 2
        },
        "dstNode": {
          "label": "getVersionTriples",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        531
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:499",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.shouldBeAbleToDisableResourceInlining()",
    "bSource": {
      "startLine": 269,
      "code": "@Test\n    public final void\n            shouldBeAbleToDisableResourceInlining() throws RepositoryException {\n\n        final Model actual = testObj.getJcrTreeModel(mockNode, 0, -2).asModel();\n        assertEquals(0, Iterators.size(actual.listObjectsOfProperty(actual\n                .createProperty(\"http://www.w3.org/ns/ldp#inlinedResource\"))));\n        verify(mockParent, never()).getProperties();\n        verify(mockNode, never()).getNodes();\n    }"
    },
    "aSource": {
      "startLine": 269,
      "code": "@Test\n    public final void\n            shouldBeAbleToDisableResourceInlining() throws RepositoryException {\n\n        final Model actual = testObj.getTreeTriples(mockNode, 0, -2).asModel();\n        assertEquals(0, Iterators.size(actual.listObjectsOfProperty(actual\n                .createProperty(\"http://www.w3.org/ns/ldp#inlinedResource\"))));\n        verify(mockParent, never()).getProperties();\n        verify(mockNode, never()).getNodes();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getJcrTreeModel(mockNode, 0, -2).asModel();",
          "type": "DELETE",
          "lineNo": 273
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getTreeTriples(mockNode, 0, -2).asModel();",
          "type": "ADD",
          "lineNo": 273
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getTreeTriples(Node,int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrTreeModel",
          "childCount": 4
        },
        "dstNode": {
          "label": "getTreeTriples",
          "childCount": 4
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        273
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:500",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetFixityResultsModel()",
    "bSource": {
      "startLine": 465,
      "code": "@Test\n    public final void testGetFixityResultsModel() throws RepositoryException,\n                                                 URISyntaxException,\n                                                 IOException {\n        when(mockCacheEntry.getExternalIdentifier()).thenReturn(\"http://xyz\");\n        final String testFixityUri = \"http://abc\";\n        final FixityResult mockResult =\n            new FixityResult(mockCacheEntry, 123, new URI(testFixityUri));\n        mockResult.status.add(BAD_CHECKSUM);\n        mockResult.status.add(BAD_SIZE);\n\n        final List<FixityResult> mockBlobs = asList(mockResult);\n\n        final Model fixityResultsModel =\n            testObj.getJcrPropertiesModel(mockNode, mockBlobs).asModel();\n\n        logRDF(fixityResultsModel);\n        assertTrue(fixityResultsModel.contains(null, IS_FIXITY_RESULT_OF,\n                createResource(RESTAPI_NAMESPACE + \"/test/jcr\")));\n        assertTrue(fixityResultsModel.contains(null, HAS_COMPUTED_CHECKSUM,\n                createResource(testFixityUri)));\n        assertTrue(fixityResultsModel.contains(null, HAS_COMPUTED_SIZE,\n                createTypedLiteral(123)));\n\n    }"
    },
    "aSource": {
      "startLine": 465,
      "code": "@Test\n    public final void testGetFixityResultsModel() throws RepositoryException,\n                                                 URISyntaxException,\n                                                 IOException {\n        when(mockCacheEntry.getExternalIdentifier()).thenReturn(\"http://xyz\");\n        final String testFixityUri = \"http://abc\";\n        final FixityResult mockResult =\n            new FixityResult(mockCacheEntry, 123, new URI(testFixityUri));\n        mockResult.status.add(BAD_CHECKSUM);\n        mockResult.status.add(BAD_SIZE);\n\n        final List<FixityResult> mockBlobs = asList(mockResult);\n\n        final Model fixityResultsModel =\n            testObj.getJcrTriples(mockNode, mockBlobs).asModel();\n\n        logRDF(fixityResultsModel);\n        assertTrue(fixityResultsModel.contains(null, IS_FIXITY_RESULT_OF,\n                createResource(RESTAPI_NAMESPACE + \"/test/jcr\")));\n        assertTrue(fixityResultsModel.contains(null, HAS_COMPUTED_CHECKSUM,\n                createResource(testFixityUri)));\n        assertTrue(fixityResultsModel.contains(null, HAS_COMPUTED_SIZE,\n                createTypedLiteral(123)));\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.getJcrPropertiesModel(mockNode, mockBlobs).asModel();",
          "type": "DELETE",
          "lineNo": 479
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.getJcrTriples(mockNode, mockBlobs).asModel();",
          "type": "ADD",
          "lineNo": 479
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node,Iterable)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node,Iterable)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List mockBlobs"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTriples(Node,Iterable)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTriples(Node,Iterable)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List mockBlobs"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 3
        },
        "dstNode": {
          "label": "getJcrTriples",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        479
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:501",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetPropertiesModelForRootNode()",
    "bSource": {
      "startLine": 202,
      "code": "@Test\n    public final void\n            testGetPropertiesModelForRootNode() throws RepositoryException {\n\n        LOGGER.debug(\"Entering testGetPropertiesModelForRootNode()...\");\n        when(mockRepository.login()).thenReturn(mockSession);\n        when(mockRowIterator.getSize()).thenReturn(0L);\n        when(mockQueryResult.getRows()).thenReturn(mockRowIterator);\n        when(mockQuery.execute()).thenReturn(mockQueryResult);\n        when(mockQueryManager.createQuery(anyString(), eq(JCR_SQL2)))\n                .thenReturn(mockQuery);\n        when(mockWorkspace.getQueryManager()).thenReturn(mockQueryManager);\n        when(mockMetrics.getCounters()).thenReturn(\n                ImmutableSortedMap.of(\n                        \"LowLevelStorageService.fixity-check-counter\",\n                        mockCounter,\n                        \"LowLevelStorageService.fixity-error-counter\",\n                        mockCounter,\n                        \"LowLevelStorageService.fixity-repaired-counter\",\n                        mockCounter\n\n                ));\n        when(mockGetClusterConfiguration.apply(mockRepository)).thenReturn(\n                ImmutableMap.of(\"a\", \"b\"));\n        setGetClusterConfiguration(mockGetClusterConfiguration);\n\n        when(mockNode.getPath()).thenReturn(\"/\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPrimaryNodeType().getName()).thenReturn(ROOT);\n\n        when(mockSession.getRepository()).thenReturn(mockRepository);\n        when(mockRepository.getDescriptorKeys()).thenReturn(\n                new String[] {\"some-descriptor-key\"});\n        when(mockRepository.getDescriptor(\"some-descriptor-key\")).thenReturn(\n                \"some-descriptor-value\");\n        when(mockNodeTypeIterator.hasNext()).thenReturn(false);\n        when(mockNodeTypeManager.getAllNodeTypes()).thenReturn(\n                mockNodeTypeIterator);\n        when(mockWorkspace.getNodeTypeManager())\n                .thenReturn(mockNodeTypeManager);\n\n        final Model actual = testObj.getJcrPropertiesModel(mockNode).asModel();\n        assertTrue(actual.contains(testSubjects.getGraphSubject(mockNode),\n                actual.createProperty(REPOSITORY_NAMESPACE\n                        + \"repository/some-descriptor-key\"), actual\n                        .createLiteral(\"some-descriptor-value\")));\n    }"
    },
    "aSource": {
      "startLine": 202,
      "code": "@Test\n    public final void\n            testGetPropertiesModelForRootNode() throws RepositoryException {\n\n        LOGGER.debug(\"Entering testGetPropertiesModelForRootNode()...\");\n        when(mockRepository.login()).thenReturn(mockSession);\n        when(mockRowIterator.getSize()).thenReturn(0L);\n        when(mockQueryResult.getRows()).thenReturn(mockRowIterator);\n        when(mockQuery.execute()).thenReturn(mockQueryResult);\n        when(mockQueryManager.createQuery(anyString(), eq(JCR_SQL2)))\n                .thenReturn(mockQuery);\n        when(mockWorkspace.getQueryManager()).thenReturn(mockQueryManager);\n        when(mockMetrics.getCounters()).thenReturn(\n                ImmutableSortedMap.of(\n                        \"LowLevelStorageService.fixity-check-counter\",\n                        mockCounter,\n                        \"LowLevelStorageService.fixity-error-counter\",\n                        mockCounter,\n                        \"LowLevelStorageService.fixity-repaired-counter\",\n                        mockCounter\n\n                ));\n        when(mockGetClusterConfiguration.apply(mockRepository)).thenReturn(\n                ImmutableMap.of(\"a\", \"b\"));\n        setGetClusterConfiguration(mockGetClusterConfiguration);\n\n        when(mockNode.getPath()).thenReturn(\"/\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPrimaryNodeType().getName()).thenReturn(ROOT);\n\n        when(mockSession.getRepository()).thenReturn(mockRepository);\n        when(mockRepository.getDescriptorKeys()).thenReturn(\n                new String[] {\"some-descriptor-key\"});\n        when(mockRepository.getDescriptor(\"some-descriptor-key\")).thenReturn(\n                \"some-descriptor-value\");\n        when(mockNodeTypeIterator.hasNext()).thenReturn(false);\n        when(mockNodeTypeManager.getAllNodeTypes()).thenReturn(\n                mockNodeTypeIterator);\n        when(mockWorkspace.getNodeTypeManager())\n                .thenReturn(mockNodeTypeManager);\n\n        final Model actual = testObj.getJcrTriples(mockNode).asModel();\n        assertTrue(actual.contains(testSubjects.getGraphSubject(mockNode),\n                actual.createProperty(REPOSITORY_NAMESPACE\n                        + \"repository/some-descriptor-key\"), actual\n                        .createLiteral(\"some-descriptor-value\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getJcrPropertiesModel(mockNode).asModel();",
          "type": "DELETE",
          "lineNo": 243
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getJcrTriples(mockNode).asModel();",
          "type": "ADD",
          "lineNo": 243
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 2
        },
        "dstNode": {
          "label": "getJcrTriples",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        243
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:502",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.shouldExcludeBinaryProperties()",
    "bSource": {
      "startLine": 250,
      "code": "@Test\n    public final void shouldExcludeBinaryProperties() throws RepositoryException,\n        IOException {\n        when(mockNode.getDepth()).thenReturn(2);\n        reset(mockProperty, mockValue, mockNodes);\n        when(mockProperty.getType()).thenReturn(BINARY);\n        when(mockProperty.isMultiple()).thenReturn(false);\n        when(mockProperty.getName()).thenReturn(mockPredicateName);\n        when(mockProperty.getBinary()).thenReturn(mockBinary);\n        when(mockProperty.getValue()).thenReturn(mockValue);\n        when(mockValue.getType()).thenReturn(BINARY);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getJcrPropertiesModel(mockNode).asModel();\n        logRDF(actual);\n        assertFalse(\n                \"RDF contained a statement based on a binary property when it shouldn't have!\",\n                actual.contains(null, createProperty(mockPredicateName)));\n    }"
    },
    "aSource": {
      "startLine": 250,
      "code": "@Test\n    public final void shouldExcludeBinaryProperties() throws RepositoryException,\n        IOException {\n        when(mockNode.getDepth()).thenReturn(2);\n        reset(mockProperty, mockValue, mockNodes);\n        when(mockProperty.getType()).thenReturn(BINARY);\n        when(mockProperty.isMultiple()).thenReturn(false);\n        when(mockProperty.getName()).thenReturn(mockPredicateName);\n        when(mockProperty.getBinary()).thenReturn(mockBinary);\n        when(mockProperty.getValue()).thenReturn(mockValue);\n        when(mockValue.getType()).thenReturn(BINARY);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getJcrTriples(mockNode).asModel();\n        logRDF(actual);\n        assertFalse(\n                \"RDF contained a statement based on a binary property when it shouldn't have!\",\n                actual.contains(null, createProperty(mockPredicateName)));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getJcrPropertiesModel(mockNode).asModel();",
          "type": "DELETE",
          "lineNo": 262
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getJcrTriples(mockNode).asModel();",
          "type": "ADD",
          "lineNo": 262
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 2
        },
        "dstNode": {
          "label": "getJcrTriples",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        262
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:503",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetJcrNamespaceModel()",
    "bSource": {
      "startLine": 491,
      "code": "@Test\n    public final void testGetJcrNamespaceModel() throws Exception {\n        final Model jcrNamespaceModel = testObj.getJcrNamespaceModel().asModel();\n        assertTrue(jcrNamespaceModel.contains(\n                createResource(REPOSITORY_NAMESPACE), HAS_NAMESPACE_PREFIX,\n                \"fcrepo\"));\n\n        final Resource nsSubject = createResource(mockUri);\n        assertTrue(jcrNamespaceModel.contains(nsSubject, RDF.type,\n                RdfLexicon.VOAF_VOCABULARY));\n        assertTrue(jcrNamespaceModel.contains(nsSubject, HAS_NAMESPACE_PREFIX,\n                \"some-prefix\"));\n\n        assertTrue(jcrNamespaceModel.contains(nsSubject, HAS_NAMESPACE_URI,\n                mockUri));\n    }"
    },
    "aSource": {
      "startLine": 491,
      "code": "@Test\n    public final void testGetJcrNamespaceModel() throws Exception {\n        final Model jcrNamespaceModel = testObj.getNamespaceTriples().asModel();\n        assertTrue(jcrNamespaceModel.contains(\n                createResource(REPOSITORY_NAMESPACE), HAS_NAMESPACE_PREFIX,\n                \"fcrepo\"));\n\n        final Resource nsSubject = createResource(mockUri);\n        assertTrue(jcrNamespaceModel.contains(nsSubject, RDF.type,\n                RdfLexicon.VOAF_VOCABULARY));\n        assertTrue(jcrNamespaceModel.contains(nsSubject, HAS_NAMESPACE_PREFIX,\n                \"some-prefix\"));\n\n        assertTrue(jcrNamespaceModel.contains(nsSubject, HAS_NAMESPACE_URI,\n                mockUri));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model jcrNamespaceModel = testObj.getJcrNamespaceModel().asModel();",
          "type": "DELETE",
          "lineNo": 493
        }
      ],
      "targetChanges": [
        {
          "line": "final Model jcrNamespaceModel = testObj.getNamespaceTriples().asModel();",
          "type": "ADD",
          "lineNo": 493
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model jcrNamespaceModel"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrNamespaceModel()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrNamespaceModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model jcrNamespaceModel"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getNamespaceTriples()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getNamespaceTriples()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrNamespaceModel",
          "childCount": 1
        },
        "dstNode": {
          "label": "getNamespaceTriples",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        493
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:504",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetPropertiesModel()",
    "bSource": {
      "startLine": 186,
      "code": "@Test\n    public final void testGetPropertiesModel() throws RepositoryException,\n                                              IOException {\n        LOGGER.debug(\"Entering testGetPropertiesModel()...\");\n        when(mockNode.hasProperties()).thenReturn(true);\n        final Model actual = testObj.getJcrPropertiesModel(mockNode).asModel();\n        logRDF(actual);\n        assertTrue(\"Didn't find appropriate triple!\", actual.contains(\n                testSubjects.getGraphSubject(mockNode), actual\n                        .getProperty(mockPredicateName), actual\n                        .createLiteral(\"abc\")));\n\n    }"
    },
    "aSource": {
      "startLine": 186,
      "code": "@Test\n    public final void testGetPropertiesModel() throws RepositoryException,\n                                              IOException {\n        LOGGER.debug(\"Entering testGetPropertiesModel()...\");\n        when(mockNode.hasProperties()).thenReturn(true);\n        final Model actual = testObj.getJcrTriples(mockNode).asModel();\n        logRDF(actual);\n        assertTrue(\"Didn't find appropriate triple!\", actual.contains(\n                testSubjects.getGraphSubject(mockNode), actual\n                        .getProperty(mockPredicateName), actual\n                        .createLiteral(\"abc\")));\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getJcrPropertiesModel(mockNode).asModel();",
          "type": "DELETE",
          "lineNo": 191
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getJcrTriples(mockNode).asModel();",
          "type": "ADD",
          "lineNo": 191
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTriples(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 2
        },
        "dstNode": {
          "label": "getJcrTriples",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        191
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:505",
    "trivial": [
      "RENAME_METHOD"
    ]
  },
  {
    "name": "org.fcrepo.kernel.services.DatastreamServiceTest.testGetFixityResultsModel()",
    "bSource": {
      "startLine": 173,
      "code": "@Test\n    public void testGetFixityResultsModel() throws Exception {\n        mockStatic(JcrRdfTools.class);\n        final GraphSubjects mockSubjects = mock(GraphSubjects.class);\n        final JcrRdfTools mockJcrRdfTools = mock(JcrRdfTools.class);\n        when(JcrRdfTools.withContext(mockSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n\n        final FixityResult fixityResult = mock(FixityResult.class);\n        when(fixityResult.matches(any(Long.class), any(URI.class))).thenReturn(\n                true);\n\n        final Collection<FixityResult> mockCollection = asList(fixityResult);\n        final Datastream mockDatastream = mock(Datastream.class);\n\n        when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContent);\n\n        when(mockDatastream.getNode()).thenReturn(mockNode);\n        when(mockDatastream.getContentDigest()).thenReturn(\n                new URI(\"urn:sha1:abc\"));\n\n        when(\n                llStore.transformLowLevelCacheEntries(eq(mockContent),\n                       Matchers.<Function<LowLevelCacheEntry,FixityResult>> any())).thenReturn(mockCollection);\n\n        when(\n                mockJcrRdfTools.getJcrPropertiesModel(eq(mockNode), Matchers\n                        .<Iterable<FixityResult>> any())).thenReturn(new RdfStream());\n\n        when(mockSubjects.getGraphSubject(mockNode)).thenReturn(\n                createResource(\"abc\"));\n        final Dataset fixityResultsModel =\n                testObj.getFixityResultsModel(mockSubjects, mockDatastream);\n\n        assertTrue(fixityResultsModel.getContext().isDefined(\n                Symbol.create(\"uri\")));\n    }"
    },
    "aSource": {
      "startLine": 173,
      "code": "@Test\n    public void testGetFixityResultsModel() throws Exception {\n        mockStatic(JcrRdfTools.class);\n        final GraphSubjects mockSubjects = mock(GraphSubjects.class);\n        final JcrRdfTools mockJcrRdfTools = mock(JcrRdfTools.class);\n        when(JcrRdfTools.withContext(mockSubjects, mockSession)).thenReturn(mockJcrRdfTools);\n\n        final FixityResult fixityResult = mock(FixityResult.class);\n        when(fixityResult.matches(any(Long.class), any(URI.class))).thenReturn(\n                true);\n\n        final Collection<FixityResult> mockCollection = asList(fixityResult);\n        final Datastream mockDatastream = mock(Datastream.class);\n\n        when(mockNode.getNode(JCR_CONTENT)).thenReturn(mockContent);\n\n        when(mockDatastream.getNode()).thenReturn(mockNode);\n        when(mockDatastream.getContentDigest()).thenReturn(\n                new URI(\"urn:sha1:abc\"));\n\n        when(\n                llStore.transformLowLevelCacheEntries(eq(mockContent),\n                       Matchers.<Function<LowLevelCacheEntry,FixityResult>> any())).thenReturn(mockCollection);\n\n        when(\n                mockJcrRdfTools.getJcrTriples(eq(mockNode), Matchers\n                        .<Iterable<FixityResult>> any())).thenReturn(new RdfStream());\n\n        when(mockSubjects.getGraphSubject(mockNode)).thenReturn(\n                createResource(\"abc\"));\n        final Dataset fixityResultsModel =\n                testObj.getFixityResultsModel(mockSubjects, mockDatastream);\n\n        assertTrue(fixityResultsModel.getContext().isDefined(\n                Symbol.create(\"uri\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/DatastreamServiceTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/DatastreamServiceTest.java",
    "bCommit": "0703d237d5",
    "aCommit": "dd6cc7abe9",
    "hunk": {
      "sourceChanges": [
        {
          "line": "mockJcrRdfTools.getJcrPropertiesModel(eq(mockNode), Matchers",
          "type": "DELETE",
          "lineNo": 198
        }
      ],
      "targetChanges": [
        {
          "line": "mockJcrRdfTools.getJcrTriples(eq(mockNode), Matchers",
          "type": "ADD",
          "lineNo": 198
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "getJcrPropertiesModel(java.util.Iterator,org.fcrepo.kernel.utils.Resource)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "getJcrPropertiesModel(java.util.Iterator,org.fcrepo.kernel.utils.Resource)"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Matchers"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTriples(Node,Iterable)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools mockJcrRdfTools"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTriples(Node,Iterable)"
        },
        {
          "type": "CtInvocation",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Matchers"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 3
        },
        "dstNode": {
          "label": "getJcrTriples",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        198
      ]
    },
    "aCommitTime": 1383081620,
    "ID": "fcrepo/fcrepo:506",
    "trivial": null
  },
  {
    "name": "org.fcrepo.http.api.FedoraVersionsTest.testGetVersionList()",
    "bSource": {
      "startLine": 84,
      "code": "@Test\n    public void testGetVersionList() throws RepositoryException {\n        final String pid = \"FedoraVersioningTest\";\n        when(mockRequest.selectVariant(POSSIBLE_RDF_VARIANTS)).thenReturn(\n                mockVariant);\n        when(mockNodes.getObject(any(Session.class), anyString())).thenReturn(\n                mockResource);\n        when(mockResource.getVersionDataset(any(HttpGraphSubjects.class)))\n                .thenReturn(mockDataset);\n        when(mockVariant.getMediaType()).thenReturn(\n                new MediaType(\"text\", \"turtle\"));\n\n        final Response response =\n            testObj.getVersionList(createPathList(pid), mockRequest,\n                    getUriInfoImpl());\n        assertNotNull(response);\n        assertEquals(200, response.getStatus());\n    }"
    },
    "aSource": {
      "startLine": 85,
      "code": "@Test\n    public void testGetVersionList() throws RepositoryException {\n        final String pid = \"FedoraVersioningTest\";\n        when(mockRequest.selectVariant(POSSIBLE_RDF_VARIANTS)).thenReturn(\n                mockVariant);\n        when(mockNodes.getObject(any(Session.class), anyString())).thenReturn(\n                mockResource);\n        when(mockResource.getVersionDataset(any(HttpGraphSubjects.class)))\n                .thenReturn(new RdfStream());\n        when(mockVariant.getMediaType()).thenReturn(\n                new MediaType(\"text\", \"turtle\"));\n\n        final Response response =\n            testObj.getVersionList(createPathList(pid), mockRequest,\n                    getUriInfoImpl());\n        assertNotNull(response);\n        assertEquals(200, response.getStatus());\n    }"
    },
    "bPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "aPath": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraVersionsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".thenReturn(mockDataset);",
          "type": "DELETE",
          "lineNo": 92
        }
      ],
      "targetChanges": [
        {
          "line": ".thenReturn(new RdfStream());",
          "type": "ADD",
          "lineNo": 93
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(com.hp.hpl.jena.query.Dataset)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.query.Dataset mockDataset"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mockDataset",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.utils.iterators.RdfStream()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        93
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:527",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.FedoraTypesUtilsTest.testGetDefinitionForPropertyName()",
    "bSource": {
      "startLine": 226,
      "code": "@Test\n    public void testGetDefinitionForPropertyName() throws RepositoryException {\n        final String mockPropertyName = \"mock:property\";\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockSession.getWorkspace()).thenReturn(mockWS);\n        when(mockWS.getNodeTypeManager()).thenReturn(mockNTM);\n        when(mockNTM.getNodeType(anyString())).thenReturn(mockNodeType);\n        when(mockPropertyDefinition.getName()).thenReturn(mockPropertyName);\n        final PropertyDefinition[] PDs =\n                new PropertyDefinition[] {mockPropertyDefinition};\n        when(mockNodeType.getPropertyDefinitions()).thenReturn(PDs);\n        PropertyDefinition actual =\n                getDefinitionForPropertyName(mockNode, mockPropertyName);\n        assertEquals(mockPropertyDefinition, actual);\n        actual =\n                getDefinitionForPropertyName(mockNode, mockPropertyName +\n                        \":fail\");\n        assertEquals(null, actual);\n\n    }"
    },
    "aSource": {
      "startLine": 226,
      "code": "@Test\n    public void testGetDefinitionForPropertyName() throws RepositoryException {\n        final String mockPropertyName = \"mock:property\";\n        when(mockNode.getSession()).thenReturn(mockSession);\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(new NodeType[]{});\n        when(mockSession.getWorkspace()).thenReturn(mockWS);\n        when(mockWS.getNodeTypeManager()).thenReturn(mockNTM);\n        when(mockNTM.getNodeType(anyString())).thenReturn(mockNodeType);\n        when(mockPropertyDefinition.getName()).thenReturn(mockPropertyName);\n        final PropertyDefinition[] PDs =\n                new PropertyDefinition[] {mockPropertyDefinition};\n        when(mockNodeType.getPropertyDefinitions()).thenReturn(PDs);\n        PropertyDefinition actual =\n                getDefinitionForPropertyName(mockNode, mockPropertyName);\n        assertEquals(mockPropertyDefinition, actual);\n        actual =\n                getDefinitionForPropertyName(mockNode, mockPropertyName +\n                        \":fail\");\n        assertEquals(null, actual);\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/FedoraTypesUtilsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/FedoraTypesUtilsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);",
          "type": "ADD",
          "lineNo": 230
        },
        {
          "line": "when(mockNode.getMixinNodeTypes()).thenReturn(new NodeType[]{});",
          "type": "ADD",
          "lineNo": 231
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.nodetype.NodeType)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getPrimaryNodeType()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPrimaryNodeType()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.nodetype.NodeType)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.nodetype.NodeType mockNodeType"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(javax.jcr.nodetype.NodeType[])"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getMixinNodeTypes()"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "getMixinNodeTypes()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(javax.jcr.nodetype.NodeType[])"
        },
        {
          "type": "CtNewArray",
          "value": "javax.jcr.nodetype.NodeType[]"
        },
        {
          "type": "CtTypeReference",
          "value": "javax.jcr.nodetype.NodeType"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        238
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:528",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.services.RepositoryServiceTest.testSearchRepository()",
    "bSource": {
      "startLine": 234,
      "code": "@Test\n    public void testSearchRepository() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final JcrRdfTools mockJcrRdfTools = mock(JcrRdfTools.class);\n        when(JcrRdfTools.withContext(mockSubjectFactory, mockSession)).thenReturn(mockJcrRdfTools);\n\n        final Resource subject =\n            createResource(RESTAPI_NAMESPACE + \"search/request\");\n\n        when(mockSession.getValueFactory()).thenReturn(mockFactory);\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockWorkspace.getQueryManager()).thenReturn(mockQueryManager);\n        when(mockQueryManager.getQOMFactory()).thenReturn(mockQOMFactory);\n        when(mockQOMFactory.createQuery(null, null, null, null)).thenReturn(\n                mockQueryOM);\n        when(mockQueryOM.execute()).thenReturn(mockQueryResult);\n        when(mockQueryResult.getNodes()).thenReturn(mockNI);\n        when(mockNI.getSize()).thenReturn(500L);\n        when(mockNI.next()).thenReturn(\"\");\n        when(\n                mockJcrRdfTools.getJcrPropertiesModel(any(org.fcrepo.kernel.utils.iterators.NodeIterator.class), eq(subject)))\n                .thenReturn(createDefaultModel());\n\n        testObj.searchRepository(mockSubjectFactory, subject, mockSession,\n                \"search terms\", 10, 0L);\n\n        // n+1\n        verify(mockQueryOM).setLimit(11);\n        verify(mockQueryOM).setOffset(0);\n        verify(mockQueryOM).execute();\n\n    }"
    },
    "aSource": {
      "startLine": 234,
      "code": "@Test\n    public void testSearchRepository() throws Exception {\n\n        mockStatic(JcrRdfTools.class);\n        final JcrRdfTools mockJcrRdfTools = mock(JcrRdfTools.class);\n        when(JcrRdfTools.withContext(mockSubjectFactory, mockSession)).thenReturn(mockJcrRdfTools);\n\n        final Resource subject =\n            createResource(RESTAPI_NAMESPACE + \"search/request\");\n\n        when(mockSession.getValueFactory()).thenReturn(mockFactory);\n        when(mockSession.getWorkspace()).thenReturn(mockWorkspace);\n        when(mockWorkspace.getQueryManager()).thenReturn(mockQueryManager);\n        when(mockQueryManager.getQOMFactory()).thenReturn(mockQOMFactory);\n        when(mockQOMFactory.createQuery(null, null, null, null)).thenReturn(\n                mockQueryOM);\n        when(mockQueryOM.execute()).thenReturn(mockQueryResult);\n        when(mockQueryResult.getNodes()).thenReturn(mockNI);\n        when(mockNI.getSize()).thenReturn(500L);\n        when(mockNI.next()).thenReturn(\"\");\n        when(\n                mockJcrRdfTools.getJcrPropertiesModel(any(org.fcrepo.kernel.utils.iterators.NodeIterator.class), eq(subject)))\n                .thenReturn(new RdfStream());\n\n        testObj.searchRepository(mockSubjectFactory, subject, mockSession,\n                \"search terms\", 10, 0L);\n\n        // n+1\n        verify(mockQueryOM).setLimit(11);\n        verify(mockQueryOM).setOffset(0);\n        verify(mockQueryOM).execute();\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/RepositoryServiceTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/services/RepositoryServiceTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".thenReturn(createDefaultModel());",
          "type": "DELETE",
          "lineNo": 256
        }
      ],
      "targetChanges": [
        {
          "line": ".thenReturn(new RdfStream());",
          "type": "ADD",
          "lineNo": 256
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "createDefaultModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "createDefaultModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.fcrepo.kernel.utils.iterators.RdfStream)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.RdfStream()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "createDefaultModel",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.fcrepo.kernel.utils.iterators.RdfStream()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        256
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:529",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.shouldIncludeContainerInfoWithMixinTypeContainer()",
    "bSource": {
      "startLine": 283,
      "code": "@Test\n    public final void shouldIncludeContainerInfoWithMixinTypeContainer()\n        throws RepositoryException, IOException {\n        when(mockPrimaryNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {});\n        when(mockPrimaryNodeType.getName()).thenReturn(\"jcr:someType\");\n        when(mockMixinNodeType.getName()).thenReturn(\"jcr:mixin\");\n        when(mockMixinNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {mock(NodeDefinition.class)});\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockPrimaryNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockMixinNodeType});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n\n        when(mockNode.getDepth()).thenReturn(0);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getJcrTreeModel(mockNode, 0, -1);\n\n        assertTrue(actual.contains(testSubjects.getContext(), type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Page\")));\n        assertTrue(actual.contains(testSubjects.getContext(), actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membersInlined\"),\n                actual.createLiteral(TRUE.toString())));\n\n        final Resource graphSubject = testSubjects.getGraphSubject(mockNode);\n        assertTrue(actual.contains(graphSubject, type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Container\")));\n\n        assertTrue(actual.contains(graphSubject, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipSubject\"),\n                graphSubject));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipPredicate\"),\n                HAS_CHILD));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipObject\"),\n                actual.createResource(\"http://www.w3.org/ns/ldp#MemberSubject\")));\n    }"
    },
    "aSource": {
      "startLine": 280,
      "code": "@Test\n    public final void shouldIncludeContainerInfoWithMixinTypeContainer()\n        throws RepositoryException, IOException {\n        when(mockPrimaryNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {});\n        when(mockPrimaryNodeType.getName()).thenReturn(\"jcr:someType\");\n        when(mockMixinNodeType.getName()).thenReturn(\"jcr:mixin\");\n        when(mockMixinNodeType.getChildNodeDefinitions()).thenReturn(\n                new NodeDefinition[] {mock(NodeDefinition.class)});\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockPrimaryNodeType);\n        when(mockNode.getMixinNodeTypes()).thenReturn(\n                new NodeType[] {mockMixinNodeType});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n\n        when(mockNode.getDepth()).thenReturn(0);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getJcrTreeModel(mockNode, 0, -1).asModel();\n\n        assertTrue(actual.contains(testSubjects.getContext(), type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Page\")));\n        assertTrue(actual.contains(testSubjects.getContext(), actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membersInlined\"),\n                actual.createLiteral(TRUE.toString())));\n\n        final Resource graphSubject = testSubjects.getGraphSubject(mockNode);\n        assertTrue(actual.contains(graphSubject, type, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#Container\")));\n\n        assertTrue(actual.contains(graphSubject, actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipSubject\"),\n                graphSubject));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipPredicate\"),\n                HAS_CHILD));\n        assertTrue(actual.contains(graphSubject,actual\n                .createProperty(\"http://www.w3.org/ns/ldp#membershipObject\"),\n                actual.createResource(\"http://www.w3.org/ns/ldp#MemberSubject\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getJcrTreeModel(mockNode, 0, -1);",
          "type": "DELETE",
          "lineNo": 300
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getJcrTreeModel(mockNode, 0, -1).asModel();",
          "type": "ADD",
          "lineNo": 297
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrTreeModel",
          "childCount": 4
        },
        "dstNode": {
          "label": "getJcrTreeModel",
          "childCount": 4
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        297
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:530",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetJcrVersionsModel()",
    "bSource": {
      "startLine": 511,
      "code": "@Test\n    public final void testGetJcrVersionsModel() throws Exception {\n\n        when(mockNode.getPath()).thenReturn(\"/test/jcr\");\n        when(mockVersionManager.getVersionHistory(mockNode.getPath()))\n                .thenReturn(mockVersionHistory);\n\n        when(mockVersionIterator.hasNext()).thenReturn(true, false);\n        when(mockFrozenNode.getPath()).thenReturn(\n                \"/jcr:system/versions/test/jcr\");\n        when(mockFrozenNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockFrozenNode.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n        when(mockVersion.getFrozenNode()).thenReturn(mockFrozenNode);\n        when(mockVersionIterator.next()).thenReturn(mockVersion);\n        when(mockVersionHistory.getAllVersions()).thenReturn(\n                mockVersionIterator);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionHistory.getVersionLabels(mockVersion)).thenReturn(\n                new String[] {\"abc\"});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n        when(mockFrozenNode.getProperties()).thenReturn(mockProperties);\n        final Model actual = testObj.getJcrVersionPropertiesModel(mockNode);\n\n        assertTrue(actual.contains(testSubjects.getGraphSubject(mockNode),\n                HAS_VERSION, testSubjects.getGraphSubject(mockFrozenNode)));\n        assertTrue(actual.contains(\n                testSubjects.getGraphSubject(mockFrozenNode),\n                HAS_VERSION_LABEL, actual.createLiteral(\"abc\")));\n    }"
    },
    "aSource": {
      "startLine": 508,
      "code": "@Test\n    public final void testGetJcrVersionsModel() throws Exception {\n\n        when(mockNode.getPath()).thenReturn(\"/test/jcr\");\n        when(mockVersionManager.getVersionHistory(mockNode.getPath()))\n                .thenReturn(mockVersionHistory);\n\n        when(mockVersionIterator.hasNext()).thenReturn(true, false);\n        when(mockFrozenNode.getPath()).thenReturn(\n                \"/jcr:system/versions/test/jcr\");\n        when(mockFrozenNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockFrozenNode.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n        when(mockVersion.getFrozenNode()).thenReturn(mockFrozenNode);\n        when(mockVersionIterator.next()).thenReturn(mockVersion);\n        when(mockVersionHistory.getAllVersions()).thenReturn(\n                mockVersionIterator);\n        when(mockWorkspace.getVersionManager()).thenReturn(mockVersionManager);\n        when(mockVersionHistory.getVersionLabels(mockVersion)).thenReturn(\n                new String[] {\"abc\"});\n\n        when(mockProperties.hasNext()).thenReturn(false);\n        when(mockFrozenNode.getProperties()).thenReturn(mockProperties);\n        final Model actual =\n            testObj.getJcrVersionPropertiesModel(mockNode).asModel();\n\n        assertTrue(actual.contains(testSubjects.getGraphSubject(mockNode),\n                HAS_VERSION, testSubjects.getGraphSubject(mockFrozenNode)));\n        assertTrue(actual.contains(\n                testSubjects.getGraphSubject(mockFrozenNode),\n                HAS_VERSION_LABEL, actual.createLiteral(\"abc\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getJcrVersionPropertiesModel(mockNode);",
          "type": "DELETE",
          "lineNo": 533
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual =",
          "type": "ADD",
          "lineNo": 530
        },
        {
          "line": "testObj.getJcrVersionPropertiesModel(mockNode).asModel();",
          "type": "ADD",
          "lineNo": 531
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrVersionPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrVersionPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrVersionPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrVersionPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrVersionPropertiesModel",
          "childCount": 2
        },
        "dstNode": {
          "label": "getJcrVersionPropertiesModel",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        530
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:531",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.shouldBeAbleToDisableResourceInlining()",
    "bSource": {
      "startLine": 272,
      "code": "@Test\n    public final void\n            shouldBeAbleToDisableResourceInlining() throws RepositoryException {\n\n        final Model actual = testObj.getJcrTreeModel(mockNode, 0, -2);\n        assertEquals(0, Iterators.size(actual.listObjectsOfProperty(actual\n                .createProperty(\"http://www.w3.org/ns/ldp#inlinedResource\"))));\n        verify(mockParent, never()).getProperties();\n        verify(mockNode, never()).getNodes();\n    }"
    },
    "aSource": {
      "startLine": 269,
      "code": "@Test\n    public final void\n            shouldBeAbleToDisableResourceInlining() throws RepositoryException {\n\n        final Model actual = testObj.getJcrTreeModel(mockNode, 0, -2).asModel();\n        assertEquals(0, Iterators.size(actual.listObjectsOfProperty(actual\n                .createProperty(\"http://www.w3.org/ns/ldp#inlinedResource\"))));\n        verify(mockParent, never()).getProperties();\n        verify(mockNode, never()).getNodes();\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getJcrTreeModel(mockNode, 0, -2);",
          "type": "DELETE",
          "lineNo": 276
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getJcrTreeModel(mockNode, 0, -2).asModel();",
          "type": "ADD",
          "lineNo": 273
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrTreeModel(Node,long,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrTreeModel",
          "childCount": 4
        },
        "dstNode": {
          "label": "getJcrTreeModel",
          "childCount": 4
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        273
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:532",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetFixityResultsModel()",
    "bSource": {
      "startLine": 468,
      "code": "@Test\n    public final void testGetFixityResultsModel() throws RepositoryException,\n                                                 URISyntaxException,\n                                                 IOException {\n        when(mockCacheEntry.getExternalIdentifier()).thenReturn(\"http://xyz\");\n        final String testFixityUri = \"http://abc\";\n        final FixityResult mockResult =\n            new FixityResult(mockCacheEntry, 123, new URI(testFixityUri));\n        mockResult.status.add(BAD_CHECKSUM);\n        mockResult.status.add(BAD_SIZE);\n\n        final List<FixityResult> mockBlobs = asList(mockResult);\n\n        final Model fixityResultsModel =\n            testObj.getJcrPropertiesModel(mockNode, mockBlobs);\n\n        logRDF(fixityResultsModel);\n        assertTrue(fixityResultsModel.contains(null, IS_FIXITY_RESULT_OF,\n                createResource(RESTAPI_NAMESPACE + \"/test/jcr\")));\n        assertTrue(fixityResultsModel.contains(null, HAS_COMPUTED_CHECKSUM,\n                createResource(testFixityUri)));\n        assertTrue(fixityResultsModel.contains(null, HAS_COMPUTED_SIZE,\n                createTypedLiteral(123)));\n\n    }"
    },
    "aSource": {
      "startLine": 465,
      "code": "@Test\n    public final void testGetFixityResultsModel() throws RepositoryException,\n                                                 URISyntaxException,\n                                                 IOException {\n        when(mockCacheEntry.getExternalIdentifier()).thenReturn(\"http://xyz\");\n        final String testFixityUri = \"http://abc\";\n        final FixityResult mockResult =\n            new FixityResult(mockCacheEntry, 123, new URI(testFixityUri));\n        mockResult.status.add(BAD_CHECKSUM);\n        mockResult.status.add(BAD_SIZE);\n\n        final List<FixityResult> mockBlobs = asList(mockResult);\n\n        final Model fixityResultsModel =\n            testObj.getJcrPropertiesModel(mockNode, mockBlobs).asModel();\n\n        logRDF(fixityResultsModel);\n        assertTrue(fixityResultsModel.contains(null, IS_FIXITY_RESULT_OF,\n                createResource(RESTAPI_NAMESPACE + \"/test/jcr\")));\n        assertTrue(fixityResultsModel.contains(null, HAS_COMPUTED_CHECKSUM,\n                createResource(testFixityUri)));\n        assertTrue(fixityResultsModel.contains(null, HAS_COMPUTED_SIZE,\n                createTypedLiteral(123)));\n\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.getJcrPropertiesModel(mockNode, mockBlobs);",
          "type": "DELETE",
          "lineNo": 482
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.getJcrPropertiesModel(mockNode, mockBlobs).asModel();",
          "type": "ADD",
          "lineNo": 479
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node,Iterable)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node,Iterable)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List mockBlobs"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node,Iterable)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node,Iterable)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List mockBlobs"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 3
        },
        "dstNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        479
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:533",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetPropertiesModelForRootNode()",
    "bSource": {
      "startLine": 203,
      "code": "@Test\n    public final void\n            testGetPropertiesModelForRootNode() throws RepositoryException {\n\n        LOGGER.debug(\"Entering testGetPropertiesModelForRootNode()...\");\n        when(mockRepository.login()).thenReturn(mockSession);\n        when(mockRowIterator.getSize()).thenReturn(0L);\n        when(mockQueryResult.getRows()).thenReturn(mockRowIterator);\n        when(mockQuery.execute()).thenReturn(mockQueryResult);\n        when(mockQueryManager.createQuery(anyString(), eq(JCR_SQL2)))\n                .thenReturn(mockQuery);\n        when(mockWorkspace.getQueryManager()).thenReturn(mockQueryManager);\n        when(mockMetrics.getCounters()).thenReturn(\n                ImmutableSortedMap.of(\n                        \"LowLevelStorageService.fixity-check-counter\",\n                        mockCounter,\n                        \"LowLevelStorageService.fixity-error-counter\",\n                        mockCounter,\n                        \"LowLevelStorageService.fixity-repaired-counter\",\n                        mockCounter\n\n                ));\n        when(mockGetClusterConfiguration.apply(mockRepository)).thenReturn(\n                ImmutableMap.of(\"a\", \"b\"));\n        setGetClusterConfiguration(mockGetClusterConfiguration);\n\n        when(mockNode.getPath()).thenReturn(\"/\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPrimaryNodeType().getName()).thenReturn(ROOT);\n\n        when(mockSession.getRepository()).thenReturn(mockRepository);\n        when(mockRepository.getDescriptorKeys()).thenReturn(\n                new String[] {\"some-descriptor-key\"});\n        when(mockRepository.getDescriptor(\"some-descriptor-key\")).thenReturn(\n                \"some-descriptor-value\");\n        when(mockNodeTypeIterator.hasNext()).thenReturn(false);\n        when(mockNodeTypeManager.getAllNodeTypes()).thenReturn(\n                mockNodeTypeIterator);\n        when(mockWorkspace.getNodeTypeManager())\n                .thenReturn(mockNodeTypeManager);\n\n        final Model actual = testObj.getJcrPropertiesModel(mockNode);\n        assertEquals(REPOSITORY_NAMESPACE, actual.getNsPrefixURI(\"fcrepo\"));\n\n        assertTrue(actual.contains(testSubjects.getGraphSubject(mockNode),\n                actual.createProperty(REPOSITORY_NAMESPACE\n                        + \"repository/some-descriptor-key\"), actual\n                        .createLiteral(\"some-descriptor-value\")));\n    }"
    },
    "aSource": {
      "startLine": 202,
      "code": "@Test\n    public final void\n            testGetPropertiesModelForRootNode() throws RepositoryException {\n\n        LOGGER.debug(\"Entering testGetPropertiesModelForRootNode()...\");\n        when(mockRepository.login()).thenReturn(mockSession);\n        when(mockRowIterator.getSize()).thenReturn(0L);\n        when(mockQueryResult.getRows()).thenReturn(mockRowIterator);\n        when(mockQuery.execute()).thenReturn(mockQueryResult);\n        when(mockQueryManager.createQuery(anyString(), eq(JCR_SQL2)))\n                .thenReturn(mockQuery);\n        when(mockWorkspace.getQueryManager()).thenReturn(mockQueryManager);\n        when(mockMetrics.getCounters()).thenReturn(\n                ImmutableSortedMap.of(\n                        \"LowLevelStorageService.fixity-check-counter\",\n                        mockCounter,\n                        \"LowLevelStorageService.fixity-error-counter\",\n                        mockCounter,\n                        \"LowLevelStorageService.fixity-repaired-counter\",\n                        mockCounter\n\n                ));\n        when(mockGetClusterConfiguration.apply(mockRepository)).thenReturn(\n                ImmutableMap.of(\"a\", \"b\"));\n        setGetClusterConfiguration(mockGetClusterConfiguration);\n\n        when(mockNode.getPath()).thenReturn(\"/\");\n        when(mockNode.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode.getPrimaryNodeType().getName()).thenReturn(ROOT);\n\n        when(mockSession.getRepository()).thenReturn(mockRepository);\n        when(mockRepository.getDescriptorKeys()).thenReturn(\n                new String[] {\"some-descriptor-key\"});\n        when(mockRepository.getDescriptor(\"some-descriptor-key\")).thenReturn(\n                \"some-descriptor-value\");\n        when(mockNodeTypeIterator.hasNext()).thenReturn(false);\n        when(mockNodeTypeManager.getAllNodeTypes()).thenReturn(\n                mockNodeTypeIterator);\n        when(mockWorkspace.getNodeTypeManager())\n                .thenReturn(mockNodeTypeManager);\n\n        final Model actual = testObj.getJcrPropertiesModel(mockNode).asModel();\n        assertTrue(actual.contains(testSubjects.getGraphSubject(mockNode),\n                actual.createProperty(REPOSITORY_NAMESPACE\n                        + \"repository/some-descriptor-key\"), actual\n                        .createLiteral(\"some-descriptor-value\")));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getJcrPropertiesModel(mockNode);",
          "type": "DELETE",
          "lineNo": 244
        },
        {
          "line": "assertEquals(REPOSITORY_NAMESPACE, actual.getNsPrefixURI(\"fcrepo\"));",
          "type": "DELETE",
          "lineNo": 245
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getJcrPropertiesModel(mockNode).asModel();",
          "type": "ADD",
          "lineNo": 243
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,<unknown>)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String REPOSITORY_NAMESPACE"
        },
        {
          "type": "CtInvocation",
          "value": "getNsPrefixURI(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNsPrefixURI(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'fcrepo'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 2
        },
        "dstNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        243
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:534",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.shouldExcludeBinaryProperties()",
    "bSource": {
      "startLine": 253,
      "code": "@Test\n    public final void shouldExcludeBinaryProperties() throws RepositoryException,\n        IOException {\n        when(mockNode.getDepth()).thenReturn(2);\n        reset(mockProperty, mockValue, mockNodes);\n        when(mockProperty.getType()).thenReturn(BINARY);\n        when(mockProperty.isMultiple()).thenReturn(false);\n        when(mockProperty.getName()).thenReturn(mockPredicateName);\n        when(mockProperty.getBinary()).thenReturn(mockBinary);\n        when(mockProperty.getValue()).thenReturn(mockValue);\n        when(mockValue.getType()).thenReturn(BINARY);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getJcrPropertiesModel(mockNode);\n        logRDF(actual);\n        assertFalse(\n                \"RDF contained a statement based on a binary property when it shouldn't have!\",\n                actual.contains(null, createProperty(mockPredicateName)));\n    }"
    },
    "aSource": {
      "startLine": 250,
      "code": "@Test\n    public final void shouldExcludeBinaryProperties() throws RepositoryException,\n        IOException {\n        when(mockNode.getDepth()).thenReturn(2);\n        reset(mockProperty, mockValue, mockNodes);\n        when(mockProperty.getType()).thenReturn(BINARY);\n        when(mockProperty.isMultiple()).thenReturn(false);\n        when(mockProperty.getName()).thenReturn(mockPredicateName);\n        when(mockProperty.getBinary()).thenReturn(mockBinary);\n        when(mockProperty.getValue()).thenReturn(mockValue);\n        when(mockValue.getType()).thenReturn(BINARY);\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model actual = testObj.getJcrPropertiesModel(mockNode).asModel();\n        logRDF(actual);\n        assertFalse(\n                \"RDF contained a statement based on a binary property when it shouldn't have!\",\n                actual.contains(null, createProperty(mockPredicateName)));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model actual = testObj.getJcrPropertiesModel(mockNode);",
          "type": "DELETE",
          "lineNo": 265
        }
      ],
      "targetChanges": [
        {
          "line": "final Model actual = testObj.getJcrPropertiesModel(mockNode).asModel();",
          "type": "ADD",
          "lineNo": 262
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model actual"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Node)"
        },
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.Node mockNode"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 2
        },
        "dstNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        262
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:535",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testJcrNodeIteratorModel()",
    "bSource": {
      "startLine": 426,
      "code": "@Test\n    public final void testJcrNodeIteratorModel() throws RepositoryException {\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model model =\n            testObj.getJcrPropertiesModel(\n                    new org.fcrepo.kernel.utils.iterators.NodeIterator(\n                            mockNodes), mockResource);\n        assertTrue(model != null);\n    }"
    },
    "aSource": {
      "startLine": 423,
      "code": "@Test\n    public final void testJcrNodeIteratorModel() throws RepositoryException {\n        when(mockNodes.hasNext()).thenReturn(false);\n        final Model model =\n            testObj.getJcrPropertiesModel(\n                    new org.fcrepo.kernel.utils.iterators.NodeIterator(\n                            mockNodes), mockResource).asModel();\n        assertTrue(model != null);\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": "mockNodes), mockResource);",
          "type": "DELETE",
          "lineNo": 432
        }
      ],
      "targetChanges": [
        {
          "line": "mockNodes), mockResource).asModel();",
          "type": "ADD",
          "lineNo": 429
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.NodeIterator mockNodes"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockResource"
        }
      ],
      "targetElements": [
        {
          "type": "CtFieldRead",
          "value": "javax.jcr.NodeIterator mockNodes"
        },
        {
          "type": "CtFieldRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 3
        },
        "dstNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        427
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:536",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testJcrNodeIteratorAddsPredicatesForEachNode()",
    "bSource": {
      "startLine": 436,
      "code": "@Test\n    public final void testJcrNodeIteratorAddsPredicatesForEachNode()\n        throws RepositoryException {\n        final Resource mockResource =\n            createResource(RESTAPI_NAMESPACE + \"/search/resource\");\n        when(mockProperties.hasNext()).thenReturn(false);\n        when(mockNode1.getProperties()).thenReturn(mockProperties);\n        when(mockNode1.getSession()).thenReturn(mockSession);\n        when(mockNode2.getSession()).thenReturn(mockSession);\n        when(mockNode3.getSession()).thenReturn(mockSession);\n        when(mockNode1.getPath()).thenReturn(\"/path/to/first/node\");\n        when(mockNode2.getPath()).thenReturn(\"/second/path/to/node\");\n        when(mockNode3.getPath()).thenReturn(\"/third/path/to/node\");\n        when(mockNode1.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode2.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode3.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode1.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n        when(mockNode2.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n        when(mockNode3.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n\n        when(mockNode1.getProperties()).thenReturn(mockProperties);\n        when(mockNode2.getProperties()).thenReturn(mockProperties);\n        when(mockNode3.getProperties()).thenReturn(mockProperties);\n\n        final Iterator<Node> mockIterator =\n            asList(mockNode1, mockNode2, mockNode3).iterator();\n        final Model model =\n            testObj.getJcrPropertiesModel(mockIterator, mockResource);\n        assertEquals(3, model.listObjectsOfProperty(HAS_MEMBER_OF_RESULT)\n                .toSet().size());\n    }"
    },
    "aSource": {
      "startLine": 433,
      "code": "@Test\n    public final void testJcrNodeIteratorAddsPredicatesForEachNode()\n        throws RepositoryException {\n        final Resource mockResource =\n            createResource(RESTAPI_NAMESPACE + \"/search/resource\");\n        when(mockProperties.hasNext()).thenReturn(false);\n        when(mockNode1.getProperties()).thenReturn(mockProperties);\n        when(mockNode1.getSession()).thenReturn(mockSession);\n        when(mockNode2.getSession()).thenReturn(mockSession);\n        when(mockNode3.getSession()).thenReturn(mockSession);\n        when(mockNode1.getPath()).thenReturn(\"/path/to/first/node\");\n        when(mockNode2.getPath()).thenReturn(\"/second/path/to/node\");\n        when(mockNode3.getPath()).thenReturn(\"/third/path/to/node\");\n        when(mockNode1.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode2.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode3.getPrimaryNodeType()).thenReturn(mockNodeType);\n        when(mockNode1.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n        when(mockNode2.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n        when(mockNode3.getMixinNodeTypes()).thenReturn(emptyNodeTypes);\n\n        when(mockNode1.getProperties()).thenReturn(mockProperties);\n        when(mockNode2.getProperties()).thenReturn(mockProperties);\n        when(mockNode3.getProperties()).thenReturn(mockProperties);\n\n        final Iterator<Node> mockIterator =\n            asList(mockNode1, mockNode2, mockNode3).iterator();\n        final Model model =\n            testObj.getJcrPropertiesModel(mockIterator, mockResource).asModel();\n        assertEquals(3, model.listObjectsOfProperty(HAS_MEMBER_OF_RESULT)\n                .toSet().size());\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": "testObj.getJcrPropertiesModel(mockIterator, mockResource);",
          "type": "DELETE",
          "lineNo": 463
        }
      ],
      "targetChanges": [
        {
          "line": "testObj.getJcrPropertiesModel(mockIterator, mockResource).asModel();",
          "type": "ADD",
          "lineNo": 460
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Iterator,Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Iterator,Resource)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.Iterator mockIterator"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockResource"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Iterator,Resource)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrPropertiesModel(Iterator,Resource)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.Iterator mockIterator"
        },
        {
          "type": "CtVariableRead",
          "value": "com.hp.hpl.jena.rdf.model.Resource mockResource"
        },
        {
          "type": "CtExecutableReference",
          "value": "asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 3
        },
        "dstNode": {
          "label": "getJcrPropertiesModel",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        460
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:537",
    "trivial": null
  },
  {
    "name": "org.fcrepo.kernel.utils.JcrRdfToolsTest.testGetJcrNamespaceModel()",
    "bSource": {
      "startLine": 494,
      "code": "@Test\n    public final void testGetJcrNamespaceModel() throws Exception {\n        final Model jcrNamespaceModel = testObj.getJcrNamespaceModel();\n        assertTrue(jcrNamespaceModel.contains(\n                createResource(REPOSITORY_NAMESPACE), HAS_NAMESPACE_PREFIX,\n                \"fcrepo\"));\n\n        final Resource nsSubject = createResource(mockUri);\n        assertTrue(jcrNamespaceModel.contains(nsSubject, RDF.type,\n                RdfLexicon.VOAF_VOCABULARY));\n        assertTrue(jcrNamespaceModel.contains(nsSubject, HAS_NAMESPACE_PREFIX,\n                \"some-prefix\"));\n\n        assertTrue(jcrNamespaceModel.contains(nsSubject, HAS_NAMESPACE_URI,\n                mockUri));\n    }"
    },
    "aSource": {
      "startLine": 491,
      "code": "@Test\n    public final void testGetJcrNamespaceModel() throws Exception {\n        final Model jcrNamespaceModel = testObj.getJcrNamespaceModel().asModel();\n        assertTrue(jcrNamespaceModel.contains(\n                createResource(REPOSITORY_NAMESPACE), HAS_NAMESPACE_PREFIX,\n                \"fcrepo\"));\n\n        final Resource nsSubject = createResource(mockUri);\n        assertTrue(jcrNamespaceModel.contains(nsSubject, RDF.type,\n                RdfLexicon.VOAF_VOCABULARY));\n        assertTrue(jcrNamespaceModel.contains(nsSubject, HAS_NAMESPACE_PREFIX,\n                \"some-prefix\"));\n\n        assertTrue(jcrNamespaceModel.contains(nsSubject, HAS_NAMESPACE_URI,\n                mockUri));\n    }"
    },
    "bPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "aPath": "fcrepo-kernel/src/test/java/org/fcrepo/kernel/utils/JcrRdfToolsTest.java",
    "bCommit": "d6c271cd68",
    "aCommit": "eb4baf3f38",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final Model jcrNamespaceModel = testObj.getJcrNamespaceModel();",
          "type": "DELETE",
          "lineNo": 496
        }
      ],
      "targetChanges": [
        {
          "line": "final Model jcrNamespaceModel = testObj.getJcrNamespaceModel().asModel();",
          "type": "ADD",
          "lineNo": 493
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model jcrNamespaceModel"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrNamespaceModel()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrNamespaceModel()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "com.hp.hpl.jena.rdf.model.Model jcrNamespaceModel"
        },
        {
          "type": "CtTypeReference",
          "value": "com.hp.hpl.jena.rdf.model.Model"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        },
        {
          "type": "CtInvocation",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrNamespaceModel()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools testObj"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.JcrRdfTools.getJcrNamespaceModel()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.fcrepo.kernel.utils.iterators.RdfStream.asModel()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "asModel",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getJcrNamespaceModel",
          "childCount": 1
        },
        "dstNode": {
          "label": "getJcrNamespaceModel",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        493
      ]
    },
    "aCommitTime": 1382804077,
    "ID": "fcrepo/fcrepo:538",
    "trivial": null
  }
]